
krtmi_boardhijau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000149b4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002bcc  08014b44  08014b44  00015b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017710  08017710  000190e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08017710  08017710  00018710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017718  08017718  000190e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017718  08017718  00018718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801771c  0801771c  0001871c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000e8  20000000  08017720  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000190e8  2**0
                  CONTENTS
 10 .bss          0000b364  200000e8  200000e8  000190e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000b44c  2000b44c  000190e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000190e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029bab  00000000  00000000  00019118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006ecf  00000000  00000000  00042cc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002170  00000000  00000000  00049b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001aa9  00000000  00000000  0004bd08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000334ba  00000000  00000000  0004d7b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003794d  00000000  00000000  00080c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f68db  00000000  00000000  000b85b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001aee93  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009280  00000000  00000000  001aeed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  001b8158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000e8 	.word	0x200000e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08014b2c 	.word	0x08014b2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ec 	.word	0x200000ec
 80001cc:	08014b2c 	.word	0x08014b2c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005a2:	463b      	mov	r3, r7
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005ae:	4b21      	ldr	r3, [pc, #132]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005b0:	4a21      	ldr	r2, [pc, #132]	@ (8000638 <MX_ADC1_Init+0x9c>)
 80005b2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005b4:	4b1f      	ldr	r3, [pc, #124]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005b6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80005ba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80005c2:	4b1c      	ldr	r3, [pc, #112]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005c8:	4b1a      	ldr	r3, [pc, #104]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ce:	4b19      	ldr	r3, [pc, #100]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005d6:	4b17      	ldr	r3, [pc, #92]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005d8:	2200      	movs	r2, #0
 80005da:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005dc:	4b15      	ldr	r3, [pc, #84]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005de:	4a17      	ldr	r2, [pc, #92]	@ (800063c <MX_ADC1_Init+0xa0>)
 80005e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005e2:	4b14      	ldr	r3, [pc, #80]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005e8:	4b12      	ldr	r3, [pc, #72]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005ea:	2201      	movs	r2, #1
 80005ec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005ee:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005fc:	480d      	ldr	r0, [pc, #52]	@ (8000634 <MX_ADC1_Init+0x98>)
 80005fe:	f003 faf1 	bl	8003be4 <HAL_ADC_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000608:	f001 f8f2 	bl	80017f0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800060c:	2304      	movs	r3, #4
 800060e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000610:	2301      	movs	r3, #1
 8000612:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000618:	463b      	mov	r3, r7
 800061a:	4619      	mov	r1, r3
 800061c:	4805      	ldr	r0, [pc, #20]	@ (8000634 <MX_ADC1_Init+0x98>)
 800061e:	f003 fb25 	bl	8003c6c <HAL_ADC_ConfigChannel>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000628:	f001 f8e2 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800062c:	bf00      	nop
 800062e:	3710      	adds	r7, #16
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	20000104 	.word	0x20000104
 8000638:	40012000 	.word	0x40012000
 800063c:	0f000001 	.word	0x0f000001

08000640 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b08c      	sub	sp, #48	@ 0x30
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
 8000652:	609a      	str	r2, [r3, #8]
 8000654:	60da      	str	r2, [r3, #12]
 8000656:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a31      	ldr	r2, [pc, #196]	@ (8000724 <HAL_ADC_MspInit+0xe4>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d15b      	bne.n	800071a <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	61bb      	str	r3, [r7, #24]
 8000666:	4b30      	ldr	r3, [pc, #192]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 8000668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800066a:	4a2f      	ldr	r2, [pc, #188]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 800066c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000670:	6453      	str	r3, [r2, #68]	@ 0x44
 8000672:	4b2d      	ldr	r3, [pc, #180]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 8000674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800067a:	61bb      	str	r3, [r7, #24]
 800067c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
 8000682:	4b29      	ldr	r3, [pc, #164]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	4a28      	ldr	r2, [pc, #160]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 8000688:	f043 0304 	orr.w	r3, r3, #4
 800068c:	6313      	str	r3, [r2, #48]	@ 0x30
 800068e:	4b26      	ldr	r3, [pc, #152]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	f003 0304 	and.w	r3, r3, #4
 8000696:	617b      	str	r3, [r7, #20]
 8000698:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
 800069e:	4b22      	ldr	r3, [pc, #136]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a21      	ldr	r2, [pc, #132]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b1f      	ldr	r3, [pc, #124]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	4b1b      	ldr	r3, [pc, #108]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a1a      	ldr	r2, [pc, #104]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <HAL_ADC_MspInit+0xe8>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80006d2:	230d      	movs	r3, #13
 80006d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d6:	2303      	movs	r3, #3
 80006d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006da:	2300      	movs	r3, #0
 80006dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006de:	f107 031c 	add.w	r3, r7, #28
 80006e2:	4619      	mov	r1, r3
 80006e4:	4811      	ldr	r0, [pc, #68]	@ (800072c <HAL_ADC_MspInit+0xec>)
 80006e6:	f005 fc2f 	bl	8005f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80006ea:	2330      	movs	r3, #48	@ 0x30
 80006ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ee:	2303      	movs	r3, #3
 80006f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	f107 031c 	add.w	r3, r7, #28
 80006fa:	4619      	mov	r1, r3
 80006fc:	480c      	ldr	r0, [pc, #48]	@ (8000730 <HAL_ADC_MspInit+0xf0>)
 80006fe:	f005 fc23 	bl	8005f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000702:	2303      	movs	r3, #3
 8000704:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000706:	2303      	movs	r3, #3
 8000708:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	4619      	mov	r1, r3
 8000714:	4807      	ldr	r0, [pc, #28]	@ (8000734 <HAL_ADC_MspInit+0xf4>)
 8000716:	f005 fc17 	bl	8005f48 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800071a:	bf00      	nop
 800071c:	3730      	adds	r7, #48	@ 0x30
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40012000 	.word	0x40012000
 8000728:	40023800 	.word	0x40023800
 800072c:	40020800 	.word	0x40020800
 8000730:	40020000 	.word	0x40020000
 8000734:	40020400 	.word	0x40020400

08000738 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800073c:	4b16      	ldr	r3, [pc, #88]	@ (8000798 <MX_CAN1_Init+0x60>)
 800073e:	4a17      	ldr	r2, [pc, #92]	@ (800079c <MX_CAN1_Init+0x64>)
 8000740:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000742:	4b15      	ldr	r3, [pc, #84]	@ (8000798 <MX_CAN1_Init+0x60>)
 8000744:	2210      	movs	r2, #16
 8000746:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000748:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <MX_CAN1_Init+0x60>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800074e:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <MX_CAN1_Init+0x60>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000754:	4b10      	ldr	r3, [pc, #64]	@ (8000798 <MX_CAN1_Init+0x60>)
 8000756:	2200      	movs	r2, #0
 8000758:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800075a:	4b0f      	ldr	r3, [pc, #60]	@ (8000798 <MX_CAN1_Init+0x60>)
 800075c:	2200      	movs	r2, #0
 800075e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000760:	4b0d      	ldr	r3, [pc, #52]	@ (8000798 <MX_CAN1_Init+0x60>)
 8000762:	2200      	movs	r2, #0
 8000764:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000766:	4b0c      	ldr	r3, [pc, #48]	@ (8000798 <MX_CAN1_Init+0x60>)
 8000768:	2200      	movs	r2, #0
 800076a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800076c:	4b0a      	ldr	r3, [pc, #40]	@ (8000798 <MX_CAN1_Init+0x60>)
 800076e:	2200      	movs	r2, #0
 8000770:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000772:	4b09      	ldr	r3, [pc, #36]	@ (8000798 <MX_CAN1_Init+0x60>)
 8000774:	2200      	movs	r2, #0
 8000776:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000778:	4b07      	ldr	r3, [pc, #28]	@ (8000798 <MX_CAN1_Init+0x60>)
 800077a:	2200      	movs	r2, #0
 800077c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800077e:	4b06      	ldr	r3, [pc, #24]	@ (8000798 <MX_CAN1_Init+0x60>)
 8000780:	2200      	movs	r2, #0
 8000782:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	@ (8000798 <MX_CAN1_Init+0x60>)
 8000786:	f003 fc8f 	bl	80040a8 <HAL_CAN_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000790:	f001 f82e 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	2000014c 	.word	0x2000014c
 800079c:	40006400 	.word	0x40006400

080007a0 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b08a      	sub	sp, #40	@ 0x28
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	2200      	movs	r2, #0
 80007ae:	601a      	str	r2, [r3, #0]
 80007b0:	605a      	str	r2, [r3, #4]
 80007b2:	609a      	str	r2, [r3, #8]
 80007b4:	60da      	str	r2, [r3, #12]
 80007b6:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a19      	ldr	r2, [pc, #100]	@ (8000824 <HAL_CAN_MspInit+0x84>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d12c      	bne.n	800081c <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <HAL_CAN_MspInit+0x88>)
 80007c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ca:	4a17      	ldr	r2, [pc, #92]	@ (8000828 <HAL_CAN_MspInit+0x88>)
 80007cc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80007d2:	4b15      	ldr	r3, [pc, #84]	@ (8000828 <HAL_CAN_MspInit+0x88>)
 80007d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <HAL_CAN_MspInit+0x88>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a10      	ldr	r2, [pc, #64]	@ (8000828 <HAL_CAN_MspInit+0x88>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000828 <HAL_CAN_MspInit+0x88>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0301 	and.w	r3, r3, #1
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80007fa:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80007fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800080c:	2309      	movs	r3, #9
 800080e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	4805      	ldr	r0, [pc, #20]	@ (800082c <HAL_CAN_MspInit+0x8c>)
 8000818:	f005 fb96 	bl	8005f48 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800081c:	bf00      	nop
 800081e:	3728      	adds	r7, #40	@ 0x28
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40006400 	.word	0x40006400
 8000828:	40023800 	.word	0x40023800
 800082c:	40020000 	.word	0x40020000

08000830 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	607b      	str	r3, [r7, #4]
 800083a:	4b3f      	ldr	r3, [pc, #252]	@ (8000938 <MX_DMA_Init+0x108>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	4a3e      	ldr	r2, [pc, #248]	@ (8000938 <MX_DMA_Init+0x108>)
 8000840:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000844:	6313      	str	r3, [r2, #48]	@ 0x30
 8000846:	4b3c      	ldr	r3, [pc, #240]	@ (8000938 <MX_DMA_Init+0x108>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	603b      	str	r3, [r7, #0]
 8000856:	4b38      	ldr	r3, [pc, #224]	@ (8000938 <MX_DMA_Init+0x108>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	4a37      	ldr	r2, [pc, #220]	@ (8000938 <MX_DMA_Init+0x108>)
 800085c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000860:	6313      	str	r3, [r2, #48]	@ 0x30
 8000862:	4b35      	ldr	r3, [pc, #212]	@ (8000938 <MX_DMA_Init+0x108>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800086a:	603b      	str	r3, [r7, #0]
 800086c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	200b      	movs	r0, #11
 8000874:	f003 fdef 	bl	8004456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000878:	200b      	movs	r0, #11
 800087a:	f003 fe08 	bl	800448e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	200c      	movs	r0, #12
 8000884:	f003 fde7 	bl	8004456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000888:	200c      	movs	r0, #12
 800088a:	f003 fe00 	bl	800448e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	200d      	movs	r0, #13
 8000894:	f003 fddf 	bl	8004456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000898:	200d      	movs	r0, #13
 800089a:	f003 fdf8 	bl	800448e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	200e      	movs	r0, #14
 80008a4:	f003 fdd7 	bl	8004456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80008a8:	200e      	movs	r0, #14
 80008aa:	f003 fdf0 	bl	800448e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2100      	movs	r1, #0
 80008b2:	200f      	movs	r0, #15
 80008b4:	f003 fdcf 	bl	8004456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80008b8:	200f      	movs	r0, #15
 80008ba:	f003 fde8 	bl	800448e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80008be:	2200      	movs	r2, #0
 80008c0:	2100      	movs	r1, #0
 80008c2:	2010      	movs	r0, #16
 80008c4:	f003 fdc7 	bl	8004456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80008c8:	2010      	movs	r0, #16
 80008ca:	f003 fde0 	bl	800448e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2100      	movs	r1, #0
 80008d2:	2011      	movs	r0, #17
 80008d4:	f003 fdbf 	bl	8004456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80008d8:	2011      	movs	r0, #17
 80008da:	f003 fdd8 	bl	800448e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	202f      	movs	r0, #47	@ 0x2f
 80008e4:	f003 fdb7 	bl	8004456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 80008e8:	202f      	movs	r0, #47	@ 0x2f
 80008ea:	f003 fdd0 	bl	800448e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2100      	movs	r1, #0
 80008f2:	2039      	movs	r0, #57	@ 0x39
 80008f4:	f003 fdaf 	bl	8004456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80008f8:	2039      	movs	r0, #57	@ 0x39
 80008fa:	f003 fdc8 	bl	800448e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80008fe:	2200      	movs	r2, #0
 8000900:	2100      	movs	r1, #0
 8000902:	203a      	movs	r0, #58	@ 0x3a
 8000904:	f003 fda7 	bl	8004456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000908:	203a      	movs	r0, #58	@ 0x3a
 800090a:	f003 fdc0 	bl	800448e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800090e:	2200      	movs	r2, #0
 8000910:	2100      	movs	r1, #0
 8000912:	2045      	movs	r0, #69	@ 0x45
 8000914:	f003 fd9f 	bl	8004456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000918:	2045      	movs	r0, #69	@ 0x45
 800091a:	f003 fdb8 	bl	800448e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2100      	movs	r1, #0
 8000922:	2046      	movs	r0, #70	@ 0x46
 8000924:	f003 fd97 	bl	8004456 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000928:	2046      	movs	r0, #70	@ 0x46
 800092a:	f003 fdb0 	bl	800448e <HAL_NVIC_EnableIRQ>

}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800

0800093c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	@ 0x30
 8000940:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]
 8000956:	4b50      	ldr	r3, [pc, #320]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a4f      	ldr	r2, [pc, #316]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 800095c:	f043 0310 	orr.w	r3, r3, #16
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b4d      	ldr	r3, [pc, #308]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0310 	and.w	r3, r3, #16
 800096a:	61bb      	str	r3, [r7, #24]
 800096c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	4b49      	ldr	r3, [pc, #292]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a48      	ldr	r2, [pc, #288]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b46      	ldr	r3, [pc, #280]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0304 	and.w	r3, r3, #4
 8000986:	617b      	str	r3, [r7, #20]
 8000988:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	613b      	str	r3, [r7, #16]
 800098e:	4b42      	ldr	r3, [pc, #264]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a41      	ldr	r2, [pc, #260]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 8000994:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b3f      	ldr	r3, [pc, #252]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009a2:	613b      	str	r3, [r7, #16]
 80009a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	60fb      	str	r3, [r7, #12]
 80009aa:	4b3b      	ldr	r3, [pc, #236]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a3a      	ldr	r2, [pc, #232]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b38      	ldr	r3, [pc, #224]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60fb      	str	r3, [r7, #12]
 80009c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
 80009c6:	4b34      	ldr	r3, [pc, #208]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ca:	4a33      	ldr	r2, [pc, #204]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 80009cc:	f043 0302 	orr.w	r3, r3, #2
 80009d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009d2:	4b31      	ldr	r3, [pc, #196]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	f003 0302 	and.w	r3, r3, #2
 80009da:	60bb      	str	r3, [r7, #8]
 80009dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e6:	4a2c      	ldr	r2, [pc, #176]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 80009e8:	f043 0308 	orr.w	r3, r3, #8
 80009ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ee:	4b2a      	ldr	r3, [pc, #168]	@ (8000a98 <MX_GPIO_Init+0x15c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f2:	f003 0308 	and.w	r3, r3, #8
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7
 80009fa:	2200      	movs	r2, #0
 80009fc:	f247 519f 	movw	r1, #30111	@ 0x759f
 8000a00:	4826      	ldr	r0, [pc, #152]	@ (8000a9c <MX_GPIO_Init+0x160>)
 8000a02:	f005 fc55 	bl	80062b0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 8000a0c:	4824      	ldr	r0, [pc, #144]	@ (8000aa0 <MX_GPIO_Init+0x164>)
 8000a0e:	f005 fc4f 	bl	80062b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 414d 	mov.w	r1, #52480	@ 0xcd00
 8000a18:	4822      	ldr	r0, [pc, #136]	@ (8000aa4 <MX_GPIO_Init+0x168>)
 8000a1a:	f005 fc49 	bl	80062b0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pins : PE2 PE3 PE4 PE7
                           PE8 PE10 PE12 PE13
                           PE14 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_7
 8000a1e:	f247 539f 	movw	r3, #30111	@ 0x759f
 8000a22:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a30:	f107 031c 	add.w	r3, r7, #28
 8000a34:	4619      	mov	r1, r3
 8000a36:	4819      	ldr	r0, [pc, #100]	@ (8000a9c <MX_GPIO_Init+0x160>)
 8000a38:	f005 fa86 	bl	8005f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000a3c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000a40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4e:	f107 031c 	add.w	r3, r7, #28
 8000a52:	4619      	mov	r1, r3
 8000a54:	4812      	ldr	r0, [pc, #72]	@ (8000aa0 <MX_GPIO_Init+0x164>)
 8000a56:	f005 fa77 	bl	8005f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD10 PD11 PD14
                           PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14
 8000a5a:	f44f 434d 	mov.w	r3, #52480	@ 0xcd00
 8000a5e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4619      	mov	r1, r3
 8000a72:	480c      	ldr	r0, [pc, #48]	@ (8000aa4 <MX_GPIO_Init+0x168>)
 8000a74:	f005 fa68 	bl	8005f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 PD4
                           PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 8000a78:	239b      	movs	r3, #155	@ 0x9b
 8000a7a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4806      	ldr	r0, [pc, #24]	@ (8000aa4 <MX_GPIO_Init+0x168>)
 8000a8c:	f005 fa5c 	bl	8005f48 <HAL_GPIO_Init>

}
 8000a90:	bf00      	nop
 8000a92:	3730      	adds	r7, #48	@ 0x30
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40023800 	.word	0x40023800
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40020800 	.word	0x40020800
 8000aa4:	40020c00 	.word	0x40020c00

08000aa8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aac:	4b12      	ldr	r3, [pc, #72]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000aae:	4a13      	ldr	r2, [pc, #76]	@ (8000afc <MX_I2C1_Init+0x54>)
 8000ab0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ab4:	4a12      	ldr	r2, [pc, #72]	@ (8000b00 <MX_I2C1_Init+0x58>)
 8000ab6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000abe:	4b0e      	ldr	r3, [pc, #56]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ac6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000aca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000acc:	4b0a      	ldr	r3, [pc, #40]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ad2:	4b09      	ldr	r3, [pc, #36]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad8:	4b07      	ldr	r3, [pc, #28]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ade:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ae4:	4804      	ldr	r0, [pc, #16]	@ (8000af8 <MX_I2C1_Init+0x50>)
 8000ae6:	f005 fbfd 	bl	80062e4 <HAL_I2C_Init>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000af0:	f000 fe7e 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000174 	.word	0x20000174
 8000afc:	40005400 	.word	0x40005400
 8000b00:	000186a0 	.word	0x000186a0

08000b04 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b08:	4b12      	ldr	r3, [pc, #72]	@ (8000b54 <MX_I2C3_Init+0x50>)
 8000b0a:	4a13      	ldr	r2, [pc, #76]	@ (8000b58 <MX_I2C3_Init+0x54>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000b0e:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <MX_I2C3_Init+0x50>)
 8000b10:	4a12      	ldr	r2, [pc, #72]	@ (8000b5c <MX_I2C3_Init+0x58>)
 8000b12:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b14:	4b0f      	ldr	r3, [pc, #60]	@ (8000b54 <MX_I2C3_Init+0x50>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <MX_I2C3_Init+0x50>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b20:	4b0c      	ldr	r3, [pc, #48]	@ (8000b54 <MX_I2C3_Init+0x50>)
 8000b22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b26:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b28:	4b0a      	ldr	r3, [pc, #40]	@ (8000b54 <MX_I2C3_Init+0x50>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b2e:	4b09      	ldr	r3, [pc, #36]	@ (8000b54 <MX_I2C3_Init+0x50>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b34:	4b07      	ldr	r3, [pc, #28]	@ (8000b54 <MX_I2C3_Init+0x50>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b3a:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <MX_I2C3_Init+0x50>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	@ (8000b54 <MX_I2C3_Init+0x50>)
 8000b42:	f005 fbcf 	bl	80062e4 <HAL_I2C_Init>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b4c:	f000 fe50 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	200001c8 	.word	0x200001c8
 8000b58:	40005c00 	.word	0x40005c00
 8000b5c:	000186a0 	.word	0x000186a0

08000b60 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08c      	sub	sp, #48	@ 0x30
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a42      	ldr	r2, [pc, #264]	@ (8000c88 <HAL_I2C_MspInit+0x128>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d12c      	bne.n	8000bdc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	61bb      	str	r3, [r7, #24]
 8000b86:	4b41      	ldr	r3, [pc, #260]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	4a40      	ldr	r2, [pc, #256]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b92:	4b3e      	ldr	r3, [pc, #248]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	61bb      	str	r3, [r7, #24]
 8000b9c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000b9e:	23c0      	movs	r3, #192	@ 0xc0
 8000ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ba2:	2312      	movs	r3, #18
 8000ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bae:	2304      	movs	r3, #4
 8000bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	4835      	ldr	r0, [pc, #212]	@ (8000c90 <HAL_I2C_MspInit+0x130>)
 8000bba:	f005 f9c5 	bl	8005f48 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	4b32      	ldr	r3, [pc, #200]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc6:	4a31      	ldr	r2, [pc, #196]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000bc8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bce:	4b2f      	ldr	r3, [pc, #188]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000bda:	e050      	b.n	8000c7e <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a2c      	ldr	r2, [pc, #176]	@ (8000c94 <HAL_I2C_MspInit+0x134>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d14b      	bne.n	8000c7e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	4b28      	ldr	r3, [pc, #160]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bee:	4a27      	ldr	r2, [pc, #156]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000bf0:	f043 0304 	orr.w	r3, r3, #4
 8000bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bf6:	4b25      	ldr	r3, [pc, #148]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	f003 0304 	and.w	r3, r3, #4
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b21      	ldr	r3, [pc, #132]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c0a:	4a20      	ldr	r2, [pc, #128]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c12:	4b1e      	ldr	r3, [pc, #120]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c1e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c24:	2312      	movs	r3, #18
 8000c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2c:	2303      	movs	r3, #3
 8000c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c30:	2304      	movs	r3, #4
 8000c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c34:	f107 031c 	add.w	r3, r7, #28
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4817      	ldr	r0, [pc, #92]	@ (8000c98 <HAL_I2C_MspInit+0x138>)
 8000c3c:	f005 f984 	bl	8005f48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000c40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c46:	2312      	movs	r3, #18
 8000c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000c52:	2304      	movs	r3, #4
 8000c54:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	480f      	ldr	r0, [pc, #60]	@ (8000c9c <HAL_I2C_MspInit+0x13c>)
 8000c5e:	f005 f973 	bl	8005f48 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	60bb      	str	r3, [r7, #8]
 8000c66:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	4a08      	ldr	r2, [pc, #32]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000c6c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000c70:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c72:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <HAL_I2C_MspInit+0x12c>)
 8000c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
}
 8000c7e:	bf00      	nop
 8000c80:	3730      	adds	r7, #48	@ 0x30
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40005400 	.word	0x40005400
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40020400 	.word	0x40020400
 8000c94:	40005c00 	.word	0x40005c00
 8000c98:	40020800 	.word	0x40020800
 8000c9c:	40020000 	.word	0x40020000

08000ca0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ca4:	f3bf 8f4f 	dsb	sy
}
 8000ca8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000caa:	4b06      	ldr	r3, [pc, #24]	@ (8000cc4 <__NVIC_SystemReset+0x24>)
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000cb2:	4904      	ldr	r1, [pc, #16]	@ (8000cc4 <__NVIC_SystemReset+0x24>)
 8000cb4:	4b04      	ldr	r3, [pc, #16]	@ (8000cc8 <__NVIC_SystemReset+0x28>)
 8000cb6:	4313      	orrs	r3, r2
 8000cb8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cba:	f3bf 8f4f 	dsb	sy
}
 8000cbe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <__NVIC_SystemReset+0x20>
 8000cc4:	e000ed00 	.word	0xe000ed00
 8000cc8:	05fa0004 	.word	0x05fa0004

08000ccc <Robot_Init>:
//	vw = vw_controller;
//}


void Robot_Init()
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af04      	add	r7, sp, #16
	Motor_Init(	&motorA,
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	9303      	str	r3, [sp, #12]
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	9302      	str	r3, [sp, #8]
 8000cda:	4b4f      	ldr	r3, [pc, #316]	@ (8000e18 <Robot_Init+0x14c>)
 8000cdc:	9301      	str	r3, [sp, #4]
 8000cde:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ce2:	9300      	str	r3, [sp, #0]
 8000ce4:	4b4d      	ldr	r3, [pc, #308]	@ (8000e1c <Robot_Init+0x150>)
 8000ce6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000cea:	494c      	ldr	r1, [pc, #304]	@ (8000e1c <Robot_Init+0x150>)
 8000cec:	484c      	ldr	r0, [pc, #304]	@ (8000e20 <Robot_Init+0x154>)
 8000cee:	f000 fd85 	bl	80017fc <Motor_Init>
				GPIOC, GPIO_PIN_15,
				GPIOC, GPIO_PIN_13,
				&htim11, TIM_CHANNEL_1, 1);

	Motor_Init(	&motorB,
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	9303      	str	r3, [sp, #12]
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	9302      	str	r3, [sp, #8]
 8000cfa:	4b4a      	ldr	r3, [pc, #296]	@ (8000e24 <Robot_Init+0x158>)
 8000cfc:	9301      	str	r3, [sp, #4]
 8000cfe:	2301      	movs	r3, #1
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	4b49      	ldr	r3, [pc, #292]	@ (8000e28 <Robot_Init+0x15c>)
 8000d04:	2208      	movs	r2, #8
 8000d06:	4948      	ldr	r1, [pc, #288]	@ (8000e28 <Robot_Init+0x15c>)
 8000d08:	4848      	ldr	r0, [pc, #288]	@ (8000e2c <Robot_Init+0x160>)
 8000d0a:	f000 fd77 	bl	80017fc <Motor_Init>
				GPIOE, GPIO_PIN_3,
				GPIOE, GPIO_PIN_0,
				&htim10, TIM_CHANNEL_1, 0);

	Motor_Init(	&motorC,
 8000d0e:	2301      	movs	r3, #1
 8000d10:	9303      	str	r3, [sp, #12]
 8000d12:	2300      	movs	r3, #0
 8000d14:	9302      	str	r3, [sp, #8]
 8000d16:	4b46      	ldr	r3, [pc, #280]	@ (8000e30 <Robot_Init+0x164>)
 8000d18:	9301      	str	r3, [sp, #4]
 8000d1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d1e:	9300      	str	r3, [sp, #0]
 8000d20:	4b44      	ldr	r3, [pc, #272]	@ (8000e34 <Robot_Init+0x168>)
 8000d22:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d26:	4943      	ldr	r1, [pc, #268]	@ (8000e34 <Robot_Init+0x168>)
 8000d28:	4843      	ldr	r0, [pc, #268]	@ (8000e38 <Robot_Init+0x16c>)
 8000d2a:	f000 fd67 	bl	80017fc <Motor_Init>
				GPIOD, GPIO_PIN_10,
				GPIOD, GPIO_PIN_8,
				&htim12, TIM_CHANNEL_1, 1);

	Encoder_Init(&encA, &htim3, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	4942      	ldr	r1, [pc, #264]	@ (8000e3c <Robot_Init+0x170>)
 8000d32:	4843      	ldr	r0, [pc, #268]	@ (8000e40 <Robot_Init+0x174>)
 8000d34:	f000 fdfe 	bl	8001934 <Encoder_Init>
	Encoder_Init(&encB, &htim4, 1);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	4942      	ldr	r1, [pc, #264]	@ (8000e44 <Robot_Init+0x178>)
 8000d3c:	4842      	ldr	r0, [pc, #264]	@ (8000e48 <Robot_Init+0x17c>)
 8000d3e:	f000 fdf9 	bl	8001934 <Encoder_Init>
	Encoder_Init(&encC, &htim2, 0);
 8000d42:	2200      	movs	r2, #0
 8000d44:	4941      	ldr	r1, [pc, #260]	@ (8000e4c <Robot_Init+0x180>)
 8000d46:	4842      	ldr	r0, [pc, #264]	@ (8000e50 <Robot_Init+0x184>)
 8000d48:	f000 fdf4 	bl	8001934 <Encoder_Init>

	kp = 45;
 8000d4c:	4b41      	ldr	r3, [pc, #260]	@ (8000e54 <Robot_Init+0x188>)
 8000d4e:	4a42      	ldr	r2, [pc, #264]	@ (8000e58 <Robot_Init+0x18c>)
 8000d50:	601a      	str	r2, [r3, #0]
	ki = 2.5;
 8000d52:	4b42      	ldr	r3, [pc, #264]	@ (8000e5c <Robot_Init+0x190>)
 8000d54:	4a42      	ldr	r2, [pc, #264]	@ (8000e60 <Robot_Init+0x194>)
 8000d56:	601a      	str	r2, [r3, #0]
	kd = 0;
 8000d58:	4b42      	ldr	r3, [pc, #264]	@ (8000e64 <Robot_Init+0x198>)
 8000d5a:	f04f 0200 	mov.w	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]

    PID_Init(&PID_A, kp, ki, kd);
 8000d60:	4b3c      	ldr	r3, [pc, #240]	@ (8000e54 <Robot_Init+0x188>)
 8000d62:	edd3 7a00 	vldr	s15, [r3]
 8000d66:	4b3d      	ldr	r3, [pc, #244]	@ (8000e5c <Robot_Init+0x190>)
 8000d68:	ed93 7a00 	vldr	s14, [r3]
 8000d6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e64 <Robot_Init+0x198>)
 8000d6e:	edd3 6a00 	vldr	s13, [r3]
 8000d72:	eeb0 1a66 	vmov.f32	s2, s13
 8000d76:	eef0 0a47 	vmov.f32	s1, s14
 8000d7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000d7e:	483a      	ldr	r0, [pc, #232]	@ (8000e68 <Robot_Init+0x19c>)
 8000d80:	f000 fe1e 	bl	80019c0 <PID_Init>
    PID_Init(&PID_B, kp, ki, kd);
 8000d84:	4b33      	ldr	r3, [pc, #204]	@ (8000e54 <Robot_Init+0x188>)
 8000d86:	edd3 7a00 	vldr	s15, [r3]
 8000d8a:	4b34      	ldr	r3, [pc, #208]	@ (8000e5c <Robot_Init+0x190>)
 8000d8c:	ed93 7a00 	vldr	s14, [r3]
 8000d90:	4b34      	ldr	r3, [pc, #208]	@ (8000e64 <Robot_Init+0x198>)
 8000d92:	edd3 6a00 	vldr	s13, [r3]
 8000d96:	eeb0 1a66 	vmov.f32	s2, s13
 8000d9a:	eef0 0a47 	vmov.f32	s1, s14
 8000d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8000da2:	4832      	ldr	r0, [pc, #200]	@ (8000e6c <Robot_Init+0x1a0>)
 8000da4:	f000 fe0c 	bl	80019c0 <PID_Init>
    PID_Init(&PID_C, kp, ki, kd);
 8000da8:	4b2a      	ldr	r3, [pc, #168]	@ (8000e54 <Robot_Init+0x188>)
 8000daa:	edd3 7a00 	vldr	s15, [r3]
 8000dae:	4b2b      	ldr	r3, [pc, #172]	@ (8000e5c <Robot_Init+0x190>)
 8000db0:	ed93 7a00 	vldr	s14, [r3]
 8000db4:	4b2b      	ldr	r3, [pc, #172]	@ (8000e64 <Robot_Init+0x198>)
 8000db6:	edd3 6a00 	vldr	s13, [r3]
 8000dba:	eeb0 1a66 	vmov.f32	s2, s13
 8000dbe:	eef0 0a47 	vmov.f32	s1, s14
 8000dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8000dc6:	482a      	ldr	r0, [pc, #168]	@ (8000e70 <Robot_Init+0x1a4>)
 8000dc8:	f000 fdfa 	bl	80019c0 <PID_Init>

    HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_RX_BUFFER, sizeof(UART1_RX_BUFFER));
 8000dcc:	2235      	movs	r2, #53	@ 0x35
 8000dce:	4929      	ldr	r1, [pc, #164]	@ (8000e74 <Robot_Init+0x1a8>)
 8000dd0:	4829      	ldr	r0, [pc, #164]	@ (8000e78 <Robot_Init+0x1ac>)
 8000dd2:	f007 f973 	bl	80080bc <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart2, (uint8_t*)UART2_RX_BUFFER, sizeof(UART2_RX_BUFFER));
 8000dd6:	2217      	movs	r2, #23
 8000dd8:	4928      	ldr	r1, [pc, #160]	@ (8000e7c <Robot_Init+0x1b0>)
 8000dda:	4829      	ldr	r0, [pc, #164]	@ (8000e80 <Robot_Init+0x1b4>)
 8000ddc:	f007 f96e 	bl	80080bc <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart3, (uint8_t*)UART3_RX_BUFFER, sizeof(UART3_RX_BUFFER));
 8000de0:	222b      	movs	r2, #43	@ 0x2b
 8000de2:	4928      	ldr	r1, [pc, #160]	@ (8000e84 <Robot_Init+0x1b8>)
 8000de4:	4828      	ldr	r0, [pc, #160]	@ (8000e88 <Robot_Init+0x1bc>)
 8000de6:	f007 f969 	bl	80080bc <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart4, (uint8_t*)UART4_RX_BUFFER, sizeof(UART4_RX_BUFFER));
 8000dea:	2235      	movs	r2, #53	@ 0x35
 8000dec:	4927      	ldr	r1, [pc, #156]	@ (8000e8c <Robot_Init+0x1c0>)
 8000dee:	4828      	ldr	r0, [pc, #160]	@ (8000e90 <Robot_Init+0x1c4>)
 8000df0:	f007 f964 	bl	80080bc <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart5, (uint8_t*)UART5_RX_BUFFER, sizeof(UART5_RX_BUFFER));
 8000df4:	2217      	movs	r2, #23
 8000df6:	4927      	ldr	r1, [pc, #156]	@ (8000e94 <Robot_Init+0x1c8>)
 8000df8:	4827      	ldr	r0, [pc, #156]	@ (8000e98 <Robot_Init+0x1cc>)
 8000dfa:	f007 f95f 	bl	80080bc <HAL_UART_Receive_DMA>
    HAL_UART_Receive_DMA(&huart6, (uint8_t*)UART6_RX_BUFFER, sizeof(UART6_RX_BUFFER));
 8000dfe:	2207      	movs	r2, #7
 8000e00:	4926      	ldr	r1, [pc, #152]	@ (8000e9c <Robot_Init+0x1d0>)
 8000e02:	4827      	ldr	r0, [pc, #156]	@ (8000ea0 <Robot_Init+0x1d4>)
 8000e04:	f007 f95a 	bl	80080bc <HAL_UART_Receive_DMA>

	udpClient_connect();
 8000e08:	f001 fefa 	bl	8002c00 <udpClient_connect>

	HAL_TIM_Base_Start_IT(&htim6);
 8000e0c:	4825      	ldr	r0, [pc, #148]	@ (8000ea4 <Robot_Init+0x1d8>)
 8000e0e:	f006 f895 	bl	8006f3c <HAL_TIM_Base_Start_IT>
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	20000690 	.word	0x20000690
 8000e1c:	40020800 	.word	0x40020800
 8000e20:	20000220 	.word	0x20000220
 8000e24:	20000648 	.word	0x20000648
 8000e28:	40021000 	.word	0x40021000
 8000e2c:	2000023c 	.word	0x2000023c
 8000e30:	200006d8 	.word	0x200006d8
 8000e34:	40020c00 	.word	0x40020c00
 8000e38:	20000258 	.word	0x20000258
 8000e3c:	20000498 	.word	0x20000498
 8000e40:	20000274 	.word	0x20000274
 8000e44:	200004e0 	.word	0x200004e0
 8000e48:	2000027c 	.word	0x2000027c
 8000e4c:	20000450 	.word	0x20000450
 8000e50:	20000284 	.word	0x20000284
 8000e54:	2000031c 	.word	0x2000031c
 8000e58:	42340000 	.word	0x42340000
 8000e5c:	20000320 	.word	0x20000320
 8000e60:	40200000 	.word	0x40200000
 8000e64:	20000324 	.word	0x20000324
 8000e68:	2000028c 	.word	0x2000028c
 8000e6c:	200002bc 	.word	0x200002bc
 8000e70:	200002ec 	.word	0x200002ec
 8000e74:	20000328 	.word	0x20000328
 8000e78:	200008ac 	.word	0x200008ac
 8000e7c:	20000360 	.word	0x20000360
 8000e80:	200008f4 	.word	0x200008f4
 8000e84:	20000378 	.word	0x20000378
 8000e88:	2000093c 	.word	0x2000093c
 8000e8c:	200003a4 	.word	0x200003a4
 8000e90:	2000081c 	.word	0x2000081c
 8000e94:	200003dc 	.word	0x200003dc
 8000e98:	20000864 	.word	0x20000864
 8000e9c:	200003f4 	.word	0x200003f4
 8000ea0:	20000984 	.word	0x20000984
 8000ea4:	20000570 	.word	0x20000570

08000ea8 <Robot_Motor>:

void Robot_Motor()
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
	static uint16_t timer = 0;

	if(timer >= 9)
 8000eac:	4b29      	ldr	r3, [pc, #164]	@ (8000f54 <Robot_Motor+0xac>)
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	2b08      	cmp	r3, #8
 8000eb2:	d947      	bls.n	8000f44 <Robot_Motor+0x9c>
//		int16_t va = udp_rx.motor_a;
//		int16_t vb = udp_rx.motor_b;
//		int16_t vc = udp_rx.motor_c;


		Encoder_GetCount(&encA);
 8000eb4:	4828      	ldr	r0, [pc, #160]	@ (8000f58 <Robot_Motor+0xb0>)
 8000eb6:	f000 fd54 	bl	8001962 <Encoder_GetCount>
		Encoder_GetCount(&encB);
 8000eba:	4828      	ldr	r0, [pc, #160]	@ (8000f5c <Robot_Motor+0xb4>)
 8000ebc:	f000 fd51 	bl	8001962 <Encoder_GetCount>
		Encoder_GetCount(&encC);
 8000ec0:	4827      	ldr	r0, [pc, #156]	@ (8000f60 <Robot_Motor+0xb8>)
 8000ec2:	f000 fd4e 	bl	8001962 <Encoder_GetCount>

		/* Save UDP */
		udp_tx.enc_a = encA.count;
 8000ec6:	4b24      	ldr	r3, [pc, #144]	@ (8000f58 <Robot_Motor+0xb0>)
 8000ec8:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000ecc:	4b25      	ldr	r3, [pc, #148]	@ (8000f64 <Robot_Motor+0xbc>)
 8000ece:	801a      	strh	r2, [r3, #0]
		udp_tx.enc_b = encB.count;
 8000ed0:	4b22      	ldr	r3, [pc, #136]	@ (8000f5c <Robot_Motor+0xb4>)
 8000ed2:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000ed6:	4b23      	ldr	r3, [pc, #140]	@ (8000f64 <Robot_Motor+0xbc>)
 8000ed8:	805a      	strh	r2, [r3, #2]
		udp_tx.enc_c = encC.count;
 8000eda:	4b21      	ldr	r3, [pc, #132]	@ (8000f60 <Robot_Motor+0xb8>)
 8000edc:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000ee0:	4b20      	ldr	r3, [pc, #128]	@ (8000f64 <Robot_Motor+0xbc>)
 8000ee2:	809a      	strh	r2, [r3, #4]

		Encoder_ResetCount(&encA);
 8000ee4:	481c      	ldr	r0, [pc, #112]	@ (8000f58 <Robot_Motor+0xb0>)
 8000ee6:	f000 fd5c 	bl	80019a2 <Encoder_ResetCount>
		Encoder_ResetCount(&encB);
 8000eea:	481c      	ldr	r0, [pc, #112]	@ (8000f5c <Robot_Motor+0xb4>)
 8000eec:	f000 fd59 	bl	80019a2 <Encoder_ResetCount>
		Encoder_ResetCount(&encC);
 8000ef0:	481b      	ldr	r0, [pc, #108]	@ (8000f60 <Robot_Motor+0xb8>)
 8000ef2:	f000 fd56 	bl	80019a2 <Encoder_ResetCount>

//		PID_Update(&PID_A, udp_rx.motorA_setpoint, (float)encA.count, 999);
//		PID_Update(&PID_B, udp_rx.motorB_setpoint, (float)encB.count, 999);
//		PID_Update(&PID_C, udp_rx.motorC_setpoint, (float)encC.count, 999);

		Motor_Run(&motorA, (int16_t)PID_A.output);
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f68 <Robot_Motor+0xc0>)
 8000ef8:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000efc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f00:	ee17 3a90 	vmov	r3, s15
 8000f04:	b21b      	sxth	r3, r3
 8000f06:	4619      	mov	r1, r3
 8000f08:	4818      	ldr	r0, [pc, #96]	@ (8000f6c <Robot_Motor+0xc4>)
 8000f0a:	f000 fca1 	bl	8001850 <Motor_Run>
		Motor_Run(&motorB, (int16_t)PID_B.output);
 8000f0e:	4b18      	ldr	r3, [pc, #96]	@ (8000f70 <Robot_Motor+0xc8>)
 8000f10:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000f14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f18:	ee17 3a90 	vmov	r3, s15
 8000f1c:	b21b      	sxth	r3, r3
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4814      	ldr	r0, [pc, #80]	@ (8000f74 <Robot_Motor+0xcc>)
 8000f22:	f000 fc95 	bl	8001850 <Motor_Run>
		Motor_Run(&motorC, (int16_t)PID_C.output);
 8000f26:	4b14      	ldr	r3, [pc, #80]	@ (8000f78 <Robot_Motor+0xd0>)
 8000f28:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8000f2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f30:	ee17 3a90 	vmov	r3, s15
 8000f34:	b21b      	sxth	r3, r3
 8000f36:	4619      	mov	r1, r3
 8000f38:	4810      	ldr	r0, [pc, #64]	@ (8000f7c <Robot_Motor+0xd4>)
 8000f3a:	f000 fc89 	bl	8001850 <Motor_Run>

		timer = 0;
 8000f3e:	4b05      	ldr	r3, [pc, #20]	@ (8000f54 <Robot_Motor+0xac>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	801a      	strh	r2, [r3, #0]
	}

	timer++;
 8000f44:	4b03      	ldr	r3, [pc, #12]	@ (8000f54 <Robot_Motor+0xac>)
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	4b01      	ldr	r3, [pc, #4]	@ (8000f54 <Robot_Motor+0xac>)
 8000f4e:	801a      	strh	r2, [r3, #0]
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200003fc 	.word	0x200003fc
 8000f58:	20000274 	.word	0x20000274
 8000f5c:	2000027c 	.word	0x2000027c
 8000f60:	20000284 	.word	0x20000284
 8000f64:	20000774 	.word	0x20000774
 8000f68:	2000028c 	.word	0x2000028c
 8000f6c:	20000220 	.word	0x20000220
 8000f70:	200002bc 	.word	0x200002bc
 8000f74:	2000023c 	.word	0x2000023c
 8000f78:	200002ec 	.word	0x200002ec
 8000f7c:	20000258 	.word	0x20000258

08000f80 <Robot_LED_Blink>:

void Robot_LED_Blink()
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	static uint16_t timer = 0;
	static uint8_t state = 0;

	if(timer >= 99)
 8000f84:	4b0f      	ldr	r3, [pc, #60]	@ (8000fc4 <Robot_LED_Blink+0x44>)
 8000f86:	881b      	ldrh	r3, [r3, #0]
 8000f88:	2b62      	cmp	r3, #98	@ 0x62
 8000f8a:	d913      	bls.n	8000fb4 <Robot_LED_Blink+0x34>
	{
		state = !(state);
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fc8 <Robot_LED_Blink+0x48>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	bf0c      	ite	eq
 8000f94:	2301      	moveq	r3, #1
 8000f96:	2300      	movne	r3, #0
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000fc8 <Robot_LED_Blink+0x48>)
 8000f9e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, state);
 8000fa0:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <Robot_LED_Blink+0x48>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	2102      	movs	r1, #2
 8000fa8:	4808      	ldr	r0, [pc, #32]	@ (8000fcc <Robot_LED_Blink+0x4c>)
 8000faa:	f005 f981 	bl	80062b0 <HAL_GPIO_WritePin>
		timer = 0;
 8000fae:	4b05      	ldr	r3, [pc, #20]	@ (8000fc4 <Robot_LED_Blink+0x44>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	801a      	strh	r2, [r3, #0]
	}

	timer++;
 8000fb4:	4b03      	ldr	r3, [pc, #12]	@ (8000fc4 <Robot_LED_Blink+0x44>)
 8000fb6:	881b      	ldrh	r3, [r3, #0]
 8000fb8:	3301      	adds	r3, #1
 8000fba:	b29a      	uxth	r2, r3
 8000fbc:	4b01      	ldr	r3, [pc, #4]	@ (8000fc4 <Robot_LED_Blink+0x44>)
 8000fbe:	801a      	strh	r2, [r3, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	200003fe 	.word	0x200003fe
 8000fc8:	20000400 	.word	0x20000400
 8000fcc:	40021000 	.word	0x40021000

08000fd0 <Robot_Transmit_UART>:

void Robot_Transmit_UART()
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
//	memcpy(UART1_TX_BUFFER + 5, &udp_rx.relay_state, 1);
//	memcpy(UART1_TX_BUFFER + 6, &udp_rx.rotation_setpoint, 2);
//	memcpy(UART1_TX_BUFFER + 8, &udp_rx.horizontal_setpoint, 2);
//	memcpy(UART1_TX_BUFFER + 10, &udp_rx.vertical_setpoint, 2);

	HAL_UART_Transmit_DMA(&huart1, (uint8_t*)UART1_TX_BUFFER, sizeof(UART1_TX_BUFFER));
 8000fd4:	2235      	movs	r2, #53	@ 0x35
 8000fd6:	4903      	ldr	r1, [pc, #12]	@ (8000fe4 <Robot_Transmit_UART+0x14>)
 8000fd8:	4803      	ldr	r0, [pc, #12]	@ (8000fe8 <Robot_Transmit_UART+0x18>)
 8000fda:	f006 fff3 	bl	8007fc4 <HAL_UART_Transmit_DMA>
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000000 	.word	0x20000000
 8000fe8:	200008ac 	.word	0x200008ac

08000fec <Read_Buttons>:

void Read_Buttons()
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
	udp_tx.start_button = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0);
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	4819      	ldr	r0, [pc, #100]	@ (8001058 <Read_Buttons+0x6c>)
 8000ff4:	f005 f944 	bl	8006280 <HAL_GPIO_ReadPin>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	4b17      	ldr	r3, [pc, #92]	@ (800105c <Read_Buttons+0x70>)
 8000ffe:	779a      	strb	r2, [r3, #30]
	udp_tx.reset_button = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 8001000:	2102      	movs	r1, #2
 8001002:	4815      	ldr	r0, [pc, #84]	@ (8001058 <Read_Buttons+0x6c>)
 8001004:	f005 f93c 	bl	8006280 <HAL_GPIO_ReadPin>
 8001008:	4603      	mov	r3, r0
 800100a:	461a      	mov	r2, r3
 800100c:	4b13      	ldr	r3, [pc, #76]	@ (800105c <Read_Buttons+0x70>)
 800100e:	77da      	strb	r2, [r3, #31]
	udp_tx.buttons[0] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_4);
 8001010:	2110      	movs	r1, #16
 8001012:	4811      	ldr	r0, [pc, #68]	@ (8001058 <Read_Buttons+0x6c>)
 8001014:	f005 f934 	bl	8006280 <HAL_GPIO_ReadPin>
 8001018:	4603      	mov	r3, r0
 800101a:	461a      	mov	r2, r3
 800101c:	4b0f      	ldr	r3, [pc, #60]	@ (800105c <Read_Buttons+0x70>)
 800101e:	f883 2020 	strb.w	r2, [r3, #32]
	udp_tx.buttons[1] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_7);
 8001022:	2180      	movs	r1, #128	@ 0x80
 8001024:	480c      	ldr	r0, [pc, #48]	@ (8001058 <Read_Buttons+0x6c>)
 8001026:	f005 f92b 	bl	8006280 <HAL_GPIO_ReadPin>
 800102a:	4603      	mov	r3, r0
 800102c:	461a      	mov	r2, r3
 800102e:	4b0b      	ldr	r3, [pc, #44]	@ (800105c <Read_Buttons+0x70>)
 8001030:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
	udp_tx.buttons[2] = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3);
 8001034:	2108      	movs	r1, #8
 8001036:	4808      	ldr	r0, [pc, #32]	@ (8001058 <Read_Buttons+0x6c>)
 8001038:	f005 f922 	bl	8006280 <HAL_GPIO_ReadPin>
 800103c:	4603      	mov	r3, r0
 800103e:	461a      	mov	r2, r3
 8001040:	4b06      	ldr	r3, [pc, #24]	@ (800105c <Read_Buttons+0x70>)
 8001042:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

	if(udp_tx.reset_button == 0)
 8001046:	4b05      	ldr	r3, [pc, #20]	@ (800105c <Read_Buttons+0x70>)
 8001048:	7fdb      	ldrb	r3, [r3, #31]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d102      	bne.n	8001054 <Read_Buttons+0x68>
	{
		rst_state = 1;
 800104e:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <Read_Buttons+0x74>)
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]
	}
}
 8001054:	bf00      	nop
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40020c00 	.word	0x40020c00
 800105c:	20000774 	.word	0x20000774
 8001060:	2000021d 	.word	0x2000021d

08001064 <Robot_Loop>:

void Robot_Loop()
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	if(rst_state)
 8001068:	4b12      	ldr	r3, [pc, #72]	@ (80010b4 <Robot_Loop+0x50>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d010      	beq.n	8001092 <Robot_Loop+0x2e>
	{
		if(rst_cnt >= 500)
 8001070:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <Robot_Loop+0x54>)
 8001072:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001076:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800107a:	db01      	blt.n	8001080 <Robot_Loop+0x1c>
		{
			NVIC_SystemReset();
 800107c:	f7ff fe10 	bl	8000ca0 <__NVIC_SystemReset>
		}
		else
		{
			rst_cnt++;
 8001080:	4b0d      	ldr	r3, [pc, #52]	@ (80010b8 <Robot_Loop+0x54>)
 8001082:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001086:	b29b      	uxth	r3, r3
 8001088:	3301      	adds	r3, #1
 800108a:	b29b      	uxth	r3, r3
 800108c:	b21a      	sxth	r2, r3
 800108e:	4b0a      	ldr	r3, [pc, #40]	@ (80010b8 <Robot_Loop+0x54>)
 8001090:	801a      	strh	r2, [r3, #0]
		}
	}

	Read_Buttons();
 8001092:	f7ff ffab 	bl	8000fec <Read_Buttons>

	Robot_Transmit_UART();
 8001096:	f7ff ff9b 	bl	8000fd0 <Robot_Transmit_UART>

	Robot_Motor();
 800109a:	f7ff ff05 	bl	8000ea8 <Robot_Motor>

	Robot_LED_Blink();
 800109e:	f7ff ff6f 	bl	8000f80 <Robot_LED_Blink>

	udp_cnt++;
 80010a2:	4b06      	ldr	r3, [pc, #24]	@ (80010bc <Robot_Loop+0x58>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	3301      	adds	r3, #1
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4b04      	ldr	r3, [pc, #16]	@ (80010bc <Robot_Loop+0x58>)
 80010ac:	701a      	strb	r2, [r3, #0]
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	2000021d 	.word	0x2000021d
 80010b8:	2000021e 	.word	0x2000021e
 80010bc:	2000021c 	.word	0x2000021c

080010c0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]

	if(htim == &htim6)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a04      	ldr	r2, [pc, #16]	@ (80010dc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d101      	bne.n	80010d4 <HAL_TIM_PeriodElapsedCallback+0x14>
	{
		Robot_Loop();
 80010d0:	f7ff ffc8 	bl	8001064 <Robot_Loop>
	}
}
 80010d4:	bf00      	nop
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000570 	.word	0x20000570

080010e0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) //--- VGT ARM
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a96      	ldr	r2, [pc, #600]	@ (8001344 <HAL_UART_RxCpltCallback+0x264>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d131      	bne.n	8001154 <HAL_UART_RxCpltCallback+0x74>
	{
		if(UART1_RX_BUFFER[0] == 'A' && UART1_RX_BUFFER[1] == 'B' && UART1_RX_BUFFER[2] == 'C')
 80010f0:	4b95      	ldr	r3, [pc, #596]	@ (8001348 <HAL_UART_RxCpltCallback+0x268>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b41      	cmp	r3, #65	@ 0x41
 80010f6:	d128      	bne.n	800114a <HAL_UART_RxCpltCallback+0x6a>
 80010f8:	4b93      	ldr	r3, [pc, #588]	@ (8001348 <HAL_UART_RxCpltCallback+0x268>)
 80010fa:	785b      	ldrb	r3, [r3, #1]
 80010fc:	2b42      	cmp	r3, #66	@ 0x42
 80010fe:	d124      	bne.n	800114a <HAL_UART_RxCpltCallback+0x6a>
 8001100:	4b91      	ldr	r3, [pc, #580]	@ (8001348 <HAL_UART_RxCpltCallback+0x268>)
 8001102:	789b      	ldrb	r3, [r3, #2]
 8001104:	2b43      	cmp	r3, #67	@ 0x43
 8001106:	d120      	bne.n	800114a <HAL_UART_RxCpltCallback+0x6a>
		{
			/* Save UDP */
			memcpy(&udp_tx.buttons[3], UART1_RX_BUFFER + 3, 1);
 8001108:	4b90      	ldr	r3, [pc, #576]	@ (800134c <HAL_UART_RxCpltCallback+0x26c>)
 800110a:	781a      	ldrb	r2, [r3, #0]
 800110c:	4b90      	ldr	r3, [pc, #576]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 800110e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
			memcpy(&udp_tx.buttons[4], UART1_RX_BUFFER + 4, 1);
 8001112:	4b90      	ldr	r3, [pc, #576]	@ (8001354 <HAL_UART_RxCpltCallback+0x274>)
 8001114:	781a      	ldrb	r2, [r3, #0]
 8001116:	4b8e      	ldr	r3, [pc, #568]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 8001118:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			memcpy(&udp_tx.lim2, UART1_RX_BUFFER + 5, 1);
 800111c:	4b8e      	ldr	r3, [pc, #568]	@ (8001358 <HAL_UART_RxCpltCallback+0x278>)
 800111e:	781a      	ldrb	r2, [r3, #0]
 8001120:	4b8b      	ldr	r3, [pc, #556]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 8001122:	771a      	strb	r2, [r3, #28]
			memcpy(&udp_tx.lim3, UART1_RX_BUFFER + 6, 1);
 8001124:	4b8d      	ldr	r3, [pc, #564]	@ (800135c <HAL_UART_RxCpltCallback+0x27c>)
 8001126:	781a      	ldrb	r2, [r3, #0]
 8001128:	4b89      	ldr	r3, [pc, #548]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 800112a:	775a      	strb	r2, [r3, #29]
			memcpy(&udp_tx.enc_1, UART1_RX_BUFFER + 7, 2);
 800112c:	4b8c      	ldr	r3, [pc, #560]	@ (8001360 <HAL_UART_RxCpltCallback+0x280>)
 800112e:	881b      	ldrh	r3, [r3, #0]
 8001130:	b29a      	uxth	r2, r3
 8001132:	4b87      	ldr	r3, [pc, #540]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 8001134:	815a      	strh	r2, [r3, #10]
			memcpy(&udp_tx.enc_2, UART1_RX_BUFFER + 9, 2);
 8001136:	4b8b      	ldr	r3, [pc, #556]	@ (8001364 <HAL_UART_RxCpltCallback+0x284>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	b29a      	uxth	r2, r3
 800113c:	4b84      	ldr	r3, [pc, #528]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 800113e:	819a      	strh	r2, [r3, #12]
			memcpy(&udp_tx.enc_3, UART1_RX_BUFFER + 11, 2);
 8001140:	4b89      	ldr	r3, [pc, #548]	@ (8001368 <HAL_UART_RxCpltCallback+0x288>)
 8001142:	881b      	ldrh	r3, [r3, #0]
 8001144:	b29a      	uxth	r2, r3
 8001146:	4b82      	ldr	r3, [pc, #520]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 8001148:	81da      	strh	r2, [r3, #14]
		}
		HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_RX_BUFFER, sizeof(UART1_RX_BUFFER));
 800114a:	2235      	movs	r2, #53	@ 0x35
 800114c:	497e      	ldr	r1, [pc, #504]	@ (8001348 <HAL_UART_RxCpltCallback+0x268>)
 800114e:	487d      	ldr	r0, [pc, #500]	@ (8001344 <HAL_UART_RxCpltCallback+0x264>)
 8001150:	f006 ffb4 	bl	80080bc <HAL_UART_Receive_DMA>
//		udp_tx.yaw_degree = yaw_degree;
//
//		HAL_UART_Receive_DMA(&huart2, (uint8_t*)UART2_RX_BUFFER, sizeof(UART2_RX_BUFFER));
//	}

	if(huart == &huart3)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a85      	ldr	r2, [pc, #532]	@ (800136c <HAL_UART_RxCpltCallback+0x28c>)
 8001158:	4293      	cmp	r3, r2
 800115a:	f040 80a9 	bne.w	80012b0 <HAL_UART_RxCpltCallback+0x1d0>
	{
		if(UART3_RX_BUFFER[0] == 'A' && UART3_RX_BUFFER[1] == 'B' && UART3_RX_BUFFER[2] == 'C')
 800115e:	4b84      	ldr	r3, [pc, #528]	@ (8001370 <HAL_UART_RxCpltCallback+0x290>)
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	2b41      	cmp	r3, #65	@ 0x41
 8001164:	f040 809f 	bne.w	80012a6 <HAL_UART_RxCpltCallback+0x1c6>
 8001168:	4b81      	ldr	r3, [pc, #516]	@ (8001370 <HAL_UART_RxCpltCallback+0x290>)
 800116a:	785b      	ldrb	r3, [r3, #1]
 800116c:	2b42      	cmp	r3, #66	@ 0x42
 800116e:	f040 809a 	bne.w	80012a6 <HAL_UART_RxCpltCallback+0x1c6>
 8001172:	4b7f      	ldr	r3, [pc, #508]	@ (8001370 <HAL_UART_RxCpltCallback+0x290>)
 8001174:	789b      	ldrb	r3, [r3, #2]
 8001176:	2b43      	cmp	r3, #67	@ 0x43
 8001178:	f040 8095 	bne.w	80012a6 <HAL_UART_RxCpltCallback+0x1c6>
		{
			/* Save UDP */
			memcpy(&udp_tx.rX, UART3_RX_BUFFER + 3, 1);
 800117c:	4b7d      	ldr	r3, [pc, #500]	@ (8001374 <HAL_UART_RxCpltCallback+0x294>)
 800117e:	781a      	ldrb	r2, [r3, #0]
 8001180:	4b73      	ldr	r3, [pc, #460]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 8001182:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			memcpy(&udp_tx.rY, UART3_RX_BUFFER + 4, 1);
 8001186:	4b7c      	ldr	r3, [pc, #496]	@ (8001378 <HAL_UART_RxCpltCallback+0x298>)
 8001188:	781a      	ldrb	r2, [r3, #0]
 800118a:	4b71      	ldr	r3, [pc, #452]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 800118c:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			memcpy(&udp_tx.lX, UART3_RX_BUFFER + 5, 1);
 8001190:	4b7a      	ldr	r3, [pc, #488]	@ (800137c <HAL_UART_RxCpltCallback+0x29c>)
 8001192:	781a      	ldrb	r2, [r3, #0]
 8001194:	4b6e      	ldr	r3, [pc, #440]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 8001196:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			memcpy(&udp_tx.lY, UART3_RX_BUFFER + 6, 1);
 800119a:	4b79      	ldr	r3, [pc, #484]	@ (8001380 <HAL_UART_RxCpltCallback+0x2a0>)
 800119c:	781a      	ldrb	r2, [r3, #0]
 800119e:	4b6c      	ldr	r3, [pc, #432]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 80011a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

			memcpy(&udp_tx.r2, UART3_RX_BUFFER + 7, 1);
 80011a4:	4b77      	ldr	r3, [pc, #476]	@ (8001384 <HAL_UART_RxCpltCallback+0x2a4>)
 80011a6:	781a      	ldrb	r2, [r3, #0]
 80011a8:	4b69      	ldr	r3, [pc, #420]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 80011aa:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			memcpy(&udp_tx.l2, UART3_RX_BUFFER + 8, 1);
 80011ae:	4b76      	ldr	r3, [pc, #472]	@ (8001388 <HAL_UART_RxCpltCallback+0x2a8>)
 80011b0:	781a      	ldrb	r2, [r3, #0]
 80011b2:	4b67      	ldr	r3, [pc, #412]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 80011b4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			memcpy(&udp_tx.r1, UART3_RX_BUFFER + 9, 1);
 80011b8:	4b74      	ldr	r3, [pc, #464]	@ (800138c <HAL_UART_RxCpltCallback+0x2ac>)
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	4b64      	ldr	r3, [pc, #400]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 80011be:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			memcpy(&udp_tx.l1, UART3_RX_BUFFER + 10, 1);
 80011c2:	4b73      	ldr	r3, [pc, #460]	@ (8001390 <HAL_UART_RxCpltCallback+0x2b0>)
 80011c4:	781a      	ldrb	r2, [r3, #0]
 80011c6:	4b62      	ldr	r3, [pc, #392]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 80011c8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			memcpy(&udp_tx.r3, UART3_RX_BUFFER + 11, 1);
 80011cc:	4b71      	ldr	r3, [pc, #452]	@ (8001394 <HAL_UART_RxCpltCallback+0x2b4>)
 80011ce:	781a      	ldrb	r2, [r3, #0]
 80011d0:	4b5f      	ldr	r3, [pc, #380]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 80011d2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			memcpy(&udp_tx.l3, UART3_RX_BUFFER + 12, 1);
 80011d6:	4b70      	ldr	r3, [pc, #448]	@ (8001398 <HAL_UART_RxCpltCallback+0x2b8>)
 80011d8:	781a      	ldrb	r2, [r3, #0]
 80011da:	4b5d      	ldr	r3, [pc, #372]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 80011dc:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

			memcpy(&udp_tx.crs, UART3_RX_BUFFER + 13, 1);
 80011e0:	4b6e      	ldr	r3, [pc, #440]	@ (800139c <HAL_UART_RxCpltCallback+0x2bc>)
 80011e2:	781a      	ldrb	r2, [r3, #0]
 80011e4:	4b5a      	ldr	r3, [pc, #360]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 80011e6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
			memcpy(&udp_tx.sqr, UART3_RX_BUFFER + 14, 1);
 80011ea:	4b6d      	ldr	r3, [pc, #436]	@ (80013a0 <HAL_UART_RxCpltCallback+0x2c0>)
 80011ec:	781a      	ldrb	r2, [r3, #0]
 80011ee:	4b58      	ldr	r3, [pc, #352]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 80011f0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			memcpy(&udp_tx.tri, UART3_RX_BUFFER + 15, 1);
 80011f4:	4b6b      	ldr	r3, [pc, #428]	@ (80013a4 <HAL_UART_RxCpltCallback+0x2c4>)
 80011f6:	781a      	ldrb	r2, [r3, #0]
 80011f8:	4b55      	ldr	r3, [pc, #340]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 80011fa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			memcpy(&udp_tx.cir, UART3_RX_BUFFER + 16, 1);
 80011fe:	4b6a      	ldr	r3, [pc, #424]	@ (80013a8 <HAL_UART_RxCpltCallback+0x2c8>)
 8001200:	781a      	ldrb	r2, [r3, #0]
 8001202:	4b53      	ldr	r3, [pc, #332]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 8001204:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
			memcpy(&udp_tx.up, UART3_RX_BUFFER + 17, 1);
 8001208:	4b68      	ldr	r3, [pc, #416]	@ (80013ac <HAL_UART_RxCpltCallback+0x2cc>)
 800120a:	781a      	ldrb	r2, [r3, #0]
 800120c:	4b50      	ldr	r3, [pc, #320]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 800120e:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
			memcpy(&udp_tx.down, UART3_RX_BUFFER + 18, 1);
 8001212:	4b67      	ldr	r3, [pc, #412]	@ (80013b0 <HAL_UART_RxCpltCallback+0x2d0>)
 8001214:	781a      	ldrb	r2, [r3, #0]
 8001216:	4b4e      	ldr	r3, [pc, #312]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 8001218:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			memcpy(&udp_tx.right, UART3_RX_BUFFER + 19, 1);
 800121c:	4b65      	ldr	r3, [pc, #404]	@ (80013b4 <HAL_UART_RxCpltCallback+0x2d4>)
 800121e:	781a      	ldrb	r2, [r3, #0]
 8001220:	4b4b      	ldr	r3, [pc, #300]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 8001222:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
			memcpy(&udp_tx.left, UART3_RX_BUFFER + 20, 1);
 8001226:	4b64      	ldr	r3, [pc, #400]	@ (80013b8 <HAL_UART_RxCpltCallback+0x2d8>)
 8001228:	781a      	ldrb	r2, [r3, #0]
 800122a:	4b49      	ldr	r3, [pc, #292]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 800122c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
			memcpy(&udp_tx.share, UART3_RX_BUFFER + 21, 1);
 8001230:	4b62      	ldr	r3, [pc, #392]	@ (80013bc <HAL_UART_RxCpltCallback+0x2dc>)
 8001232:	781a      	ldrb	r2, [r3, #0]
 8001234:	4b46      	ldr	r3, [pc, #280]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 8001236:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
			memcpy(&udp_tx.option, UART3_RX_BUFFER + 22, 1);
 800123a:	4b61      	ldr	r3, [pc, #388]	@ (80013c0 <HAL_UART_RxCpltCallback+0x2e0>)
 800123c:	781a      	ldrb	r2, [r3, #0]
 800123e:	4b44      	ldr	r3, [pc, #272]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 8001240:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

			memcpy(&udp_tx.ps, UART3_RX_BUFFER + 23, 1);
 8001244:	4b5f      	ldr	r3, [pc, #380]	@ (80013c4 <HAL_UART_RxCpltCallback+0x2e4>)
 8001246:	781a      	ldrb	r2, [r3, #0]
 8001248:	4b41      	ldr	r3, [pc, #260]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 800124a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
			memcpy(&udp_tx.touchpad, UART3_RX_BUFFER + 24, 1);
 800124e:	4b5e      	ldr	r3, [pc, #376]	@ (80013c8 <HAL_UART_RxCpltCallback+0x2e8>)
 8001250:	781a      	ldrb	r2, [r3, #0]
 8001252:	4b3f      	ldr	r3, [pc, #252]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 8001254:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
			memcpy(&udp_tx.battery, UART3_RX_BUFFER + 25, 1);
 8001258:	4b5c      	ldr	r3, [pc, #368]	@ (80013cc <HAL_UART_RxCpltCallback+0x2ec>)
 800125a:	781a      	ldrb	r2, [r3, #0]
 800125c:	4b3c      	ldr	r3, [pc, #240]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 800125e:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

			memcpy(&udp_tx.gX, UART3_RX_BUFFER + 26, 2);
 8001262:	4b5b      	ldr	r3, [pc, #364]	@ (80013d0 <HAL_UART_RxCpltCallback+0x2f0>)
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	b29a      	uxth	r2, r3
 8001268:	4b39      	ldr	r3, [pc, #228]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 800126a:	879a      	strh	r2, [r3, #60]	@ 0x3c
			memcpy(&udp_tx.gY, UART3_RX_BUFFER + 28, 2);
 800126c:	4b59      	ldr	r3, [pc, #356]	@ (80013d4 <HAL_UART_RxCpltCallback+0x2f4>)
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	b29a      	uxth	r2, r3
 8001272:	4b37      	ldr	r3, [pc, #220]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 8001274:	87da      	strh	r2, [r3, #62]	@ 0x3e
			memcpy(&udp_tx.gZ, UART3_RX_BUFFER + 30, 2);
 8001276:	4b58      	ldr	r3, [pc, #352]	@ (80013d8 <HAL_UART_RxCpltCallback+0x2f8>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	b29a      	uxth	r2, r3
 800127c:	4b34      	ldr	r3, [pc, #208]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 800127e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
			memcpy(&udp_tx.aX, UART3_RX_BUFFER + 32, 2);
 8001282:	4b56      	ldr	r3, [pc, #344]	@ (80013dc <HAL_UART_RxCpltCallback+0x2fc>)
 8001284:	881b      	ldrh	r3, [r3, #0]
 8001286:	b29a      	uxth	r2, r3
 8001288:	4b31      	ldr	r3, [pc, #196]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 800128a:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
			memcpy(&udp_tx.aY, UART3_RX_BUFFER + 34, 2);
 800128e:	4b54      	ldr	r3, [pc, #336]	@ (80013e0 <HAL_UART_RxCpltCallback+0x300>)
 8001290:	881b      	ldrh	r3, [r3, #0]
 8001292:	b29a      	uxth	r2, r3
 8001294:	4b2e      	ldr	r3, [pc, #184]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 8001296:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
			memcpy(&udp_tx.aZ, UART3_RX_BUFFER + 36, 2);
 800129a:	4b52      	ldr	r3, [pc, #328]	@ (80013e4 <HAL_UART_RxCpltCallback+0x304>)
 800129c:	881b      	ldrh	r3, [r3, #0]
 800129e:	b29a      	uxth	r2, r3
 80012a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 80012a2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
		}
		HAL_UART_Receive_DMA(&huart3, (uint8_t*)UART3_RX_BUFFER, sizeof(UART3_RX_BUFFER));
 80012a6:	222b      	movs	r2, #43	@ 0x2b
 80012a8:	4931      	ldr	r1, [pc, #196]	@ (8001370 <HAL_UART_RxCpltCallback+0x290>)
 80012aa:	4830      	ldr	r0, [pc, #192]	@ (800136c <HAL_UART_RxCpltCallback+0x28c>)
 80012ac:	f006 ff06 	bl	80080bc <HAL_UART_Receive_DMA>
	}

	if(huart == &huart4)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a4d      	ldr	r2, [pc, #308]	@ (80013e8 <HAL_UART_RxCpltCallback+0x308>)
 80012b4:	4293      	cmp	r3, r2
 80012b6:	d124      	bne.n	8001302 <HAL_UART_RxCpltCallback+0x222>
	{
		if(UART4_RX_BUFFER[0] == 'A' && UART4_RX_BUFFER[1] == 'B' && UART4_RX_BUFFER[2] == 'C')
 80012b8:	4b4c      	ldr	r3, [pc, #304]	@ (80013ec <HAL_UART_RxCpltCallback+0x30c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b41      	cmp	r3, #65	@ 0x41
 80012be:	d11b      	bne.n	80012f8 <HAL_UART_RxCpltCallback+0x218>
 80012c0:	4b4a      	ldr	r3, [pc, #296]	@ (80013ec <HAL_UART_RxCpltCallback+0x30c>)
 80012c2:	785b      	ldrb	r3, [r3, #1]
 80012c4:	2b42      	cmp	r3, #66	@ 0x42
 80012c6:	d117      	bne.n	80012f8 <HAL_UART_RxCpltCallback+0x218>
 80012c8:	4b48      	ldr	r3, [pc, #288]	@ (80013ec <HAL_UART_RxCpltCallback+0x30c>)
 80012ca:	789b      	ldrb	r3, [r3, #2]
 80012cc:	2b43      	cmp	r3, #67	@ 0x43
 80012ce:	d113      	bne.n	80012f8 <HAL_UART_RxCpltCallback+0x218>
		{
			/* Save UDP */
			memcpy(&udp_tx.ultrasonic[0], UART4_RX_BUFFER + 3, 2);
 80012d0:	4b47      	ldr	r3, [pc, #284]	@ (80013f0 <HAL_UART_RxCpltCallback+0x310>)
 80012d2:	881b      	ldrh	r3, [r3, #0]
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 80012d8:	829a      	strh	r2, [r3, #20]
			memcpy(&udp_tx.ultrasonic[1], UART4_RX_BUFFER + 5, 2);
 80012da:	4b46      	ldr	r3, [pc, #280]	@ (80013f4 <HAL_UART_RxCpltCallback+0x314>)
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	b29a      	uxth	r2, r3
 80012e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 80012e2:	82da      	strh	r2, [r3, #22]
			memcpy(&udp_tx.ultrasonic[2], UART4_RX_BUFFER + 7, 2);
 80012e4:	4b44      	ldr	r3, [pc, #272]	@ (80013f8 <HAL_UART_RxCpltCallback+0x318>)
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	4b19      	ldr	r3, [pc, #100]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 80012ec:	831a      	strh	r2, [r3, #24]
			memcpy(&udp_tx.ultrasonic[3], UART4_RX_BUFFER + 9, 2);
 80012ee:	4b43      	ldr	r3, [pc, #268]	@ (80013fc <HAL_UART_RxCpltCallback+0x31c>)
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	b29a      	uxth	r2, r3
 80012f4:	4b16      	ldr	r3, [pc, #88]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 80012f6:	835a      	strh	r2, [r3, #26]
		}
		HAL_UART_Receive_DMA(&huart4, (uint8_t*)UART4_RX_BUFFER, sizeof(UART4_RX_BUFFER));
 80012f8:	2235      	movs	r2, #53	@ 0x35
 80012fa:	493c      	ldr	r1, [pc, #240]	@ (80013ec <HAL_UART_RxCpltCallback+0x30c>)
 80012fc:	483a      	ldr	r0, [pc, #232]	@ (80013e8 <HAL_UART_RxCpltCallback+0x308>)
 80012fe:	f006 fedd 	bl	80080bc <HAL_UART_Receive_DMA>
	}

	if(huart == &huart5)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a3e      	ldr	r2, [pc, #248]	@ (8001400 <HAL_UART_RxCpltCallback+0x320>)
 8001306:	4293      	cmp	r3, r2
 8001308:	f040 8082 	bne.w	8001410 <HAL_UART_RxCpltCallback+0x330>
	{
		if(UART5_RX_BUFFER[0] == 'A' && UART5_RX_BUFFER[1] == 'B' && UART5_RX_BUFFER[2] == 'C')
 800130c:	4b3d      	ldr	r3, [pc, #244]	@ (8001404 <HAL_UART_RxCpltCallback+0x324>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b41      	cmp	r3, #65	@ 0x41
 8001312:	d111      	bne.n	8001338 <HAL_UART_RxCpltCallback+0x258>
 8001314:	4b3b      	ldr	r3, [pc, #236]	@ (8001404 <HAL_UART_RxCpltCallback+0x324>)
 8001316:	785b      	ldrb	r3, [r3, #1]
 8001318:	2b42      	cmp	r3, #66	@ 0x42
 800131a:	d10d      	bne.n	8001338 <HAL_UART_RxCpltCallback+0x258>
 800131c:	4b39      	ldr	r3, [pc, #228]	@ (8001404 <HAL_UART_RxCpltCallback+0x324>)
 800131e:	789b      	ldrb	r3, [r3, #2]
 8001320:	2b43      	cmp	r3, #67	@ 0x43
 8001322:	d109      	bne.n	8001338 <HAL_UART_RxCpltCallback+0x258>
		{
			/* Save UDP */
			memcpy(&udp_tx.enc_x, UART5_RX_BUFFER + 3, 2);
 8001324:	4b38      	ldr	r3, [pc, #224]	@ (8001408 <HAL_UART_RxCpltCallback+0x328>)
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	b29a      	uxth	r2, r3
 800132a:	4b09      	ldr	r3, [pc, #36]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 800132c:	80da      	strh	r2, [r3, #6]
			memcpy(&udp_tx.enc_y, UART5_RX_BUFFER + 5, 2);
 800132e:	4b37      	ldr	r3, [pc, #220]	@ (800140c <HAL_UART_RxCpltCallback+0x32c>)
 8001330:	881b      	ldrh	r3, [r3, #0]
 8001332:	b29a      	uxth	r2, r3
 8001334:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <HAL_UART_RxCpltCallback+0x270>)
 8001336:	811a      	strh	r2, [r3, #8]
		}
		HAL_UART_Receive_DMA(&huart5, (uint8_t*)UART5_RX_BUFFER, sizeof(UART5_RX_BUFFER));
 8001338:	2217      	movs	r2, #23
 800133a:	4932      	ldr	r1, [pc, #200]	@ (8001404 <HAL_UART_RxCpltCallback+0x324>)
 800133c:	4830      	ldr	r0, [pc, #192]	@ (8001400 <HAL_UART_RxCpltCallback+0x320>)
 800133e:	f006 febd 	bl	80080bc <HAL_UART_Receive_DMA>
 8001342:	e065      	b.n	8001410 <HAL_UART_RxCpltCallback+0x330>
 8001344:	200008ac 	.word	0x200008ac
 8001348:	20000328 	.word	0x20000328
 800134c:	2000032b 	.word	0x2000032b
 8001350:	20000774 	.word	0x20000774
 8001354:	2000032c 	.word	0x2000032c
 8001358:	2000032d 	.word	0x2000032d
 800135c:	2000032e 	.word	0x2000032e
 8001360:	2000032f 	.word	0x2000032f
 8001364:	20000331 	.word	0x20000331
 8001368:	20000333 	.word	0x20000333
 800136c:	2000093c 	.word	0x2000093c
 8001370:	20000378 	.word	0x20000378
 8001374:	2000037b 	.word	0x2000037b
 8001378:	2000037c 	.word	0x2000037c
 800137c:	2000037d 	.word	0x2000037d
 8001380:	2000037e 	.word	0x2000037e
 8001384:	2000037f 	.word	0x2000037f
 8001388:	20000380 	.word	0x20000380
 800138c:	20000381 	.word	0x20000381
 8001390:	20000382 	.word	0x20000382
 8001394:	20000383 	.word	0x20000383
 8001398:	20000384 	.word	0x20000384
 800139c:	20000385 	.word	0x20000385
 80013a0:	20000386 	.word	0x20000386
 80013a4:	20000387 	.word	0x20000387
 80013a8:	20000388 	.word	0x20000388
 80013ac:	20000389 	.word	0x20000389
 80013b0:	2000038a 	.word	0x2000038a
 80013b4:	2000038b 	.word	0x2000038b
 80013b8:	2000038c 	.word	0x2000038c
 80013bc:	2000038d 	.word	0x2000038d
 80013c0:	2000038e 	.word	0x2000038e
 80013c4:	2000038f 	.word	0x2000038f
 80013c8:	20000390 	.word	0x20000390
 80013cc:	20000391 	.word	0x20000391
 80013d0:	20000392 	.word	0x20000392
 80013d4:	20000394 	.word	0x20000394
 80013d8:	20000396 	.word	0x20000396
 80013dc:	20000398 	.word	0x20000398
 80013e0:	2000039a 	.word	0x2000039a
 80013e4:	2000039c 	.word	0x2000039c
 80013e8:	2000081c 	.word	0x2000081c
 80013ec:	200003a4 	.word	0x200003a4
 80013f0:	200003a7 	.word	0x200003a7
 80013f4:	200003a9 	.word	0x200003a9
 80013f8:	200003ab 	.word	0x200003ab
 80013fc:	200003ad 	.word	0x200003ad
 8001400:	20000864 	.word	0x20000864
 8001404:	200003dc 	.word	0x200003dc
 8001408:	200003df 	.word	0x200003df
 800140c:	200003e1 	.word	0x200003e1
	}

	if(huart == &huart6) //--- NANO YAW
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	4a0e      	ldr	r2, [pc, #56]	@ (800144c <HAL_UART_RxCpltCallback+0x36c>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d115      	bne.n	8001444 <HAL_UART_RxCpltCallback+0x364>
	{
		if(UART6_RX_BUFFER[0] == 'A' && UART6_RX_BUFFER[1] == 'B' && UART6_RX_BUFFER[2] == 'C')
 8001418:	4b0d      	ldr	r3, [pc, #52]	@ (8001450 <HAL_UART_RxCpltCallback+0x370>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b41      	cmp	r3, #65	@ 0x41
 800141e:	d10c      	bne.n	800143a <HAL_UART_RxCpltCallback+0x35a>
 8001420:	4b0b      	ldr	r3, [pc, #44]	@ (8001450 <HAL_UART_RxCpltCallback+0x370>)
 8001422:	785b      	ldrb	r3, [r3, #1]
 8001424:	2b42      	cmp	r3, #66	@ 0x42
 8001426:	d108      	bne.n	800143a <HAL_UART_RxCpltCallback+0x35a>
 8001428:	4b09      	ldr	r3, [pc, #36]	@ (8001450 <HAL_UART_RxCpltCallback+0x370>)
 800142a:	789b      	ldrb	r3, [r3, #2]
 800142c:	2b43      	cmp	r3, #67	@ 0x43
 800142e:	d104      	bne.n	800143a <HAL_UART_RxCpltCallback+0x35a>
		{
			/* Save UDP */
			memcpy(&udp_tx.yaw_degree, UART6_RX_BUFFER + 3, 4);
 8001430:	4b08      	ldr	r3, [pc, #32]	@ (8001454 <HAL_UART_RxCpltCallback+0x374>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	4b08      	ldr	r3, [pc, #32]	@ (8001458 <HAL_UART_RxCpltCallback+0x378>)
 8001438:	611a      	str	r2, [r3, #16]
		}
		HAL_UART_Receive_DMA(&huart6, (uint8_t*)UART6_RX_BUFFER, sizeof(UART6_RX_BUFFER));
 800143a:	2207      	movs	r2, #7
 800143c:	4904      	ldr	r1, [pc, #16]	@ (8001450 <HAL_UART_RxCpltCallback+0x370>)
 800143e:	4803      	ldr	r0, [pc, #12]	@ (800144c <HAL_UART_RxCpltCallback+0x36c>)
 8001440:	f006 fe3c 	bl	80080bc <HAL_UART_Receive_DMA>
	}

}
 8001444:	bf00      	nop
 8001446:	3708      	adds	r7, #8
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000984 	.word	0x20000984
 8001450:	200003f4 	.word	0x200003f4
 8001454:	200003f7 	.word	0x200003f7
 8001458:	20000774 	.word	0x20000774

0800145c <HAL_UART_RxHalfCpltCallback>:

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) //--- VGT ARM
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	4a49      	ldr	r2, [pc, #292]	@ (800158c <HAL_UART_RxHalfCpltCallback+0x130>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d113      	bne.n	8001494 <HAL_UART_RxHalfCpltCallback+0x38>
	{
		if(!(UART1_RX_BUFFER[0] == 'A' && UART1_RX_BUFFER[1] == 'B' && UART1_RX_BUFFER[2] == 'C'))
 800146c:	4b48      	ldr	r3, [pc, #288]	@ (8001590 <HAL_UART_RxHalfCpltCallback+0x134>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b41      	cmp	r3, #65	@ 0x41
 8001472:	d107      	bne.n	8001484 <HAL_UART_RxHalfCpltCallback+0x28>
 8001474:	4b46      	ldr	r3, [pc, #280]	@ (8001590 <HAL_UART_RxHalfCpltCallback+0x134>)
 8001476:	785b      	ldrb	r3, [r3, #1]
 8001478:	2b42      	cmp	r3, #66	@ 0x42
 800147a:	d103      	bne.n	8001484 <HAL_UART_RxHalfCpltCallback+0x28>
 800147c:	4b44      	ldr	r3, [pc, #272]	@ (8001590 <HAL_UART_RxHalfCpltCallback+0x134>)
 800147e:	789b      	ldrb	r3, [r3, #2]
 8001480:	2b43      	cmp	r3, #67	@ 0x43
 8001482:	d007      	beq.n	8001494 <HAL_UART_RxHalfCpltCallback+0x38>
		{
			HAL_UART_AbortReceive(&huart1);
 8001484:	4841      	ldr	r0, [pc, #260]	@ (800158c <HAL_UART_RxHalfCpltCallback+0x130>)
 8001486:	f006 fe3e 	bl	8008106 <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_RX_BUFFER, sizeof(UART1_RX_BUFFER));
 800148a:	2235      	movs	r2, #53	@ 0x35
 800148c:	4940      	ldr	r1, [pc, #256]	@ (8001590 <HAL_UART_RxHalfCpltCallback+0x134>)
 800148e:	483f      	ldr	r0, [pc, #252]	@ (800158c <HAL_UART_RxHalfCpltCallback+0x130>)
 8001490:	f006 fe14 	bl	80080bc <HAL_UART_Receive_DMA>
		}
	}

	if(huart == &huart2)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a3f      	ldr	r2, [pc, #252]	@ (8001594 <HAL_UART_RxHalfCpltCallback+0x138>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d113      	bne.n	80014c4 <HAL_UART_RxHalfCpltCallback+0x68>
	{
		if(!(UART2_RX_BUFFER[0] == 'A' && UART2_RX_BUFFER[1] == 'B' && UART2_RX_BUFFER[2] == 'C'))
 800149c:	4b3e      	ldr	r3, [pc, #248]	@ (8001598 <HAL_UART_RxHalfCpltCallback+0x13c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2b41      	cmp	r3, #65	@ 0x41
 80014a2:	d107      	bne.n	80014b4 <HAL_UART_RxHalfCpltCallback+0x58>
 80014a4:	4b3c      	ldr	r3, [pc, #240]	@ (8001598 <HAL_UART_RxHalfCpltCallback+0x13c>)
 80014a6:	785b      	ldrb	r3, [r3, #1]
 80014a8:	2b42      	cmp	r3, #66	@ 0x42
 80014aa:	d103      	bne.n	80014b4 <HAL_UART_RxHalfCpltCallback+0x58>
 80014ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001598 <HAL_UART_RxHalfCpltCallback+0x13c>)
 80014ae:	789b      	ldrb	r3, [r3, #2]
 80014b0:	2b43      	cmp	r3, #67	@ 0x43
 80014b2:	d007      	beq.n	80014c4 <HAL_UART_RxHalfCpltCallback+0x68>
		{
			HAL_UART_AbortReceive(&huart2);
 80014b4:	4837      	ldr	r0, [pc, #220]	@ (8001594 <HAL_UART_RxHalfCpltCallback+0x138>)
 80014b6:	f006 fe26 	bl	8008106 <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart2, (uint8_t*)UART2_RX_BUFFER, sizeof(UART2_RX_BUFFER));
 80014ba:	2217      	movs	r2, #23
 80014bc:	4936      	ldr	r1, [pc, #216]	@ (8001598 <HAL_UART_RxHalfCpltCallback+0x13c>)
 80014be:	4835      	ldr	r0, [pc, #212]	@ (8001594 <HAL_UART_RxHalfCpltCallback+0x138>)
 80014c0:	f006 fdfc 	bl	80080bc <HAL_UART_Receive_DMA>
		}
	}

	if(huart == &huart3)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a35      	ldr	r2, [pc, #212]	@ (800159c <HAL_UART_RxHalfCpltCallback+0x140>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d113      	bne.n	80014f4 <HAL_UART_RxHalfCpltCallback+0x98>
	{
		if(!(UART3_RX_BUFFER[0] == 'A' && UART3_RX_BUFFER[1] == 'B' && UART3_RX_BUFFER[2] == 'C'))
 80014cc:	4b34      	ldr	r3, [pc, #208]	@ (80015a0 <HAL_UART_RxHalfCpltCallback+0x144>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b41      	cmp	r3, #65	@ 0x41
 80014d2:	d107      	bne.n	80014e4 <HAL_UART_RxHalfCpltCallback+0x88>
 80014d4:	4b32      	ldr	r3, [pc, #200]	@ (80015a0 <HAL_UART_RxHalfCpltCallback+0x144>)
 80014d6:	785b      	ldrb	r3, [r3, #1]
 80014d8:	2b42      	cmp	r3, #66	@ 0x42
 80014da:	d103      	bne.n	80014e4 <HAL_UART_RxHalfCpltCallback+0x88>
 80014dc:	4b30      	ldr	r3, [pc, #192]	@ (80015a0 <HAL_UART_RxHalfCpltCallback+0x144>)
 80014de:	789b      	ldrb	r3, [r3, #2]
 80014e0:	2b43      	cmp	r3, #67	@ 0x43
 80014e2:	d007      	beq.n	80014f4 <HAL_UART_RxHalfCpltCallback+0x98>
		{
			HAL_UART_AbortReceive(&huart3);
 80014e4:	482d      	ldr	r0, [pc, #180]	@ (800159c <HAL_UART_RxHalfCpltCallback+0x140>)
 80014e6:	f006 fe0e 	bl	8008106 <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart3, (uint8_t*)UART3_RX_BUFFER, sizeof(UART3_RX_BUFFER));
 80014ea:	222b      	movs	r2, #43	@ 0x2b
 80014ec:	492c      	ldr	r1, [pc, #176]	@ (80015a0 <HAL_UART_RxHalfCpltCallback+0x144>)
 80014ee:	482b      	ldr	r0, [pc, #172]	@ (800159c <HAL_UART_RxHalfCpltCallback+0x140>)
 80014f0:	f006 fde4 	bl	80080bc <HAL_UART_Receive_DMA>
		}
	}

	if(huart == &huart4)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a2b      	ldr	r2, [pc, #172]	@ (80015a4 <HAL_UART_RxHalfCpltCallback+0x148>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d113      	bne.n	8001524 <HAL_UART_RxHalfCpltCallback+0xc8>
	{
		if(!(UART4_RX_BUFFER[0] == 'A' && UART4_RX_BUFFER[1] == 'B' && UART4_RX_BUFFER[2] == 'C'))
 80014fc:	4b2a      	ldr	r3, [pc, #168]	@ (80015a8 <HAL_UART_RxHalfCpltCallback+0x14c>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b41      	cmp	r3, #65	@ 0x41
 8001502:	d107      	bne.n	8001514 <HAL_UART_RxHalfCpltCallback+0xb8>
 8001504:	4b28      	ldr	r3, [pc, #160]	@ (80015a8 <HAL_UART_RxHalfCpltCallback+0x14c>)
 8001506:	785b      	ldrb	r3, [r3, #1]
 8001508:	2b42      	cmp	r3, #66	@ 0x42
 800150a:	d103      	bne.n	8001514 <HAL_UART_RxHalfCpltCallback+0xb8>
 800150c:	4b26      	ldr	r3, [pc, #152]	@ (80015a8 <HAL_UART_RxHalfCpltCallback+0x14c>)
 800150e:	789b      	ldrb	r3, [r3, #2]
 8001510:	2b43      	cmp	r3, #67	@ 0x43
 8001512:	d007      	beq.n	8001524 <HAL_UART_RxHalfCpltCallback+0xc8>
		{
			HAL_UART_AbortReceive(&huart4);
 8001514:	4823      	ldr	r0, [pc, #140]	@ (80015a4 <HAL_UART_RxHalfCpltCallback+0x148>)
 8001516:	f006 fdf6 	bl	8008106 <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart4, (uint8_t*)UART4_RX_BUFFER, sizeof(UART4_RX_BUFFER));
 800151a:	2235      	movs	r2, #53	@ 0x35
 800151c:	4922      	ldr	r1, [pc, #136]	@ (80015a8 <HAL_UART_RxHalfCpltCallback+0x14c>)
 800151e:	4821      	ldr	r0, [pc, #132]	@ (80015a4 <HAL_UART_RxHalfCpltCallback+0x148>)
 8001520:	f006 fdcc 	bl	80080bc <HAL_UART_Receive_DMA>
		}
	}

	if(huart == &huart5)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a21      	ldr	r2, [pc, #132]	@ (80015ac <HAL_UART_RxHalfCpltCallback+0x150>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d113      	bne.n	8001554 <HAL_UART_RxHalfCpltCallback+0xf8>
	{
		if(!(UART5_RX_BUFFER[0] == 'A' && UART5_RX_BUFFER[1] == 'B' && UART5_RX_BUFFER[2] == 'C'))
 800152c:	4b20      	ldr	r3, [pc, #128]	@ (80015b0 <HAL_UART_RxHalfCpltCallback+0x154>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b41      	cmp	r3, #65	@ 0x41
 8001532:	d107      	bne.n	8001544 <HAL_UART_RxHalfCpltCallback+0xe8>
 8001534:	4b1e      	ldr	r3, [pc, #120]	@ (80015b0 <HAL_UART_RxHalfCpltCallback+0x154>)
 8001536:	785b      	ldrb	r3, [r3, #1]
 8001538:	2b42      	cmp	r3, #66	@ 0x42
 800153a:	d103      	bne.n	8001544 <HAL_UART_RxHalfCpltCallback+0xe8>
 800153c:	4b1c      	ldr	r3, [pc, #112]	@ (80015b0 <HAL_UART_RxHalfCpltCallback+0x154>)
 800153e:	789b      	ldrb	r3, [r3, #2]
 8001540:	2b43      	cmp	r3, #67	@ 0x43
 8001542:	d007      	beq.n	8001554 <HAL_UART_RxHalfCpltCallback+0xf8>
		{
			HAL_UART_AbortReceive(&huart5);
 8001544:	4819      	ldr	r0, [pc, #100]	@ (80015ac <HAL_UART_RxHalfCpltCallback+0x150>)
 8001546:	f006 fdde 	bl	8008106 <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart5, (uint8_t*)UART5_RX_BUFFER, sizeof(UART5_RX_BUFFER));
 800154a:	2217      	movs	r2, #23
 800154c:	4918      	ldr	r1, [pc, #96]	@ (80015b0 <HAL_UART_RxHalfCpltCallback+0x154>)
 800154e:	4817      	ldr	r0, [pc, #92]	@ (80015ac <HAL_UART_RxHalfCpltCallback+0x150>)
 8001550:	f006 fdb4 	bl	80080bc <HAL_UART_Receive_DMA>
		}
	}

	if(huart == &huart6) //--- NANO YAW
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a17      	ldr	r2, [pc, #92]	@ (80015b4 <HAL_UART_RxHalfCpltCallback+0x158>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d113      	bne.n	8001584 <HAL_UART_RxHalfCpltCallback+0x128>
	{
		if(!(UART6_RX_BUFFER[0] == 'A' && UART6_RX_BUFFER[1] == 'B' && UART6_RX_BUFFER[2] == 'C'))
 800155c:	4b16      	ldr	r3, [pc, #88]	@ (80015b8 <HAL_UART_RxHalfCpltCallback+0x15c>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b41      	cmp	r3, #65	@ 0x41
 8001562:	d107      	bne.n	8001574 <HAL_UART_RxHalfCpltCallback+0x118>
 8001564:	4b14      	ldr	r3, [pc, #80]	@ (80015b8 <HAL_UART_RxHalfCpltCallback+0x15c>)
 8001566:	785b      	ldrb	r3, [r3, #1]
 8001568:	2b42      	cmp	r3, #66	@ 0x42
 800156a:	d103      	bne.n	8001574 <HAL_UART_RxHalfCpltCallback+0x118>
 800156c:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <HAL_UART_RxHalfCpltCallback+0x15c>)
 800156e:	789b      	ldrb	r3, [r3, #2]
 8001570:	2b43      	cmp	r3, #67	@ 0x43
 8001572:	d007      	beq.n	8001584 <HAL_UART_RxHalfCpltCallback+0x128>
		{
			HAL_UART_AbortReceive(&huart6);
 8001574:	480f      	ldr	r0, [pc, #60]	@ (80015b4 <HAL_UART_RxHalfCpltCallback+0x158>)
 8001576:	f006 fdc6 	bl	8008106 <HAL_UART_AbortReceive>
			HAL_UART_Receive_DMA(&huart6, (uint8_t*)UART6_RX_BUFFER, sizeof(UART6_RX_BUFFER));
 800157a:	2207      	movs	r2, #7
 800157c:	490e      	ldr	r1, [pc, #56]	@ (80015b8 <HAL_UART_RxHalfCpltCallback+0x15c>)
 800157e:	480d      	ldr	r0, [pc, #52]	@ (80015b4 <HAL_UART_RxHalfCpltCallback+0x158>)
 8001580:	f006 fd9c 	bl	80080bc <HAL_UART_Receive_DMA>
		}
	}

}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200008ac 	.word	0x200008ac
 8001590:	20000328 	.word	0x20000328
 8001594:	200008f4 	.word	0x200008f4
 8001598:	20000360 	.word	0x20000360
 800159c:	2000093c 	.word	0x2000093c
 80015a0:	20000378 	.word	0x20000378
 80015a4:	2000081c 	.word	0x2000081c
 80015a8:	200003a4 	.word	0x200003a4
 80015ac:	20000864 	.word	0x20000864
 80015b0:	200003dc 	.word	0x200003dc
 80015b4:	20000984 	.word	0x20000984
 80015b8:	200003f4 	.word	0x200003f4

080015bc <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
	if(huart == &huart1) //--- VGT ARM
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	4a25      	ldr	r2, [pc, #148]	@ (800165c <HAL_UART_ErrorCallback+0xa0>)
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d107      	bne.n	80015dc <HAL_UART_ErrorCallback+0x20>
	{
		HAL_UART_AbortReceive(&huart1);
 80015cc:	4823      	ldr	r0, [pc, #140]	@ (800165c <HAL_UART_ErrorCallback+0xa0>)
 80015ce:	f006 fd9a 	bl	8008106 <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart1, (uint8_t*)UART1_RX_BUFFER, sizeof(UART1_RX_BUFFER));
 80015d2:	2235      	movs	r2, #53	@ 0x35
 80015d4:	4922      	ldr	r1, [pc, #136]	@ (8001660 <HAL_UART_ErrorCallback+0xa4>)
 80015d6:	4821      	ldr	r0, [pc, #132]	@ (800165c <HAL_UART_ErrorCallback+0xa0>)
 80015d8:	f006 fd70 	bl	80080bc <HAL_UART_Receive_DMA>
	}

	if(huart == &huart2)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	4a21      	ldr	r2, [pc, #132]	@ (8001664 <HAL_UART_ErrorCallback+0xa8>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d107      	bne.n	80015f4 <HAL_UART_ErrorCallback+0x38>
	{
		HAL_UART_AbortReceive(&huart2);
 80015e4:	481f      	ldr	r0, [pc, #124]	@ (8001664 <HAL_UART_ErrorCallback+0xa8>)
 80015e6:	f006 fd8e 	bl	8008106 <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart2, (uint8_t*)UART2_RX_BUFFER, sizeof(UART2_RX_BUFFER));
 80015ea:	2217      	movs	r2, #23
 80015ec:	491e      	ldr	r1, [pc, #120]	@ (8001668 <HAL_UART_ErrorCallback+0xac>)
 80015ee:	481d      	ldr	r0, [pc, #116]	@ (8001664 <HAL_UART_ErrorCallback+0xa8>)
 80015f0:	f006 fd64 	bl	80080bc <HAL_UART_Receive_DMA>
	}

	if(huart == &huart3)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a1d      	ldr	r2, [pc, #116]	@ (800166c <HAL_UART_ErrorCallback+0xb0>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d107      	bne.n	800160c <HAL_UART_ErrorCallback+0x50>
	{
		HAL_UART_AbortReceive(&huart3);
 80015fc:	481b      	ldr	r0, [pc, #108]	@ (800166c <HAL_UART_ErrorCallback+0xb0>)
 80015fe:	f006 fd82 	bl	8008106 <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart3, (uint8_t*)UART3_RX_BUFFER, sizeof(UART3_RX_BUFFER));
 8001602:	222b      	movs	r2, #43	@ 0x2b
 8001604:	491a      	ldr	r1, [pc, #104]	@ (8001670 <HAL_UART_ErrorCallback+0xb4>)
 8001606:	4819      	ldr	r0, [pc, #100]	@ (800166c <HAL_UART_ErrorCallback+0xb0>)
 8001608:	f006 fd58 	bl	80080bc <HAL_UART_Receive_DMA>
	}

	if(huart == &huart4)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a19      	ldr	r2, [pc, #100]	@ (8001674 <HAL_UART_ErrorCallback+0xb8>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d107      	bne.n	8001624 <HAL_UART_ErrorCallback+0x68>
	{
		HAL_UART_AbortReceive(&huart4);
 8001614:	4817      	ldr	r0, [pc, #92]	@ (8001674 <HAL_UART_ErrorCallback+0xb8>)
 8001616:	f006 fd76 	bl	8008106 <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart4, (uint8_t*)UART4_RX_BUFFER, sizeof(UART4_RX_BUFFER));
 800161a:	2235      	movs	r2, #53	@ 0x35
 800161c:	4916      	ldr	r1, [pc, #88]	@ (8001678 <HAL_UART_ErrorCallback+0xbc>)
 800161e:	4815      	ldr	r0, [pc, #84]	@ (8001674 <HAL_UART_ErrorCallback+0xb8>)
 8001620:	f006 fd4c 	bl	80080bc <HAL_UART_Receive_DMA>
	}

	if(huart == &huart5)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a15      	ldr	r2, [pc, #84]	@ (800167c <HAL_UART_ErrorCallback+0xc0>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d107      	bne.n	800163c <HAL_UART_ErrorCallback+0x80>
	{
		HAL_UART_AbortReceive(&huart5);
 800162c:	4813      	ldr	r0, [pc, #76]	@ (800167c <HAL_UART_ErrorCallback+0xc0>)
 800162e:	f006 fd6a 	bl	8008106 <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart5, (uint8_t*)UART5_RX_BUFFER, sizeof(UART5_RX_BUFFER));
 8001632:	2217      	movs	r2, #23
 8001634:	4912      	ldr	r1, [pc, #72]	@ (8001680 <HAL_UART_ErrorCallback+0xc4>)
 8001636:	4811      	ldr	r0, [pc, #68]	@ (800167c <HAL_UART_ErrorCallback+0xc0>)
 8001638:	f006 fd40 	bl	80080bc <HAL_UART_Receive_DMA>
	}

	if(huart == &huart6) //--- NANO YAW
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4a11      	ldr	r2, [pc, #68]	@ (8001684 <HAL_UART_ErrorCallback+0xc8>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d107      	bne.n	8001654 <HAL_UART_ErrorCallback+0x98>
	{
		HAL_UART_AbortReceive(&huart6);
 8001644:	480f      	ldr	r0, [pc, #60]	@ (8001684 <HAL_UART_ErrorCallback+0xc8>)
 8001646:	f006 fd5e 	bl	8008106 <HAL_UART_AbortReceive>
		HAL_UART_Receive_DMA(&huart6, (uint8_t*)UART6_RX_BUFFER, sizeof(UART6_RX_BUFFER));
 800164a:	2207      	movs	r2, #7
 800164c:	490e      	ldr	r1, [pc, #56]	@ (8001688 <HAL_UART_ErrorCallback+0xcc>)
 800164e:	480d      	ldr	r0, [pc, #52]	@ (8001684 <HAL_UART_ErrorCallback+0xc8>)
 8001650:	f006 fd34 	bl	80080bc <HAL_UART_Receive_DMA>

	}

}
 8001654:	bf00      	nop
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	200008ac 	.word	0x200008ac
 8001660:	20000328 	.word	0x20000328
 8001664:	200008f4 	.word	0x200008f4
 8001668:	20000360 	.word	0x20000360
 800166c:	2000093c 	.word	0x2000093c
 8001670:	20000378 	.word	0x20000378
 8001674:	2000081c 	.word	0x2000081c
 8001678:	200003a4 	.word	0x200003a4
 800167c:	20000864 	.word	0x20000864
 8001680:	200003dc 	.word	0x200003dc
 8001684:	20000984 	.word	0x20000984
 8001688:	200003f4 	.word	0x200003f4

0800168c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001690:	f002 fa12 	bl	8003ab8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001694:	f000 f842 	bl	800171c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001698:	f7ff f950 	bl	800093c <MX_GPIO_Init>
  MX_DMA_Init();
 800169c:	f7ff f8c8 	bl	8000830 <MX_DMA_Init>
  MX_ADC1_Init();
 80016a0:	f7fe ff7c 	bl	800059c <MX_ADC1_Init>
  MX_CAN1_Init();
 80016a4:	f7ff f848 	bl	8000738 <MX_CAN1_Init>
  MX_I2C1_Init();
 80016a8:	f7ff f9fe 	bl	8000aa8 <MX_I2C1_Init>
  MX_I2C3_Init();
 80016ac:	f7ff fa2a 	bl	8000b04 <MX_I2C3_Init>
  MX_TIM1_Init();
 80016b0:	f000 fbac 	bl	8001e0c <MX_TIM1_Init>
  MX_TIM2_Init();
 80016b4:	f000 fc02 	bl	8001ebc <MX_TIM2_Init>
  MX_TIM3_Init();
 80016b8:	f000 fc54 	bl	8001f64 <MX_TIM3_Init>
  MX_TIM4_Init();
 80016bc:	f000 fca6 	bl	800200c <MX_TIM4_Init>
  /* Configure the system clock */
  SystemClock_Config();
 80016c0:	f000 f82c 	bl	800171c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM5_Init();
 80016c4:	f000 fcf6 	bl	80020b4 <MX_TIM5_Init>
  MX_TIM8_Init();
 80016c8:	f000 fd8e 	bl	80021e8 <MX_TIM8_Init>
  MX_TIM9_Init();
 80016cc:	f000 fe10 	bl	80022f0 <MX_TIM9_Init>
  MX_TIM10_Init();
 80016d0:	f000 fe5e 	bl	8002390 <MX_TIM10_Init>
  MX_TIM11_Init();
 80016d4:	f000 feaa 	bl	800242c <MX_TIM11_Init>
  MX_TIM12_Init();
 80016d8:	f000 fef6 	bl	80024c8 <MX_TIM12_Init>
  MX_TIM13_Init();
 80016dc:	f000 ff44 	bl	8002568 <MX_TIM13_Init>
  MX_UART4_Init();
 80016e0:	f001 fb92 	bl	8002e08 <MX_UART4_Init>
  MX_UART5_Init();
 80016e4:	f001 fbba 	bl	8002e5c <MX_UART5_Init>
  MX_TIM6_Init();
 80016e8:	f000 fd48 	bl	800217c <MX_TIM6_Init>
  MX_USART2_UART_Init();
 80016ec:	f001 fc0a 	bl	8002f04 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80016f0:	f001 fbde 	bl	8002eb0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80016f4:	f001 fc30 	bl	8002f58 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 80016f8:	f001 fc58 	bl	8002fac <MX_USART6_UART_Init>
  MX_LWIP_Init();
 80016fc:	f007 fea6 	bl	800944c <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  Robot_Init();
 8001700:	f7ff fae4 	bl	8000ccc <Robot_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(udp_cnt >= 1)
 8001704:	4b04      	ldr	r3, [pc, #16]	@ (8001718 <main+0x8c>)
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0fb      	beq.n	8001704 <main+0x78>
	  {
		  MX_LWIP_Process();
 800170c:	f007 ffde 	bl	80096cc <MX_LWIP_Process>
//		  udpClient_send();
		  udp_cnt = 0;
 8001710:	4b01      	ldr	r3, [pc, #4]	@ (8001718 <main+0x8c>)
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
	  if(udp_cnt >= 1)
 8001716:	e7f5      	b.n	8001704 <main+0x78>
 8001718:	2000021c 	.word	0x2000021c

0800171c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b094      	sub	sp, #80	@ 0x50
 8001720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001722:	f107 0320 	add.w	r3, r7, #32
 8001726:	2230      	movs	r2, #48	@ 0x30
 8001728:	2100      	movs	r1, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f012 fb5b 	bl	8013de6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001730:	f107 030c 	add.w	r3, r7, #12
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001740:	2300      	movs	r3, #0
 8001742:	60bb      	str	r3, [r7, #8]
 8001744:	4b28      	ldr	r3, [pc, #160]	@ (80017e8 <SystemClock_Config+0xcc>)
 8001746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001748:	4a27      	ldr	r2, [pc, #156]	@ (80017e8 <SystemClock_Config+0xcc>)
 800174a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800174e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001750:	4b25      	ldr	r3, [pc, #148]	@ (80017e8 <SystemClock_Config+0xcc>)
 8001752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800175c:	2300      	movs	r3, #0
 800175e:	607b      	str	r3, [r7, #4]
 8001760:	4b22      	ldr	r3, [pc, #136]	@ (80017ec <SystemClock_Config+0xd0>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a21      	ldr	r2, [pc, #132]	@ (80017ec <SystemClock_Config+0xd0>)
 8001766:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	4b1f      	ldr	r3, [pc, #124]	@ (80017ec <SystemClock_Config+0xd0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001774:	607b      	str	r3, [r7, #4]
 8001776:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001778:	2301      	movs	r3, #1
 800177a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800177c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001780:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001782:	2302      	movs	r3, #2
 8001784:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001786:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800178a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800178c:	2304      	movs	r3, #4
 800178e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001790:	23a8      	movs	r3, #168	@ 0xa8
 8001792:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001794:	2302      	movs	r3, #2
 8001796:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001798:	2304      	movs	r3, #4
 800179a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800179c:	f107 0320 	add.w	r3, r7, #32
 80017a0:	4618      	mov	r0, r3
 80017a2:	f004 fee3 	bl	800656c <HAL_RCC_OscConfig>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80017ac:	f000 f820 	bl	80017f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b0:	230f      	movs	r3, #15
 80017b2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017b4:	2302      	movs	r3, #2
 80017b6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017bc:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80017c0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017c6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	2105      	movs	r1, #5
 80017ce:	4618      	mov	r0, r3
 80017d0:	f005 f944 	bl	8006a5c <HAL_RCC_ClockConfig>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017da:	f000 f809 	bl	80017f0 <Error_Handler>
  }
}
 80017de:	bf00      	nop
 80017e0:	3750      	adds	r7, #80	@ 0x50
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023800 	.word	0x40023800
 80017ec:	40007000 	.word	0x40007000

080017f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017f4:	b672      	cpsid	i
}
 80017f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f8:	bf00      	nop
 80017fa:	e7fd      	b.n	80017f8 <Error_Handler+0x8>

080017fc <Motor_Init>:
void Motor_Init(Motor_t *uMotor,
               GPIO_TypeDef *GPIO_A, uint16_t GPIO_PIN_A,
               GPIO_TypeDef *GPIO_B, uint16_t GPIO_PIN_B,
               TIM_HandleTypeDef *htimx, uint32_t channel,
               uint8_t reversed)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	4613      	mov	r3, r2
 800180a:	80fb      	strh	r3, [r7, #6]
	uMotor -> GPIO_A 		= GPIO_A;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	68ba      	ldr	r2, [r7, #8]
 8001810:	601a      	str	r2, [r3, #0]
	uMotor -> GPIO_PIN_A 	= GPIO_PIN_A;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	88fa      	ldrh	r2, [r7, #6]
 8001816:	809a      	strh	r2, [r3, #4]
	uMotor -> GPIO_B 		= GPIO_B;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	609a      	str	r2, [r3, #8]
	uMotor -> GPIO_PIN_B 	= GPIO_PIN_B;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	8b3a      	ldrh	r2, [r7, #24]
 8001822:	819a      	strh	r2, [r3, #12]
	uMotor -> htimx 		= htimx;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	69fa      	ldr	r2, [r7, #28]
 8001828:	611a      	str	r2, [r3, #16]
	uMotor -> channel 		= channel;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6a3a      	ldr	r2, [r7, #32]
 800182e:	615a      	str	r2, [r3, #20]
	uMotor -> reversed 		= reversed;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001836:	761a      	strb	r2, [r3, #24]

	HAL_TIM_PWM_Start(uMotor->htimx, uMotor->channel);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	691a      	ldr	r2, [r3, #16]
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	4619      	mov	r1, r3
 8001842:	4610      	mov	r0, r2
 8001844:	f005 fc3a 	bl	80070bc <HAL_TIM_PWM_Start>

	return;
 8001848:	bf00      	nop
}
 800184a:	3710      	adds	r7, #16
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <Motor_Run>:


void Motor_Run(Motor_t *uMotor, int16_t speed)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	460b      	mov	r3, r1
 800185a:	807b      	strh	r3, [r7, #2]
    if(uMotor -> reversed)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	7e1b      	ldrb	r3, [r3, #24]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d003      	beq.n	800186c <Motor_Run+0x1c>
    {
        speed = -speed;
 8001864:	887b      	ldrh	r3, [r7, #2]
 8001866:	425b      	negs	r3, r3
 8001868:	b29b      	uxth	r3, r3
 800186a:	807b      	strh	r3, [r7, #2]
    }

	uint8_t dir_a = (speed >= 0);
 800186c:	887b      	ldrh	r3, [r7, #2]
 800186e:	43db      	mvns	r3, r3
 8001870:	b29b      	uxth	r3, r3
 8001872:	0bdb      	lsrs	r3, r3, #15
 8001874:	b2db      	uxtb	r3, r3
 8001876:	73fb      	strb	r3, [r7, #15]
	uint8_t dir_b = (speed <  0);
 8001878:	887b      	ldrh	r3, [r7, #2]
 800187a:	0bdb      	lsrs	r3, r3, #15
 800187c:	b2db      	uxtb	r3, r3
 800187e:	73bb      	strb	r3, [r7, #14]
	speed = abs(speed);
 8001880:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001884:	2b00      	cmp	r3, #0
 8001886:	bfb8      	it	lt
 8001888:	425b      	neglt	r3, r3
 800188a:	b29b      	uxth	r3, r3
 800188c:	807b      	strh	r3, [r7, #2]

	HAL_GPIO_WritePin(uMotor -> GPIO_A, uMotor -> GPIO_PIN_A, dir_a);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6818      	ldr	r0, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	889b      	ldrh	r3, [r3, #4]
 8001896:	7bfa      	ldrb	r2, [r7, #15]
 8001898:	4619      	mov	r1, r3
 800189a:	f004 fd09 	bl	80062b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(uMotor -> GPIO_B, uMotor -> GPIO_PIN_B, dir_b);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6898      	ldr	r0, [r3, #8]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	899b      	ldrh	r3, [r3, #12]
 80018a6:	7bba      	ldrb	r2, [r7, #14]
 80018a8:	4619      	mov	r1, r3
 80018aa:	f004 fd01 	bl	80062b0 <HAL_GPIO_WritePin>

	switch (uMotor->channel)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	695b      	ldr	r3, [r3, #20]
 80018b2:	2b0c      	cmp	r3, #12
 80018b4:	d838      	bhi.n	8001928 <Motor_Run+0xd8>
 80018b6:	a201      	add	r2, pc, #4	@ (adr r2, 80018bc <Motor_Run+0x6c>)
 80018b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018bc:	080018f1 	.word	0x080018f1
 80018c0:	08001929 	.word	0x08001929
 80018c4:	08001929 	.word	0x08001929
 80018c8:	08001929 	.word	0x08001929
 80018cc:	080018ff 	.word	0x080018ff
 80018d0:	08001929 	.word	0x08001929
 80018d4:	08001929 	.word	0x08001929
 80018d8:	08001929 	.word	0x08001929
 80018dc:	0800190d 	.word	0x0800190d
 80018e0:	08001929 	.word	0x08001929
 80018e4:	08001929 	.word	0x08001929
 80018e8:	08001929 	.word	0x08001929
 80018ec:	0800191b 	.word	0x0800191b
	{
		case TIM_CHANNEL_1:
			uMotor -> htimx -> Instance -> CCR1 = speed;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80018fa:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80018fc:	e015      	b.n	800192a <Motor_Run+0xda>
		case TIM_CHANNEL_2:
			uMotor -> htimx -> Instance -> CCR2 = speed;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001908:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 800190a:	e00e      	b.n	800192a <Motor_Run+0xda>
		case TIM_CHANNEL_3:
			uMotor -> htimx -> Instance -> CCR3 = speed;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001916:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8001918:	e007      	b.n	800192a <Motor_Run+0xda>
		case TIM_CHANNEL_4:
			uMotor -> htimx -> Instance -> CCR4 = speed;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	691b      	ldr	r3, [r3, #16]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001924:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8001926:	e000      	b.n	800192a <Motor_Run+0xda>
		default:
			break;
 8001928:	bf00      	nop
	}

	return;
 800192a:	bf00      	nop
}
 800192c:	3710      	adds	r7, #16
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop

08001934 <Encoder_Init>:


void Encoder_Init(Encoder_t *uEncoder, TIM_HandleTypeDef *htimx, uint8_t reversed)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	4613      	mov	r3, r2
 8001940:	71fb      	strb	r3, [r7, #7]
	uEncoder -> htimx 		= htimx;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	68ba      	ldr	r2, [r7, #8]
 8001946:	601a      	str	r2, [r3, #0]
	uEncoder -> reversed 	= reversed;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	79fa      	ldrb	r2, [r7, #7]
 800194c:	719a      	strb	r2, [r3, #6]

	HAL_TIM_Encoder_Start(uEncoder->htimx, TIM_CHANNEL_ALL);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	213c      	movs	r1, #60	@ 0x3c
 8001954:	4618      	mov	r0, r3
 8001956:	f005 fd1f 	bl	8007398 <HAL_TIM_Encoder_Start>

	return;
 800195a:	bf00      	nop
}
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <Encoder_GetCount>:


void Encoder_GetCount(Encoder_t *uEncoder)
{
 8001962:	b480      	push	{r7}
 8001964:	b083      	sub	sp, #12
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
	if(uEncoder -> reversed)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	799b      	ldrb	r3, [r3, #6]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00a      	beq.n	8001988 <Encoder_GetCount+0x26>
	{
		uEncoder -> count = -(uEncoder -> htimx -> Instance -> CNT);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800197a:	b29b      	uxth	r3, r3
 800197c:	425b      	negs	r3, r3
 800197e:	b29b      	uxth	r3, r3
 8001980:	b21a      	sxth	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	809a      	strh	r2, [r3, #4]
	else
	{
		uEncoder -> count = uEncoder -> htimx -> Instance -> CNT;
	}

	return;
 8001986:	e007      	b.n	8001998 <Encoder_GetCount+0x36>
		uEncoder -> count = uEncoder -> htimx -> Instance -> CNT;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001990:	b21a      	sxth	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	809a      	strh	r2, [r3, #4]
	return;
 8001996:	bf00      	nop
}
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <Encoder_ResetCount>:


void Encoder_ResetCount(Encoder_t *uEncoder)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b083      	sub	sp, #12
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
	uEncoder -> htimx -> Instance -> CNT = 0;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2200      	movs	r2, #0
 80019b2:	625a      	str	r2, [r3, #36]	@ 0x24

	return;
 80019b4:	bf00      	nop
}
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr

080019c0 <PID_Init>:

#include "pid.h"

/* Functions */
void PID_Init(PID_t *uPID, float kp, float ki, float kd)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b085      	sub	sp, #20
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	ed87 0a02 	vstr	s0, [r7, #8]
 80019cc:	edc7 0a01 	vstr	s1, [r7, #4]
 80019d0:	ed87 1a00 	vstr	s2, [r7]
	uPID -> kp = kp;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	601a      	str	r2, [r3, #0]
	uPID -> ki = ki;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	605a      	str	r2, [r3, #4]
	uPID -> kd = kd;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	609a      	str	r2, [r3, #8]

	uPID -> proportional 	= 0;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f04f 0200 	mov.w	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
	uPID -> integral 		= 0;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	611a      	str	r2, [r3, #16]
	uPID -> derivative 		= 0;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f04f 0200 	mov.w	r2, #0
 80019fc:	615a      	str	r2, [r3, #20]

	uPID -> error 			= 0;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	619a      	str	r2, [r3, #24]
	uPID -> prev_error 		= 0;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	61da      	str	r2, [r3, #28]
	uPID -> setpoint 		= 0;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f04f 0200 	mov.w	r2, #0
 8001a14:	621a      	str	r2, [r3, #32]
	uPID -> feedback		= 0;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	f04f 0200 	mov.w	r2, #0
 8001a1c:	625a      	str	r2, [r3, #36]	@ 0x24

	uPID -> max_output		= 0;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f04f 0200 	mov.w	r2, #0
 8001a24:	629a      	str	r2, [r3, #40]	@ 0x28
	uPID -> output			= 0;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f04f 0200 	mov.w	r2, #0
 8001a2c:	62da      	str	r2, [r3, #44]	@ 0x2c

	return;
 8001a2e:	bf00      	nop
}
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
	...

08001a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
 8001a46:	4b10      	ldr	r3, [pc, #64]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a52:	4b0d      	ldr	r3, [pc, #52]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a5a:	607b      	str	r3, [r7, #4]
 8001a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a5e:	2300      	movs	r3, #0
 8001a60:	603b      	str	r3, [r7, #0]
 8001a62:	4b09      	ldr	r3, [pc, #36]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a66:	4a08      	ldr	r2, [pc, #32]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a6e:	4b06      	ldr	r3, [pc, #24]	@ (8001a88 <HAL_MspInit+0x4c>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a76:	603b      	str	r3, [r7, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7a:	bf00      	nop
 8001a7c:	370c      	adds	r7, #12
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800

08001a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a90:	bf00      	nop
 8001a92:	e7fd      	b.n	8001a90 <NMI_Handler+0x4>

08001a94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <HardFault_Handler+0x4>

08001a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa0:	bf00      	nop
 8001aa2:	e7fd      	b.n	8001aa0 <MemManage_Handler+0x4>

08001aa4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa8:	bf00      	nop
 8001aaa:	e7fd      	b.n	8001aa8 <BusFault_Handler+0x4>

08001aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab0:	bf00      	nop
 8001ab2:	e7fd      	b.n	8001ab0 <UsageFault_Handler+0x4>

08001ab4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr

08001ac2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ac2:	b480      	push	{r7}
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ae2:	f002 f83b 	bl	8003b5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae6:	bf00      	nop
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001af0:	4802      	ldr	r0, [pc, #8]	@ (8001afc <DMA1_Stream0_IRQHandler+0x10>)
 8001af2:	f002 fe7f 	bl	80047f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	20000a8c 	.word	0x20000a8c

08001b00 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001b04:	4802      	ldr	r0, [pc, #8]	@ (8001b10 <DMA1_Stream1_IRQHandler+0x10>)
 8001b06:	f002 fe75 	bl	80047f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	20000ccc 	.word	0x20000ccc

08001b14 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001b18:	4802      	ldr	r0, [pc, #8]	@ (8001b24 <DMA1_Stream2_IRQHandler+0x10>)
 8001b1a:	f002 fe6b 	bl	80047f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001b1e:	bf00      	nop
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	200009cc 	.word	0x200009cc

08001b28 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001b2c:	4802      	ldr	r0, [pc, #8]	@ (8001b38 <DMA1_Stream3_IRQHandler+0x10>)
 8001b2e:	f002 fe61 	bl	80047f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000d2c 	.word	0x20000d2c

08001b3c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001b40:	4802      	ldr	r0, [pc, #8]	@ (8001b4c <DMA1_Stream4_IRQHandler+0x10>)
 8001b42:	f002 fe57 	bl	80047f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000a2c 	.word	0x20000a2c

08001b50 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001b54:	4802      	ldr	r0, [pc, #8]	@ (8001b60 <DMA1_Stream5_IRQHandler+0x10>)
 8001b56:	f002 fe4d 	bl	80047f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000c0c 	.word	0x20000c0c

08001b64 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001b68:	4802      	ldr	r0, [pc, #8]	@ (8001b74 <DMA1_Stream6_IRQHandler+0x10>)
 8001b6a:	f002 fe43 	bl	80047f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	20000c6c 	.word	0x20000c6c

08001b78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b7c:	4802      	ldr	r0, [pc, #8]	@ (8001b88 <USART1_IRQHandler+0x10>)
 8001b7e:	f006 fb65 	bl	800824c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200008ac 	.word	0x200008ac

08001b8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b90:	4802      	ldr	r0, [pc, #8]	@ (8001b9c <USART2_IRQHandler+0x10>)
 8001b92:	f006 fb5b 	bl	800824c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	200008f4 	.word	0x200008f4

08001ba0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ba4:	4802      	ldr	r0, [pc, #8]	@ (8001bb0 <USART3_IRQHandler+0x10>)
 8001ba6:	f006 fb51 	bl	800824c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	2000093c 	.word	0x2000093c

08001bb4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8001bb8:	4802      	ldr	r0, [pc, #8]	@ (8001bc4 <DMA1_Stream7_IRQHandler+0x10>)
 8001bba:	f002 fe1b 	bl	80047f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000aec 	.word	0x20000aec

08001bc8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001bcc:	4802      	ldr	r0, [pc, #8]	@ (8001bd8 <UART4_IRQHandler+0x10>)
 8001bce:	f006 fb3d 	bl	800824c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001bd2:	bf00      	nop
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	2000081c 	.word	0x2000081c

08001bdc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001be0:	4802      	ldr	r0, [pc, #8]	@ (8001bec <UART5_IRQHandler+0x10>)
 8001be2:	f006 fb33 	bl	800824c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000864 	.word	0x20000864

08001bf0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001bf4:	4802      	ldr	r0, [pc, #8]	@ (8001c00 <TIM6_DAC_IRQHandler+0x10>)
 8001bf6:	f005 fc5d 	bl	80074b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000570 	.word	0x20000570

08001c04 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001c08:	4802      	ldr	r0, [pc, #8]	@ (8001c14 <DMA2_Stream1_IRQHandler+0x10>)
 8001c0a:	f002 fdf3 	bl	80047f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000d8c 	.word	0x20000d8c

08001c18 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001c1c:	4802      	ldr	r0, [pc, #8]	@ (8001c28 <DMA2_Stream2_IRQHandler+0x10>)
 8001c1e:	f002 fde9 	bl	80047f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000b4c 	.word	0x20000b4c

08001c2c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001c30:	4802      	ldr	r0, [pc, #8]	@ (8001c3c <DMA2_Stream6_IRQHandler+0x10>)
 8001c32:	f002 fddf 	bl	80047f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001c36:	bf00      	nop
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	20000dec 	.word	0x20000dec

08001c40 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001c44:	4802      	ldr	r0, [pc, #8]	@ (8001c50 <DMA2_Stream7_IRQHandler+0x10>)
 8001c46:	f002 fdd5 	bl	80047f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000bac 	.word	0x20000bac

08001c54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  return 1;
 8001c58:	2301      	movs	r3, #1
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <_kill>:

int _kill(int pid, int sig)
{
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c6e:	4b05      	ldr	r3, [pc, #20]	@ (8001c84 <_kill+0x20>)
 8001c70:	2216      	movs	r2, #22
 8001c72:	601a      	str	r2, [r3, #0]
  return -1;
 8001c74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	370c      	adds	r7, #12
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr
 8001c84:	2000b43c 	.word	0x2000b43c

08001c88 <_exit>:

void _exit (int status)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c90:	f04f 31ff 	mov.w	r1, #4294967295
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ffe5 	bl	8001c64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c9a:	bf00      	nop
 8001c9c:	e7fd      	b.n	8001c9a <_exit+0x12>

08001c9e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b086      	sub	sp, #24
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	60f8      	str	r0, [r7, #12]
 8001ca6:	60b9      	str	r1, [r7, #8]
 8001ca8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001caa:	2300      	movs	r3, #0
 8001cac:	617b      	str	r3, [r7, #20]
 8001cae:	e00a      	b.n	8001cc6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cb0:	f3af 8000 	nop.w
 8001cb4:	4601      	mov	r1, r0
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	60ba      	str	r2, [r7, #8]
 8001cbc:	b2ca      	uxtb	r2, r1
 8001cbe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	697a      	ldr	r2, [r7, #20]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	dbf0      	blt.n	8001cb0 <_read+0x12>
  }

  return len;
 8001cce:	687b      	ldr	r3, [r7, #4]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3718      	adds	r7, #24
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	60f8      	str	r0, [r7, #12]
 8001ce0:	60b9      	str	r1, [r7, #8]
 8001ce2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
 8001ce8:	e009      	b.n	8001cfe <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	1c5a      	adds	r2, r3, #1
 8001cee:	60ba      	str	r2, [r7, #8]
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	dbf1      	blt.n	8001cea <_write+0x12>
  }
  return len;
 8001d06:	687b      	ldr	r3, [r7, #4]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <_close>:

int _close(int file)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d38:	605a      	str	r2, [r3, #4]
  return 0;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <_isatty>:

int _isatty(int file)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d50:	2301      	movs	r3, #1
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b085      	sub	sp, #20
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3714      	adds	r7, #20
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b087      	sub	sp, #28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d80:	4a14      	ldr	r2, [pc, #80]	@ (8001dd4 <_sbrk+0x5c>)
 8001d82:	4b15      	ldr	r3, [pc, #84]	@ (8001dd8 <_sbrk+0x60>)
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d8c:	4b13      	ldr	r3, [pc, #76]	@ (8001ddc <_sbrk+0x64>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d102      	bne.n	8001d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d94:	4b11      	ldr	r3, [pc, #68]	@ (8001ddc <_sbrk+0x64>)
 8001d96:	4a12      	ldr	r2, [pc, #72]	@ (8001de0 <_sbrk+0x68>)
 8001d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d9a:	4b10      	ldr	r3, [pc, #64]	@ (8001ddc <_sbrk+0x64>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d205      	bcs.n	8001db4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001da8:	4b0e      	ldr	r3, [pc, #56]	@ (8001de4 <_sbrk+0x6c>)
 8001daa:	220c      	movs	r2, #12
 8001dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dae:	f04f 33ff 	mov.w	r3, #4294967295
 8001db2:	e009      	b.n	8001dc8 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db4:	4b09      	ldr	r3, [pc, #36]	@ (8001ddc <_sbrk+0x64>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dba:	4b08      	ldr	r3, [pc, #32]	@ (8001ddc <_sbrk+0x64>)
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	4a06      	ldr	r2, [pc, #24]	@ (8001ddc <_sbrk+0x64>)
 8001dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	371c      	adds	r7, #28
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr
 8001dd4:	20020000 	.word	0x20020000
 8001dd8:	00000400 	.word	0x00000400
 8001ddc:	20000404 	.word	0x20000404
 8001de0:	2000b450 	.word	0x2000b450
 8001de4:	2000b43c 	.word	0x2000b43c

08001de8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dec:	4b06      	ldr	r3, [pc, #24]	@ (8001e08 <SystemInit+0x20>)
 8001dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001df2:	4a05      	ldr	r2, [pc, #20]	@ (8001e08 <SystemInit+0x20>)
 8001df4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001df8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <MX_TIM1_Init>:
TIM_HandleTypeDef htim12;
TIM_HandleTypeDef htim13;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08c      	sub	sp, #48	@ 0x30
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e12:	f107 030c 	add.w	r3, r7, #12
 8001e16:	2224      	movs	r2, #36	@ 0x24
 8001e18:	2100      	movs	r1, #0
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f011 ffe3 	bl	8013de6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e28:	4b22      	ldr	r3, [pc, #136]	@ (8001eb4 <MX_TIM1_Init+0xa8>)
 8001e2a:	4a23      	ldr	r2, [pc, #140]	@ (8001eb8 <MX_TIM1_Init+0xac>)
 8001e2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001e2e:	4b21      	ldr	r3, [pc, #132]	@ (8001eb4 <MX_TIM1_Init+0xa8>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e34:	4b1f      	ldr	r3, [pc, #124]	@ (8001eb4 <MX_TIM1_Init+0xa8>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8001eb4 <MX_TIM1_Init+0xa8>)
 8001e3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e42:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb4 <MX_TIM1_Init+0xa8>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e48:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb4 <MX_TIM1_Init+0xa8>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e4e:	4b19      	ldr	r3, [pc, #100]	@ (8001eb4 <MX_TIM1_Init+0xa8>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001e54:	2301      	movs	r3, #1
 8001e56:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e70:	2300      	movs	r3, #0
 8001e72:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e74:	2300      	movs	r3, #0
 8001e76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001e78:	f107 030c 	add.w	r3, r7, #12
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	480d      	ldr	r0, [pc, #52]	@ (8001eb4 <MX_TIM1_Init+0xa8>)
 8001e80:	f005 f9e4 	bl	800724c <HAL_TIM_Encoder_Init>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001e8a:	f7ff fcb1 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4806      	ldr	r0, [pc, #24]	@ (8001eb4 <MX_TIM1_Init+0xa8>)
 8001e9c:	f005 ff60 	bl	8007d60 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001ea6:	f7ff fca3 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001eaa:	bf00      	nop
 8001eac:	3730      	adds	r7, #48	@ 0x30
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000408 	.word	0x20000408
 8001eb8:	40010000 	.word	0x40010000

08001ebc <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08c      	sub	sp, #48	@ 0x30
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ec2:	f107 030c 	add.w	r3, r7, #12
 8001ec6:	2224      	movs	r2, #36	@ 0x24
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f011 ff8b 	bl	8013de6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed0:	1d3b      	adds	r3, r7, #4
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ed8:	4b21      	ldr	r3, [pc, #132]	@ (8001f60 <MX_TIM2_Init+0xa4>)
 8001eda:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ede:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f60 <MX_TIM2_Init+0xa4>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f60 <MX_TIM2_Init+0xa4>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001eec:	4b1c      	ldr	r3, [pc, #112]	@ (8001f60 <MX_TIM2_Init+0xa4>)
 8001eee:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8001f60 <MX_TIM2_Init+0xa4>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001efa:	4b19      	ldr	r3, [pc, #100]	@ (8001f60 <MX_TIM2_Init+0xa4>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001f00:	2301      	movs	r3, #1
 8001f02:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001f04:	2300      	movs	r3, #0
 8001f06:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001f14:	2300      	movs	r3, #0
 8001f16:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001f24:	f107 030c 	add.w	r3, r7, #12
 8001f28:	4619      	mov	r1, r3
 8001f2a:	480d      	ldr	r0, [pc, #52]	@ (8001f60 <MX_TIM2_Init+0xa4>)
 8001f2c:	f005 f98e 	bl	800724c <HAL_TIM_Encoder_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001f36:	f7ff fc5b 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f42:	1d3b      	adds	r3, r7, #4
 8001f44:	4619      	mov	r1, r3
 8001f46:	4806      	ldr	r0, [pc, #24]	@ (8001f60 <MX_TIM2_Init+0xa4>)
 8001f48:	f005 ff0a 	bl	8007d60 <HAL_TIMEx_MasterConfigSynchronization>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001f52:	f7ff fc4d 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001f56:	bf00      	nop
 8001f58:	3730      	adds	r7, #48	@ 0x30
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000450 	.word	0x20000450

08001f64 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08c      	sub	sp, #48	@ 0x30
 8001f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001f6a:	f107 030c 	add.w	r3, r7, #12
 8001f6e:	2224      	movs	r2, #36	@ 0x24
 8001f70:	2100      	movs	r1, #0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f011 ff37 	bl	8013de6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001f80:	4b20      	ldr	r3, [pc, #128]	@ (8002004 <MX_TIM3_Init+0xa0>)
 8001f82:	4a21      	ldr	r2, [pc, #132]	@ (8002008 <MX_TIM3_Init+0xa4>)
 8001f84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001f86:	4b1f      	ldr	r3, [pc, #124]	@ (8002004 <MX_TIM3_Init+0xa0>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002004 <MX_TIM3_Init+0xa0>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001f92:	4b1c      	ldr	r3, [pc, #112]	@ (8002004 <MX_TIM3_Init+0xa0>)
 8001f94:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f98:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8002004 <MX_TIM3_Init+0xa0>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa0:	4b18      	ldr	r3, [pc, #96]	@ (8002004 <MX_TIM3_Init+0xa0>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001faa:	2300      	movs	r3, #0
 8001fac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001fca:	f107 030c 	add.w	r3, r7, #12
 8001fce:	4619      	mov	r1, r3
 8001fd0:	480c      	ldr	r0, [pc, #48]	@ (8002004 <MX_TIM3_Init+0xa0>)
 8001fd2:	f005 f93b 	bl	800724c <HAL_TIM_Encoder_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001fdc:	f7ff fc08 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	4619      	mov	r1, r3
 8001fec:	4805      	ldr	r0, [pc, #20]	@ (8002004 <MX_TIM3_Init+0xa0>)
 8001fee:	f005 feb7 	bl	8007d60 <HAL_TIMEx_MasterConfigSynchronization>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001ff8:	f7ff fbfa 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ffc:	bf00      	nop
 8001ffe:	3730      	adds	r7, #48	@ 0x30
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000498 	.word	0x20000498
 8002008:	40000400 	.word	0x40000400

0800200c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08c      	sub	sp, #48	@ 0x30
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002012:	f107 030c 	add.w	r3, r7, #12
 8002016:	2224      	movs	r2, #36	@ 0x24
 8002018:	2100      	movs	r1, #0
 800201a:	4618      	mov	r0, r3
 800201c:	f011 fee3 	bl	8013de6 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	2200      	movs	r2, #0
 8002024:	601a      	str	r2, [r3, #0]
 8002026:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002028:	4b20      	ldr	r3, [pc, #128]	@ (80020ac <MX_TIM4_Init+0xa0>)
 800202a:	4a21      	ldr	r2, [pc, #132]	@ (80020b0 <MX_TIM4_Init+0xa4>)
 800202c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800202e:	4b1f      	ldr	r3, [pc, #124]	@ (80020ac <MX_TIM4_Init+0xa0>)
 8002030:	2200      	movs	r2, #0
 8002032:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002034:	4b1d      	ldr	r3, [pc, #116]	@ (80020ac <MX_TIM4_Init+0xa0>)
 8002036:	2200      	movs	r2, #0
 8002038:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800203a:	4b1c      	ldr	r3, [pc, #112]	@ (80020ac <MX_TIM4_Init+0xa0>)
 800203c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002040:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002042:	4b1a      	ldr	r3, [pc, #104]	@ (80020ac <MX_TIM4_Init+0xa0>)
 8002044:	2200      	movs	r2, #0
 8002046:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002048:	4b18      	ldr	r3, [pc, #96]	@ (80020ac <MX_TIM4_Init+0xa0>)
 800204a:	2200      	movs	r2, #0
 800204c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800204e:	2301      	movs	r3, #1
 8002050:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002056:	2301      	movs	r3, #1
 8002058:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800205a:	2300      	movs	r3, #0
 800205c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002062:	2300      	movs	r3, #0
 8002064:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002066:	2301      	movs	r3, #1
 8002068:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800206a:	2300      	movs	r3, #0
 800206c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800206e:	2300      	movs	r3, #0
 8002070:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002072:	f107 030c 	add.w	r3, r7, #12
 8002076:	4619      	mov	r1, r3
 8002078:	480c      	ldr	r0, [pc, #48]	@ (80020ac <MX_TIM4_Init+0xa0>)
 800207a:	f005 f8e7 	bl	800724c <HAL_TIM_Encoder_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8002084:	f7ff fbb4 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002088:	2300      	movs	r3, #0
 800208a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800208c:	2300      	movs	r3, #0
 800208e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002090:	1d3b      	adds	r3, r7, #4
 8002092:	4619      	mov	r1, r3
 8002094:	4805      	ldr	r0, [pc, #20]	@ (80020ac <MX_TIM4_Init+0xa0>)
 8002096:	f005 fe63 	bl	8007d60 <HAL_TIMEx_MasterConfigSynchronization>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 80020a0:	f7ff fba6 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80020a4:	bf00      	nop
 80020a6:	3730      	adds	r7, #48	@ 0x30
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	200004e0 	.word	0x200004e0
 80020b0:	40000800 	.word	0x40000800

080020b4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08a      	sub	sp, #40	@ 0x28
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020ba:	f107 0320 	add.w	r3, r7, #32
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020c4:	1d3b      	adds	r3, r7, #4
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	605a      	str	r2, [r3, #4]
 80020cc:	609a      	str	r2, [r3, #8]
 80020ce:	60da      	str	r2, [r3, #12]
 80020d0:	611a      	str	r2, [r3, #16]
 80020d2:	615a      	str	r2, [r3, #20]
 80020d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80020d6:	4b27      	ldr	r3, [pc, #156]	@ (8002174 <MX_TIM5_Init+0xc0>)
 80020d8:	4a27      	ldr	r2, [pc, #156]	@ (8002178 <MX_TIM5_Init+0xc4>)
 80020da:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 80020dc:	4b25      	ldr	r3, [pc, #148]	@ (8002174 <MX_TIM5_Init+0xc0>)
 80020de:	2253      	movs	r2, #83	@ 0x53
 80020e0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020e2:	4b24      	ldr	r3, [pc, #144]	@ (8002174 <MX_TIM5_Init+0xc0>)
 80020e4:	2200      	movs	r2, #0
 80020e6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 80020e8:	4b22      	ldr	r3, [pc, #136]	@ (8002174 <MX_TIM5_Init+0xc0>)
 80020ea:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80020ee:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020f0:	4b20      	ldr	r3, [pc, #128]	@ (8002174 <MX_TIM5_Init+0xc0>)
 80020f2:	2200      	movs	r2, #0
 80020f4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020f6:	4b1f      	ldr	r3, [pc, #124]	@ (8002174 <MX_TIM5_Init+0xc0>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80020fc:	481d      	ldr	r0, [pc, #116]	@ (8002174 <MX_TIM5_Init+0xc0>)
 80020fe:	f004 ff8d 	bl	800701c <HAL_TIM_PWM_Init>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002108:	f7ff fb72 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800210c:	2300      	movs	r3, #0
 800210e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002110:	2300      	movs	r3, #0
 8002112:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002114:	f107 0320 	add.w	r3, r7, #32
 8002118:	4619      	mov	r1, r3
 800211a:	4816      	ldr	r0, [pc, #88]	@ (8002174 <MX_TIM5_Init+0xc0>)
 800211c:	f005 fe20 	bl	8007d60 <HAL_TIMEx_MasterConfigSynchronization>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002126:	f7ff fb63 	bl	80017f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800212a:	2360      	movs	r3, #96	@ 0x60
 800212c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	2200      	movs	r2, #0
 800213e:	4619      	mov	r1, r3
 8002140:	480c      	ldr	r0, [pc, #48]	@ (8002174 <MX_TIM5_Init+0xc0>)
 8002142:	f005 faa7 	bl	8007694 <HAL_TIM_PWM_ConfigChannel>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 800214c:	f7ff fb50 	bl	80017f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002150:	1d3b      	adds	r3, r7, #4
 8002152:	220c      	movs	r2, #12
 8002154:	4619      	mov	r1, r3
 8002156:	4807      	ldr	r0, [pc, #28]	@ (8002174 <MX_TIM5_Init+0xc0>)
 8002158:	f005 fa9c 	bl	8007694 <HAL_TIM_PWM_ConfigChannel>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8002162:	f7ff fb45 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002166:	4803      	ldr	r0, [pc, #12]	@ (8002174 <MX_TIM5_Init+0xc0>)
 8002168:	f000 fc22 	bl	80029b0 <HAL_TIM_MspPostInit>

}
 800216c:	bf00      	nop
 800216e:	3728      	adds	r7, #40	@ 0x28
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20000528 	.word	0x20000528
 8002178:	40000c00 	.word	0x40000c00

0800217c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b082      	sub	sp, #8
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002182:	463b      	mov	r3, r7
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800218a:	4b15      	ldr	r3, [pc, #84]	@ (80021e0 <MX_TIM6_Init+0x64>)
 800218c:	4a15      	ldr	r2, [pc, #84]	@ (80021e4 <MX_TIM6_Init+0x68>)
 800218e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8002190:	4b13      	ldr	r3, [pc, #76]	@ (80021e0 <MX_TIM6_Init+0x64>)
 8002192:	2253      	movs	r2, #83	@ 0x53
 8002194:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002196:	4b12      	ldr	r3, [pc, #72]	@ (80021e0 <MX_TIM6_Init+0x64>)
 8002198:	2200      	movs	r2, #0
 800219a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000 - 1;
 800219c:	4b10      	ldr	r3, [pc, #64]	@ (80021e0 <MX_TIM6_Init+0x64>)
 800219e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80021a2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021a4:	4b0e      	ldr	r3, [pc, #56]	@ (80021e0 <MX_TIM6_Init+0x64>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80021aa:	480d      	ldr	r0, [pc, #52]	@ (80021e0 <MX_TIM6_Init+0x64>)
 80021ac:	f004 fe76 	bl	8006e9c <HAL_TIM_Base_Init>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80021b6:	f7ff fb1b 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ba:	2300      	movs	r3, #0
 80021bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80021c2:	463b      	mov	r3, r7
 80021c4:	4619      	mov	r1, r3
 80021c6:	4806      	ldr	r0, [pc, #24]	@ (80021e0 <MX_TIM6_Init+0x64>)
 80021c8:	f005 fdca 	bl	8007d60 <HAL_TIMEx_MasterConfigSynchronization>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 80021d2:	f7ff fb0d 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000570 	.word	0x20000570
 80021e4:	40001000 	.word	0x40001000

080021e8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b092      	sub	sp, #72	@ 0x48
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021ee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021f8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
 8002208:	615a      	str	r2, [r3, #20]
 800220a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800220c:	1d3b      	adds	r3, r7, #4
 800220e:	2220      	movs	r2, #32
 8002210:	2100      	movs	r1, #0
 8002212:	4618      	mov	r0, r3
 8002214:	f011 fde7 	bl	8013de6 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002218:	4b33      	ldr	r3, [pc, #204]	@ (80022e8 <MX_TIM8_Init+0x100>)
 800221a:	4a34      	ldr	r2, [pc, #208]	@ (80022ec <MX_TIM8_Init+0x104>)
 800221c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 168-1;
 800221e:	4b32      	ldr	r3, [pc, #200]	@ (80022e8 <MX_TIM8_Init+0x100>)
 8002220:	22a7      	movs	r2, #167	@ 0xa7
 8002222:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002224:	4b30      	ldr	r3, [pc, #192]	@ (80022e8 <MX_TIM8_Init+0x100>)
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1000-1;
 800222a:	4b2f      	ldr	r3, [pc, #188]	@ (80022e8 <MX_TIM8_Init+0x100>)
 800222c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002230:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002232:	4b2d      	ldr	r3, [pc, #180]	@ (80022e8 <MX_TIM8_Init+0x100>)
 8002234:	2200      	movs	r2, #0
 8002236:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002238:	4b2b      	ldr	r3, [pc, #172]	@ (80022e8 <MX_TIM8_Init+0x100>)
 800223a:	2200      	movs	r2, #0
 800223c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800223e:	4b2a      	ldr	r3, [pc, #168]	@ (80022e8 <MX_TIM8_Init+0x100>)
 8002240:	2200      	movs	r2, #0
 8002242:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002244:	4828      	ldr	r0, [pc, #160]	@ (80022e8 <MX_TIM8_Init+0x100>)
 8002246:	f004 fee9 	bl	800701c <HAL_TIM_PWM_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002250:	f7ff face 	bl	80017f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002254:	2300      	movs	r3, #0
 8002256:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002258:	2300      	movs	r3, #0
 800225a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800225c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002260:	4619      	mov	r1, r3
 8002262:	4821      	ldr	r0, [pc, #132]	@ (80022e8 <MX_TIM8_Init+0x100>)
 8002264:	f005 fd7c 	bl	8007d60 <HAL_TIMEx_MasterConfigSynchronization>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800226e:	f7ff fabf 	bl	80017f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002272:	2360      	movs	r3, #96	@ 0x60
 8002274:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800227a:	2300      	movs	r3, #0
 800227c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800227e:	2300      	movs	r3, #0
 8002280:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002282:	2300      	movs	r3, #0
 8002284:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002286:	2300      	movs	r3, #0
 8002288:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800228a:	2300      	movs	r3, #0
 800228c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800228e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002292:	2208      	movs	r2, #8
 8002294:	4619      	mov	r1, r3
 8002296:	4814      	ldr	r0, [pc, #80]	@ (80022e8 <MX_TIM8_Init+0x100>)
 8002298:	f005 f9fc 	bl	8007694 <HAL_TIM_PWM_ConfigChannel>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 80022a2:	f7ff faa5 	bl	80017f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80022a6:	2300      	movs	r3, #0
 80022a8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80022aa:	2300      	movs	r3, #0
 80022ac:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80022ae:	2300      	movs	r3, #0
 80022b0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80022b6:	2300      	movs	r3, #0
 80022b8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80022ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022be:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80022c0:	2300      	movs	r3, #0
 80022c2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80022c4:	1d3b      	adds	r3, r7, #4
 80022c6:	4619      	mov	r1, r3
 80022c8:	4807      	ldr	r0, [pc, #28]	@ (80022e8 <MX_TIM8_Init+0x100>)
 80022ca:	f005 fdc5 	bl	8007e58 <HAL_TIMEx_ConfigBreakDeadTime>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 80022d4:	f7ff fa8c 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80022d8:	4803      	ldr	r0, [pc, #12]	@ (80022e8 <MX_TIM8_Init+0x100>)
 80022da:	f000 fb69 	bl	80029b0 <HAL_TIM_MspPostInit>

}
 80022de:	bf00      	nop
 80022e0:	3748      	adds	r7, #72	@ 0x48
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	200005b8 	.word	0x200005b8
 80022ec:	40010400 	.word	0x40010400

080022f0 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b088      	sub	sp, #32
 80022f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80022f6:	1d3b      	adds	r3, r7, #4
 80022f8:	2200      	movs	r2, #0
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	605a      	str	r2, [r3, #4]
 80022fe:	609a      	str	r2, [r3, #8]
 8002300:	60da      	str	r2, [r3, #12]
 8002302:	611a      	str	r2, [r3, #16]
 8002304:	615a      	str	r2, [r3, #20]
 8002306:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002308:	4b1f      	ldr	r3, [pc, #124]	@ (8002388 <MX_TIM9_Init+0x98>)
 800230a:	4a20      	ldr	r2, [pc, #128]	@ (800238c <MX_TIM9_Init+0x9c>)
 800230c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 168-1;
 800230e:	4b1e      	ldr	r3, [pc, #120]	@ (8002388 <MX_TIM9_Init+0x98>)
 8002310:	22a7      	movs	r2, #167	@ 0xa7
 8002312:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002314:	4b1c      	ldr	r3, [pc, #112]	@ (8002388 <MX_TIM9_Init+0x98>)
 8002316:	2200      	movs	r2, #0
 8002318:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000-1;
 800231a:	4b1b      	ldr	r3, [pc, #108]	@ (8002388 <MX_TIM9_Init+0x98>)
 800231c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002320:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002322:	4b19      	ldr	r3, [pc, #100]	@ (8002388 <MX_TIM9_Init+0x98>)
 8002324:	2200      	movs	r2, #0
 8002326:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002328:	4b17      	ldr	r3, [pc, #92]	@ (8002388 <MX_TIM9_Init+0x98>)
 800232a:	2200      	movs	r2, #0
 800232c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800232e:	4816      	ldr	r0, [pc, #88]	@ (8002388 <MX_TIM9_Init+0x98>)
 8002330:	f004 fe74 	bl	800701c <HAL_TIM_PWM_Init>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 800233a:	f7ff fa59 	bl	80017f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800233e:	2360      	movs	r3, #96	@ 0x60
 8002340:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002342:	2300      	movs	r3, #0
 8002344:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002346:	2300      	movs	r3, #0
 8002348:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800234e:	1d3b      	adds	r3, r7, #4
 8002350:	2200      	movs	r2, #0
 8002352:	4619      	mov	r1, r3
 8002354:	480c      	ldr	r0, [pc, #48]	@ (8002388 <MX_TIM9_Init+0x98>)
 8002356:	f005 f99d 	bl	8007694 <HAL_TIM_PWM_ConfigChannel>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d001      	beq.n	8002364 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8002360:	f7ff fa46 	bl	80017f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002364:	1d3b      	adds	r3, r7, #4
 8002366:	2204      	movs	r2, #4
 8002368:	4619      	mov	r1, r3
 800236a:	4807      	ldr	r0, [pc, #28]	@ (8002388 <MX_TIM9_Init+0x98>)
 800236c:	f005 f992 	bl	8007694 <HAL_TIM_PWM_ConfigChannel>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8002376:	f7ff fa3b 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 800237a:	4803      	ldr	r0, [pc, #12]	@ (8002388 <MX_TIM9_Init+0x98>)
 800237c:	f000 fb18 	bl	80029b0 <HAL_TIM_MspPostInit>

}
 8002380:	bf00      	nop
 8002382:	3720      	adds	r7, #32
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	20000600 	.word	0x20000600
 800238c:	40014000 	.word	0x40014000

08002390 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002396:	1d3b      	adds	r3, r7, #4
 8002398:	2200      	movs	r2, #0
 800239a:	601a      	str	r2, [r3, #0]
 800239c:	605a      	str	r2, [r3, #4]
 800239e:	609a      	str	r2, [r3, #8]
 80023a0:	60da      	str	r2, [r3, #12]
 80023a2:	611a      	str	r2, [r3, #16]
 80023a4:	615a      	str	r2, [r3, #20]
 80023a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80023a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002424 <MX_TIM10_Init+0x94>)
 80023aa:	4a1f      	ldr	r2, [pc, #124]	@ (8002428 <MX_TIM10_Init+0x98>)
 80023ac:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 80023ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002424 <MX_TIM10_Init+0x94>)
 80023b0:	22a7      	movs	r2, #167	@ 0xa7
 80023b2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023b4:	4b1b      	ldr	r3, [pc, #108]	@ (8002424 <MX_TIM10_Init+0x94>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000-1;
 80023ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002424 <MX_TIM10_Init+0x94>)
 80023bc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80023c0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c2:	4b18      	ldr	r3, [pc, #96]	@ (8002424 <MX_TIM10_Init+0x94>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c8:	4b16      	ldr	r3, [pc, #88]	@ (8002424 <MX_TIM10_Init+0x94>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80023ce:	4815      	ldr	r0, [pc, #84]	@ (8002424 <MX_TIM10_Init+0x94>)
 80023d0:	f004 fd64 	bl	8006e9c <HAL_TIM_Base_Init>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80023da:	f7ff fa09 	bl	80017f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80023de:	4811      	ldr	r0, [pc, #68]	@ (8002424 <MX_TIM10_Init+0x94>)
 80023e0:	f004 fe1c 	bl	800701c <HAL_TIM_PWM_Init>
 80023e4:	4603      	mov	r3, r0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80023ea:	f7ff fa01 	bl	80017f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023ee:	2360      	movs	r3, #96	@ 0x60
 80023f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80023f2:	2300      	movs	r3, #0
 80023f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023fe:	1d3b      	adds	r3, r7, #4
 8002400:	2200      	movs	r2, #0
 8002402:	4619      	mov	r1, r3
 8002404:	4807      	ldr	r0, [pc, #28]	@ (8002424 <MX_TIM10_Init+0x94>)
 8002406:	f005 f945 	bl	8007694 <HAL_TIM_PWM_ConfigChannel>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8002410:	f7ff f9ee 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002414:	4803      	ldr	r0, [pc, #12]	@ (8002424 <MX_TIM10_Init+0x94>)
 8002416:	f000 facb 	bl	80029b0 <HAL_TIM_MspPostInit>

}
 800241a:	bf00      	nop
 800241c:	3720      	adds	r7, #32
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	20000648 	.word	0x20000648
 8002428:	40014400 	.word	0x40014400

0800242c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b088      	sub	sp, #32
 8002430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]
 8002438:	605a      	str	r2, [r3, #4]
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	60da      	str	r2, [r3, #12]
 800243e:	611a      	str	r2, [r3, #16]
 8002440:	615a      	str	r2, [r3, #20]
 8002442:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002444:	4b1e      	ldr	r3, [pc, #120]	@ (80024c0 <MX_TIM11_Init+0x94>)
 8002446:	4a1f      	ldr	r2, [pc, #124]	@ (80024c4 <MX_TIM11_Init+0x98>)
 8002448:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 800244a:	4b1d      	ldr	r3, [pc, #116]	@ (80024c0 <MX_TIM11_Init+0x94>)
 800244c:	22a7      	movs	r2, #167	@ 0xa7
 800244e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002450:	4b1b      	ldr	r3, [pc, #108]	@ (80024c0 <MX_TIM11_Init+0x94>)
 8002452:	2200      	movs	r2, #0
 8002454:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 1000-1;
 8002456:	4b1a      	ldr	r3, [pc, #104]	@ (80024c0 <MX_TIM11_Init+0x94>)
 8002458:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800245c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800245e:	4b18      	ldr	r3, [pc, #96]	@ (80024c0 <MX_TIM11_Init+0x94>)
 8002460:	2200      	movs	r2, #0
 8002462:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002464:	4b16      	ldr	r3, [pc, #88]	@ (80024c0 <MX_TIM11_Init+0x94>)
 8002466:	2200      	movs	r2, #0
 8002468:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800246a:	4815      	ldr	r0, [pc, #84]	@ (80024c0 <MX_TIM11_Init+0x94>)
 800246c:	f004 fd16 	bl	8006e9c <HAL_TIM_Base_Init>
 8002470:	4603      	mov	r3, r0
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002476:	f7ff f9bb 	bl	80017f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800247a:	4811      	ldr	r0, [pc, #68]	@ (80024c0 <MX_TIM11_Init+0x94>)
 800247c:	f004 fdce 	bl	800701c <HAL_TIM_PWM_Init>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d001      	beq.n	800248a <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002486:	f7ff f9b3 	bl	80017f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800248a:	2360      	movs	r3, #96	@ 0x60
 800248c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800248e:	2300      	movs	r3, #0
 8002490:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002492:	2300      	movs	r3, #0
 8002494:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002496:	2300      	movs	r3, #0
 8002498:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800249a:	1d3b      	adds	r3, r7, #4
 800249c:	2200      	movs	r2, #0
 800249e:	4619      	mov	r1, r3
 80024a0:	4807      	ldr	r0, [pc, #28]	@ (80024c0 <MX_TIM11_Init+0x94>)
 80024a2:	f005 f8f7 	bl	8007694 <HAL_TIM_PWM_ConfigChannel>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 80024ac:	f7ff f9a0 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 80024b0:	4803      	ldr	r0, [pc, #12]	@ (80024c0 <MX_TIM11_Init+0x94>)
 80024b2:	f000 fa7d 	bl	80029b0 <HAL_TIM_MspPostInit>

}
 80024b6:	bf00      	nop
 80024b8:	3720      	adds	r7, #32
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	20000690 	.word	0x20000690
 80024c4:	40014800 	.word	0x40014800

080024c8 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b088      	sub	sp, #32
 80024cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	611a      	str	r2, [r3, #16]
 80024dc:	615a      	str	r2, [r3, #20]
 80024de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80024e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002560 <MX_TIM12_Init+0x98>)
 80024e2:	4a20      	ldr	r2, [pc, #128]	@ (8002564 <MX_TIM12_Init+0x9c>)
 80024e4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84-1;
 80024e6:	4b1e      	ldr	r3, [pc, #120]	@ (8002560 <MX_TIM12_Init+0x98>)
 80024e8:	2253      	movs	r2, #83	@ 0x53
 80024ea:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024ec:	4b1c      	ldr	r3, [pc, #112]	@ (8002560 <MX_TIM12_Init+0x98>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 80024f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002560 <MX_TIM12_Init+0x98>)
 80024f4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80024f8:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024fa:	4b19      	ldr	r3, [pc, #100]	@ (8002560 <MX_TIM12_Init+0x98>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002500:	4b17      	ldr	r3, [pc, #92]	@ (8002560 <MX_TIM12_Init+0x98>)
 8002502:	2200      	movs	r2, #0
 8002504:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8002506:	4816      	ldr	r0, [pc, #88]	@ (8002560 <MX_TIM12_Init+0x98>)
 8002508:	f004 fd88 	bl	800701c <HAL_TIM_PWM_Init>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8002512:	f7ff f96d 	bl	80017f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002516:	2360      	movs	r3, #96	@ 0x60
 8002518:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002526:	1d3b      	adds	r3, r7, #4
 8002528:	2200      	movs	r2, #0
 800252a:	4619      	mov	r1, r3
 800252c:	480c      	ldr	r0, [pc, #48]	@ (8002560 <MX_TIM12_Init+0x98>)
 800252e:	f005 f8b1 	bl	8007694 <HAL_TIM_PWM_ConfigChannel>
 8002532:	4603      	mov	r3, r0
 8002534:	2b00      	cmp	r3, #0
 8002536:	d001      	beq.n	800253c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8002538:	f7ff f95a 	bl	80017f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800253c:	1d3b      	adds	r3, r7, #4
 800253e:	2204      	movs	r2, #4
 8002540:	4619      	mov	r1, r3
 8002542:	4807      	ldr	r0, [pc, #28]	@ (8002560 <MX_TIM12_Init+0x98>)
 8002544:	f005 f8a6 	bl	8007694 <HAL_TIM_PWM_ConfigChannel>
 8002548:	4603      	mov	r3, r0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 800254e:	f7ff f94f 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8002552:	4803      	ldr	r0, [pc, #12]	@ (8002560 <MX_TIM12_Init+0x98>)
 8002554:	f000 fa2c 	bl	80029b0 <HAL_TIM_MspPostInit>

}
 8002558:	bf00      	nop
 800255a:	3720      	adds	r7, #32
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	200006d8 	.word	0x200006d8
 8002564:	40001800 	.word	0x40001800

08002568 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b088      	sub	sp, #32
 800256c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800256e:	1d3b      	adds	r3, r7, #4
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	611a      	str	r2, [r3, #16]
 800257c:	615a      	str	r2, [r3, #20]
 800257e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8002580:	4b1e      	ldr	r3, [pc, #120]	@ (80025fc <MX_TIM13_Init+0x94>)
 8002582:	4a1f      	ldr	r2, [pc, #124]	@ (8002600 <MX_TIM13_Init+0x98>)
 8002584:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 84-1;
 8002586:	4b1d      	ldr	r3, [pc, #116]	@ (80025fc <MX_TIM13_Init+0x94>)
 8002588:	2253      	movs	r2, #83	@ 0x53
 800258a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800258c:	4b1b      	ldr	r3, [pc, #108]	@ (80025fc <MX_TIM13_Init+0x94>)
 800258e:	2200      	movs	r2, #0
 8002590:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 8002592:	4b1a      	ldr	r3, [pc, #104]	@ (80025fc <MX_TIM13_Init+0x94>)
 8002594:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002598:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800259a:	4b18      	ldr	r3, [pc, #96]	@ (80025fc <MX_TIM13_Init+0x94>)
 800259c:	2200      	movs	r2, #0
 800259e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025a0:	4b16      	ldr	r3, [pc, #88]	@ (80025fc <MX_TIM13_Init+0x94>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80025a6:	4815      	ldr	r0, [pc, #84]	@ (80025fc <MX_TIM13_Init+0x94>)
 80025a8:	f004 fc78 	bl	8006e9c <HAL_TIM_Base_Init>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d001      	beq.n	80025b6 <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 80025b2:	f7ff f91d 	bl	80017f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80025b6:	4811      	ldr	r0, [pc, #68]	@ (80025fc <MX_TIM13_Init+0x94>)
 80025b8:	f004 fd30 	bl	800701c <HAL_TIM_PWM_Init>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 80025c2:	f7ff f915 	bl	80017f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025c6:	2360      	movs	r3, #96	@ 0x60
 80025c8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025d6:	1d3b      	adds	r3, r7, #4
 80025d8:	2200      	movs	r2, #0
 80025da:	4619      	mov	r1, r3
 80025dc:	4807      	ldr	r0, [pc, #28]	@ (80025fc <MX_TIM13_Init+0x94>)
 80025de:	f005 f859 	bl	8007694 <HAL_TIM_PWM_ConfigChannel>
 80025e2:	4603      	mov	r3, r0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d001      	beq.n	80025ec <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80025e8:	f7ff f902 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80025ec:	4803      	ldr	r0, [pc, #12]	@ (80025fc <MX_TIM13_Init+0x94>)
 80025ee:	f000 f9df 	bl	80029b0 <HAL_TIM_MspPostInit>

}
 80025f2:	bf00      	nop
 80025f4:	3720      	adds	r7, #32
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	20000720 	.word	0x20000720
 8002600:	40001c00 	.word	0x40001c00

08002604 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b090      	sub	sp, #64	@ 0x40
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800260c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]
 8002614:	605a      	str	r2, [r3, #4]
 8002616:	609a      	str	r2, [r3, #8]
 8002618:	60da      	str	r2, [r3, #12]
 800261a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a74      	ldr	r2, [pc, #464]	@ (80027f4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d12d      	bne.n	8002682 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002626:	2300      	movs	r3, #0
 8002628:	62bb      	str	r3, [r7, #40]	@ 0x28
 800262a:	4b73      	ldr	r3, [pc, #460]	@ (80027f8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800262c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262e:	4a72      	ldr	r2, [pc, #456]	@ (80027f8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	6453      	str	r3, [r2, #68]	@ 0x44
 8002636:	4b70      	ldr	r3, [pc, #448]	@ (80027f8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002640:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002642:	2300      	movs	r3, #0
 8002644:	627b      	str	r3, [r7, #36]	@ 0x24
 8002646:	4b6c      	ldr	r3, [pc, #432]	@ (80027f8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264a:	4a6b      	ldr	r2, [pc, #428]	@ (80027f8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800264c:	f043 0310 	orr.w	r3, r3, #16
 8002650:	6313      	str	r3, [r2, #48]	@ 0x30
 8002652:	4b69      	ldr	r3, [pc, #420]	@ (80027f8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	f003 0310 	and.w	r3, r3, #16
 800265a:	627b      	str	r3, [r7, #36]	@ 0x24
 800265c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800265e:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002662:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002664:	2302      	movs	r3, #2
 8002666:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002668:	2300      	movs	r3, #0
 800266a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800266c:	2300      	movs	r3, #0
 800266e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002670:	2301      	movs	r3, #1
 8002672:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002674:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002678:	4619      	mov	r1, r3
 800267a:	4860      	ldr	r0, [pc, #384]	@ (80027fc <HAL_TIM_Encoder_MspInit+0x1f8>)
 800267c:	f003 fc64 	bl	8005f48 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002680:	e0b4      	b.n	80027ec <HAL_TIM_Encoder_MspInit+0x1e8>
  else if(tim_encoderHandle->Instance==TIM2)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800268a:	d14b      	bne.n	8002724 <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800268c:	2300      	movs	r3, #0
 800268e:	623b      	str	r3, [r7, #32]
 8002690:	4b59      	ldr	r3, [pc, #356]	@ (80027f8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002694:	4a58      	ldr	r2, [pc, #352]	@ (80027f8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	6413      	str	r3, [r2, #64]	@ 0x40
 800269c:	4b56      	ldr	r3, [pc, #344]	@ (80027f8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800269e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a0:	f003 0301 	and.w	r3, r3, #1
 80026a4:	623b      	str	r3, [r7, #32]
 80026a6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a8:	2300      	movs	r3, #0
 80026aa:	61fb      	str	r3, [r7, #28]
 80026ac:	4b52      	ldr	r3, [pc, #328]	@ (80027f8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80026ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b0:	4a51      	ldr	r2, [pc, #324]	@ (80027f8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b8:	4b4f      	ldr	r3, [pc, #316]	@ (80027f8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80026ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	61fb      	str	r3, [r7, #28]
 80026c2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c4:	2300      	movs	r3, #0
 80026c6:	61bb      	str	r3, [r7, #24]
 80026c8:	4b4b      	ldr	r3, [pc, #300]	@ (80027f8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80026ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026cc:	4a4a      	ldr	r2, [pc, #296]	@ (80027f8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80026ce:	f043 0302 	orr.w	r3, r3, #2
 80026d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80026d4:	4b48      	ldr	r3, [pc, #288]	@ (80027f8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80026d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80026e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80026e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e6:	2302      	movs	r3, #2
 80026e8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ee:	2300      	movs	r3, #0
 80026f0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80026f2:	2301      	movs	r3, #1
 80026f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026f6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80026fa:	4619      	mov	r1, r3
 80026fc:	4840      	ldr	r0, [pc, #256]	@ (8002800 <HAL_TIM_Encoder_MspInit+0x1fc>)
 80026fe:	f003 fc23 	bl	8005f48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002702:	2308      	movs	r3, #8
 8002704:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002706:	2302      	movs	r3, #2
 8002708:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270a:	2300      	movs	r3, #0
 800270c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800270e:	2300      	movs	r3, #0
 8002710:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002712:	2301      	movs	r3, #1
 8002714:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002716:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800271a:	4619      	mov	r1, r3
 800271c:	4839      	ldr	r0, [pc, #228]	@ (8002804 <HAL_TIM_Encoder_MspInit+0x200>)
 800271e:	f003 fc13 	bl	8005f48 <HAL_GPIO_Init>
}
 8002722:	e063      	b.n	80027ec <HAL_TIM_Encoder_MspInit+0x1e8>
  else if(tim_encoderHandle->Instance==TIM3)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a37      	ldr	r2, [pc, #220]	@ (8002808 <HAL_TIM_Encoder_MspInit+0x204>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d12c      	bne.n	8002788 <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	4b31      	ldr	r3, [pc, #196]	@ (80027f8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002736:	4a30      	ldr	r2, [pc, #192]	@ (80027f8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002738:	f043 0302 	orr.w	r3, r3, #2
 800273c:	6413      	str	r3, [r2, #64]	@ 0x40
 800273e:	4b2e      	ldr	r3, [pc, #184]	@ (80027f8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	617b      	str	r3, [r7, #20]
 8002748:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800274a:	2300      	movs	r3, #0
 800274c:	613b      	str	r3, [r7, #16]
 800274e:	4b2a      	ldr	r3, [pc, #168]	@ (80027f8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002752:	4a29      	ldr	r2, [pc, #164]	@ (80027f8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002754:	f043 0302 	orr.w	r3, r3, #2
 8002758:	6313      	str	r3, [r2, #48]	@ 0x30
 800275a:	4b27      	ldr	r3, [pc, #156]	@ (80027f8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	613b      	str	r3, [r7, #16]
 8002764:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002766:	2330      	movs	r3, #48	@ 0x30
 8002768:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276a:	2302      	movs	r3, #2
 800276c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276e:	2300      	movs	r3, #0
 8002770:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002772:	2300      	movs	r3, #0
 8002774:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002776:	2302      	movs	r3, #2
 8002778:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800277a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800277e:	4619      	mov	r1, r3
 8002780:	4820      	ldr	r0, [pc, #128]	@ (8002804 <HAL_TIM_Encoder_MspInit+0x200>)
 8002782:	f003 fbe1 	bl	8005f48 <HAL_GPIO_Init>
}
 8002786:	e031      	b.n	80027ec <HAL_TIM_Encoder_MspInit+0x1e8>
  else if(tim_encoderHandle->Instance==TIM4)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a1f      	ldr	r2, [pc, #124]	@ (800280c <HAL_TIM_Encoder_MspInit+0x208>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d12c      	bne.n	80027ec <HAL_TIM_Encoder_MspInit+0x1e8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]
 8002796:	4b18      	ldr	r3, [pc, #96]	@ (80027f8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279a:	4a17      	ldr	r2, [pc, #92]	@ (80027f8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 800279c:	f043 0304 	orr.w	r3, r3, #4
 80027a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80027a2:	4b15      	ldr	r3, [pc, #84]	@ (80027f8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	f003 0304 	and.w	r3, r3, #4
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	60bb      	str	r3, [r7, #8]
 80027b2:	4b11      	ldr	r3, [pc, #68]	@ (80027f8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	4a10      	ldr	r2, [pc, #64]	@ (80027f8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80027b8:	f043 0308 	orr.w	r3, r3, #8
 80027bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027be:	4b0e      	ldr	r3, [pc, #56]	@ (80027f8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80027c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c2:	f003 0308 	and.w	r3, r3, #8
 80027c6:	60bb      	str	r3, [r7, #8]
 80027c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80027ca:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80027ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d0:	2302      	movs	r3, #2
 80027d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027d8:	2300      	movs	r3, #0
 80027da:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80027dc:	2302      	movs	r3, #2
 80027de:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80027e4:	4619      	mov	r1, r3
 80027e6:	480a      	ldr	r0, [pc, #40]	@ (8002810 <HAL_TIM_Encoder_MspInit+0x20c>)
 80027e8:	f003 fbae 	bl	8005f48 <HAL_GPIO_Init>
}
 80027ec:	bf00      	nop
 80027ee:	3740      	adds	r7, #64	@ 0x40
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40010000 	.word	0x40010000
 80027f8:	40023800 	.word	0x40023800
 80027fc:	40021000 	.word	0x40021000
 8002800:	40020000 	.word	0x40020000
 8002804:	40020400 	.word	0x40020400
 8002808:	40000400 	.word	0x40000400
 800280c:	40000800 	.word	0x40000800
 8002810:	40020c00 	.word	0x40020c00

08002814 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002814:	b480      	push	{r7}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM5)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a29      	ldr	r2, [pc, #164]	@ (80028c8 <HAL_TIM_PWM_MspInit+0xb4>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d10e      	bne.n	8002844 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	4b28      	ldr	r3, [pc, #160]	@ (80028cc <HAL_TIM_PWM_MspInit+0xb8>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	4a27      	ldr	r2, [pc, #156]	@ (80028cc <HAL_TIM_PWM_MspInit+0xb8>)
 8002830:	f043 0308 	orr.w	r3, r3, #8
 8002834:	6413      	str	r3, [r2, #64]	@ 0x40
 8002836:	4b25      	ldr	r3, [pc, #148]	@ (80028cc <HAL_TIM_PWM_MspInit+0xb8>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	617b      	str	r3, [r7, #20]
 8002840:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM12_CLK_ENABLE();
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8002842:	e03a      	b.n	80028ba <HAL_TIM_PWM_MspInit+0xa6>
  else if(tim_pwmHandle->Instance==TIM8)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a21      	ldr	r2, [pc, #132]	@ (80028d0 <HAL_TIM_PWM_MspInit+0xbc>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d10e      	bne.n	800286c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	4b1e      	ldr	r3, [pc, #120]	@ (80028cc <HAL_TIM_PWM_MspInit+0xb8>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002856:	4a1d      	ldr	r2, [pc, #116]	@ (80028cc <HAL_TIM_PWM_MspInit+0xb8>)
 8002858:	f043 0302 	orr.w	r3, r3, #2
 800285c:	6453      	str	r3, [r2, #68]	@ 0x44
 800285e:	4b1b      	ldr	r3, [pc, #108]	@ (80028cc <HAL_TIM_PWM_MspInit+0xb8>)
 8002860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	693b      	ldr	r3, [r7, #16]
}
 800286a:	e026      	b.n	80028ba <HAL_TIM_PWM_MspInit+0xa6>
  else if(tim_pwmHandle->Instance==TIM9)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a18      	ldr	r2, [pc, #96]	@ (80028d4 <HAL_TIM_PWM_MspInit+0xc0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d10e      	bne.n	8002894 <HAL_TIM_PWM_MspInit+0x80>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	60fb      	str	r3, [r7, #12]
 800287a:	4b14      	ldr	r3, [pc, #80]	@ (80028cc <HAL_TIM_PWM_MspInit+0xb8>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800287e:	4a13      	ldr	r2, [pc, #76]	@ (80028cc <HAL_TIM_PWM_MspInit+0xb8>)
 8002880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002884:	6453      	str	r3, [r2, #68]	@ 0x44
 8002886:	4b11      	ldr	r3, [pc, #68]	@ (80028cc <HAL_TIM_PWM_MspInit+0xb8>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800288a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800288e:	60fb      	str	r3, [r7, #12]
 8002890:	68fb      	ldr	r3, [r7, #12]
}
 8002892:	e012      	b.n	80028ba <HAL_TIM_PWM_MspInit+0xa6>
  else if(tim_pwmHandle->Instance==TIM12)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a0f      	ldr	r2, [pc, #60]	@ (80028d8 <HAL_TIM_PWM_MspInit+0xc4>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d10d      	bne.n	80028ba <HAL_TIM_PWM_MspInit+0xa6>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800289e:	2300      	movs	r3, #0
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	4b0a      	ldr	r3, [pc, #40]	@ (80028cc <HAL_TIM_PWM_MspInit+0xb8>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a6:	4a09      	ldr	r2, [pc, #36]	@ (80028cc <HAL_TIM_PWM_MspInit+0xb8>)
 80028a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80028ae:	4b07      	ldr	r3, [pc, #28]	@ (80028cc <HAL_TIM_PWM_MspInit+0xb8>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028b6:	60bb      	str	r3, [r7, #8]
 80028b8:	68bb      	ldr	r3, [r7, #8]
}
 80028ba:	bf00      	nop
 80028bc:	371c      	adds	r7, #28
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	40000c00 	.word	0x40000c00
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40010400 	.word	0x40010400
 80028d4:	40014000 	.word	0x40014000
 80028d8:	40001800 	.word	0x40001800

080028dc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a2c      	ldr	r2, [pc, #176]	@ (800299c <HAL_TIM_Base_MspInit+0xc0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d116      	bne.n	800291c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	617b      	str	r3, [r7, #20]
 80028f2:	4b2b      	ldr	r3, [pc, #172]	@ (80029a0 <HAL_TIM_Base_MspInit+0xc4>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	4a2a      	ldr	r2, [pc, #168]	@ (80029a0 <HAL_TIM_Base_MspInit+0xc4>)
 80028f8:	f043 0310 	orr.w	r3, r3, #16
 80028fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80028fe:	4b28      	ldr	r3, [pc, #160]	@ (80029a0 <HAL_TIM_Base_MspInit+0xc4>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002902:	f003 0310 	and.w	r3, r3, #16
 8002906:	617b      	str	r3, [r7, #20]
 8002908:	697b      	ldr	r3, [r7, #20]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800290a:	2200      	movs	r2, #0
 800290c:	2100      	movs	r1, #0
 800290e:	2036      	movs	r0, #54	@ 0x36
 8002910:	f001 fda1 	bl	8004456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002914:	2036      	movs	r0, #54	@ 0x36
 8002916:	f001 fdba 	bl	800448e <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM13_CLK_ENABLE();
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }
}
 800291a:	e03a      	b.n	8002992 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM10)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a20      	ldr	r2, [pc, #128]	@ (80029a4 <HAL_TIM_Base_MspInit+0xc8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d10e      	bne.n	8002944 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002926:	2300      	movs	r3, #0
 8002928:	613b      	str	r3, [r7, #16]
 800292a:	4b1d      	ldr	r3, [pc, #116]	@ (80029a0 <HAL_TIM_Base_MspInit+0xc4>)
 800292c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292e:	4a1c      	ldr	r2, [pc, #112]	@ (80029a0 <HAL_TIM_Base_MspInit+0xc4>)
 8002930:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002934:	6453      	str	r3, [r2, #68]	@ 0x44
 8002936:	4b1a      	ldr	r3, [pc, #104]	@ (80029a0 <HAL_TIM_Base_MspInit+0xc4>)
 8002938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800293e:	613b      	str	r3, [r7, #16]
 8002940:	693b      	ldr	r3, [r7, #16]
}
 8002942:	e026      	b.n	8002992 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM11)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a17      	ldr	r2, [pc, #92]	@ (80029a8 <HAL_TIM_Base_MspInit+0xcc>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d10e      	bne.n	800296c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM11_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	4b13      	ldr	r3, [pc, #76]	@ (80029a0 <HAL_TIM_Base_MspInit+0xc4>)
 8002954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002956:	4a12      	ldr	r2, [pc, #72]	@ (80029a0 <HAL_TIM_Base_MspInit+0xc4>)
 8002958:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800295c:	6453      	str	r3, [r2, #68]	@ 0x44
 800295e:	4b10      	ldr	r3, [pc, #64]	@ (80029a0 <HAL_TIM_Base_MspInit+0xc4>)
 8002960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002962:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]
}
 800296a:	e012      	b.n	8002992 <HAL_TIM_Base_MspInit+0xb6>
  else if(tim_baseHandle->Instance==TIM13)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a0e      	ldr	r2, [pc, #56]	@ (80029ac <HAL_TIM_Base_MspInit+0xd0>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d10d      	bne.n	8002992 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	4b09      	ldr	r3, [pc, #36]	@ (80029a0 <HAL_TIM_Base_MspInit+0xc4>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297e:	4a08      	ldr	r2, [pc, #32]	@ (80029a0 <HAL_TIM_Base_MspInit+0xc4>)
 8002980:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002984:	6413      	str	r3, [r2, #64]	@ 0x40
 8002986:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <HAL_TIM_Base_MspInit+0xc4>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800298a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	68bb      	ldr	r3, [r7, #8]
}
 8002992:	bf00      	nop
 8002994:	3718      	adds	r7, #24
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
 800299a:	bf00      	nop
 800299c:	40001000 	.word	0x40001000
 80029a0:	40023800 	.word	0x40023800
 80029a4:	40014400 	.word	0x40014400
 80029a8:	40014800 	.word	0x40014800
 80029ac:	40001c00 	.word	0x40001c00

080029b0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08e      	sub	sp, #56	@ 0x38
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM5)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a80      	ldr	r2, [pc, #512]	@ (8002bd0 <HAL_TIM_MspPostInit+0x220>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d11e      	bne.n	8002a10 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM5_MspPostInit 0 */

  /* USER CODE END TIM5_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	623b      	str	r3, [r7, #32]
 80029d6:	4b7f      	ldr	r3, [pc, #508]	@ (8002bd4 <HAL_TIM_MspPostInit+0x224>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029da:	4a7e      	ldr	r2, [pc, #504]	@ (8002bd4 <HAL_TIM_MspPostInit+0x224>)
 80029dc:	f043 0301 	orr.w	r3, r3, #1
 80029e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e2:	4b7c      	ldr	r3, [pc, #496]	@ (8002bd4 <HAL_TIM_MspPostInit+0x224>)
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	f003 0301 	and.w	r3, r3, #1
 80029ea:	623b      	str	r3, [r7, #32]
 80029ec:	6a3b      	ldr	r3, [r7, #32]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA3     ------> TIM5_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80029ee:	2309      	movs	r3, #9
 80029f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f2:	2302      	movs	r3, #2
 80029f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fa:	2300      	movs	r3, #0
 80029fc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80029fe:	2302      	movs	r3, #2
 8002a00:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a06:	4619      	mov	r1, r3
 8002a08:	4873      	ldr	r0, [pc, #460]	@ (8002bd8 <HAL_TIM_MspPostInit+0x228>)
 8002a0a:	f003 fa9d 	bl	8005f48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM13_MspPostInit 1 */

  /* USER CODE END TIM13_MspPostInit 1 */
  }

}
 8002a0e:	e0da      	b.n	8002bc6 <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM8)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a71      	ldr	r2, [pc, #452]	@ (8002bdc <HAL_TIM_MspPostInit+0x22c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d11f      	bne.n	8002a5a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	61fb      	str	r3, [r7, #28]
 8002a1e:	4b6d      	ldr	r3, [pc, #436]	@ (8002bd4 <HAL_TIM_MspPostInit+0x224>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a22:	4a6c      	ldr	r2, [pc, #432]	@ (8002bd4 <HAL_TIM_MspPostInit+0x224>)
 8002a24:	f043 0304 	orr.w	r3, r3, #4
 8002a28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a2a:	4b6a      	ldr	r3, [pc, #424]	@ (8002bd4 <HAL_TIM_MspPostInit+0x224>)
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2e:	f003 0304 	and.w	r3, r3, #4
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002a36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a44:	2300      	movs	r3, #0
 8002a46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a50:	4619      	mov	r1, r3
 8002a52:	4863      	ldr	r0, [pc, #396]	@ (8002be0 <HAL_TIM_MspPostInit+0x230>)
 8002a54:	f003 fa78 	bl	8005f48 <HAL_GPIO_Init>
}
 8002a58:	e0b5      	b.n	8002bc6 <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM9)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a61      	ldr	r2, [pc, #388]	@ (8002be4 <HAL_TIM_MspPostInit+0x234>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d11e      	bne.n	8002aa2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a64:	2300      	movs	r3, #0
 8002a66:	61bb      	str	r3, [r7, #24]
 8002a68:	4b5a      	ldr	r3, [pc, #360]	@ (8002bd4 <HAL_TIM_MspPostInit+0x224>)
 8002a6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6c:	4a59      	ldr	r2, [pc, #356]	@ (8002bd4 <HAL_TIM_MspPostInit+0x224>)
 8002a6e:	f043 0310 	orr.w	r3, r3, #16
 8002a72:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a74:	4b57      	ldr	r3, [pc, #348]	@ (8002bd4 <HAL_TIM_MspPostInit+0x224>)
 8002a76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a78:	f003 0310 	and.w	r3, r3, #16
 8002a7c:	61bb      	str	r3, [r7, #24]
 8002a7e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002a80:	2360      	movs	r3, #96	@ 0x60
 8002a82:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a84:	2302      	movs	r3, #2
 8002a86:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002a90:	2303      	movs	r3, #3
 8002a92:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4853      	ldr	r0, [pc, #332]	@ (8002be8 <HAL_TIM_MspPostInit+0x238>)
 8002a9c:	f003 fa54 	bl	8005f48 <HAL_GPIO_Init>
}
 8002aa0:	e091      	b.n	8002bc6 <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM10)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a51      	ldr	r2, [pc, #324]	@ (8002bec <HAL_TIM_MspPostInit+0x23c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d11f      	bne.n	8002aec <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	4b48      	ldr	r3, [pc, #288]	@ (8002bd4 <HAL_TIM_MspPostInit+0x224>)
 8002ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab4:	4a47      	ldr	r2, [pc, #284]	@ (8002bd4 <HAL_TIM_MspPostInit+0x224>)
 8002ab6:	f043 0302 	orr.w	r3, r3, #2
 8002aba:	6313      	str	r3, [r2, #48]	@ 0x30
 8002abc:	4b45      	ldr	r3, [pc, #276]	@ (8002bd4 <HAL_TIM_MspPostInit+0x224>)
 8002abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002ac8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002acc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002ada:	2303      	movs	r3, #3
 8002adc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ade:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4842      	ldr	r0, [pc, #264]	@ (8002bf0 <HAL_TIM_MspPostInit+0x240>)
 8002ae6:	f003 fa2f 	bl	8005f48 <HAL_GPIO_Init>
}
 8002aea:	e06c      	b.n	8002bc6 <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM11)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a40      	ldr	r2, [pc, #256]	@ (8002bf4 <HAL_TIM_MspPostInit+0x244>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d11f      	bne.n	8002b36 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	613b      	str	r3, [r7, #16]
 8002afa:	4b36      	ldr	r3, [pc, #216]	@ (8002bd4 <HAL_TIM_MspPostInit+0x224>)
 8002afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afe:	4a35      	ldr	r2, [pc, #212]	@ (8002bd4 <HAL_TIM_MspPostInit+0x224>)
 8002b00:	f043 0302 	orr.w	r3, r3, #2
 8002b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b06:	4b33      	ldr	r3, [pc, #204]	@ (8002bd4 <HAL_TIM_MspPostInit+0x224>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	613b      	str	r3, [r7, #16]
 8002b10:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b20:	2300      	movs	r3, #0
 8002b22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002b24:	2303      	movs	r3, #3
 8002b26:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	4830      	ldr	r0, [pc, #192]	@ (8002bf0 <HAL_TIM_MspPostInit+0x240>)
 8002b30:	f003 fa0a 	bl	8005f48 <HAL_GPIO_Init>
}
 8002b34:	e047      	b.n	8002bc6 <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM12)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a2f      	ldr	r2, [pc, #188]	@ (8002bf8 <HAL_TIM_MspPostInit+0x248>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d11f      	bne.n	8002b80 <HAL_TIM_MspPostInit+0x1d0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b40:	2300      	movs	r3, #0
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	4b23      	ldr	r3, [pc, #140]	@ (8002bd4 <HAL_TIM_MspPostInit+0x224>)
 8002b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b48:	4a22      	ldr	r2, [pc, #136]	@ (8002bd4 <HAL_TIM_MspPostInit+0x224>)
 8002b4a:	f043 0302 	orr.w	r3, r3, #2
 8002b4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b50:	4b20      	ldr	r3, [pc, #128]	@ (8002bd4 <HAL_TIM_MspPostInit+0x224>)
 8002b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	60fb      	str	r3, [r7, #12]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002b5c:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8002b60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b62:	2302      	movs	r3, #2
 8002b64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b66:	2300      	movs	r3, #0
 8002b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002b6e:	2309      	movs	r3, #9
 8002b70:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b76:	4619      	mov	r1, r3
 8002b78:	481d      	ldr	r0, [pc, #116]	@ (8002bf0 <HAL_TIM_MspPostInit+0x240>)
 8002b7a:	f003 f9e5 	bl	8005f48 <HAL_GPIO_Init>
}
 8002b7e:	e022      	b.n	8002bc6 <HAL_TIM_MspPostInit+0x216>
  else if(timHandle->Instance==TIM13)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a1d      	ldr	r2, [pc, #116]	@ (8002bfc <HAL_TIM_MspPostInit+0x24c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d11d      	bne.n	8002bc6 <HAL_TIM_MspPostInit+0x216>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	60bb      	str	r3, [r7, #8]
 8002b8e:	4b11      	ldr	r3, [pc, #68]	@ (8002bd4 <HAL_TIM_MspPostInit+0x224>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b92:	4a10      	ldr	r2, [pc, #64]	@ (8002bd4 <HAL_TIM_MspPostInit+0x224>)
 8002b94:	f043 0301 	orr.w	r3, r3, #1
 8002b98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002bd4 <HAL_TIM_MspPostInit+0x224>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	60bb      	str	r3, [r7, #8]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ba6:	2340      	movs	r3, #64	@ 0x40
 8002ba8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002baa:	2302      	movs	r3, #2
 8002bac:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8002bb6:	2309      	movs	r3, #9
 8002bb8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bbe:	4619      	mov	r1, r3
 8002bc0:	4805      	ldr	r0, [pc, #20]	@ (8002bd8 <HAL_TIM_MspPostInit+0x228>)
 8002bc2:	f003 f9c1 	bl	8005f48 <HAL_GPIO_Init>
}
 8002bc6:	bf00      	nop
 8002bc8:	3738      	adds	r7, #56	@ 0x38
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40000c00 	.word	0x40000c00
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	40020000 	.word	0x40020000
 8002bdc:	40010400 	.word	0x40010400
 8002be0:	40020800 	.word	0x40020800
 8002be4:	40014000 	.word	0x40014000
 8002be8:	40021000 	.word	0x40021000
 8002bec:	40014400 	.word	0x40014400
 8002bf0:	40020400 	.word	0x40020400
 8002bf4:	40014800 	.word	0x40014800
 8002bf8:	40001800 	.word	0x40001800
 8002bfc:	40001c00 	.word	0x40001c00

08002c00 <udpClient_connect>:


void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port);

void udpClient_connect(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
	err_t err;
	/* 1. Create a new UDP control block  */
	upcb = udp_new();
 8002c06:	f00e fc7b 	bl	8011500 <udp_new>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	4a67      	ldr	r2, [pc, #412]	@ (8002dac <udpClient_connect+0x1ac>)
 8002c0e:	6013      	str	r3, [r2, #0]
	/* Bind the block to module's IP and port */
	IP_ADDR4(&stm32IPaddr, stm32_addr.a, stm32_addr.b, stm32_addr.c, stm32_addr.d); //--- stm32
 8002c10:	4b67      	ldr	r3, [pc, #412]	@ (8002db0 <udpClient_connect+0x1b0>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	061a      	lsls	r2, r3, #24
 8002c16:	4b66      	ldr	r3, [pc, #408]	@ (8002db0 <udpClient_connect+0x1b0>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	041b      	lsls	r3, r3, #16
 8002c1c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002c20:	431a      	orrs	r2, r3
 8002c22:	4b63      	ldr	r3, [pc, #396]	@ (8002db0 <udpClient_connect+0x1b0>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	021b      	lsls	r3, r3, #8
 8002c28:	b29b      	uxth	r3, r3
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	4b60      	ldr	r3, [pc, #384]	@ (8002db0 <udpClient_connect+0x1b0>)
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	4313      	orrs	r3, r2
 8002c34:	061a      	lsls	r2, r3, #24
 8002c36:	4b5e      	ldr	r3, [pc, #376]	@ (8002db0 <udpClient_connect+0x1b0>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	0619      	lsls	r1, r3, #24
 8002c3c:	4b5c      	ldr	r3, [pc, #368]	@ (8002db0 <udpClient_connect+0x1b0>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	041b      	lsls	r3, r3, #16
 8002c42:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002c46:	4319      	orrs	r1, r3
 8002c48:	4b59      	ldr	r3, [pc, #356]	@ (8002db0 <udpClient_connect+0x1b0>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	021b      	lsls	r3, r3, #8
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	4319      	orrs	r1, r3
 8002c52:	4b57      	ldr	r3, [pc, #348]	@ (8002db0 <udpClient_connect+0x1b0>)
 8002c54:	68db      	ldr	r3, [r3, #12]
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	021b      	lsls	r3, r3, #8
 8002c5c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002c60:	431a      	orrs	r2, r3
 8002c62:	4b53      	ldr	r3, [pc, #332]	@ (8002db0 <udpClient_connect+0x1b0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	0619      	lsls	r1, r3, #24
 8002c68:	4b51      	ldr	r3, [pc, #324]	@ (8002db0 <udpClient_connect+0x1b0>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	041b      	lsls	r3, r3, #16
 8002c6e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002c72:	4319      	orrs	r1, r3
 8002c74:	4b4e      	ldr	r3, [pc, #312]	@ (8002db0 <udpClient_connect+0x1b0>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	021b      	lsls	r3, r3, #8
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	4319      	orrs	r1, r3
 8002c7e:	4b4c      	ldr	r3, [pc, #304]	@ (8002db0 <udpClient_connect+0x1b0>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	b2db      	uxtb	r3, r3
 8002c84:	430b      	orrs	r3, r1
 8002c86:	0a1b      	lsrs	r3, r3, #8
 8002c88:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002c8c:	431a      	orrs	r2, r3
 8002c8e:	4b48      	ldr	r3, [pc, #288]	@ (8002db0 <udpClient_connect+0x1b0>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	0619      	lsls	r1, r3, #24
 8002c94:	4b46      	ldr	r3, [pc, #280]	@ (8002db0 <udpClient_connect+0x1b0>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	041b      	lsls	r3, r3, #16
 8002c9a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002c9e:	4319      	orrs	r1, r3
 8002ca0:	4b43      	ldr	r3, [pc, #268]	@ (8002db0 <udpClient_connect+0x1b0>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	021b      	lsls	r3, r3, #8
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	4319      	orrs	r1, r3
 8002caa:	4b41      	ldr	r3, [pc, #260]	@ (8002db0 <udpClient_connect+0x1b0>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	430b      	orrs	r3, r1
 8002cb2:	0e1b      	lsrs	r3, r3, #24
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	4a3f      	ldr	r2, [pc, #252]	@ (8002db4 <udpClient_connect+0x1b4>)
 8002cb8:	6013      	str	r3, [r2, #0]
	udp_bind(upcb, &stm32IPaddr, stm32_addr.port);
 8002cba:	4b3c      	ldr	r3, [pc, #240]	@ (8002dac <udpClient_connect+0x1ac>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a3c      	ldr	r2, [pc, #240]	@ (8002db0 <udpClient_connect+0x1b0>)
 8002cc0:	6912      	ldr	r2, [r2, #16]
 8002cc2:	b292      	uxth	r2, r2
 8002cc4:	493b      	ldr	r1, [pc, #236]	@ (8002db4 <udpClient_connect+0x1b4>)
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f00e fb04 	bl	80112d4 <udp_bind>
	/* configure destination IP address and port */
	IP_ADDR4(&pcIPaddr, pc_addr.a, pc_addr.b, pc_addr.c, pc_addr.d); //--- NUC/MINI PC
 8002ccc:	4b3a      	ldr	r3, [pc, #232]	@ (8002db8 <udpClient_connect+0x1b8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	061a      	lsls	r2, r3, #24
 8002cd2:	4b39      	ldr	r3, [pc, #228]	@ (8002db8 <udpClient_connect+0x1b8>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	041b      	lsls	r3, r3, #16
 8002cd8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	4b36      	ldr	r3, [pc, #216]	@ (8002db8 <udpClient_connect+0x1b8>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	021b      	lsls	r3, r3, #8
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	4b33      	ldr	r3, [pc, #204]	@ (8002db8 <udpClient_connect+0x1b8>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	061a      	lsls	r2, r3, #24
 8002cf2:	4b31      	ldr	r3, [pc, #196]	@ (8002db8 <udpClient_connect+0x1b8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	0619      	lsls	r1, r3, #24
 8002cf8:	4b2f      	ldr	r3, [pc, #188]	@ (8002db8 <udpClient_connect+0x1b8>)
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	041b      	lsls	r3, r3, #16
 8002cfe:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002d02:	4319      	orrs	r1, r3
 8002d04:	4b2c      	ldr	r3, [pc, #176]	@ (8002db8 <udpClient_connect+0x1b8>)
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	021b      	lsls	r3, r3, #8
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	4319      	orrs	r1, r3
 8002d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8002db8 <udpClient_connect+0x1b8>)
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	430b      	orrs	r3, r1
 8002d16:	021b      	lsls	r3, r3, #8
 8002d18:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	4b26      	ldr	r3, [pc, #152]	@ (8002db8 <udpClient_connect+0x1b8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	0619      	lsls	r1, r3, #24
 8002d24:	4b24      	ldr	r3, [pc, #144]	@ (8002db8 <udpClient_connect+0x1b8>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	041b      	lsls	r3, r3, #16
 8002d2a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002d2e:	4319      	orrs	r1, r3
 8002d30:	4b21      	ldr	r3, [pc, #132]	@ (8002db8 <udpClient_connect+0x1b8>)
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	021b      	lsls	r3, r3, #8
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	4319      	orrs	r1, r3
 8002d3a:	4b1f      	ldr	r3, [pc, #124]	@ (8002db8 <udpClient_connect+0x1b8>)
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	430b      	orrs	r3, r1
 8002d42:	0a1b      	lsrs	r3, r3, #8
 8002d44:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8002d48:	431a      	orrs	r2, r3
 8002d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8002db8 <udpClient_connect+0x1b8>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	0619      	lsls	r1, r3, #24
 8002d50:	4b19      	ldr	r3, [pc, #100]	@ (8002db8 <udpClient_connect+0x1b8>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	041b      	lsls	r3, r3, #16
 8002d56:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8002d5a:	4319      	orrs	r1, r3
 8002d5c:	4b16      	ldr	r3, [pc, #88]	@ (8002db8 <udpClient_connect+0x1b8>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	4319      	orrs	r1, r3
 8002d66:	4b14      	ldr	r3, [pc, #80]	@ (8002db8 <udpClient_connect+0x1b8>)
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	430b      	orrs	r3, r1
 8002d6e:	0e1b      	lsrs	r3, r3, #24
 8002d70:	4313      	orrs	r3, r2
 8002d72:	4a12      	ldr	r2, [pc, #72]	@ (8002dbc <udpClient_connect+0x1bc>)
 8002d74:	6013      	str	r3, [r2, #0]
	err= udp_connect(upcb, &pcIPaddr, pc_addr.port);
 8002d76:	4b0d      	ldr	r3, [pc, #52]	@ (8002dac <udpClient_connect+0x1ac>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a0f      	ldr	r2, [pc, #60]	@ (8002db8 <udpClient_connect+0x1b8>)
 8002d7c:	6912      	ldr	r2, [r2, #16]
 8002d7e:	b292      	uxth	r2, r2
 8002d80:	490e      	ldr	r1, [pc, #56]	@ (8002dbc <udpClient_connect+0x1bc>)
 8002d82:	4618      	mov	r0, r3
 8002d84:	f00e fb2e 	bl	80113e4 <udp_connect>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	71fb      	strb	r3, [r7, #7]

	if (err == ERR_OK)
 8002d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d106      	bne.n	8002da2 <udpClient_connect+0x1a2>
	{
		udp_recv(upcb, udp_receive_callback, NULL);
 8002d94:	4b05      	ldr	r3, [pc, #20]	@ (8002dac <udpClient_connect+0x1ac>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	4909      	ldr	r1, [pc, #36]	@ (8002dc0 <udpClient_connect+0x1c0>)
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f00e fb8f 	bl	80114c0 <udp_recv>
	}
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20000768 	.word	0x20000768
 8002db0:	2000003c 	.word	0x2000003c
 8002db4:	2000076c 	.word	0x2000076c
 8002db8:	20000050 	.word	0x20000050
 8002dbc:	20000770 	.word	0x20000770
 8002dc0:	08002dc5 	.word	0x08002dc5

08002dc4 <udp_receive_callback>:
  }
}


void udp_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	60b9      	str	r1, [r7, #8]
 8002dce:	607a      	str	r2, [r7, #4]
 8002dd0:	603b      	str	r3, [r7, #0]
	/* Copy the data from the pbuf */
	memcpy(udp_rx_buffer, p->payload, p->len);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6859      	ldr	r1, [r3, #4]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	895b      	ldrh	r3, [r3, #10]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	4807      	ldr	r0, [pc, #28]	@ (8002dfc <udp_receive_callback+0x38>)
 8002dde:	f011 f878 	bl	8013ed2 <memcpy>

	memcpy(&udp_rx, udp_rx_buffer +  3, sizeof(udpRx_t));
 8002de2:	4b07      	ldr	r3, [pc, #28]	@ (8002e00 <udp_receive_callback+0x3c>)
 8002de4:	220a      	movs	r2, #10
 8002de6:	4619      	mov	r1, r3
 8002de8:	4806      	ldr	r0, [pc, #24]	@ (8002e04 <udp_receive_callback+0x40>)
 8002dea:	f011 f872 	bl	8013ed2 <memcpy>

	pbuf_free(p);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f008 fb7e 	bl	800b4f0 <pbuf_free>
}
 8002df4:	bf00      	nop
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	200007c8 	.word	0x200007c8
 8002e00:	200007cb 	.word	0x200007cb
 8002e04:	200007bc 	.word	0x200007bc

08002e08 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002e0c:	4b11      	ldr	r3, [pc, #68]	@ (8002e54 <MX_UART4_Init+0x4c>)
 8002e0e:	4a12      	ldr	r2, [pc, #72]	@ (8002e58 <MX_UART4_Init+0x50>)
 8002e10:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8002e12:	4b10      	ldr	r3, [pc, #64]	@ (8002e54 <MX_UART4_Init+0x4c>)
 8002e14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e18:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002e1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e54 <MX_UART4_Init+0x4c>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002e20:	4b0c      	ldr	r3, [pc, #48]	@ (8002e54 <MX_UART4_Init+0x4c>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002e26:	4b0b      	ldr	r3, [pc, #44]	@ (8002e54 <MX_UART4_Init+0x4c>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002e2c:	4b09      	ldr	r3, [pc, #36]	@ (8002e54 <MX_UART4_Init+0x4c>)
 8002e2e:	220c      	movs	r2, #12
 8002e30:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e32:	4b08      	ldr	r3, [pc, #32]	@ (8002e54 <MX_UART4_Init+0x4c>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e38:	4b06      	ldr	r3, [pc, #24]	@ (8002e54 <MX_UART4_Init+0x4c>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002e3e:	4805      	ldr	r0, [pc, #20]	@ (8002e54 <MX_UART4_Init+0x4c>)
 8002e40:	f005 f870 	bl	8007f24 <HAL_UART_Init>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002e4a:	f7fe fcd1 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002e4e:	bf00      	nop
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	2000081c 	.word	0x2000081c
 8002e58:	40004c00 	.word	0x40004c00

08002e5c <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002e60:	4b11      	ldr	r3, [pc, #68]	@ (8002ea8 <MX_UART5_Init+0x4c>)
 8002e62:	4a12      	ldr	r2, [pc, #72]	@ (8002eac <MX_UART5_Init+0x50>)
 8002e64:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8002e66:	4b10      	ldr	r3, [pc, #64]	@ (8002ea8 <MX_UART5_Init+0x4c>)
 8002e68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002e6c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002e6e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ea8 <MX_UART5_Init+0x4c>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002e74:	4b0c      	ldr	r3, [pc, #48]	@ (8002ea8 <MX_UART5_Init+0x4c>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002e7a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea8 <MX_UART5_Init+0x4c>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002e80:	4b09      	ldr	r3, [pc, #36]	@ (8002ea8 <MX_UART5_Init+0x4c>)
 8002e82:	220c      	movs	r2, #12
 8002e84:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e86:	4b08      	ldr	r3, [pc, #32]	@ (8002ea8 <MX_UART5_Init+0x4c>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e8c:	4b06      	ldr	r3, [pc, #24]	@ (8002ea8 <MX_UART5_Init+0x4c>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002e92:	4805      	ldr	r0, [pc, #20]	@ (8002ea8 <MX_UART5_Init+0x4c>)
 8002e94:	f005 f846 	bl	8007f24 <HAL_UART_Init>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002e9e:	f7fe fca7 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000864 	.word	0x20000864
 8002eac:	40005000 	.word	0x40005000

08002eb0 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002eb4:	4b11      	ldr	r3, [pc, #68]	@ (8002efc <MX_USART1_UART_Init+0x4c>)
 8002eb6:	4a12      	ldr	r2, [pc, #72]	@ (8002f00 <MX_USART1_UART_Init+0x50>)
 8002eb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002eba:	4b10      	ldr	r3, [pc, #64]	@ (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ebc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ec0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8002efc <MX_USART1_UART_Init+0x4c>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002ece:	4b0b      	ldr	r3, [pc, #44]	@ (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002ed4:	4b09      	ldr	r3, [pc, #36]	@ (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ed6:	220c      	movs	r2, #12
 8002ed8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eda:	4b08      	ldr	r3, [pc, #32]	@ (8002efc <MX_USART1_UART_Init+0x4c>)
 8002edc:	2200      	movs	r2, #0
 8002ede:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ee0:	4b06      	ldr	r3, [pc, #24]	@ (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002ee6:	4805      	ldr	r0, [pc, #20]	@ (8002efc <MX_USART1_UART_Init+0x4c>)
 8002ee8:	f005 f81c 	bl	8007f24 <HAL_UART_Init>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d001      	beq.n	8002ef6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002ef2:	f7fe fc7d 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	200008ac 	.word	0x200008ac
 8002f00:	40011000 	.word	0x40011000

08002f04 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002f08:	4b11      	ldr	r3, [pc, #68]	@ (8002f50 <MX_USART2_UART_Init+0x4c>)
 8002f0a:	4a12      	ldr	r2, [pc, #72]	@ (8002f54 <MX_USART2_UART_Init+0x50>)
 8002f0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002f0e:	4b10      	ldr	r3, [pc, #64]	@ (8002f50 <MX_USART2_UART_Init+0x4c>)
 8002f10:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f16:	4b0e      	ldr	r3, [pc, #56]	@ (8002f50 <MX_USART2_UART_Init+0x4c>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002f1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f50 <MX_USART2_UART_Init+0x4c>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002f22:	4b0b      	ldr	r3, [pc, #44]	@ (8002f50 <MX_USART2_UART_Init+0x4c>)
 8002f24:	2200      	movs	r2, #0
 8002f26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002f28:	4b09      	ldr	r3, [pc, #36]	@ (8002f50 <MX_USART2_UART_Init+0x4c>)
 8002f2a:	220c      	movs	r2, #12
 8002f2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f2e:	4b08      	ldr	r3, [pc, #32]	@ (8002f50 <MX_USART2_UART_Init+0x4c>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f34:	4b06      	ldr	r3, [pc, #24]	@ (8002f50 <MX_USART2_UART_Init+0x4c>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002f3a:	4805      	ldr	r0, [pc, #20]	@ (8002f50 <MX_USART2_UART_Init+0x4c>)
 8002f3c:	f004 fff2 	bl	8007f24 <HAL_UART_Init>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002f46:	f7fe fc53 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	200008f4 	.word	0x200008f4
 8002f54:	40004400 	.word	0x40004400

08002f58 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002f5c:	4b11      	ldr	r3, [pc, #68]	@ (8002fa4 <MX_USART3_UART_Init+0x4c>)
 8002f5e:	4a12      	ldr	r2, [pc, #72]	@ (8002fa8 <MX_USART3_UART_Init+0x50>)
 8002f60:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002f62:	4b10      	ldr	r3, [pc, #64]	@ (8002fa4 <MX_USART3_UART_Init+0x4c>)
 8002f64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002f68:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8002fa4 <MX_USART3_UART_Init+0x4c>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002f70:	4b0c      	ldr	r3, [pc, #48]	@ (8002fa4 <MX_USART3_UART_Init+0x4c>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002f76:	4b0b      	ldr	r3, [pc, #44]	@ (8002fa4 <MX_USART3_UART_Init+0x4c>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002f7c:	4b09      	ldr	r3, [pc, #36]	@ (8002fa4 <MX_USART3_UART_Init+0x4c>)
 8002f7e:	220c      	movs	r2, #12
 8002f80:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f82:	4b08      	ldr	r3, [pc, #32]	@ (8002fa4 <MX_USART3_UART_Init+0x4c>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f88:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <MX_USART3_UART_Init+0x4c>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002f8e:	4805      	ldr	r0, [pc, #20]	@ (8002fa4 <MX_USART3_UART_Init+0x4c>)
 8002f90:	f004 ffc8 	bl	8007f24 <HAL_UART_Init>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002f9a:	f7fe fc29 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	2000093c 	.word	0x2000093c
 8002fa8:	40004800 	.word	0x40004800

08002fac <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002fb0:	4b11      	ldr	r3, [pc, #68]	@ (8002ff8 <MX_USART6_UART_Init+0x4c>)
 8002fb2:	4a12      	ldr	r2, [pc, #72]	@ (8002ffc <MX_USART6_UART_Init+0x50>)
 8002fb4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8002fb6:	4b10      	ldr	r3, [pc, #64]	@ (8002ff8 <MX_USART6_UART_Init+0x4c>)
 8002fb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002fbc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8002ff8 <MX_USART6_UART_Init+0x4c>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002ff8 <MX_USART6_UART_Init+0x4c>)
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002fca:	4b0b      	ldr	r3, [pc, #44]	@ (8002ff8 <MX_USART6_UART_Init+0x4c>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002fd0:	4b09      	ldr	r3, [pc, #36]	@ (8002ff8 <MX_USART6_UART_Init+0x4c>)
 8002fd2:	220c      	movs	r2, #12
 8002fd4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fd6:	4b08      	ldr	r3, [pc, #32]	@ (8002ff8 <MX_USART6_UART_Init+0x4c>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fdc:	4b06      	ldr	r3, [pc, #24]	@ (8002ff8 <MX_USART6_UART_Init+0x4c>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002fe2:	4805      	ldr	r0, [pc, #20]	@ (8002ff8 <MX_USART6_UART_Init+0x4c>)
 8002fe4:	f004 ff9e 	bl	8007f24 <HAL_UART_Init>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002fee:	f7fe fbff 	bl	80017f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000984 	.word	0x20000984
 8002ffc:	40011400 	.word	0x40011400

08003000 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b096      	sub	sp, #88	@ 0x58
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003008:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	605a      	str	r2, [r3, #4]
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	60da      	str	r2, [r3, #12]
 8003016:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a4a      	ldr	r2, [pc, #296]	@ (8003148 <HAL_UART_MspInit+0x148>)
 800301e:	4293      	cmp	r3, r2
 8003020:	f040 80a0 	bne.w	8003164 <HAL_UART_MspInit+0x164>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003024:	2300      	movs	r3, #0
 8003026:	643b      	str	r3, [r7, #64]	@ 0x40
 8003028:	4b48      	ldr	r3, [pc, #288]	@ (800314c <HAL_UART_MspInit+0x14c>)
 800302a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302c:	4a47      	ldr	r2, [pc, #284]	@ (800314c <HAL_UART_MspInit+0x14c>)
 800302e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003032:	6413      	str	r3, [r2, #64]	@ 0x40
 8003034:	4b45      	ldr	r3, [pc, #276]	@ (800314c <HAL_UART_MspInit+0x14c>)
 8003036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003038:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800303c:	643b      	str	r3, [r7, #64]	@ 0x40
 800303e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003040:	2300      	movs	r3, #0
 8003042:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003044:	4b41      	ldr	r3, [pc, #260]	@ (800314c <HAL_UART_MspInit+0x14c>)
 8003046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003048:	4a40      	ldr	r2, [pc, #256]	@ (800314c <HAL_UART_MspInit+0x14c>)
 800304a:	f043 0304 	orr.w	r3, r3, #4
 800304e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003050:	4b3e      	ldr	r3, [pc, #248]	@ (800314c <HAL_UART_MspInit+0x14c>)
 8003052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800305a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800305c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003060:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003062:	2302      	movs	r3, #2
 8003064:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003066:	2300      	movs	r3, #0
 8003068:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306a:	2303      	movs	r3, #3
 800306c:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800306e:	2308      	movs	r3, #8
 8003070:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003072:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003076:	4619      	mov	r1, r3
 8003078:	4835      	ldr	r0, [pc, #212]	@ (8003150 <HAL_UART_MspInit+0x150>)
 800307a:	f002 ff65 	bl	8005f48 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800307e:	4b35      	ldr	r3, [pc, #212]	@ (8003154 <HAL_UART_MspInit+0x154>)
 8003080:	4a35      	ldr	r2, [pc, #212]	@ (8003158 <HAL_UART_MspInit+0x158>)
 8003082:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8003084:	4b33      	ldr	r3, [pc, #204]	@ (8003154 <HAL_UART_MspInit+0x154>)
 8003086:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800308a:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800308c:	4b31      	ldr	r3, [pc, #196]	@ (8003154 <HAL_UART_MspInit+0x154>)
 800308e:	2200      	movs	r2, #0
 8003090:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003092:	4b30      	ldr	r3, [pc, #192]	@ (8003154 <HAL_UART_MspInit+0x154>)
 8003094:	2200      	movs	r2, #0
 8003096:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003098:	4b2e      	ldr	r3, [pc, #184]	@ (8003154 <HAL_UART_MspInit+0x154>)
 800309a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800309e:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030a0:	4b2c      	ldr	r3, [pc, #176]	@ (8003154 <HAL_UART_MspInit+0x154>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030a6:	4b2b      	ldr	r3, [pc, #172]	@ (8003154 <HAL_UART_MspInit+0x154>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80030ac:	4b29      	ldr	r3, [pc, #164]	@ (8003154 <HAL_UART_MspInit+0x154>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030b2:	4b28      	ldr	r3, [pc, #160]	@ (8003154 <HAL_UART_MspInit+0x154>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030b8:	4b26      	ldr	r3, [pc, #152]	@ (8003154 <HAL_UART_MspInit+0x154>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80030be:	4825      	ldr	r0, [pc, #148]	@ (8003154 <HAL_UART_MspInit+0x154>)
 80030c0:	f001 fa00 	bl	80044c4 <HAL_DMA_Init>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80030ca:	f7fe fb91 	bl	80017f0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a20      	ldr	r2, [pc, #128]	@ (8003154 <HAL_UART_MspInit+0x154>)
 80030d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80030d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003154 <HAL_UART_MspInit+0x154>)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80030da:	4b20      	ldr	r3, [pc, #128]	@ (800315c <HAL_UART_MspInit+0x15c>)
 80030dc:	4a20      	ldr	r2, [pc, #128]	@ (8003160 <HAL_UART_MspInit+0x160>)
 80030de:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80030e0:	4b1e      	ldr	r3, [pc, #120]	@ (800315c <HAL_UART_MspInit+0x15c>)
 80030e2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80030e6:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80030e8:	4b1c      	ldr	r3, [pc, #112]	@ (800315c <HAL_UART_MspInit+0x15c>)
 80030ea:	2240      	movs	r2, #64	@ 0x40
 80030ec:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030ee:	4b1b      	ldr	r3, [pc, #108]	@ (800315c <HAL_UART_MspInit+0x15c>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80030f4:	4b19      	ldr	r3, [pc, #100]	@ (800315c <HAL_UART_MspInit+0x15c>)
 80030f6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030fa:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030fc:	4b17      	ldr	r3, [pc, #92]	@ (800315c <HAL_UART_MspInit+0x15c>)
 80030fe:	2200      	movs	r2, #0
 8003100:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003102:	4b16      	ldr	r3, [pc, #88]	@ (800315c <HAL_UART_MspInit+0x15c>)
 8003104:	2200      	movs	r2, #0
 8003106:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8003108:	4b14      	ldr	r3, [pc, #80]	@ (800315c <HAL_UART_MspInit+0x15c>)
 800310a:	2200      	movs	r2, #0
 800310c:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800310e:	4b13      	ldr	r3, [pc, #76]	@ (800315c <HAL_UART_MspInit+0x15c>)
 8003110:	2200      	movs	r2, #0
 8003112:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003114:	4b11      	ldr	r3, [pc, #68]	@ (800315c <HAL_UART_MspInit+0x15c>)
 8003116:	2200      	movs	r2, #0
 8003118:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 800311a:	4810      	ldr	r0, [pc, #64]	@ (800315c <HAL_UART_MspInit+0x15c>)
 800311c:	f001 f9d2 	bl	80044c4 <HAL_DMA_Init>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8003126:	f7fe fb63 	bl	80017f0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a0b      	ldr	r2, [pc, #44]	@ (800315c <HAL_UART_MspInit+0x15c>)
 800312e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003130:	4a0a      	ldr	r2, [pc, #40]	@ (800315c <HAL_UART_MspInit+0x15c>)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003136:	2200      	movs	r2, #0
 8003138:	2100      	movs	r1, #0
 800313a:	2034      	movs	r0, #52	@ 0x34
 800313c:	f001 f98b 	bl	8004456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003140:	2034      	movs	r0, #52	@ 0x34
 8003142:	f001 f9a4 	bl	800448e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8003146:	e375      	b.n	8003834 <HAL_UART_MspInit+0x834>
 8003148:	40004c00 	.word	0x40004c00
 800314c:	40023800 	.word	0x40023800
 8003150:	40020800 	.word	0x40020800
 8003154:	200009cc 	.word	0x200009cc
 8003158:	40026040 	.word	0x40026040
 800315c:	20000a2c 	.word	0x20000a2c
 8003160:	40026070 	.word	0x40026070
  else if(uartHandle->Instance==UART5)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a5a      	ldr	r2, [pc, #360]	@ (80032d4 <HAL_UART_MspInit+0x2d4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	f040 80c2 	bne.w	80032f4 <HAL_UART_MspInit+0x2f4>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003170:	2300      	movs	r3, #0
 8003172:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003174:	4b58      	ldr	r3, [pc, #352]	@ (80032d8 <HAL_UART_MspInit+0x2d8>)
 8003176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003178:	4a57      	ldr	r2, [pc, #348]	@ (80032d8 <HAL_UART_MspInit+0x2d8>)
 800317a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800317e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003180:	4b55      	ldr	r3, [pc, #340]	@ (80032d8 <HAL_UART_MspInit+0x2d8>)
 8003182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003184:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003188:	63bb      	str	r3, [r7, #56]	@ 0x38
 800318a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800318c:	2300      	movs	r3, #0
 800318e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003190:	4b51      	ldr	r3, [pc, #324]	@ (80032d8 <HAL_UART_MspInit+0x2d8>)
 8003192:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003194:	4a50      	ldr	r2, [pc, #320]	@ (80032d8 <HAL_UART_MspInit+0x2d8>)
 8003196:	f043 0304 	orr.w	r3, r3, #4
 800319a:	6313      	str	r3, [r2, #48]	@ 0x30
 800319c:	4b4e      	ldr	r3, [pc, #312]	@ (80032d8 <HAL_UART_MspInit+0x2d8>)
 800319e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80031a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031a8:	2300      	movs	r3, #0
 80031aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80031ac:	4b4a      	ldr	r3, [pc, #296]	@ (80032d8 <HAL_UART_MspInit+0x2d8>)
 80031ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031b0:	4a49      	ldr	r2, [pc, #292]	@ (80032d8 <HAL_UART_MspInit+0x2d8>)
 80031b2:	f043 0308 	orr.w	r3, r3, #8
 80031b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80031b8:	4b47      	ldr	r3, [pc, #284]	@ (80032d8 <HAL_UART_MspInit+0x2d8>)
 80031ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80031c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80031c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80031c8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ca:	2302      	movs	r3, #2
 80031cc:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ce:	2300      	movs	r3, #0
 80031d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d2:	2303      	movs	r3, #3
 80031d4:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80031d6:	2308      	movs	r3, #8
 80031d8:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031da:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80031de:	4619      	mov	r1, r3
 80031e0:	483e      	ldr	r0, [pc, #248]	@ (80032dc <HAL_UART_MspInit+0x2dc>)
 80031e2:	f002 feb1 	bl	8005f48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80031e6:	2304      	movs	r3, #4
 80031e8:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ea:	2302      	movs	r3, #2
 80031ec:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f2:	2303      	movs	r3, #3
 80031f4:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80031f6:	2308      	movs	r3, #8
 80031f8:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80031fa:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80031fe:	4619      	mov	r1, r3
 8003200:	4837      	ldr	r0, [pc, #220]	@ (80032e0 <HAL_UART_MspInit+0x2e0>)
 8003202:	f002 fea1 	bl	8005f48 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8003206:	4b37      	ldr	r3, [pc, #220]	@ (80032e4 <HAL_UART_MspInit+0x2e4>)
 8003208:	4a37      	ldr	r2, [pc, #220]	@ (80032e8 <HAL_UART_MspInit+0x2e8>)
 800320a:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800320c:	4b35      	ldr	r3, [pc, #212]	@ (80032e4 <HAL_UART_MspInit+0x2e4>)
 800320e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003212:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003214:	4b33      	ldr	r3, [pc, #204]	@ (80032e4 <HAL_UART_MspInit+0x2e4>)
 8003216:	2200      	movs	r2, #0
 8003218:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800321a:	4b32      	ldr	r3, [pc, #200]	@ (80032e4 <HAL_UART_MspInit+0x2e4>)
 800321c:	2200      	movs	r2, #0
 800321e:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003220:	4b30      	ldr	r3, [pc, #192]	@ (80032e4 <HAL_UART_MspInit+0x2e4>)
 8003222:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003226:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003228:	4b2e      	ldr	r3, [pc, #184]	@ (80032e4 <HAL_UART_MspInit+0x2e4>)
 800322a:	2200      	movs	r2, #0
 800322c:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800322e:	4b2d      	ldr	r3, [pc, #180]	@ (80032e4 <HAL_UART_MspInit+0x2e4>)
 8003230:	2200      	movs	r2, #0
 8003232:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8003234:	4b2b      	ldr	r3, [pc, #172]	@ (80032e4 <HAL_UART_MspInit+0x2e4>)
 8003236:	2200      	movs	r2, #0
 8003238:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800323a:	4b2a      	ldr	r3, [pc, #168]	@ (80032e4 <HAL_UART_MspInit+0x2e4>)
 800323c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003240:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003242:	4b28      	ldr	r3, [pc, #160]	@ (80032e4 <HAL_UART_MspInit+0x2e4>)
 8003244:	2200      	movs	r2, #0
 8003246:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8003248:	4826      	ldr	r0, [pc, #152]	@ (80032e4 <HAL_UART_MspInit+0x2e4>)
 800324a:	f001 f93b 	bl	80044c4 <HAL_DMA_Init>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <HAL_UART_MspInit+0x258>
      Error_Handler();
 8003254:	f7fe facc 	bl	80017f0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a22      	ldr	r2, [pc, #136]	@ (80032e4 <HAL_UART_MspInit+0x2e4>)
 800325c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800325e:	4a21      	ldr	r2, [pc, #132]	@ (80032e4 <HAL_UART_MspInit+0x2e4>)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8003264:	4b21      	ldr	r3, [pc, #132]	@ (80032ec <HAL_UART_MspInit+0x2ec>)
 8003266:	4a22      	ldr	r2, [pc, #136]	@ (80032f0 <HAL_UART_MspInit+0x2f0>)
 8003268:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 800326a:	4b20      	ldr	r3, [pc, #128]	@ (80032ec <HAL_UART_MspInit+0x2ec>)
 800326c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003270:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003272:	4b1e      	ldr	r3, [pc, #120]	@ (80032ec <HAL_UART_MspInit+0x2ec>)
 8003274:	2240      	movs	r2, #64	@ 0x40
 8003276:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003278:	4b1c      	ldr	r3, [pc, #112]	@ (80032ec <HAL_UART_MspInit+0x2ec>)
 800327a:	2200      	movs	r2, #0
 800327c:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800327e:	4b1b      	ldr	r3, [pc, #108]	@ (80032ec <HAL_UART_MspInit+0x2ec>)
 8003280:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003284:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003286:	4b19      	ldr	r3, [pc, #100]	@ (80032ec <HAL_UART_MspInit+0x2ec>)
 8003288:	2200      	movs	r2, #0
 800328a:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800328c:	4b17      	ldr	r3, [pc, #92]	@ (80032ec <HAL_UART_MspInit+0x2ec>)
 800328e:	2200      	movs	r2, #0
 8003290:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8003292:	4b16      	ldr	r3, [pc, #88]	@ (80032ec <HAL_UART_MspInit+0x2ec>)
 8003294:	2200      	movs	r2, #0
 8003296:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8003298:	4b14      	ldr	r3, [pc, #80]	@ (80032ec <HAL_UART_MspInit+0x2ec>)
 800329a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800329e:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032a0:	4b12      	ldr	r3, [pc, #72]	@ (80032ec <HAL_UART_MspInit+0x2ec>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 80032a6:	4811      	ldr	r0, [pc, #68]	@ (80032ec <HAL_UART_MspInit+0x2ec>)
 80032a8:	f001 f90c 	bl	80044c4 <HAL_DMA_Init>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <HAL_UART_MspInit+0x2b6>
      Error_Handler();
 80032b2:	f7fe fa9d 	bl	80017f0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a0c      	ldr	r2, [pc, #48]	@ (80032ec <HAL_UART_MspInit+0x2ec>)
 80032ba:	639a      	str	r2, [r3, #56]	@ 0x38
 80032bc:	4a0b      	ldr	r2, [pc, #44]	@ (80032ec <HAL_UART_MspInit+0x2ec>)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80032c2:	2200      	movs	r2, #0
 80032c4:	2100      	movs	r1, #0
 80032c6:	2035      	movs	r0, #53	@ 0x35
 80032c8:	f001 f8c5 	bl	8004456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80032cc:	2035      	movs	r0, #53	@ 0x35
 80032ce:	f001 f8de 	bl	800448e <HAL_NVIC_EnableIRQ>
}
 80032d2:	e2af      	b.n	8003834 <HAL_UART_MspInit+0x834>
 80032d4:	40005000 	.word	0x40005000
 80032d8:	40023800 	.word	0x40023800
 80032dc:	40020800 	.word	0x40020800
 80032e0:	40020c00 	.word	0x40020c00
 80032e4:	20000a8c 	.word	0x20000a8c
 80032e8:	40026010 	.word	0x40026010
 80032ec:	20000aec 	.word	0x20000aec
 80032f0:	400260b8 	.word	0x400260b8
  else if(uartHandle->Instance==USART1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a96      	ldr	r2, [pc, #600]	@ (8003554 <HAL_UART_MspInit+0x554>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	f040 8092 	bne.w	8003424 <HAL_UART_MspInit+0x424>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003300:	2300      	movs	r3, #0
 8003302:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003304:	4b94      	ldr	r3, [pc, #592]	@ (8003558 <HAL_UART_MspInit+0x558>)
 8003306:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003308:	4a93      	ldr	r2, [pc, #588]	@ (8003558 <HAL_UART_MspInit+0x558>)
 800330a:	f043 0310 	orr.w	r3, r3, #16
 800330e:	6453      	str	r3, [r2, #68]	@ 0x44
 8003310:	4b91      	ldr	r3, [pc, #580]	@ (8003558 <HAL_UART_MspInit+0x558>)
 8003312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003314:	f003 0310 	and.w	r3, r3, #16
 8003318:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800331a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800331c:	2300      	movs	r3, #0
 800331e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003320:	4b8d      	ldr	r3, [pc, #564]	@ (8003558 <HAL_UART_MspInit+0x558>)
 8003322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003324:	4a8c      	ldr	r2, [pc, #560]	@ (8003558 <HAL_UART_MspInit+0x558>)
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	6313      	str	r3, [r2, #48]	@ 0x30
 800332c:	4b8a      	ldr	r3, [pc, #552]	@ (8003558 <HAL_UART_MspInit+0x558>)
 800332e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003338:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800333c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333e:	2302      	movs	r3, #2
 8003340:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003342:	2300      	movs	r3, #0
 8003344:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003346:	2303      	movs	r3, #3
 8003348:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800334a:	2307      	movs	r3, #7
 800334c:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800334e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003352:	4619      	mov	r1, r3
 8003354:	4881      	ldr	r0, [pc, #516]	@ (800355c <HAL_UART_MspInit+0x55c>)
 8003356:	f002 fdf7 	bl	8005f48 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800335a:	4b81      	ldr	r3, [pc, #516]	@ (8003560 <HAL_UART_MspInit+0x560>)
 800335c:	4a81      	ldr	r2, [pc, #516]	@ (8003564 <HAL_UART_MspInit+0x564>)
 800335e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003360:	4b7f      	ldr	r3, [pc, #508]	@ (8003560 <HAL_UART_MspInit+0x560>)
 8003362:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003366:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003368:	4b7d      	ldr	r3, [pc, #500]	@ (8003560 <HAL_UART_MspInit+0x560>)
 800336a:	2200      	movs	r2, #0
 800336c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800336e:	4b7c      	ldr	r3, [pc, #496]	@ (8003560 <HAL_UART_MspInit+0x560>)
 8003370:	2200      	movs	r2, #0
 8003372:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003374:	4b7a      	ldr	r3, [pc, #488]	@ (8003560 <HAL_UART_MspInit+0x560>)
 8003376:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800337a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800337c:	4b78      	ldr	r3, [pc, #480]	@ (8003560 <HAL_UART_MspInit+0x560>)
 800337e:	2200      	movs	r2, #0
 8003380:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003382:	4b77      	ldr	r3, [pc, #476]	@ (8003560 <HAL_UART_MspInit+0x560>)
 8003384:	2200      	movs	r2, #0
 8003386:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003388:	4b75      	ldr	r3, [pc, #468]	@ (8003560 <HAL_UART_MspInit+0x560>)
 800338a:	2200      	movs	r2, #0
 800338c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800338e:	4b74      	ldr	r3, [pc, #464]	@ (8003560 <HAL_UART_MspInit+0x560>)
 8003390:	2200      	movs	r2, #0
 8003392:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003394:	4b72      	ldr	r3, [pc, #456]	@ (8003560 <HAL_UART_MspInit+0x560>)
 8003396:	2200      	movs	r2, #0
 8003398:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800339a:	4871      	ldr	r0, [pc, #452]	@ (8003560 <HAL_UART_MspInit+0x560>)
 800339c:	f001 f892 	bl	80044c4 <HAL_DMA_Init>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_UART_MspInit+0x3aa>
      Error_Handler();
 80033a6:	f7fe fa23 	bl	80017f0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a6c      	ldr	r2, [pc, #432]	@ (8003560 <HAL_UART_MspInit+0x560>)
 80033ae:	63da      	str	r2, [r3, #60]	@ 0x3c
 80033b0:	4a6b      	ldr	r2, [pc, #428]	@ (8003560 <HAL_UART_MspInit+0x560>)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80033b6:	4b6c      	ldr	r3, [pc, #432]	@ (8003568 <HAL_UART_MspInit+0x568>)
 80033b8:	4a6c      	ldr	r2, [pc, #432]	@ (800356c <HAL_UART_MspInit+0x56c>)
 80033ba:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80033bc:	4b6a      	ldr	r3, [pc, #424]	@ (8003568 <HAL_UART_MspInit+0x568>)
 80033be:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80033c2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80033c4:	4b68      	ldr	r3, [pc, #416]	@ (8003568 <HAL_UART_MspInit+0x568>)
 80033c6:	2240      	movs	r2, #64	@ 0x40
 80033c8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80033ca:	4b67      	ldr	r3, [pc, #412]	@ (8003568 <HAL_UART_MspInit+0x568>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80033d0:	4b65      	ldr	r3, [pc, #404]	@ (8003568 <HAL_UART_MspInit+0x568>)
 80033d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80033d6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80033d8:	4b63      	ldr	r3, [pc, #396]	@ (8003568 <HAL_UART_MspInit+0x568>)
 80033da:	2200      	movs	r2, #0
 80033dc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80033de:	4b62      	ldr	r3, [pc, #392]	@ (8003568 <HAL_UART_MspInit+0x568>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80033e4:	4b60      	ldr	r3, [pc, #384]	@ (8003568 <HAL_UART_MspInit+0x568>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80033ea:	4b5f      	ldr	r3, [pc, #380]	@ (8003568 <HAL_UART_MspInit+0x568>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033f0:	4b5d      	ldr	r3, [pc, #372]	@ (8003568 <HAL_UART_MspInit+0x568>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80033f6:	485c      	ldr	r0, [pc, #368]	@ (8003568 <HAL_UART_MspInit+0x568>)
 80033f8:	f001 f864 	bl	80044c4 <HAL_DMA_Init>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <HAL_UART_MspInit+0x406>
      Error_Handler();
 8003402:	f7fe f9f5 	bl	80017f0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a57      	ldr	r2, [pc, #348]	@ (8003568 <HAL_UART_MspInit+0x568>)
 800340a:	639a      	str	r2, [r3, #56]	@ 0x38
 800340c:	4a56      	ldr	r2, [pc, #344]	@ (8003568 <HAL_UART_MspInit+0x568>)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003412:	2200      	movs	r2, #0
 8003414:	2100      	movs	r1, #0
 8003416:	2025      	movs	r0, #37	@ 0x25
 8003418:	f001 f81d 	bl	8004456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800341c:	2025      	movs	r0, #37	@ 0x25
 800341e:	f001 f836 	bl	800448e <HAL_NVIC_EnableIRQ>
}
 8003422:	e207      	b.n	8003834 <HAL_UART_MspInit+0x834>
  else if(uartHandle->Instance==USART2)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a51      	ldr	r2, [pc, #324]	@ (8003570 <HAL_UART_MspInit+0x570>)
 800342a:	4293      	cmp	r3, r2
 800342c:	f040 80ac 	bne.w	8003588 <HAL_UART_MspInit+0x588>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003430:	2300      	movs	r3, #0
 8003432:	627b      	str	r3, [r7, #36]	@ 0x24
 8003434:	4b48      	ldr	r3, [pc, #288]	@ (8003558 <HAL_UART_MspInit+0x558>)
 8003436:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003438:	4a47      	ldr	r2, [pc, #284]	@ (8003558 <HAL_UART_MspInit+0x558>)
 800343a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800343e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003440:	4b45      	ldr	r3, [pc, #276]	@ (8003558 <HAL_UART_MspInit+0x558>)
 8003442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003444:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003448:	627b      	str	r3, [r7, #36]	@ 0x24
 800344a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800344c:	2300      	movs	r3, #0
 800344e:	623b      	str	r3, [r7, #32]
 8003450:	4b41      	ldr	r3, [pc, #260]	@ (8003558 <HAL_UART_MspInit+0x558>)
 8003452:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003454:	4a40      	ldr	r2, [pc, #256]	@ (8003558 <HAL_UART_MspInit+0x558>)
 8003456:	f043 0308 	orr.w	r3, r3, #8
 800345a:	6313      	str	r3, [r2, #48]	@ 0x30
 800345c:	4b3e      	ldr	r3, [pc, #248]	@ (8003558 <HAL_UART_MspInit+0x558>)
 800345e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003460:	f003 0308 	and.w	r3, r3, #8
 8003464:	623b      	str	r3, [r7, #32]
 8003466:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003468:	2360      	movs	r3, #96	@ 0x60
 800346a:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800346c:	2302      	movs	r3, #2
 800346e:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003470:	2300      	movs	r3, #0
 8003472:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003474:	2303      	movs	r3, #3
 8003476:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003478:	2307      	movs	r3, #7
 800347a:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800347c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003480:	4619      	mov	r1, r3
 8003482:	483c      	ldr	r0, [pc, #240]	@ (8003574 <HAL_UART_MspInit+0x574>)
 8003484:	f002 fd60 	bl	8005f48 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003488:	4b3b      	ldr	r3, [pc, #236]	@ (8003578 <HAL_UART_MspInit+0x578>)
 800348a:	4a3c      	ldr	r2, [pc, #240]	@ (800357c <HAL_UART_MspInit+0x57c>)
 800348c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800348e:	4b3a      	ldr	r3, [pc, #232]	@ (8003578 <HAL_UART_MspInit+0x578>)
 8003490:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003494:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003496:	4b38      	ldr	r3, [pc, #224]	@ (8003578 <HAL_UART_MspInit+0x578>)
 8003498:	2200      	movs	r2, #0
 800349a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800349c:	4b36      	ldr	r3, [pc, #216]	@ (8003578 <HAL_UART_MspInit+0x578>)
 800349e:	2200      	movs	r2, #0
 80034a0:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80034a2:	4b35      	ldr	r3, [pc, #212]	@ (8003578 <HAL_UART_MspInit+0x578>)
 80034a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034a8:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80034aa:	4b33      	ldr	r3, [pc, #204]	@ (8003578 <HAL_UART_MspInit+0x578>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80034b0:	4b31      	ldr	r3, [pc, #196]	@ (8003578 <HAL_UART_MspInit+0x578>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80034b6:	4b30      	ldr	r3, [pc, #192]	@ (8003578 <HAL_UART_MspInit+0x578>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034bc:	4b2e      	ldr	r3, [pc, #184]	@ (8003578 <HAL_UART_MspInit+0x578>)
 80034be:	2200      	movs	r2, #0
 80034c0:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034c2:	4b2d      	ldr	r3, [pc, #180]	@ (8003578 <HAL_UART_MspInit+0x578>)
 80034c4:	2200      	movs	r2, #0
 80034c6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80034c8:	482b      	ldr	r0, [pc, #172]	@ (8003578 <HAL_UART_MspInit+0x578>)
 80034ca:	f000 fffb 	bl	80044c4 <HAL_DMA_Init>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <HAL_UART_MspInit+0x4d8>
      Error_Handler();
 80034d4:	f7fe f98c 	bl	80017f0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a27      	ldr	r2, [pc, #156]	@ (8003578 <HAL_UART_MspInit+0x578>)
 80034dc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80034de:	4a26      	ldr	r2, [pc, #152]	@ (8003578 <HAL_UART_MspInit+0x578>)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80034e4:	4b26      	ldr	r3, [pc, #152]	@ (8003580 <HAL_UART_MspInit+0x580>)
 80034e6:	4a27      	ldr	r2, [pc, #156]	@ (8003584 <HAL_UART_MspInit+0x584>)
 80034e8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80034ea:	4b25      	ldr	r3, [pc, #148]	@ (8003580 <HAL_UART_MspInit+0x580>)
 80034ec:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80034f0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80034f2:	4b23      	ldr	r3, [pc, #140]	@ (8003580 <HAL_UART_MspInit+0x580>)
 80034f4:	2240      	movs	r2, #64	@ 0x40
 80034f6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80034f8:	4b21      	ldr	r3, [pc, #132]	@ (8003580 <HAL_UART_MspInit+0x580>)
 80034fa:	2200      	movs	r2, #0
 80034fc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80034fe:	4b20      	ldr	r3, [pc, #128]	@ (8003580 <HAL_UART_MspInit+0x580>)
 8003500:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003504:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003506:	4b1e      	ldr	r3, [pc, #120]	@ (8003580 <HAL_UART_MspInit+0x580>)
 8003508:	2200      	movs	r2, #0
 800350a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800350c:	4b1c      	ldr	r3, [pc, #112]	@ (8003580 <HAL_UART_MspInit+0x580>)
 800350e:	2200      	movs	r2, #0
 8003510:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003512:	4b1b      	ldr	r3, [pc, #108]	@ (8003580 <HAL_UART_MspInit+0x580>)
 8003514:	2200      	movs	r2, #0
 8003516:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003518:	4b19      	ldr	r3, [pc, #100]	@ (8003580 <HAL_UART_MspInit+0x580>)
 800351a:	2200      	movs	r2, #0
 800351c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800351e:	4b18      	ldr	r3, [pc, #96]	@ (8003580 <HAL_UART_MspInit+0x580>)
 8003520:	2200      	movs	r2, #0
 8003522:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003524:	4816      	ldr	r0, [pc, #88]	@ (8003580 <HAL_UART_MspInit+0x580>)
 8003526:	f000 ffcd 	bl	80044c4 <HAL_DMA_Init>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <HAL_UART_MspInit+0x534>
      Error_Handler();
 8003530:	f7fe f95e 	bl	80017f0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a12      	ldr	r2, [pc, #72]	@ (8003580 <HAL_UART_MspInit+0x580>)
 8003538:	639a      	str	r2, [r3, #56]	@ 0x38
 800353a:	4a11      	ldr	r2, [pc, #68]	@ (8003580 <HAL_UART_MspInit+0x580>)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003540:	2200      	movs	r2, #0
 8003542:	2100      	movs	r1, #0
 8003544:	2026      	movs	r0, #38	@ 0x26
 8003546:	f000 ff86 	bl	8004456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800354a:	2026      	movs	r0, #38	@ 0x26
 800354c:	f000 ff9f 	bl	800448e <HAL_NVIC_EnableIRQ>
}
 8003550:	e170      	b.n	8003834 <HAL_UART_MspInit+0x834>
 8003552:	bf00      	nop
 8003554:	40011000 	.word	0x40011000
 8003558:	40023800 	.word	0x40023800
 800355c:	40020000 	.word	0x40020000
 8003560:	20000b4c 	.word	0x20000b4c
 8003564:	40026440 	.word	0x40026440
 8003568:	20000bac 	.word	0x20000bac
 800356c:	400264b8 	.word	0x400264b8
 8003570:	40004400 	.word	0x40004400
 8003574:	40020c00 	.word	0x40020c00
 8003578:	20000c0c 	.word	0x20000c0c
 800357c:	40026088 	.word	0x40026088
 8003580:	20000c6c 	.word	0x20000c6c
 8003584:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a5a      	ldr	r2, [pc, #360]	@ (80036f8 <HAL_UART_MspInit+0x6f8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	f040 80c2 	bne.w	8003718 <HAL_UART_MspInit+0x718>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003594:	2300      	movs	r3, #0
 8003596:	61fb      	str	r3, [r7, #28]
 8003598:	4b58      	ldr	r3, [pc, #352]	@ (80036fc <HAL_UART_MspInit+0x6fc>)
 800359a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359c:	4a57      	ldr	r2, [pc, #348]	@ (80036fc <HAL_UART_MspInit+0x6fc>)
 800359e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80035a4:	4b55      	ldr	r3, [pc, #340]	@ (80036fc <HAL_UART_MspInit+0x6fc>)
 80035a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035ac:	61fb      	str	r3, [r7, #28]
 80035ae:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035b0:	2300      	movs	r3, #0
 80035b2:	61bb      	str	r3, [r7, #24]
 80035b4:	4b51      	ldr	r3, [pc, #324]	@ (80036fc <HAL_UART_MspInit+0x6fc>)
 80035b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b8:	4a50      	ldr	r2, [pc, #320]	@ (80036fc <HAL_UART_MspInit+0x6fc>)
 80035ba:	f043 0302 	orr.w	r3, r3, #2
 80035be:	6313      	str	r3, [r2, #48]	@ 0x30
 80035c0:	4b4e      	ldr	r3, [pc, #312]	@ (80036fc <HAL_UART_MspInit+0x6fc>)
 80035c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80035cc:	2300      	movs	r3, #0
 80035ce:	617b      	str	r3, [r7, #20]
 80035d0:	4b4a      	ldr	r3, [pc, #296]	@ (80036fc <HAL_UART_MspInit+0x6fc>)
 80035d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d4:	4a49      	ldr	r2, [pc, #292]	@ (80036fc <HAL_UART_MspInit+0x6fc>)
 80035d6:	f043 0308 	orr.w	r3, r3, #8
 80035da:	6313      	str	r3, [r2, #48]	@ 0x30
 80035dc:	4b47      	ldr	r3, [pc, #284]	@ (80036fc <HAL_UART_MspInit+0x6fc>)
 80035de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e0:	f003 0308 	and.w	r3, r3, #8
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80035e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035ec:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035ee:	2302      	movs	r3, #2
 80035f0:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035f6:	2303      	movs	r3, #3
 80035f8:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80035fa:	2307      	movs	r3, #7
 80035fc:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035fe:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003602:	4619      	mov	r1, r3
 8003604:	483e      	ldr	r0, [pc, #248]	@ (8003700 <HAL_UART_MspInit+0x700>)
 8003606:	f002 fc9f 	bl	8005f48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800360a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800360e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003610:	2302      	movs	r3, #2
 8003612:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003614:	2300      	movs	r3, #0
 8003616:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003618:	2303      	movs	r3, #3
 800361a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800361c:	2307      	movs	r3, #7
 800361e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003620:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003624:	4619      	mov	r1, r3
 8003626:	4837      	ldr	r0, [pc, #220]	@ (8003704 <HAL_UART_MspInit+0x704>)
 8003628:	f002 fc8e 	bl	8005f48 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800362c:	4b36      	ldr	r3, [pc, #216]	@ (8003708 <HAL_UART_MspInit+0x708>)
 800362e:	4a37      	ldr	r2, [pc, #220]	@ (800370c <HAL_UART_MspInit+0x70c>)
 8003630:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8003632:	4b35      	ldr	r3, [pc, #212]	@ (8003708 <HAL_UART_MspInit+0x708>)
 8003634:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003638:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800363a:	4b33      	ldr	r3, [pc, #204]	@ (8003708 <HAL_UART_MspInit+0x708>)
 800363c:	2200      	movs	r2, #0
 800363e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003640:	4b31      	ldr	r3, [pc, #196]	@ (8003708 <HAL_UART_MspInit+0x708>)
 8003642:	2200      	movs	r2, #0
 8003644:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003646:	4b30      	ldr	r3, [pc, #192]	@ (8003708 <HAL_UART_MspInit+0x708>)
 8003648:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800364c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800364e:	4b2e      	ldr	r3, [pc, #184]	@ (8003708 <HAL_UART_MspInit+0x708>)
 8003650:	2200      	movs	r2, #0
 8003652:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003654:	4b2c      	ldr	r3, [pc, #176]	@ (8003708 <HAL_UART_MspInit+0x708>)
 8003656:	2200      	movs	r2, #0
 8003658:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800365a:	4b2b      	ldr	r3, [pc, #172]	@ (8003708 <HAL_UART_MspInit+0x708>)
 800365c:	2200      	movs	r2, #0
 800365e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003660:	4b29      	ldr	r3, [pc, #164]	@ (8003708 <HAL_UART_MspInit+0x708>)
 8003662:	2200      	movs	r2, #0
 8003664:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003666:	4b28      	ldr	r3, [pc, #160]	@ (8003708 <HAL_UART_MspInit+0x708>)
 8003668:	2200      	movs	r2, #0
 800366a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800366c:	4826      	ldr	r0, [pc, #152]	@ (8003708 <HAL_UART_MspInit+0x708>)
 800366e:	f000 ff29 	bl	80044c4 <HAL_DMA_Init>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <HAL_UART_MspInit+0x67c>
      Error_Handler();
 8003678:	f7fe f8ba 	bl	80017f0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a22      	ldr	r2, [pc, #136]	@ (8003708 <HAL_UART_MspInit+0x708>)
 8003680:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003682:	4a21      	ldr	r2, [pc, #132]	@ (8003708 <HAL_UART_MspInit+0x708>)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8003688:	4b21      	ldr	r3, [pc, #132]	@ (8003710 <HAL_UART_MspInit+0x710>)
 800368a:	4a22      	ldr	r2, [pc, #136]	@ (8003714 <HAL_UART_MspInit+0x714>)
 800368c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 800368e:	4b20      	ldr	r3, [pc, #128]	@ (8003710 <HAL_UART_MspInit+0x710>)
 8003690:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003694:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003696:	4b1e      	ldr	r3, [pc, #120]	@ (8003710 <HAL_UART_MspInit+0x710>)
 8003698:	2240      	movs	r2, #64	@ 0x40
 800369a:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800369c:	4b1c      	ldr	r3, [pc, #112]	@ (8003710 <HAL_UART_MspInit+0x710>)
 800369e:	2200      	movs	r2, #0
 80036a0:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003710 <HAL_UART_MspInit+0x710>)
 80036a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80036a8:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036aa:	4b19      	ldr	r3, [pc, #100]	@ (8003710 <HAL_UART_MspInit+0x710>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036b0:	4b17      	ldr	r3, [pc, #92]	@ (8003710 <HAL_UART_MspInit+0x710>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80036b6:	4b16      	ldr	r3, [pc, #88]	@ (8003710 <HAL_UART_MspInit+0x710>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80036bc:	4b14      	ldr	r3, [pc, #80]	@ (8003710 <HAL_UART_MspInit+0x710>)
 80036be:	2200      	movs	r2, #0
 80036c0:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036c2:	4b13      	ldr	r3, [pc, #76]	@ (8003710 <HAL_UART_MspInit+0x710>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80036c8:	4811      	ldr	r0, [pc, #68]	@ (8003710 <HAL_UART_MspInit+0x710>)
 80036ca:	f000 fefb 	bl	80044c4 <HAL_DMA_Init>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <HAL_UART_MspInit+0x6d8>
      Error_Handler();
 80036d4:	f7fe f88c 	bl	80017f0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a0d      	ldr	r2, [pc, #52]	@ (8003710 <HAL_UART_MspInit+0x710>)
 80036dc:	639a      	str	r2, [r3, #56]	@ 0x38
 80036de:	4a0c      	ldr	r2, [pc, #48]	@ (8003710 <HAL_UART_MspInit+0x710>)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80036e4:	2200      	movs	r2, #0
 80036e6:	2100      	movs	r1, #0
 80036e8:	2027      	movs	r0, #39	@ 0x27
 80036ea:	f000 feb4 	bl	8004456 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80036ee:	2027      	movs	r0, #39	@ 0x27
 80036f0:	f000 fecd 	bl	800448e <HAL_NVIC_EnableIRQ>
}
 80036f4:	e09e      	b.n	8003834 <HAL_UART_MspInit+0x834>
 80036f6:	bf00      	nop
 80036f8:	40004800 	.word	0x40004800
 80036fc:	40023800 	.word	0x40023800
 8003700:	40020400 	.word	0x40020400
 8003704:	40020c00 	.word	0x40020c00
 8003708:	20000ccc 	.word	0x20000ccc
 800370c:	40026028 	.word	0x40026028
 8003710:	20000d2c 	.word	0x20000d2c
 8003714:	40026058 	.word	0x40026058
  else if(uartHandle->Instance==USART6)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a47      	ldr	r2, [pc, #284]	@ (800383c <HAL_UART_MspInit+0x83c>)
 800371e:	4293      	cmp	r3, r2
 8003720:	f040 8088 	bne.w	8003834 <HAL_UART_MspInit+0x834>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003724:	2300      	movs	r3, #0
 8003726:	613b      	str	r3, [r7, #16]
 8003728:	4b45      	ldr	r3, [pc, #276]	@ (8003840 <HAL_UART_MspInit+0x840>)
 800372a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372c:	4a44      	ldr	r2, [pc, #272]	@ (8003840 <HAL_UART_MspInit+0x840>)
 800372e:	f043 0320 	orr.w	r3, r3, #32
 8003732:	6453      	str	r3, [r2, #68]	@ 0x44
 8003734:	4b42      	ldr	r3, [pc, #264]	@ (8003840 <HAL_UART_MspInit+0x840>)
 8003736:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003738:	f003 0320 	and.w	r3, r3, #32
 800373c:	613b      	str	r3, [r7, #16]
 800373e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	4b3e      	ldr	r3, [pc, #248]	@ (8003840 <HAL_UART_MspInit+0x840>)
 8003746:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003748:	4a3d      	ldr	r2, [pc, #244]	@ (8003840 <HAL_UART_MspInit+0x840>)
 800374a:	f043 0304 	orr.w	r3, r3, #4
 800374e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003750:	4b3b      	ldr	r3, [pc, #236]	@ (8003840 <HAL_UART_MspInit+0x840>)
 8003752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003754:	f003 0304 	and.w	r3, r3, #4
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800375c:	23c0      	movs	r3, #192	@ 0xc0
 800375e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003760:	2302      	movs	r3, #2
 8003762:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003764:	2300      	movs	r3, #0
 8003766:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003768:	2303      	movs	r3, #3
 800376a:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800376c:	2308      	movs	r3, #8
 800376e:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003770:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8003774:	4619      	mov	r1, r3
 8003776:	4833      	ldr	r0, [pc, #204]	@ (8003844 <HAL_UART_MspInit+0x844>)
 8003778:	f002 fbe6 	bl	8005f48 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800377c:	4b32      	ldr	r3, [pc, #200]	@ (8003848 <HAL_UART_MspInit+0x848>)
 800377e:	4a33      	ldr	r2, [pc, #204]	@ (800384c <HAL_UART_MspInit+0x84c>)
 8003780:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8003782:	4b31      	ldr	r3, [pc, #196]	@ (8003848 <HAL_UART_MspInit+0x848>)
 8003784:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003788:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800378a:	4b2f      	ldr	r3, [pc, #188]	@ (8003848 <HAL_UART_MspInit+0x848>)
 800378c:	2200      	movs	r2, #0
 800378e:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003790:	4b2d      	ldr	r3, [pc, #180]	@ (8003848 <HAL_UART_MspInit+0x848>)
 8003792:	2200      	movs	r2, #0
 8003794:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003796:	4b2c      	ldr	r3, [pc, #176]	@ (8003848 <HAL_UART_MspInit+0x848>)
 8003798:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800379c:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800379e:	4b2a      	ldr	r3, [pc, #168]	@ (8003848 <HAL_UART_MspInit+0x848>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80037a4:	4b28      	ldr	r3, [pc, #160]	@ (8003848 <HAL_UART_MspInit+0x848>)
 80037a6:	2200      	movs	r2, #0
 80037a8:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80037aa:	4b27      	ldr	r3, [pc, #156]	@ (8003848 <HAL_UART_MspInit+0x848>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80037b0:	4b25      	ldr	r3, [pc, #148]	@ (8003848 <HAL_UART_MspInit+0x848>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80037b6:	4b24      	ldr	r3, [pc, #144]	@ (8003848 <HAL_UART_MspInit+0x848>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80037bc:	4822      	ldr	r0, [pc, #136]	@ (8003848 <HAL_UART_MspInit+0x848>)
 80037be:	f000 fe81 	bl	80044c4 <HAL_DMA_Init>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d001      	beq.n	80037cc <HAL_UART_MspInit+0x7cc>
      Error_Handler();
 80037c8:	f7fe f812 	bl	80017f0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4a1e      	ldr	r2, [pc, #120]	@ (8003848 <HAL_UART_MspInit+0x848>)
 80037d0:	63da      	str	r2, [r3, #60]	@ 0x3c
 80037d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003848 <HAL_UART_MspInit+0x848>)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80037d8:	4b1d      	ldr	r3, [pc, #116]	@ (8003850 <HAL_UART_MspInit+0x850>)
 80037da:	4a1e      	ldr	r2, [pc, #120]	@ (8003854 <HAL_UART_MspInit+0x854>)
 80037dc:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80037de:	4b1c      	ldr	r3, [pc, #112]	@ (8003850 <HAL_UART_MspInit+0x850>)
 80037e0:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80037e4:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80037e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003850 <HAL_UART_MspInit+0x850>)
 80037e8:	2240      	movs	r2, #64	@ 0x40
 80037ea:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037ec:	4b18      	ldr	r3, [pc, #96]	@ (8003850 <HAL_UART_MspInit+0x850>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80037f2:	4b17      	ldr	r3, [pc, #92]	@ (8003850 <HAL_UART_MspInit+0x850>)
 80037f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80037f8:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80037fa:	4b15      	ldr	r3, [pc, #84]	@ (8003850 <HAL_UART_MspInit+0x850>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003800:	4b13      	ldr	r3, [pc, #76]	@ (8003850 <HAL_UART_MspInit+0x850>)
 8003802:	2200      	movs	r2, #0
 8003804:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8003806:	4b12      	ldr	r3, [pc, #72]	@ (8003850 <HAL_UART_MspInit+0x850>)
 8003808:	2200      	movs	r2, #0
 800380a:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 800380c:	4b10      	ldr	r3, [pc, #64]	@ (8003850 <HAL_UART_MspInit+0x850>)
 800380e:	2200      	movs	r2, #0
 8003810:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003812:	4b0f      	ldr	r3, [pc, #60]	@ (8003850 <HAL_UART_MspInit+0x850>)
 8003814:	2200      	movs	r2, #0
 8003816:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8003818:	480d      	ldr	r0, [pc, #52]	@ (8003850 <HAL_UART_MspInit+0x850>)
 800381a:	f000 fe53 	bl	80044c4 <HAL_DMA_Init>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <HAL_UART_MspInit+0x828>
      Error_Handler();
 8003824:	f7fd ffe4 	bl	80017f0 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a09      	ldr	r2, [pc, #36]	@ (8003850 <HAL_UART_MspInit+0x850>)
 800382c:	639a      	str	r2, [r3, #56]	@ 0x38
 800382e:	4a08      	ldr	r2, [pc, #32]	@ (8003850 <HAL_UART_MspInit+0x850>)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8003834:	bf00      	nop
 8003836:	3758      	adds	r7, #88	@ 0x58
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40011400 	.word	0x40011400
 8003840:	40023800 	.word	0x40023800
 8003844:	40020800 	.word	0x40020800
 8003848:	20000d8c 	.word	0x20000d8c
 800384c:	40026428 	.word	0x40026428
 8003850:	20000dec 	.word	0x20000dec
 8003854:	400264a0 	.word	0x400264a0

08003858 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  


  ldr   sp, =_estack     /* set stack pointer */
 8003858:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003890 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800385c:	f7fe fac4 	bl	8001de8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003860:	480c      	ldr	r0, [pc, #48]	@ (8003894 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003862:	490d      	ldr	r1, [pc, #52]	@ (8003898 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003864:	4a0d      	ldr	r2, [pc, #52]	@ (800389c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003868:	e002      	b.n	8003870 <LoopCopyDataInit>

0800386a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800386a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800386c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800386e:	3304      	adds	r3, #4

08003870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003874:	d3f9      	bcc.n	800386a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003876:	4a0a      	ldr	r2, [pc, #40]	@ (80038a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003878:	4c0a      	ldr	r4, [pc, #40]	@ (80038a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800387a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800387c:	e001      	b.n	8003882 <LoopFillZerobss>

0800387e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800387e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003880:	3204      	adds	r2, #4

08003882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003884:	d3fb      	bcc.n	800387e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003886:	f010 fafd 	bl	8013e84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800388a:	f7fd feff 	bl	800168c <main>
  bx  lr    
 800388e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003890:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003898:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 800389c:	08017720 	.word	0x08017720
  ldr r2, =_sbss
 80038a0:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 80038a4:	2000b44c 	.word	0x2000b44c

080038a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80038a8:	e7fe      	b.n	80038a8 <ADC_IRQHandler>

080038aa <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80038aa:	b480      	push	{r7}
 80038ac:	b083      	sub	sp, #12
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
 80038b2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00b      	beq.n	80038d2 <LAN8742_RegisterBusIO+0x28>
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d007      	beq.n	80038d2 <LAN8742_RegisterBusIO+0x28>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <LAN8742_RegisterBusIO+0x28>
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d102      	bne.n	80038d8 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 80038d2:	f04f 33ff 	mov.w	r3, #4294967295
 80038d6:	e014      	b.n	8003902 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	691a      	ldr	r2, [r3, #16]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	370c      	adds	r7, #12
 8003906:	46bd      	mov	sp, r7
 8003908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390c:	4770      	bx	lr

0800390e <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800390e:	b580      	push	{r7, lr}
 8003910:	b086      	sub	sp, #24
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8003916:	2300      	movs	r3, #0
 8003918:	60fb      	str	r3, [r7, #12]
 800391a:	2300      	movs	r3, #0
 800391c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d139      	bne.n	800399e <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d002      	beq.n	8003938 <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2220      	movs	r2, #32
 800393c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800393e:	2300      	movs	r3, #0
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	e01c      	b.n	800397e <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	f107 020c 	add.w	r2, r7, #12
 800394c:	2112      	movs	r1, #18
 800394e:	6978      	ldr	r0, [r7, #20]
 8003950:	4798      	blx	r3
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	da03      	bge.n	8003960 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8003958:	f06f 0304 	mvn.w	r3, #4
 800395c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800395e:	e00b      	b.n	8003978 <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f003 031f 	and.w	r3, r3, #31
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	429a      	cmp	r2, r3
 800396a:	d105      	bne.n	8003978 <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	697a      	ldr	r2, [r7, #20]
 8003970:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8003972:	2300      	movs	r3, #0
 8003974:	613b      	str	r3, [r7, #16]
         break;
 8003976:	e005      	b.n	8003984 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	3301      	adds	r3, #1
 800397c:	617b      	str	r3, [r7, #20]
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	2b1f      	cmp	r3, #31
 8003982:	d9df      	bls.n	8003944 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2b1f      	cmp	r3, #31
 800398a:	d902      	bls.n	8003992 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800398c:	f06f 0302 	mvn.w	r3, #2
 8003990:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d102      	bne.n	800399e <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 800399e:	693b      	ldr	r3, [r7, #16]
 }
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}

080039a8 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b084      	sub	sp, #16
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80039b0:	2300      	movs	r3, #0
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	6810      	ldr	r0, [r2, #0]
 80039bc:	f107 020c 	add.w	r2, r7, #12
 80039c0:	2101      	movs	r1, #1
 80039c2:	4798      	blx	r3
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	da02      	bge.n	80039d0 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80039ca:	f06f 0304 	mvn.w	r3, #4
 80039ce:	e06e      	b.n	8003aae <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	6810      	ldr	r0, [r2, #0]
 80039d8:	f107 020c 	add.w	r2, r7, #12
 80039dc:	2101      	movs	r1, #1
 80039de:	4798      	blx	r3
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	da02      	bge.n	80039ec <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80039e6:	f06f 0304 	mvn.w	r3, #4
 80039ea:	e060      	b.n	8003aae <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f003 0304 	and.w	r3, r3, #4
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e059      	b.n	8003aae <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	695b      	ldr	r3, [r3, #20]
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	6810      	ldr	r0, [r2, #0]
 8003a02:	f107 020c 	add.w	r2, r7, #12
 8003a06:	2100      	movs	r1, #0
 8003a08:	4798      	blx	r3
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	da02      	bge.n	8003a16 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003a10:	f06f 0304 	mvn.w	r3, #4
 8003a14:	e04b      	b.n	8003aae <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d11b      	bne.n	8003a58 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d006      	beq.n	8003a38 <LAN8742_GetLinkState+0x90>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003a34:	2302      	movs	r3, #2
 8003a36:	e03a      	b.n	8003aae <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e033      	b.n	8003aae <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003a50:	2304      	movs	r3, #4
 8003a52:	e02c      	b.n	8003aae <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003a54:	2305      	movs	r3, #5
 8003a56:	e02a      	b.n	8003aae <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	695b      	ldr	r3, [r3, #20]
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6810      	ldr	r0, [r2, #0]
 8003a60:	f107 020c 	add.w	r2, r7, #12
 8003a64:	211f      	movs	r1, #31
 8003a66:	4798      	blx	r3
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	da02      	bge.n	8003a74 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8003a6e:	f06f 0304 	mvn.w	r3, #4
 8003a72:	e01c      	b.n	8003aae <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8003a7e:	2306      	movs	r3, #6
 8003a80:	e015      	b.n	8003aae <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f003 031c 	and.w	r3, r3, #28
 8003a88:	2b18      	cmp	r3, #24
 8003a8a:	d101      	bne.n	8003a90 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	e00e      	b.n	8003aae <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f003 031c 	and.w	r3, r3, #28
 8003a96:	2b08      	cmp	r3, #8
 8003a98:	d101      	bne.n	8003a9e <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e007      	b.n	8003aae <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	f003 031c 	and.w	r3, r3, #28
 8003aa4:	2b14      	cmp	r3, #20
 8003aa6:	d101      	bne.n	8003aac <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003aa8:	2304      	movs	r3, #4
 8003aaa:	e000      	b.n	8003aae <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003aac:	2305      	movs	r3, #5
    }
  }
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
	...

08003ab8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003abc:	4b0e      	ldr	r3, [pc, #56]	@ (8003af8 <HAL_Init+0x40>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8003af8 <HAL_Init+0x40>)
 8003ac2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ac6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8003af8 <HAL_Init+0x40>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a0a      	ldr	r2, [pc, #40]	@ (8003af8 <HAL_Init+0x40>)
 8003ace:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003ad2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ad4:	4b08      	ldr	r3, [pc, #32]	@ (8003af8 <HAL_Init+0x40>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a07      	ldr	r2, [pc, #28]	@ (8003af8 <HAL_Init+0x40>)
 8003ada:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ade:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ae0:	2003      	movs	r0, #3
 8003ae2:	f000 fcad 	bl	8004440 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003ae6:	200f      	movs	r0, #15
 8003ae8:	f000 f808 	bl	8003afc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003aec:	f7fd ffa6 	bl	8001a3c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	40023c00 	.word	0x40023c00

08003afc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003b04:	4b12      	ldr	r3, [pc, #72]	@ (8003b50 <HAL_InitTick+0x54>)
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	4b12      	ldr	r3, [pc, #72]	@ (8003b54 <HAL_InitTick+0x58>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 fcc5 	bl	80044aa <HAL_SYSTICK_Config>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e00e      	b.n	8003b48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b0f      	cmp	r3, #15
 8003b2e:	d80a      	bhi.n	8003b46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003b30:	2200      	movs	r2, #0
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	f04f 30ff 	mov.w	r0, #4294967295
 8003b38:	f000 fc8d 	bl	8004456 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003b3c:	4a06      	ldr	r2, [pc, #24]	@ (8003b58 <HAL_InitTick+0x5c>)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	e000      	b.n	8003b48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3708      	adds	r7, #8
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	20000038 	.word	0x20000038
 8003b54:	20000068 	.word	0x20000068
 8003b58:	20000064 	.word	0x20000064

08003b5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b60:	4b06      	ldr	r3, [pc, #24]	@ (8003b7c <HAL_IncTick+0x20>)
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	461a      	mov	r2, r3
 8003b66:	4b06      	ldr	r3, [pc, #24]	@ (8003b80 <HAL_IncTick+0x24>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	4a04      	ldr	r2, [pc, #16]	@ (8003b80 <HAL_IncTick+0x24>)
 8003b6e:	6013      	str	r3, [r2, #0]
}
 8003b70:	bf00      	nop
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	20000068 	.word	0x20000068
 8003b80:	20000e4c 	.word	0x20000e4c

08003b84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b84:	b480      	push	{r7}
 8003b86:	af00      	add	r7, sp, #0
  return uwTick;
 8003b88:	4b03      	ldr	r3, [pc, #12]	@ (8003b98 <HAL_GetTick+0x14>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	20000e4c 	.word	0x20000e4c

08003b9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ba4:	f7ff ffee 	bl	8003b84 <HAL_GetTick>
 8003ba8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb4:	d005      	beq.n	8003bc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8003be0 <HAL_Delay+0x44>)
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	4413      	add	r3, r2
 8003bc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003bc2:	bf00      	nop
 8003bc4:	f7ff ffde 	bl	8003b84 <HAL_GetTick>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d8f7      	bhi.n	8003bc4 <HAL_Delay+0x28>
  {
  }
}
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop
 8003bd8:	3710      	adds	r7, #16
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	20000068 	.word	0x20000068

08003be4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e033      	b.n	8003c62 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d109      	bne.n	8003c16 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fc fd1c 	bl	8000640 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c1a:	f003 0310 	and.w	r3, r3, #16
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d118      	bne.n	8003c54 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c26:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003c2a:	f023 0302 	bic.w	r3, r3, #2
 8003c2e:	f043 0202 	orr.w	r2, r3, #2
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f93a 	bl	8003eb0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	f023 0303 	bic.w	r3, r3, #3
 8003c4a:	f043 0201 	orr.w	r2, r3, #1
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c52:	e001      	b.n	8003c58 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3710      	adds	r7, #16
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
	...

08003c6c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b085      	sub	sp, #20
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d101      	bne.n	8003c88 <HAL_ADC_ConfigChannel+0x1c>
 8003c84:	2302      	movs	r3, #2
 8003c86:	e105      	b.n	8003e94 <HAL_ADC_ConfigChannel+0x228>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2b09      	cmp	r3, #9
 8003c96:	d925      	bls.n	8003ce4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68d9      	ldr	r1, [r3, #12]
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	4413      	add	r3, r2
 8003cac:	3b1e      	subs	r3, #30
 8003cae:	2207      	movs	r2, #7
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	43da      	mvns	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	400a      	ands	r2, r1
 8003cbc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68d9      	ldr	r1, [r3, #12]
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	4618      	mov	r0, r3
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	4403      	add	r3, r0
 8003cd6:	3b1e      	subs	r3, #30
 8003cd8:	409a      	lsls	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	430a      	orrs	r2, r1
 8003ce0:	60da      	str	r2, [r3, #12]
 8003ce2:	e022      	b.n	8003d2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6919      	ldr	r1, [r3, #16]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	4413      	add	r3, r2
 8003cf8:	2207      	movs	r2, #7
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43da      	mvns	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	400a      	ands	r2, r1
 8003d06:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6919      	ldr	r1, [r3, #16]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	4618      	mov	r0, r3
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	4403      	add	r3, r0
 8003d20:	409a      	lsls	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b06      	cmp	r3, #6
 8003d30:	d824      	bhi.n	8003d7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	4413      	add	r3, r2
 8003d42:	3b05      	subs	r3, #5
 8003d44:	221f      	movs	r2, #31
 8003d46:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4a:	43da      	mvns	r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	400a      	ands	r2, r1
 8003d52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	4618      	mov	r0, r3
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4413      	add	r3, r2
 8003d6c:	3b05      	subs	r3, #5
 8003d6e:	fa00 f203 	lsl.w	r2, r0, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	635a      	str	r2, [r3, #52]	@ 0x34
 8003d7a:	e04c      	b.n	8003e16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	2b0c      	cmp	r3, #12
 8003d82:	d824      	bhi.n	8003dce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685a      	ldr	r2, [r3, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	3b23      	subs	r3, #35	@ 0x23
 8003d96:	221f      	movs	r2, #31
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43da      	mvns	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	400a      	ands	r2, r1
 8003da4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	4618      	mov	r0, r3
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	4613      	mov	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3b23      	subs	r3, #35	@ 0x23
 8003dc0:	fa00 f203 	lsl.w	r2, r0, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	631a      	str	r2, [r3, #48]	@ 0x30
 8003dcc:	e023      	b.n	8003e16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	4613      	mov	r3, r2
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	4413      	add	r3, r2
 8003dde:	3b41      	subs	r3, #65	@ 0x41
 8003de0:	221f      	movs	r2, #31
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	43da      	mvns	r2, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	400a      	ands	r2, r1
 8003dee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	685a      	ldr	r2, [r3, #4]
 8003e02:	4613      	mov	r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4413      	add	r3, r2
 8003e08:	3b41      	subs	r3, #65	@ 0x41
 8003e0a:	fa00 f203 	lsl.w	r2, r0, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	430a      	orrs	r2, r1
 8003e14:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e16:	4b22      	ldr	r3, [pc, #136]	@ (8003ea0 <HAL_ADC_ConfigChannel+0x234>)
 8003e18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a21      	ldr	r2, [pc, #132]	@ (8003ea4 <HAL_ADC_ConfigChannel+0x238>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d109      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x1cc>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b12      	cmp	r3, #18
 8003e2a:	d105      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a19      	ldr	r2, [pc, #100]	@ (8003ea4 <HAL_ADC_ConfigChannel+0x238>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d123      	bne.n	8003e8a <HAL_ADC_ConfigChannel+0x21e>
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2b10      	cmp	r3, #16
 8003e48:	d003      	beq.n	8003e52 <HAL_ADC_ConfigChannel+0x1e6>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	2b11      	cmp	r3, #17
 8003e50:	d11b      	bne.n	8003e8a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b10      	cmp	r3, #16
 8003e64:	d111      	bne.n	8003e8a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003e66:	4b10      	ldr	r3, [pc, #64]	@ (8003ea8 <HAL_ADC_ConfigChannel+0x23c>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a10      	ldr	r2, [pc, #64]	@ (8003eac <HAL_ADC_ConfigChannel+0x240>)
 8003e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e70:	0c9a      	lsrs	r2, r3, #18
 8003e72:	4613      	mov	r3, r2
 8003e74:	009b      	lsls	r3, r3, #2
 8003e76:	4413      	add	r3, r2
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003e7c:	e002      	b.n	8003e84 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	3b01      	subs	r3, #1
 8003e82:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1f9      	bne.n	8003e7e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	40012300 	.word	0x40012300
 8003ea4:	40012000 	.word	0x40012000
 8003ea8:	20000038 	.word	0x20000038
 8003eac:	431bde83 	.word	0x431bde83

08003eb0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b085      	sub	sp, #20
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003eb8:	4b79      	ldr	r3, [pc, #484]	@ (80040a0 <ADC_Init+0x1f0>)
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	685a      	ldr	r2, [r3, #4]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ee4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6859      	ldr	r1, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	021a      	lsls	r2, r3, #8
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685a      	ldr	r2, [r3, #4]
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003f08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6859      	ldr	r1, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f2a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6899      	ldr	r1, [r3, #8]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f42:	4a58      	ldr	r2, [pc, #352]	@ (80040a4 <ADC_Init+0x1f4>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d022      	beq.n	8003f8e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f56:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6899      	ldr	r1, [r3, #8]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	689a      	ldr	r2, [r3, #8]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003f78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6899      	ldr	r1, [r3, #8]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	609a      	str	r2, [r3, #8]
 8003f8c:	e00f      	b.n	8003fae <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003fac:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689a      	ldr	r2, [r3, #8]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0202 	bic.w	r2, r2, #2
 8003fbc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	6899      	ldr	r1, [r3, #8]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	7e1b      	ldrb	r3, [r3, #24]
 8003fc8:	005a      	lsls	r2, r3, #1
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01b      	beq.n	8004014 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fea:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	685a      	ldr	r2, [r3, #4]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003ffa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	6859      	ldr	r1, [r3, #4]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004006:	3b01      	subs	r3, #1
 8004008:	035a      	lsls	r2, r3, #13
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]
 8004012:	e007      	b.n	8004024 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004022:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8004032:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	3b01      	subs	r3, #1
 8004040:	051a      	lsls	r2, r3, #20
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	430a      	orrs	r2, r1
 8004048:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004058:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	6899      	ldr	r1, [r3, #8]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004066:	025a      	lsls	r2, r3, #9
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689a      	ldr	r2, [r3, #8]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800407e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6899      	ldr	r1, [r3, #8]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	029a      	lsls	r2, r3, #10
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	609a      	str	r2, [r3, #8]
}
 8004094:	bf00      	nop
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	40012300 	.word	0x40012300
 80040a4:	0f000001 	.word	0x0f000001

080040a8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b084      	sub	sp, #16
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e0ed      	b.n	8004296 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d102      	bne.n	80040cc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7fc fb6a 	bl	80007a0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f042 0201 	orr.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80040dc:	f7ff fd52 	bl	8003b84 <HAL_GetTick>
 80040e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80040e2:	e012      	b.n	800410a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80040e4:	f7ff fd4e 	bl	8003b84 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	2b0a      	cmp	r3, #10
 80040f0:	d90b      	bls.n	800410a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2205      	movs	r2, #5
 8004102:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e0c5      	b.n	8004296 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0e5      	beq.n	80040e4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0202 	bic.w	r2, r2, #2
 8004126:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004128:	f7ff fd2c 	bl	8003b84 <HAL_GetTick>
 800412c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800412e:	e012      	b.n	8004156 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004130:	f7ff fd28 	bl	8003b84 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b0a      	cmp	r3, #10
 800413c:	d90b      	bls.n	8004156 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004142:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2205      	movs	r2, #5
 800414e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	e09f      	b.n	8004296 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f003 0302 	and.w	r3, r3, #2
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e5      	bne.n	8004130 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	7e1b      	ldrb	r3, [r3, #24]
 8004168:	2b01      	cmp	r3, #1
 800416a:	d108      	bne.n	800417e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800417a:	601a      	str	r2, [r3, #0]
 800417c:	e007      	b.n	800418e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800418c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	7e5b      	ldrb	r3, [r3, #25]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d108      	bne.n	80041a8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041a4:	601a      	str	r2, [r3, #0]
 80041a6:	e007      	b.n	80041b8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80041b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	7e9b      	ldrb	r3, [r3, #26]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d108      	bne.n	80041d2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0220 	orr.w	r2, r2, #32
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	e007      	b.n	80041e2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 0220 	bic.w	r2, r2, #32
 80041e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	7edb      	ldrb	r3, [r3, #27]
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d108      	bne.n	80041fc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0210 	bic.w	r2, r2, #16
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	e007      	b.n	800420c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f042 0210 	orr.w	r2, r2, #16
 800420a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	7f1b      	ldrb	r3, [r3, #28]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d108      	bne.n	8004226 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f042 0208 	orr.w	r2, r2, #8
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	e007      	b.n	8004236 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0208 	bic.w	r2, r2, #8
 8004234:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	7f5b      	ldrb	r3, [r3, #29]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d108      	bne.n	8004250 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f042 0204 	orr.w	r2, r2, #4
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	e007      	b.n	8004260 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0204 	bic.w	r2, r2, #4
 800425e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	431a      	orrs	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	431a      	orrs	r2, r3
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	ea42 0103 	orr.w	r1, r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	1e5a      	subs	r2, r3, #1
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	430a      	orrs	r2, r1
 8004284:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004294:	2300      	movs	r3, #0
}
 8004296:	4618      	mov	r0, r3
 8004298:	3710      	adds	r7, #16
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
	...

080042a0 <__NVIC_SetPriorityGrouping>:
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042b0:	4b0c      	ldr	r3, [pc, #48]	@ (80042e4 <__NVIC_SetPriorityGrouping+0x44>)
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80042bc:	4013      	ands	r3, r2
 80042be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80042cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042d2:	4a04      	ldr	r2, [pc, #16]	@ (80042e4 <__NVIC_SetPriorityGrouping+0x44>)
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	60d3      	str	r3, [r2, #12]
}
 80042d8:	bf00      	nop
 80042da:	3714      	adds	r7, #20
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	e000ed00 	.word	0xe000ed00

080042e8 <__NVIC_GetPriorityGrouping>:
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042ec:	4b04      	ldr	r3, [pc, #16]	@ (8004300 <__NVIC_GetPriorityGrouping+0x18>)
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	0a1b      	lsrs	r3, r3, #8
 80042f2:	f003 0307 	and.w	r3, r3, #7
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	e000ed00 	.word	0xe000ed00

08004304 <__NVIC_EnableIRQ>:
{
 8004304:	b480      	push	{r7}
 8004306:	b083      	sub	sp, #12
 8004308:	af00      	add	r7, sp, #0
 800430a:	4603      	mov	r3, r0
 800430c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800430e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004312:	2b00      	cmp	r3, #0
 8004314:	db0b      	blt.n	800432e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004316:	79fb      	ldrb	r3, [r7, #7]
 8004318:	f003 021f 	and.w	r2, r3, #31
 800431c:	4907      	ldr	r1, [pc, #28]	@ (800433c <__NVIC_EnableIRQ+0x38>)
 800431e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004322:	095b      	lsrs	r3, r3, #5
 8004324:	2001      	movs	r0, #1
 8004326:	fa00 f202 	lsl.w	r2, r0, r2
 800432a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800432e:	bf00      	nop
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	e000e100 	.word	0xe000e100

08004340 <__NVIC_SetPriority>:
{
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	4603      	mov	r3, r0
 8004348:	6039      	str	r1, [r7, #0]
 800434a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800434c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004350:	2b00      	cmp	r3, #0
 8004352:	db0a      	blt.n	800436a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	b2da      	uxtb	r2, r3
 8004358:	490c      	ldr	r1, [pc, #48]	@ (800438c <__NVIC_SetPriority+0x4c>)
 800435a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800435e:	0112      	lsls	r2, r2, #4
 8004360:	b2d2      	uxtb	r2, r2
 8004362:	440b      	add	r3, r1
 8004364:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004368:	e00a      	b.n	8004380 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	b2da      	uxtb	r2, r3
 800436e:	4908      	ldr	r1, [pc, #32]	@ (8004390 <__NVIC_SetPriority+0x50>)
 8004370:	79fb      	ldrb	r3, [r7, #7]
 8004372:	f003 030f 	and.w	r3, r3, #15
 8004376:	3b04      	subs	r3, #4
 8004378:	0112      	lsls	r2, r2, #4
 800437a:	b2d2      	uxtb	r2, r2
 800437c:	440b      	add	r3, r1
 800437e:	761a      	strb	r2, [r3, #24]
}
 8004380:	bf00      	nop
 8004382:	370c      	adds	r7, #12
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	e000e100 	.word	0xe000e100
 8004390:	e000ed00 	.word	0xe000ed00

08004394 <NVIC_EncodePriority>:
{
 8004394:	b480      	push	{r7}
 8004396:	b089      	sub	sp, #36	@ 0x24
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	f1c3 0307 	rsb	r3, r3, #7
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	bf28      	it	cs
 80043b2:	2304      	movcs	r3, #4
 80043b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	3304      	adds	r3, #4
 80043ba:	2b06      	cmp	r3, #6
 80043bc:	d902      	bls.n	80043c4 <NVIC_EncodePriority+0x30>
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	3b03      	subs	r3, #3
 80043c2:	e000      	b.n	80043c6 <NVIC_EncodePriority+0x32>
 80043c4:	2300      	movs	r3, #0
 80043c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043c8:	f04f 32ff 	mov.w	r2, #4294967295
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	fa02 f303 	lsl.w	r3, r2, r3
 80043d2:	43da      	mvns	r2, r3
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	401a      	ands	r2, r3
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043dc:	f04f 31ff 	mov.w	r1, #4294967295
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	fa01 f303 	lsl.w	r3, r1, r3
 80043e6:	43d9      	mvns	r1, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043ec:	4313      	orrs	r3, r2
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3724      	adds	r7, #36	@ 0x24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
	...

080043fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b082      	sub	sp, #8
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	3b01      	subs	r3, #1
 8004408:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800440c:	d301      	bcc.n	8004412 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800440e:	2301      	movs	r3, #1
 8004410:	e00f      	b.n	8004432 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004412:	4a0a      	ldr	r2, [pc, #40]	@ (800443c <SysTick_Config+0x40>)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	3b01      	subs	r3, #1
 8004418:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800441a:	210f      	movs	r1, #15
 800441c:	f04f 30ff 	mov.w	r0, #4294967295
 8004420:	f7ff ff8e 	bl	8004340 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004424:	4b05      	ldr	r3, [pc, #20]	@ (800443c <SysTick_Config+0x40>)
 8004426:	2200      	movs	r2, #0
 8004428:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800442a:	4b04      	ldr	r3, [pc, #16]	@ (800443c <SysTick_Config+0x40>)
 800442c:	2207      	movs	r2, #7
 800442e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	e000e010 	.word	0xe000e010

08004440 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b082      	sub	sp, #8
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f7ff ff29 	bl	80042a0 <__NVIC_SetPriorityGrouping>
}
 800444e:	bf00      	nop
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}

08004456 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004456:	b580      	push	{r7, lr}
 8004458:	b086      	sub	sp, #24
 800445a:	af00      	add	r7, sp, #0
 800445c:	4603      	mov	r3, r0
 800445e:	60b9      	str	r1, [r7, #8]
 8004460:	607a      	str	r2, [r7, #4]
 8004462:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004464:	2300      	movs	r3, #0
 8004466:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004468:	f7ff ff3e 	bl	80042e8 <__NVIC_GetPriorityGrouping>
 800446c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	68b9      	ldr	r1, [r7, #8]
 8004472:	6978      	ldr	r0, [r7, #20]
 8004474:	f7ff ff8e 	bl	8004394 <NVIC_EncodePriority>
 8004478:	4602      	mov	r2, r0
 800447a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800447e:	4611      	mov	r1, r2
 8004480:	4618      	mov	r0, r3
 8004482:	f7ff ff5d 	bl	8004340 <__NVIC_SetPriority>
}
 8004486:	bf00      	nop
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b082      	sub	sp, #8
 8004492:	af00      	add	r7, sp, #0
 8004494:	4603      	mov	r3, r0
 8004496:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff ff31 	bl	8004304 <__NVIC_EnableIRQ>
}
 80044a2:	bf00      	nop
 80044a4:	3708      	adds	r7, #8
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b082      	sub	sp, #8
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f7ff ffa2 	bl	80043fc <SysTick_Config>
 80044b8:	4603      	mov	r3, r0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80044d0:	f7ff fb58 	bl	8003b84 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d101      	bne.n	80044e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e099      	b.n	8004614 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0201 	bic.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004500:	e00f      	b.n	8004522 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004502:	f7ff fb3f 	bl	8003b84 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	2b05      	cmp	r3, #5
 800450e:	d908      	bls.n	8004522 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2220      	movs	r2, #32
 8004514:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2203      	movs	r2, #3
 800451a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e078      	b.n	8004614 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1e8      	bne.n	8004502 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	4b38      	ldr	r3, [pc, #224]	@ (800461c <HAL_DMA_Init+0x158>)
 800453c:	4013      	ands	r3, r2
 800453e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800454e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800455a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004566:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	4313      	orrs	r3, r2
 8004572:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004578:	2b04      	cmp	r3, #4
 800457a:	d107      	bne.n	800458c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004584:	4313      	orrs	r3, r2
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	4313      	orrs	r3, r2
 800458a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f023 0307 	bic.w	r3, r3, #7
 80045a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	d117      	bne.n	80045e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4313      	orrs	r3, r2
 80045be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00e      	beq.n	80045e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fb0d 	bl	8004be8 <DMA_CheckFifoParam>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d008      	beq.n	80045e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2240      	movs	r2, #64	@ 0x40
 80045d8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80045e2:	2301      	movs	r3, #1
 80045e4:	e016      	b.n	8004614 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 fac4 	bl	8004b7c <DMA_CalcBaseAndBitshift>
 80045f4:	4603      	mov	r3, r0
 80045f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045fc:	223f      	movs	r2, #63	@ 0x3f
 80045fe:	409a      	lsls	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}
 800461c:	f010803f 	.word	0xf010803f

08004620 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
 800462c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004636:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <HAL_DMA_Start_IT+0x26>
 8004642:	2302      	movs	r3, #2
 8004644:	e040      	b.n	80046c8 <HAL_DMA_Start_IT+0xa8>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004654:	b2db      	uxtb	r3, r3
 8004656:	2b01      	cmp	r3, #1
 8004658:	d12f      	bne.n	80046ba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2202      	movs	r2, #2
 800465e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	68b9      	ldr	r1, [r7, #8]
 800466e:	68f8      	ldr	r0, [r7, #12]
 8004670:	f000 fa56 	bl	8004b20 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004678:	223f      	movs	r2, #63	@ 0x3f
 800467a:	409a      	lsls	r2, r3
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0216 	orr.w	r2, r2, #22
 800468e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	d007      	beq.n	80046a8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f042 0208 	orr.w	r2, r2, #8
 80046a6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0201 	orr.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]
 80046b8:	e005      	b.n	80046c6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046c2:	2302      	movs	r3, #2
 80046c4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3718      	adds	r7, #24
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046dc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046de:	f7ff fa51 	bl	8003b84 <HAL_GetTick>
 80046e2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d008      	beq.n	8004702 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2280      	movs	r2, #128	@ 0x80
 80046f4:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e052      	b.n	80047a8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681a      	ldr	r2, [r3, #0]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f022 0216 	bic.w	r2, r2, #22
 8004710:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	695a      	ldr	r2, [r3, #20]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004720:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004726:	2b00      	cmp	r3, #0
 8004728:	d103      	bne.n	8004732 <HAL_DMA_Abort+0x62>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800472e:	2b00      	cmp	r3, #0
 8004730:	d007      	beq.n	8004742 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0208 	bic.w	r2, r2, #8
 8004740:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0201 	bic.w	r2, r2, #1
 8004750:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004752:	e013      	b.n	800477c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004754:	f7ff fa16 	bl	8003b84 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b05      	cmp	r3, #5
 8004760:	d90c      	bls.n	800477c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2220      	movs	r2, #32
 8004766:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2203      	movs	r2, #3
 800476c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e015      	b.n	80047a8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1e4      	bne.n	8004754 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800478e:	223f      	movs	r2, #63	@ 0x3f
 8004790:	409a      	lsls	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b02      	cmp	r3, #2
 80047c2:	d004      	beq.n	80047ce <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2280      	movs	r2, #128	@ 0x80
 80047c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e00c      	b.n	80047e8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2205      	movs	r2, #5
 80047d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0201 	bic.w	r2, r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	370c      	adds	r7, #12
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr

080047f4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80047fc:	2300      	movs	r3, #0
 80047fe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004800:	4b8e      	ldr	r3, [pc, #568]	@ (8004a3c <HAL_DMA_IRQHandler+0x248>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a8e      	ldr	r2, [pc, #568]	@ (8004a40 <HAL_DMA_IRQHandler+0x24c>)
 8004806:	fba2 2303 	umull	r2, r3, r2, r3
 800480a:	0a9b      	lsrs	r3, r3, #10
 800480c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004812:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800481e:	2208      	movs	r2, #8
 8004820:	409a      	lsls	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4013      	ands	r3, r2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d01a      	beq.n	8004860 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f003 0304 	and.w	r3, r3, #4
 8004834:	2b00      	cmp	r3, #0
 8004836:	d013      	beq.n	8004860 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f022 0204 	bic.w	r2, r2, #4
 8004846:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800484c:	2208      	movs	r2, #8
 800484e:	409a      	lsls	r2, r3
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004858:	f043 0201 	orr.w	r2, r3, #1
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004864:	2201      	movs	r2, #1
 8004866:	409a      	lsls	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	4013      	ands	r3, r2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d012      	beq.n	8004896 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00b      	beq.n	8004896 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004882:	2201      	movs	r2, #1
 8004884:	409a      	lsls	r2, r3
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800488e:	f043 0202 	orr.w	r2, r3, #2
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800489a:	2204      	movs	r2, #4
 800489c:	409a      	lsls	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	4013      	ands	r3, r2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d012      	beq.n	80048cc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0302 	and.w	r3, r3, #2
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00b      	beq.n	80048cc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048b8:	2204      	movs	r2, #4
 80048ba:	409a      	lsls	r2, r3
 80048bc:	693b      	ldr	r3, [r7, #16]
 80048be:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048c4:	f043 0204 	orr.w	r2, r3, #4
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d0:	2210      	movs	r2, #16
 80048d2:	409a      	lsls	r2, r3
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4013      	ands	r3, r2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d043      	beq.n	8004964 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0308 	and.w	r3, r3, #8
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d03c      	beq.n	8004964 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ee:	2210      	movs	r2, #16
 80048f0:	409a      	lsls	r2, r3
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d018      	beq.n	8004936 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d108      	bne.n	8004924 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004916:	2b00      	cmp	r3, #0
 8004918:	d024      	beq.n	8004964 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	4798      	blx	r3
 8004922:	e01f      	b.n	8004964 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004928:	2b00      	cmp	r3, #0
 800492a:	d01b      	beq.n	8004964 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	4798      	blx	r3
 8004934:	e016      	b.n	8004964 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004940:	2b00      	cmp	r3, #0
 8004942:	d107      	bne.n	8004954 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f022 0208 	bic.w	r2, r2, #8
 8004952:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004958:	2b00      	cmp	r3, #0
 800495a:	d003      	beq.n	8004964 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004968:	2220      	movs	r2, #32
 800496a:	409a      	lsls	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4013      	ands	r3, r2
 8004970:	2b00      	cmp	r3, #0
 8004972:	f000 808f 	beq.w	8004a94 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0310 	and.w	r3, r3, #16
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 8087 	beq.w	8004a94 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800498a:	2220      	movs	r2, #32
 800498c:	409a      	lsls	r2, r3
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b05      	cmp	r3, #5
 800499c:	d136      	bne.n	8004a0c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f022 0216 	bic.w	r2, r2, #22
 80049ac:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	695a      	ldr	r2, [r3, #20]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80049bc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d103      	bne.n	80049ce <HAL_DMA_IRQHandler+0x1da>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d007      	beq.n	80049de <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0208 	bic.w	r2, r2, #8
 80049dc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e2:	223f      	movs	r2, #63	@ 0x3f
 80049e4:	409a      	lsls	r2, r3
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d07e      	beq.n	8004b00 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	4798      	blx	r3
        }
        return;
 8004a0a:	e079      	b.n	8004b00 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d01d      	beq.n	8004a56 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10d      	bne.n	8004a44 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d031      	beq.n	8004a94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	4798      	blx	r3
 8004a38:	e02c      	b.n	8004a94 <HAL_DMA_IRQHandler+0x2a0>
 8004a3a:	bf00      	nop
 8004a3c:	20000038 	.word	0x20000038
 8004a40:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d023      	beq.n	8004a94 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	4798      	blx	r3
 8004a54:	e01e      	b.n	8004a94 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10f      	bne.n	8004a84 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0210 	bic.w	r2, r2, #16
 8004a72:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d003      	beq.n	8004a94 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a90:	6878      	ldr	r0, [r7, #4]
 8004a92:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d032      	beq.n	8004b02 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d022      	beq.n	8004aee <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2205      	movs	r2, #5
 8004aac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f022 0201 	bic.w	r2, r2, #1
 8004abe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	60bb      	str	r3, [r7, #8]
 8004ac6:	697a      	ldr	r2, [r7, #20]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d307      	bcc.n	8004adc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0301 	and.w	r3, r3, #1
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f2      	bne.n	8004ac0 <HAL_DMA_IRQHandler+0x2cc>
 8004ada:	e000      	b.n	8004ade <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004adc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d005      	beq.n	8004b02 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	4798      	blx	r3
 8004afe:	e000      	b.n	8004b02 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004b00:	bf00      	nop
    }
  }
}
 8004b02:	3718      	adds	r7, #24
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	60b9      	str	r1, [r7, #8]
 8004b2a:	607a      	str	r2, [r7, #4]
 8004b2c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004b3c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	2b40      	cmp	r3, #64	@ 0x40
 8004b4c:	d108      	bne.n	8004b60 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b5e:	e007      	b.n	8004b70 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	60da      	str	r2, [r3, #12]
}
 8004b70:	bf00      	nop
 8004b72:	3714      	adds	r7, #20
 8004b74:	46bd      	mov	sp, r7
 8004b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7a:	4770      	bx	lr

08004b7c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b085      	sub	sp, #20
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	3b10      	subs	r3, #16
 8004b8c:	4a14      	ldr	r2, [pc, #80]	@ (8004be0 <DMA_CalcBaseAndBitshift+0x64>)
 8004b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b92:	091b      	lsrs	r3, r3, #4
 8004b94:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b96:	4a13      	ldr	r2, [pc, #76]	@ (8004be4 <DMA_CalcBaseAndBitshift+0x68>)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b03      	cmp	r3, #3
 8004ba8:	d909      	bls.n	8004bbe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004bb2:	f023 0303 	bic.w	r3, r3, #3
 8004bb6:	1d1a      	adds	r2, r3, #4
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	659a      	str	r2, [r3, #88]	@ 0x58
 8004bbc:	e007      	b.n	8004bce <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004bc6:	f023 0303 	bic.w	r3, r3, #3
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3714      	adds	r7, #20
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	aaaaaaab 	.word	0xaaaaaaab
 8004be4:	0801753c 	.word	0x0801753c

08004be8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d11f      	bne.n	8004c42 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2b03      	cmp	r3, #3
 8004c06:	d856      	bhi.n	8004cb6 <DMA_CheckFifoParam+0xce>
 8004c08:	a201      	add	r2, pc, #4	@ (adr r2, 8004c10 <DMA_CheckFifoParam+0x28>)
 8004c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c0e:	bf00      	nop
 8004c10:	08004c21 	.word	0x08004c21
 8004c14:	08004c33 	.word	0x08004c33
 8004c18:	08004c21 	.word	0x08004c21
 8004c1c:	08004cb7 	.word	0x08004cb7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d046      	beq.n	8004cba <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c30:	e043      	b.n	8004cba <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c36:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004c3a:	d140      	bne.n	8004cbe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c40:	e03d      	b.n	8004cbe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c4a:	d121      	bne.n	8004c90 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d837      	bhi.n	8004cc2 <DMA_CheckFifoParam+0xda>
 8004c52:	a201      	add	r2, pc, #4	@ (adr r2, 8004c58 <DMA_CheckFifoParam+0x70>)
 8004c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c58:	08004c69 	.word	0x08004c69
 8004c5c:	08004c6f 	.word	0x08004c6f
 8004c60:	08004c69 	.word	0x08004c69
 8004c64:	08004c81 	.word	0x08004c81
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c6c:	e030      	b.n	8004cd0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c72:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d025      	beq.n	8004cc6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c7e:	e022      	b.n	8004cc6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c84:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004c88:	d11f      	bne.n	8004cca <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004c8e:	e01c      	b.n	8004cca <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d903      	bls.n	8004c9e <DMA_CheckFifoParam+0xb6>
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b03      	cmp	r3, #3
 8004c9a:	d003      	beq.n	8004ca4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004c9c:	e018      	b.n	8004cd0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	73fb      	strb	r3, [r7, #15]
      break;
 8004ca2:	e015      	b.n	8004cd0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ca8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00e      	beq.n	8004cce <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cb4:	e00b      	b.n	8004cce <DMA_CheckFifoParam+0xe6>
      break;
 8004cb6:	bf00      	nop
 8004cb8:	e00a      	b.n	8004cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8004cba:	bf00      	nop
 8004cbc:	e008      	b.n	8004cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8004cbe:	bf00      	nop
 8004cc0:	e006      	b.n	8004cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8004cc2:	bf00      	nop
 8004cc4:	e004      	b.n	8004cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8004cc6:	bf00      	nop
 8004cc8:	e002      	b.n	8004cd0 <DMA_CheckFifoParam+0xe8>
      break;   
 8004cca:	bf00      	nop
 8004ccc:	e000      	b.n	8004cd0 <DMA_CheckFifoParam+0xe8>
      break;
 8004cce:	bf00      	nop
    }
  } 
  
  return status; 
 8004cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop

08004ce0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	e08a      	b.n	8004e08 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d106      	bne.n	8004d0a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2220      	movs	r2, #32
 8004d00:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004d04:	6878      	ldr	r0, [r7, #4]
 8004d06:	f004 fea5 	bl	8009a54 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	60bb      	str	r3, [r7, #8]
 8004d0e:	4b40      	ldr	r3, [pc, #256]	@ (8004e10 <HAL_ETH_Init+0x130>)
 8004d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d12:	4a3f      	ldr	r2, [pc, #252]	@ (8004e10 <HAL_ETH_Init+0x130>)
 8004d14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d18:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d1a:	4b3d      	ldr	r3, [pc, #244]	@ (8004e10 <HAL_ETH_Init+0x130>)
 8004d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d22:	60bb      	str	r3, [r7, #8]
 8004d24:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004d26:	4b3b      	ldr	r3, [pc, #236]	@ (8004e14 <HAL_ETH_Init+0x134>)
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	4a3a      	ldr	r2, [pc, #232]	@ (8004e14 <HAL_ETH_Init+0x134>)
 8004d2c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004d30:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004d32:	4b38      	ldr	r3, [pc, #224]	@ (8004e14 <HAL_ETH_Init+0x134>)
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	4936      	ldr	r1, [pc, #216]	@ (8004e14 <HAL_ETH_Init+0x134>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004d40:	4b34      	ldr	r3, [pc, #208]	@ (8004e14 <HAL_ETH_Init+0x134>)
 8004d42:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	6812      	ldr	r2, [r2, #0]
 8004d52:	f043 0301 	orr.w	r3, r3, #1
 8004d56:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004d5a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d5c:	f7fe ff12 	bl	8003b84 <HAL_GetTick>
 8004d60:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004d62:	e011      	b.n	8004d88 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004d64:	f7fe ff0e 	bl	8003b84 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8004d72:	d909      	bls.n	8004d88 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2204      	movs	r2, #4
 8004d78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	22e0      	movs	r2, #224	@ 0xe0
 8004d80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e03f      	b.n	8004e08 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0301 	and.w	r3, r3, #1
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1e4      	bne.n	8004d64 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 fe16 	bl	80059cc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f000 fec1 	bl	8005b28 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 ff17 	bl	8005bda <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	461a      	mov	r2, r3
 8004db2:	2100      	movs	r1, #0
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 fe7f 	bl	8005ab8 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8004dc8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6812      	ldr	r2, [r2, #0]
 8004dd6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dda:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8004dde:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8004df2:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2210      	movs	r2, #16
 8004e02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40023800 	.word	0x40023800
 8004e14:	40013800 	.word	0x40013800

08004e18 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e26:	2b10      	cmp	r3, #16
 8004e28:	d150      	bne.n	8004ecc <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2204      	movs	r2, #4
 8004e36:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f9f8 	bl	800522e <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f042 0208 	orr.w	r2, r2, #8
 8004e4c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e56:	2001      	movs	r0, #1
 8004e58:	f7fe fea0 	bl	8003b9c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 0204 	orr.w	r2, r2, #4
 8004e72:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004e7c:	2001      	movs	r0, #1
 8004e7e:	f7fe fe8d 	bl	8003b9c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 fc3a 	bl	8005704 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	6812      	ldr	r2, [r2, #0]
 8004e9e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004ea2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004ea6:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6812      	ldr	r2, [r2, #0]
 8004eb6:	f043 0302 	orr.w	r3, r3, #2
 8004eba:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004ebe:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2240      	movs	r2, #64	@ 0x40
 8004ec4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    return HAL_OK;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	e000      	b.n	8004ece <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
  }
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b084      	sub	sp, #16
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004ee4:	2b40      	cmp	r3, #64	@ 0x40
 8004ee6:	d14a      	bne.n	8004f7e <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2220      	movs	r2, #32
 8004eec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	6812      	ldr	r2, [r2, #0]
 8004efe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f02:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f06:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004f10:	699b      	ldr	r3, [r3, #24]
 8004f12:	687a      	ldr	r2, [r7, #4]
 8004f14:	6812      	ldr	r2, [r2, #0]
 8004f16:	f023 0302 	bic.w	r3, r3, #2
 8004f1a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004f1e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f022 0204 	bic.w	r2, r2, #4
 8004f2e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f38:	2001      	movs	r0, #1
 8004f3a:	f7fe fe2f 	bl	8003b9c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fbdc 	bl	8005704 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f022 0208 	bic.w	r2, r2, #8
 8004f5a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004f64:	2001      	movs	r0, #1
 8004f66:	f7fe fe19 	bl	8003b9c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2210      	movs	r2, #16
 8004f76:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	e000      	b.n	8004f80 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
  }
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig, uint32_t Timeout)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	60f8      	str	r0, [r7, #12]
 8004f90:	60b9      	str	r1, [r7, #8]
 8004f92:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d109      	bne.n	8004fae <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa0:	f043 0201 	orr.w	r2, r3, #1
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e07c      	b.n	80050a8 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004fb4:	2b40      	cmp	r3, #64	@ 0x40
 8004fb6:	d176      	bne.n	80050a6 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	68b9      	ldr	r1, [r7, #8]
 8004fbc:	68f8      	ldr	r0, [r7, #12]
 8004fbe:	f000 fe7b 	bl	8005cb8 <ETH_Prepare_Tx_Descriptors>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d009      	beq.n	8004fdc <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fce:	f043 0202 	orr.w	r2, r3, #2
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e065      	b.n	80050a8 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8004fdc:	f3bf 8f4f 	dsb	sy
}
 8004fe0:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	3206      	adds	r2, #6
 8004fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fee:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff4:	1c5a      	adds	r2, r3, #1
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	629a      	str	r2, [r3, #40]	@ 0x28
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffe:	2b03      	cmp	r3, #3
 8005000:	d904      	bls.n	800500c <HAL_ETH_Transmit+0x84>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005006:	1f1a      	subs	r2, r3, #4
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681a      	ldr	r2, [r3, #0]
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	3106      	adds	r1, #6
 8005018:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800501c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005020:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8005022:	f7fe fdaf 	bl	8003b84 <HAL_GetTick>
 8005026:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8005028:	e037      	b.n	800509a <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005032:	695b      	ldr	r3, [r3, #20]
 8005034:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005038:	2b00      	cmp	r3, #0
 800503a:	d011      	beq.n	8005060 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005042:	f043 0208 	orr.w	r2, r3, #8
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005054:	695a      	ldr	r2, [r3, #20]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        /* Return function status */
        return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e023      	b.n	80050a8 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005066:	d018      	beq.n	800509a <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005068:	f7fe fd8c 	bl	8003b84 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	429a      	cmp	r2, r3
 8005076:	d302      	bcc.n	800507e <HAL_ETH_Transmit+0xf6>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10d      	bne.n	800509a <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005084:	f043 0204 	orr.w	r2, r3, #4
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8005094:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	e006      	b.n	80050a8 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	dbc3      	blt.n	800502a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 80050a2:	2300      	movs	r3, #0
 80050a4:	e000      	b.n	80050a8 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
  }
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3718      	adds	r7, #24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b088      	sub	sp, #32
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 80050ba:	2300      	movs	r3, #0
 80050bc:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d109      	bne.n	80050dc <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ce:	f043 0201 	orr.w	r2, r3, #1
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e0a4      	b.n	8005226 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050e2:	2b40      	cmp	r3, #64	@ 0x40
 80050e4:	d001      	beq.n	80050ea <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80050e6:	2301      	movs	r3, #1
 80050e8:	e09d      	b.n	8005226 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ee:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	69fa      	ldr	r2, [r7, #28]
 80050f4:	3212      	adds	r2, #18
 80050f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050fa:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005100:	f1c3 0304 	rsb	r3, r3, #4
 8005104:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8005106:	e066      	b.n	80051d6 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005110:	2b00      	cmp	r3, #0
 8005112:	d007      	beq.n	8005124 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	69da      	ldr	r2, [r3, #28]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	699a      	ldr	r2, [r3, #24]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800512c:	2b00      	cmp	r3, #0
 800512e:	d103      	bne.n	8005138 <HAL_ETH_ReadData+0x88>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005134:	2b00      	cmp	r3, #0
 8005136:	d03c      	beq.n	80051b2 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005140:	2b00      	cmp	r3, #0
 8005142:	d005      	beq.n	8005150 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8005150:	69bb      	ldr	r3, [r7, #24]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	0c1b      	lsrs	r3, r3, #16
 8005156:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800515a:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005164:	2b00      	cmp	r3, #0
 8005166:	d005      	beq.n	8005174 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8005170:	2301      	movs	r3, #1
 8005172:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	689a      	ldr	r2, [r3, #8]
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800518c:	461a      	mov	r2, r3
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	b29b      	uxth	r3, r3
 8005192:	f004 fe0f 	bl	8009db4 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800519a:	1c5a      	adds	r2, r3, #1
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	441a      	add	r2, r3
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	2200      	movs	r2, #0
 80051b0:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	3301      	adds	r3, #1
 80051b6:	61fb      	str	r3, [r7, #28]
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	2b03      	cmp	r3, #3
 80051bc:	d902      	bls.n	80051c4 <HAL_ETH_ReadData+0x114>
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	3b04      	subs	r3, #4
 80051c2:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	69fa      	ldr	r2, [r7, #28]
 80051c8:	3212      	adds	r2, #18
 80051ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ce:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	3301      	adds	r3, #1
 80051d4:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 80051da:	2b00      	cmp	r3, #0
 80051dc:	db06      	blt.n	80051ec <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d202      	bcs.n	80051ec <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80051e6:	7cfb      	ldrb	r3, [r7, #19]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d08d      	beq.n	8005108 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	441a      	add	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d002      	beq.n	8005206 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f814 	bl	800522e <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	69fa      	ldr	r2, [r7, #28]
 800520a:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800520c:	7cfb      	ldrb	r3, [r7, #19]
 800520e:	2b01      	cmp	r3, #1
 8005210:	d108      	bne.n	8005224 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005220:	2300      	movs	r3, #0
 8005222:	e000      	b.n	8005226 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
}
 8005226:	4618      	mov	r0, r3
 8005228:	3720      	adds	r7, #32
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b088      	sub	sp, #32
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8005236:	2300      	movs	r3, #0
 8005238:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 800523a:	2301      	movs	r3, #1
 800523c:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005242:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	69fa      	ldr	r2, [r7, #28]
 8005248:	3212      	adds	r2, #18
 800524a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800524e:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005254:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8005256:	e044      	b.n	80052e2 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d112      	bne.n	8005286 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8005260:	f107 0308 	add.w	r3, r7, #8
 8005264:	4618      	mov	r0, r3
 8005266:	f004 fd75 	bl	8009d54 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d102      	bne.n	8005276 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8005270:	2300      	movs	r3, #0
 8005272:	74fb      	strb	r3, [r7, #19]
 8005274:	e007      	b.n	8005286 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	461a      	mov	r2, r3
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	461a      	mov	r2, r3
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8005286:	7cfb      	ldrb	r3, [r7, #19]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d02a      	beq.n	80052e2 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005290:	2b00      	cmp	r3, #0
 8005292:	d108      	bne.n	80052a6 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800529c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	6053      	str	r3, [r2, #4]
 80052a4:	e005      	b.n	80052b2 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80052be:	69fb      	ldr	r3, [r7, #28]
 80052c0:	3301      	adds	r3, #1
 80052c2:	61fb      	str	r3, [r7, #28]
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	2b03      	cmp	r3, #3
 80052c8:	d902      	bls.n	80052d0 <ETH_UpdateDescriptor+0xa2>
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	3b04      	subs	r3, #4
 80052ce:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	69fa      	ldr	r2, [r7, #28]
 80052d4:	3212      	adds	r2, #18
 80052d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052da:	617b      	str	r3, [r7, #20]
      desccount--;
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	3b01      	subs	r3, #1
 80052e0:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80052e2:	69bb      	ldr	r3, [r7, #24]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d002      	beq.n	80052ee <ETH_UpdateDescriptor+0xc0>
 80052e8:	7cfb      	ldrb	r3, [r7, #19]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1b4      	bne.n	8005258 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052f2:	69ba      	ldr	r2, [r7, #24]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d01a      	beq.n	800532e <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (ETH_RX_DESC_CNT + descidx - 1U) % ETH_RX_DESC_CNT;
 80052f8:	69fb      	ldr	r3, [r7, #28]
 80052fa:	3303      	adds	r3, #3
 80052fc:	f003 0303 	and.w	r3, r3, #3
 8005300:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8005302:	f3bf 8f5f 	dmb	sy
}
 8005306:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6919      	ldr	r1, [r3, #16]
 800530c:	68fa      	ldr	r2, [r7, #12]
 800530e:	4613      	mov	r3, r2
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	4413      	add	r3, r2
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	18ca      	adds	r2, r1, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005320:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	69fa      	ldr	r2, [r7, #28]
 8005326:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800532e:	bf00      	nop
 8005330:	3720      	adds	r7, #32
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b086      	sub	sp, #24
 800533a:	af00      	add	r7, sp, #0
 800533c:	60f8      	str	r0, [r7, #12]
 800533e:	60b9      	str	r1, [r7, #8]
 8005340:	607a      	str	r2, [r7, #4]
 8005342:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f003 031c 	and.w	r3, r3, #28
 8005352:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	02db      	lsls	r3, r3, #11
 8005358:	b29b      	uxth	r3, r3
 800535a:	697a      	ldr	r2, [r7, #20]
 800535c:	4313      	orrs	r3, r2
 800535e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	019b      	lsls	r3, r3, #6
 8005364:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	4313      	orrs	r3, r2
 800536c:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f023 0302 	bic.w	r3, r3, #2
 8005374:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	f043 0301 	orr.w	r3, r3, #1
 800537c:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8005386:	f7fe fbfd 	bl	8003b84 <HAL_GetTick>
 800538a:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800538c:	e00d      	b.n	80053aa <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800538e:	f7fe fbf9 	bl	8003b84 <HAL_GetTick>
 8005392:	4602      	mov	r2, r0
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	1ad3      	subs	r3, r2, r3
 8005398:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800539c:	d301      	bcc.n	80053a2 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e010      	b.n	80053c4 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f003 0301 	and.w	r3, r3, #1
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d1ec      	bne.n	800538e <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	461a      	mov	r2, r3
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}

080053cc <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f003 031c 	and.w	r3, r3, #28
 80053e8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	02db      	lsls	r3, r3, #11
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	697a      	ldr	r2, [r7, #20]
 80053f2:	4313      	orrs	r3, r2
 80053f4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	019b      	lsls	r3, r3, #6
 80053fa:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80053fe:	697a      	ldr	r2, [r7, #20]
 8005400:	4313      	orrs	r3, r2
 8005402:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f043 0302 	orr.w	r3, r3, #2
 800540a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	f043 0301 	orr.w	r3, r3, #1
 8005412:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	b29a      	uxth	r2, r3
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005426:	f7fe fbad 	bl	8003b84 <HAL_GetTick>
 800542a:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800542c:	e00d      	b.n	800544a <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800542e:	f7fe fba9 	bl	8003b84 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800543c:	d301      	bcc.n	8005442 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e009      	b.n	8005456 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f003 0301 	and.w	r3, r3, #1
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1ec      	bne.n	800542e <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3718      	adds	r7, #24
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}

0800545e <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800545e:	b480      	push	{r7}
 8005460:	b083      	sub	sp, #12
 8005462:	af00      	add	r7, sp, #0
 8005464:	6078      	str	r0, [r7, #4]
 8005466:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e0e6      	b.n	8005640 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 0310 	and.w	r3, r3, #16
 800547c:	2b00      	cmp	r3, #0
 800547e:	bf14      	ite	ne
 8005480:	2301      	movne	r3, #1
 8005482:	2300      	moveq	r3, #0
 8005484:	b2db      	uxtb	r3, r3
 8005486:	461a      	mov	r2, r3
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	bf0c      	ite	eq
 80054aa:	2301      	moveq	r3, #1
 80054ac:	2300      	movne	r3, #0
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	461a      	mov	r2, r3
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	bf14      	ite	ne
 80054c6:	2301      	movne	r3, #1
 80054c8:	2300      	moveq	r3, #0
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	bf0c      	ite	eq
 80054e0:	2301      	moveq	r3, #1
 80054e2:	2300      	movne	r3, #0
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	461a      	mov	r2, r3
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	bf14      	ite	ne
 80054fa:	2301      	movne	r3, #1
 80054fc:	2300      	moveq	r3, #0
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	461a      	mov	r2, r3
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800552c:	2b00      	cmp	r3, #0
 800552e:	bf0c      	ite	eq
 8005530:	2301      	moveq	r3, #1
 8005532:	2300      	movne	r3, #0
 8005534:	b2db      	uxtb	r3, r3
 8005536:	461a      	mov	r2, r3
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005546:	2b00      	cmp	r3, #0
 8005548:	bf0c      	ite	eq
 800554a:	2301      	moveq	r3, #1
 800554c:	2300      	movne	r3, #0
 800554e:	b2db      	uxtb	r3, r3
 8005550:	461a      	mov	r2, r3
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005560:	2b00      	cmp	r3, #0
 8005562:	bf14      	ite	ne
 8005564:	2301      	movne	r3, #1
 8005566:	2300      	moveq	r3, #0
 8005568:	b2db      	uxtb	r3, r3
 800556a:	461a      	mov	r2, r3
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005588:	2b00      	cmp	r3, #0
 800558a:	bf14      	ite	ne
 800558c:	2301      	movne	r3, #1
 800558e:	2300      	moveq	r3, #0
 8005590:	b2db      	uxtb	r3, r3
 8005592:	461a      	mov	r2, r3
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	bf14      	ite	ne
 80055a6:	2301      	movne	r3, #1
 80055a8:	2300      	moveq	r3, #0
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	461a      	mov	r2, r3
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	699b      	ldr	r3, [r3, #24]
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	bf14      	ite	ne
 80055c0:	2301      	movne	r3, #1
 80055c2:	2300      	moveq	r3, #0
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	461a      	mov	r2, r3
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d8:	2b00      	cmp	r3, #0
 80055da:	bf0c      	ite	eq
 80055dc:	2301      	moveq	r3, #1
 80055de:	2300      	movne	r3, #0
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	461a      	mov	r2, r3
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	0c1b      	lsrs	r3, r3, #16
 8005600:	b29a      	uxth	r2, r3
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	699b      	ldr	r3, [r3, #24]
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b00      	cmp	r3, #0
 8005612:	bf14      	ite	ne
 8005614:	2301      	movne	r3, #1
 8005616:	2300      	moveq	r3, #0
 8005618:	b2db      	uxtb	r3, r3
 800561a:	461a      	mov	r2, r3
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800562c:	2b00      	cmp	r3, #0
 800562e:	bf14      	ite	ne
 8005630:	2301      	movne	r3, #1
 8005632:	2300      	moveq	r3, #0
 8005634:	b2db      	uxtb	r3, r3
 8005636:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e00b      	b.n	8005678 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005666:	2b10      	cmp	r3, #16
 8005668:	d105      	bne.n	8005676 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800566a:	6839      	ldr	r1, [r7, #0]
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f86f 	bl	8005750 <ETH_SetMACConfig>

    return HAL_OK;
 8005672:	2300      	movs	r3, #0
 8005674:	e000      	b.n	8005678 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
  }
}
 8005678:	4618      	mov	r0, r3
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 031c 	bic.w	r3, r3, #28
 8005696:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005698:	f001 fbcc 	bl	8006e34 <HAL_RCC_GetHCLKFreq>
 800569c:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	4a14      	ldr	r2, [pc, #80]	@ (80056f4 <HAL_ETH_SetMDIOClockRange+0x74>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d804      	bhi.n	80056b0 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	f043 0308 	orr.w	r3, r3, #8
 80056ac:	60fb      	str	r3, [r7, #12]
 80056ae:	e019      	b.n	80056e4 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	4a11      	ldr	r2, [pc, #68]	@ (80056f8 <HAL_ETH_SetMDIOClockRange+0x78>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d204      	bcs.n	80056c2 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f043 030c 	orr.w	r3, r3, #12
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	e010      	b.n	80056e4 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	4a0d      	ldr	r2, [pc, #52]	@ (80056fc <HAL_ETH_SetMDIOClockRange+0x7c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d90c      	bls.n	80056e4 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	4a0c      	ldr	r2, [pc, #48]	@ (8005700 <HAL_ETH_SetMDIOClockRange+0x80>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d804      	bhi.n	80056dc <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f043 0304 	orr.w	r3, r3, #4
 80056d8:	60fb      	str	r3, [r7, #12]
 80056da:	e003      	b.n	80056e4 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	f043 0310 	orr.w	r3, r3, #16
 80056e2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	611a      	str	r2, [r3, #16]
}
 80056ec:	bf00      	nop
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	02160ebf 	.word	0x02160ebf
 80056f8:	03938700 	.word	0x03938700
 80056fc:	05f5e0ff 	.word	0x05f5e0ff
 8005700:	08f0d17f 	.word	0x08f0d17f

08005704 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800570c:	2300      	movs	r3, #0
 800570e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	687a      	ldr	r2, [r7, #4]
 800571c:	6812      	ldr	r2, [r2, #0]
 800571e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005722:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005726:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005734:	2001      	movs	r0, #1
 8005736:	f7fe fa31 	bl	8003b9c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8005744:	6193      	str	r3, [r2, #24]
}
 8005746:	bf00      	nop
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
	...

08005750 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b084      	sub	sp, #16
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	4b53      	ldr	r3, [pc, #332]	@ (80058b4 <ETH_SetMACConfig+0x164>)
 8005766:	4013      	ands	r3, r2
 8005768:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	7b9b      	ldrb	r3, [r3, #14]
 800576e:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005770:	683a      	ldr	r2, [r7, #0]
 8005772:	7c12      	ldrb	r2, [r2, #16]
 8005774:	2a00      	cmp	r2, #0
 8005776:	d102      	bne.n	800577e <ETH_SetMACConfig+0x2e>
 8005778:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800577c:	e000      	b.n	8005780 <ETH_SetMACConfig+0x30>
 800577e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005780:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	7c52      	ldrb	r2, [r2, #17]
 8005786:	2a00      	cmp	r2, #0
 8005788:	d102      	bne.n	8005790 <ETH_SetMACConfig+0x40>
 800578a:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800578e:	e000      	b.n	8005792 <ETH_SetMACConfig+0x42>
 8005790:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005792:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005798:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	7fdb      	ldrb	r3, [r3, #31]
 800579e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80057a0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80057a6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	7f92      	ldrb	r2, [r2, #30]
 80057ac:	2a00      	cmp	r2, #0
 80057ae:	d102      	bne.n	80057b6 <ETH_SetMACConfig+0x66>
 80057b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80057b4:	e000      	b.n	80057b8 <ETH_SetMACConfig+0x68>
 80057b6:	2200      	movs	r2, #0
                        macconf->Speed |
 80057b8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	7f1b      	ldrb	r3, [r3, #28]
 80057be:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80057c0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80057c6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	791b      	ldrb	r3, [r3, #4]
 80057cc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80057ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80057d0:	683a      	ldr	r2, [r7, #0]
 80057d2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80057d6:	2a00      	cmp	r2, #0
 80057d8:	d102      	bne.n	80057e0 <ETH_SetMACConfig+0x90>
 80057da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057de:	e000      	b.n	80057e2 <ETH_SetMACConfig+0x92>
 80057e0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80057e2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	7bdb      	ldrb	r3, [r3, #15]
 80057e8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80057ea:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80057f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057f8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80057fa:	4313      	orrs	r3, r2
 80057fc:	68fa      	ldr	r2, [r7, #12]
 80057fe:	4313      	orrs	r3, r2
 8005800:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005812:	2001      	movs	r0, #1
 8005814:	f7fe f9c2 	bl	8003b9c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	699b      	ldr	r3, [r3, #24]
 8005826:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	f64f 7341 	movw	r3, #65345	@ 0xff41
 800582e:	4013      	ands	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005836:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 800583e:	2a00      	cmp	r2, #0
 8005840:	d101      	bne.n	8005846 <ETH_SetMACConfig+0xf6>
 8005842:	2280      	movs	r2, #128	@ 0x80
 8005844:	e000      	b.n	8005848 <ETH_SetMACConfig+0xf8>
 8005846:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005848:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800584e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005850:	683a      	ldr	r2, [r7, #0]
 8005852:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8005856:	2a01      	cmp	r2, #1
 8005858:	d101      	bne.n	800585e <ETH_SetMACConfig+0x10e>
 800585a:	2208      	movs	r2, #8
 800585c:	e000      	b.n	8005860 <ETH_SetMACConfig+0x110>
 800585e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005860:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8005862:	683a      	ldr	r2, [r7, #0]
 8005864:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8005868:	2a01      	cmp	r2, #1
 800586a:	d101      	bne.n	8005870 <ETH_SetMACConfig+0x120>
 800586c:	2204      	movs	r2, #4
 800586e:	e000      	b.n	8005872 <ETH_SetMACConfig+0x122>
 8005870:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005872:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 800587a:	2a01      	cmp	r2, #1
 800587c:	d101      	bne.n	8005882 <ETH_SetMACConfig+0x132>
 800587e:	2202      	movs	r2, #2
 8005880:	e000      	b.n	8005884 <ETH_SetMACConfig+0x134>
 8005882:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005884:	4313      	orrs	r3, r2
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	4313      	orrs	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800589c:	2001      	movs	r0, #1
 800589e:	f7fe f97d 	bl	8003b9c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	619a      	str	r2, [r3, #24]
}
 80058aa:	bf00      	nop
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	fd20810f 	.word	0xfd20810f

080058b8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4b3d      	ldr	r3, [pc, #244]	@ (80059c8 <ETH_SetDMAConfig+0x110>)
 80058d2:	4013      	ands	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	7b1b      	ldrb	r3, [r3, #12]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d102      	bne.n	80058e4 <ETH_SetDMAConfig+0x2c>
 80058de:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80058e2:	e000      	b.n	80058e6 <ETH_SetDMAConfig+0x2e>
 80058e4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	7b5b      	ldrb	r3, [r3, #13]
 80058ea:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80058ec:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	7f52      	ldrb	r2, [r2, #29]
 80058f2:	2a00      	cmp	r2, #0
 80058f4:	d102      	bne.n	80058fc <ETH_SetDMAConfig+0x44>
 80058f6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80058fa:	e000      	b.n	80058fe <ETH_SetDMAConfig+0x46>
 80058fc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80058fe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	7b9b      	ldrb	r3, [r3, #14]
 8005904:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005906:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800590c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	7f1b      	ldrb	r3, [r3, #28]
 8005912:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005914:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	7f9b      	ldrb	r3, [r3, #30]
 800591a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800591c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005922:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800592a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800592c:	4313      	orrs	r3, r2
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	4313      	orrs	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800593c:	461a      	mov	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800594e:	2001      	movs	r0, #1
 8005950:	f7fe f924 	bl	8003b9c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800595c:	461a      	mov	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	791b      	ldrb	r3, [r3, #4]
 8005966:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800596c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8005972:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005978:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8005980:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8005982:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005988:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800598a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005990:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	6812      	ldr	r2, [r2, #0]
 8005996:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800599a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800599e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80059ac:	2001      	movs	r0, #1
 80059ae:	f7fe f8f5 	bl	8003b9c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80059ba:	461a      	mov	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6013      	str	r3, [r2, #0]
}
 80059c0:	bf00      	nop
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	f8de3f23 	.word	0xf8de3f23

080059cc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b0a6      	sub	sp, #152	@ 0x98
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80059d4:	2301      	movs	r3, #1
 80059d6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80059da:	2301      	movs	r3, #1
 80059dc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80059e0:	2300      	movs	r3, #0
 80059e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80059e4:	2300      	movs	r3, #0
 80059e6:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80059ea:	2301      	movs	r3, #1
 80059ec:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80059f0:	2300      	movs	r3, #0
 80059f2:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80059f6:	2301      	movs	r3, #1
 80059f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80059fc:	2301      	movs	r3, #1
 80059fe:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8005a02:	2300      	movs	r3, #0
 8005a04:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8005a12:	2300      	movs	r3, #0
 8005a14:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005a22:	2300      	movs	r3, #0
 8005a24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005a34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005a38:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005a3a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005a3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005a40:	2300      	movs	r3, #0
 8005a42:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005a46:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f7ff fe7f 	bl	8005750 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8005a52:	2301      	movs	r3, #1
 8005a54:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8005a56:	2301      	movs	r3, #1
 8005a58:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005a60:	2301      	movs	r3, #1
 8005a62:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005a64:	2300      	movs	r3, #0
 8005a66:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8005a68:	2300      	movs	r3, #0
 8005a6a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005a74:	2300      	movs	r3, #0
 8005a76:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005a82:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8005a86:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005a88:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005a8c:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005a8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005a92:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8005a94:	2301      	movs	r3, #1
 8005a96:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005aa2:	f107 0308 	add.w	r3, r7, #8
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f7ff ff05 	bl	80058b8 <ETH_SetDMAConfig>
}
 8005aae:	bf00      	nop
 8005ab0:	3798      	adds	r7, #152	@ 0x98
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b087      	sub	sp, #28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	3305      	adds	r3, #5
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	021b      	lsls	r3, r3, #8
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	3204      	adds	r2, #4
 8005ad0:	7812      	ldrb	r2, [r2, #0]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	4b11      	ldr	r3, [pc, #68]	@ (8005b20 <ETH_MACAddressConfig+0x68>)
 8005ada:	4413      	add	r3, r2
 8005adc:	461a      	mov	r2, r3
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	3303      	adds	r3, #3
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	061a      	lsls	r2, r3, #24
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	3302      	adds	r3, #2
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	041b      	lsls	r3, r3, #16
 8005af2:	431a      	orrs	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	3301      	adds	r3, #1
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	021b      	lsls	r3, r3, #8
 8005afc:	4313      	orrs	r3, r2
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	7812      	ldrb	r2, [r2, #0]
 8005b02:	4313      	orrs	r3, r2
 8005b04:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	4b06      	ldr	r3, [pc, #24]	@ (8005b24 <ETH_MACAddressConfig+0x6c>)
 8005b0a:	4413      	add	r3, r2
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	6013      	str	r3, [r2, #0]
}
 8005b12:	bf00      	nop
 8005b14:	371c      	adds	r7, #28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	40028040 	.word	0x40028040
 8005b24:	40028044 	.word	0x40028044

08005b28 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005b30:	2300      	movs	r3, #0
 8005b32:	60fb      	str	r3, [r7, #12]
 8005b34:	e03e      	b.n	8005bb4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68d9      	ldr	r1, [r3, #12]
 8005b3a:	68fa      	ldr	r2, [r7, #12]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	4413      	add	r3, r2
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	440b      	add	r3, r1
 8005b46:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	2200      	movs	r2, #0
 8005b52:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	2200      	movs	r2, #0
 8005b58:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005b60:	68b9      	ldr	r1, [r7, #8]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	3206      	adds	r2, #6
 8005b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d80c      	bhi.n	8005b98 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68d9      	ldr	r1, [r3, #12]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	1c5a      	adds	r2, r3, #1
 8005b86:	4613      	mov	r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	4413      	add	r3, r2
 8005b8c:	00db      	lsls	r3, r3, #3
 8005b8e:	440b      	add	r3, r1
 8005b90:	461a      	mov	r2, r3
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	60da      	str	r2, [r3, #12]
 8005b96:	e004      	b.n	8005ba2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	3301      	adds	r3, #1
 8005bb2:	60fb      	str	r3, [r7, #12]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2b03      	cmp	r3, #3
 8005bb8:	d9bd      	bls.n	8005b36 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68da      	ldr	r2, [r3, #12]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005bcc:	611a      	str	r2, [r3, #16]
}
 8005bce:	bf00      	nop
 8005bd0:	3714      	adds	r7, #20
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr

08005bda <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b085      	sub	sp, #20
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005be2:	2300      	movs	r3, #0
 8005be4:	60fb      	str	r3, [r7, #12]
 8005be6:	e048      	b.n	8005c7a <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6919      	ldr	r1, [r3, #16]
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4413      	add	r3, r2
 8005bf4:	00db      	lsls	r3, r3, #3
 8005bf6:	440b      	add	r3, r1
 8005bf8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	2200      	movs	r2, #0
 8005c04:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005c06:	68bb      	ldr	r3, [r7, #8]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	2200      	movs	r2, #0
 8005c16:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005c24:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	695b      	ldr	r3, [r3, #20]
 8005c2a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005c3e:	68b9      	ldr	r1, [r7, #8]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	3212      	adds	r2, #18
 8005c46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d80c      	bhi.n	8005c6a <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6919      	ldr	r1, [r3, #16]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	4613      	mov	r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	4413      	add	r3, r2
 8005c5e:	00db      	lsls	r3, r3, #3
 8005c60:	440b      	add	r3, r1
 8005c62:	461a      	mov	r2, r3
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	60da      	str	r2, [r3, #12]
 8005c68:	e004      	b.n	8005c74 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	691b      	ldr	r3, [r3, #16]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	3301      	adds	r3, #1
 8005c78:	60fb      	str	r3, [r7, #12]
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2b03      	cmp	r3, #3
 8005c7e:	d9b3      	bls.n	8005be8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691a      	ldr	r2, [r3, #16]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005caa:	60da      	str	r2, [r3, #12]
}
 8005cac:	bf00      	nop
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrupt
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b091      	sub	sp, #68	@ 0x44
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	3318      	adds	r3, #24
 8005cc8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8005cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cdc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce2:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	689b      	ldr	r3, [r3, #8]
 8005ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8005cea:	2300      	movs	r3, #0
 8005cec:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cf6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cfa:	d007      	beq.n	8005d0c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005cfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d00:	3304      	adds	r3, #4
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4413      	add	r3, r2
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d001      	beq.n	8005d10 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8005d0c:	2302      	movs	r3, #2
 8005d0e:	e115      	b.n	8005f3c <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8005d10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d12:	3301      	adds	r3, #1
 8005d14:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d1e:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8005d28:	f023 031f 	bic.w	r3, r3, #31
 8005d2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d2e:	6852      	ldr	r2, [r2, #4]
 8005d30:	431a      	orrs	r2, r3
 8005d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d34:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d008      	beq.n	8005d54 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8005d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	695b      	ldr	r3, [r3, #20]
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d52:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f003 0320 	and.w	r3, r3, #32
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d008      	beq.n	8005d72 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8005d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	691b      	ldr	r3, [r3, #16]
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d70:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f003 0304 	and.w	r3, r3, #4
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d005      	beq.n	8005d8a <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8005d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d88:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d94:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8005d96:	e084      	b.n	8005ea2 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da2:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d006      	beq.n	8005db8 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	e005      	b.n	8005dc4 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc2:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8005dc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dcc:	2b03      	cmp	r3, #3
 8005dce:	d902      	bls.n	8005dd6 <ETH_Prepare_Tx_Descriptors+0x11e>
 8005dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dd2:	3b04      	subs	r3, #4
 8005dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dd8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005dde:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8005de0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005de8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005dec:	d007      	beq.n	8005dfe <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8005dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005df0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005df2:	3304      	adds	r3, #4
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d029      	beq.n	8005e52 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8005dfe:	6a3b      	ldr	r3, [r7, #32]
 8005e00:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005e06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e0a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e10:	e019      	b.n	8005e46 <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8005e12:	f3bf 8f5f 	dmb	sy
}
 8005e16:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e22:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8005e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e26:	3301      	adds	r3, #1
 8005e28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e2c:	2b03      	cmp	r3, #3
 8005e2e:	d902      	bls.n	8005e36 <ETH_Prepare_Tx_Descriptors+0x17e>
 8005e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e32:	3b04      	subs	r3, #4
 8005e34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8005e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005e3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e3e:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8005e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e42:	3301      	adds	r3, #1
 8005e44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d3e1      	bcc.n	8005e12 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8005e4e:	2302      	movs	r3, #2
 8005e50:	e074      	b.n	8005f3c <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8005e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e60:	3301      	adds	r3, #1
 8005e62:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8005e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e66:	689b      	ldr	r3, [r3, #8]
 8005e68:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	461a      	mov	r2, r3
 8005e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e72:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8005e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8005e7c:	f023 031f 	bic.w	r3, r3, #31
 8005e80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e82:	6852      	ldr	r2, [r2, #4]
 8005e84:	431a      	orrs	r2, r3
 8005e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e88:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8005e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8005e90:	f3bf 8f5f 	dmb	sy
}
 8005e94:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea0:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005ea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ea4:	689b      	ldr	r3, [r3, #8]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f47f af76 	bne.w	8005d98 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d006      	beq.n	8005ec0 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	e005      	b.n	8005ecc <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eca:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005ed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed6:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eda:	6a3a      	ldr	r2, [r7, #32]
 8005edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee0:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8005ee2:	f3bf 8f5f 	dmb	sy
}
 8005ee6:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef2:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8005ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ef8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005efa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005efc:	3304      	adds	r3, #4
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	440b      	add	r3, r1
 8005f02:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8005f04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f06:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005f08:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f0e:	613b      	str	r3, [r7, #16]
  return(result);
 8005f10:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8005f12:	61fb      	str	r3, [r7, #28]
 8005f14:	2301      	movs	r3, #1
 8005f16:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f383 8810 	msr	PRIMASK, r3
}
 8005f1e:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8005f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f26:	4413      	add	r3, r2
 8005f28:	1c5a      	adds	r2, r3, #1
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005f2e:	69fb      	ldr	r3, [r7, #28]
 8005f30:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	f383 8810 	msr	PRIMASK, r3
}
 8005f38:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3744      	adds	r7, #68	@ 0x44
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b089      	sub	sp, #36	@ 0x24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005f52:	2300      	movs	r3, #0
 8005f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f5e:	2300      	movs	r3, #0
 8005f60:	61fb      	str	r3, [r7, #28]
 8005f62:	e16b      	b.n	800623c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005f64:	2201      	movs	r2, #1
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	4013      	ands	r3, r2
 8005f76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	f040 815a 	bne.w	8006236 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	f003 0303 	and.w	r3, r3, #3
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d005      	beq.n	8005f9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685b      	ldr	r3, [r3, #4]
 8005f92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d130      	bne.n	8005ffc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	2203      	movs	r2, #3
 8005fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005faa:	43db      	mvns	r3, r3
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	4013      	ands	r3, r2
 8005fb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	fa02 f303 	lsl.w	r3, r2, r3
 8005fbe:	69ba      	ldr	r2, [r7, #24]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	69ba      	ldr	r2, [r7, #24]
 8005fc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fd8:	43db      	mvns	r3, r3
 8005fda:	69ba      	ldr	r2, [r7, #24]
 8005fdc:	4013      	ands	r3, r2
 8005fde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	091b      	lsrs	r3, r3, #4
 8005fe6:	f003 0201 	and.w	r2, r3, #1
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff0:	69ba      	ldr	r2, [r7, #24]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	69ba      	ldr	r2, [r7, #24]
 8005ffa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f003 0303 	and.w	r3, r3, #3
 8006004:	2b03      	cmp	r3, #3
 8006006:	d017      	beq.n	8006038 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	005b      	lsls	r3, r3, #1
 8006012:	2203      	movs	r2, #3
 8006014:	fa02 f303 	lsl.w	r3, r2, r3
 8006018:	43db      	mvns	r3, r3
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	4013      	ands	r3, r2
 800601e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	689a      	ldr	r2, [r3, #8]
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	005b      	lsls	r3, r3, #1
 8006028:	fa02 f303 	lsl.w	r3, r2, r3
 800602c:	69ba      	ldr	r2, [r7, #24]
 800602e:	4313      	orrs	r3, r2
 8006030:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f003 0303 	and.w	r3, r3, #3
 8006040:	2b02      	cmp	r3, #2
 8006042:	d123      	bne.n	800608c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	08da      	lsrs	r2, r3, #3
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	3208      	adds	r2, #8
 800604c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006050:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	009b      	lsls	r3, r3, #2
 800605a:	220f      	movs	r2, #15
 800605c:	fa02 f303 	lsl.w	r3, r2, r3
 8006060:	43db      	mvns	r3, r3
 8006062:	69ba      	ldr	r2, [r7, #24]
 8006064:	4013      	ands	r3, r2
 8006066:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	691a      	ldr	r2, [r3, #16]
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	f003 0307 	and.w	r3, r3, #7
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	fa02 f303 	lsl.w	r3, r2, r3
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	4313      	orrs	r3, r2
 800607c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	08da      	lsrs	r2, r3, #3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	3208      	adds	r2, #8
 8006086:	69b9      	ldr	r1, [r7, #24]
 8006088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	2203      	movs	r2, #3
 8006098:	fa02 f303 	lsl.w	r3, r2, r3
 800609c:	43db      	mvns	r3, r3
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	4013      	ands	r3, r2
 80060a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	f003 0203 	and.w	r2, r3, #3
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	005b      	lsls	r3, r3, #1
 80060b0:	fa02 f303 	lsl.w	r3, r2, r3
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	4313      	orrs	r3, r2
 80060b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	69ba      	ldr	r2, [r7, #24]
 80060be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 80b4 	beq.w	8006236 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060ce:	2300      	movs	r3, #0
 80060d0:	60fb      	str	r3, [r7, #12]
 80060d2:	4b60      	ldr	r3, [pc, #384]	@ (8006254 <HAL_GPIO_Init+0x30c>)
 80060d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060d6:	4a5f      	ldr	r2, [pc, #380]	@ (8006254 <HAL_GPIO_Init+0x30c>)
 80060d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80060dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80060de:	4b5d      	ldr	r3, [pc, #372]	@ (8006254 <HAL_GPIO_Init+0x30c>)
 80060e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060e6:	60fb      	str	r3, [r7, #12]
 80060e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80060ea:	4a5b      	ldr	r2, [pc, #364]	@ (8006258 <HAL_GPIO_Init+0x310>)
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	089b      	lsrs	r3, r3, #2
 80060f0:	3302      	adds	r3, #2
 80060f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	f003 0303 	and.w	r3, r3, #3
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	220f      	movs	r2, #15
 8006102:	fa02 f303 	lsl.w	r3, r2, r3
 8006106:	43db      	mvns	r3, r3
 8006108:	69ba      	ldr	r2, [r7, #24]
 800610a:	4013      	ands	r3, r2
 800610c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a52      	ldr	r2, [pc, #328]	@ (800625c <HAL_GPIO_Init+0x314>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d02b      	beq.n	800616e <HAL_GPIO_Init+0x226>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	4a51      	ldr	r2, [pc, #324]	@ (8006260 <HAL_GPIO_Init+0x318>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d025      	beq.n	800616a <HAL_GPIO_Init+0x222>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a50      	ldr	r2, [pc, #320]	@ (8006264 <HAL_GPIO_Init+0x31c>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d01f      	beq.n	8006166 <HAL_GPIO_Init+0x21e>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a4f      	ldr	r2, [pc, #316]	@ (8006268 <HAL_GPIO_Init+0x320>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d019      	beq.n	8006162 <HAL_GPIO_Init+0x21a>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a4e      	ldr	r2, [pc, #312]	@ (800626c <HAL_GPIO_Init+0x324>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d013      	beq.n	800615e <HAL_GPIO_Init+0x216>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a4d      	ldr	r2, [pc, #308]	@ (8006270 <HAL_GPIO_Init+0x328>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d00d      	beq.n	800615a <HAL_GPIO_Init+0x212>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a4c      	ldr	r2, [pc, #304]	@ (8006274 <HAL_GPIO_Init+0x32c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d007      	beq.n	8006156 <HAL_GPIO_Init+0x20e>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a4b      	ldr	r2, [pc, #300]	@ (8006278 <HAL_GPIO_Init+0x330>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d101      	bne.n	8006152 <HAL_GPIO_Init+0x20a>
 800614e:	2307      	movs	r3, #7
 8006150:	e00e      	b.n	8006170 <HAL_GPIO_Init+0x228>
 8006152:	2308      	movs	r3, #8
 8006154:	e00c      	b.n	8006170 <HAL_GPIO_Init+0x228>
 8006156:	2306      	movs	r3, #6
 8006158:	e00a      	b.n	8006170 <HAL_GPIO_Init+0x228>
 800615a:	2305      	movs	r3, #5
 800615c:	e008      	b.n	8006170 <HAL_GPIO_Init+0x228>
 800615e:	2304      	movs	r3, #4
 8006160:	e006      	b.n	8006170 <HAL_GPIO_Init+0x228>
 8006162:	2303      	movs	r3, #3
 8006164:	e004      	b.n	8006170 <HAL_GPIO_Init+0x228>
 8006166:	2302      	movs	r3, #2
 8006168:	e002      	b.n	8006170 <HAL_GPIO_Init+0x228>
 800616a:	2301      	movs	r3, #1
 800616c:	e000      	b.n	8006170 <HAL_GPIO_Init+0x228>
 800616e:	2300      	movs	r3, #0
 8006170:	69fa      	ldr	r2, [r7, #28]
 8006172:	f002 0203 	and.w	r2, r2, #3
 8006176:	0092      	lsls	r2, r2, #2
 8006178:	4093      	lsls	r3, r2
 800617a:	69ba      	ldr	r2, [r7, #24]
 800617c:	4313      	orrs	r3, r2
 800617e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006180:	4935      	ldr	r1, [pc, #212]	@ (8006258 <HAL_GPIO_Init+0x310>)
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	089b      	lsrs	r3, r3, #2
 8006186:	3302      	adds	r3, #2
 8006188:	69ba      	ldr	r2, [r7, #24]
 800618a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800618e:	4b3b      	ldr	r3, [pc, #236]	@ (800627c <HAL_GPIO_Init+0x334>)
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	43db      	mvns	r3, r3
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	4013      	ands	r3, r2
 800619c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d003      	beq.n	80061b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80061aa:	69ba      	ldr	r2, [r7, #24]
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	4313      	orrs	r3, r2
 80061b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80061b2:	4a32      	ldr	r2, [pc, #200]	@ (800627c <HAL_GPIO_Init+0x334>)
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80061b8:	4b30      	ldr	r3, [pc, #192]	@ (800627c <HAL_GPIO_Init+0x334>)
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	43db      	mvns	r3, r3
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	4013      	ands	r3, r2
 80061c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	4313      	orrs	r3, r2
 80061da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80061dc:	4a27      	ldr	r2, [pc, #156]	@ (800627c <HAL_GPIO_Init+0x334>)
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80061e2:	4b26      	ldr	r3, [pc, #152]	@ (800627c <HAL_GPIO_Init+0x334>)
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	43db      	mvns	r3, r3
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	4013      	ands	r3, r2
 80061f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	685b      	ldr	r3, [r3, #4]
 80061f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80061fe:	69ba      	ldr	r2, [r7, #24]
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	4313      	orrs	r3, r2
 8006204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006206:	4a1d      	ldr	r2, [pc, #116]	@ (800627c <HAL_GPIO_Init+0x334>)
 8006208:	69bb      	ldr	r3, [r7, #24]
 800620a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800620c:	4b1b      	ldr	r3, [pc, #108]	@ (800627c <HAL_GPIO_Init+0x334>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	43db      	mvns	r3, r3
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	4013      	ands	r3, r2
 800621a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d003      	beq.n	8006230 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006228:	69ba      	ldr	r2, [r7, #24]
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	4313      	orrs	r3, r2
 800622e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006230:	4a12      	ldr	r2, [pc, #72]	@ (800627c <HAL_GPIO_Init+0x334>)
 8006232:	69bb      	ldr	r3, [r7, #24]
 8006234:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006236:	69fb      	ldr	r3, [r7, #28]
 8006238:	3301      	adds	r3, #1
 800623a:	61fb      	str	r3, [r7, #28]
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	2b0f      	cmp	r3, #15
 8006240:	f67f ae90 	bls.w	8005f64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006244:	bf00      	nop
 8006246:	bf00      	nop
 8006248:	3724      	adds	r7, #36	@ 0x24
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	40023800 	.word	0x40023800
 8006258:	40013800 	.word	0x40013800
 800625c:	40020000 	.word	0x40020000
 8006260:	40020400 	.word	0x40020400
 8006264:	40020800 	.word	0x40020800
 8006268:	40020c00 	.word	0x40020c00
 800626c:	40021000 	.word	0x40021000
 8006270:	40021400 	.word	0x40021400
 8006274:	40021800 	.word	0x40021800
 8006278:	40021c00 	.word	0x40021c00
 800627c:	40013c00 	.word	0x40013c00

08006280 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	460b      	mov	r3, r1
 800628a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	691a      	ldr	r2, [r3, #16]
 8006290:	887b      	ldrh	r3, [r7, #2]
 8006292:	4013      	ands	r3, r2
 8006294:	2b00      	cmp	r3, #0
 8006296:	d002      	beq.n	800629e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006298:	2301      	movs	r3, #1
 800629a:	73fb      	strb	r3, [r7, #15]
 800629c:	e001      	b.n	80062a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800629e:	2300      	movs	r3, #0
 80062a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80062a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	460b      	mov	r3, r1
 80062ba:	807b      	strh	r3, [r7, #2]
 80062bc:	4613      	mov	r3, r2
 80062be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80062c0:	787b      	ldrb	r3, [r7, #1]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80062c6:	887a      	ldrh	r2, [r7, #2]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80062cc:	e003      	b.n	80062d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80062ce:	887b      	ldrh	r3, [r7, #2]
 80062d0:	041a      	lsls	r2, r3, #16
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	619a      	str	r2, [r3, #24]
}
 80062d6:	bf00      	nop
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
	...

080062e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d101      	bne.n	80062f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e12b      	b.n	800654e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d106      	bne.n	8006310 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800630a:	6878      	ldr	r0, [r7, #4]
 800630c:	f7fa fc28 	bl	8000b60 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2224      	movs	r2, #36	@ 0x24
 8006314:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 0201 	bic.w	r2, r2, #1
 8006326:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006336:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8006346:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006348:	f000 fd80 	bl	8006e4c <HAL_RCC_GetPCLK1Freq>
 800634c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	4a81      	ldr	r2, [pc, #516]	@ (8006558 <HAL_I2C_Init+0x274>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d807      	bhi.n	8006368 <HAL_I2C_Init+0x84>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	4a80      	ldr	r2, [pc, #512]	@ (800655c <HAL_I2C_Init+0x278>)
 800635c:	4293      	cmp	r3, r2
 800635e:	bf94      	ite	ls
 8006360:	2301      	movls	r3, #1
 8006362:	2300      	movhi	r3, #0
 8006364:	b2db      	uxtb	r3, r3
 8006366:	e006      	b.n	8006376 <HAL_I2C_Init+0x92>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	4a7d      	ldr	r2, [pc, #500]	@ (8006560 <HAL_I2C_Init+0x27c>)
 800636c:	4293      	cmp	r3, r2
 800636e:	bf94      	ite	ls
 8006370:	2301      	movls	r3, #1
 8006372:	2300      	movhi	r3, #0
 8006374:	b2db      	uxtb	r3, r3
 8006376:	2b00      	cmp	r3, #0
 8006378:	d001      	beq.n	800637e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e0e7      	b.n	800654e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	4a78      	ldr	r2, [pc, #480]	@ (8006564 <HAL_I2C_Init+0x280>)
 8006382:	fba2 2303 	umull	r2, r3, r2, r3
 8006386:	0c9b      	lsrs	r3, r3, #18
 8006388:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	68ba      	ldr	r2, [r7, #8]
 800639a:	430a      	orrs	r2, r1
 800639c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	4a6a      	ldr	r2, [pc, #424]	@ (8006558 <HAL_I2C_Init+0x274>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d802      	bhi.n	80063b8 <HAL_I2C_Init+0xd4>
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	3301      	adds	r3, #1
 80063b6:	e009      	b.n	80063cc <HAL_I2C_Init+0xe8>
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80063be:	fb02 f303 	mul.w	r3, r2, r3
 80063c2:	4a69      	ldr	r2, [pc, #420]	@ (8006568 <HAL_I2C_Init+0x284>)
 80063c4:	fba2 2303 	umull	r2, r3, r2, r3
 80063c8:	099b      	lsrs	r3, r3, #6
 80063ca:	3301      	adds	r3, #1
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	6812      	ldr	r2, [r2, #0]
 80063d0:	430b      	orrs	r3, r1
 80063d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	69db      	ldr	r3, [r3, #28]
 80063da:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80063de:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	495c      	ldr	r1, [pc, #368]	@ (8006558 <HAL_I2C_Init+0x274>)
 80063e8:	428b      	cmp	r3, r1
 80063ea:	d819      	bhi.n	8006420 <HAL_I2C_Init+0x13c>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	1e59      	subs	r1, r3, #1
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	005b      	lsls	r3, r3, #1
 80063f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80063fa:	1c59      	adds	r1, r3, #1
 80063fc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006400:	400b      	ands	r3, r1
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00a      	beq.n	800641c <HAL_I2C_Init+0x138>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	1e59      	subs	r1, r3, #1
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	005b      	lsls	r3, r3, #1
 8006410:	fbb1 f3f3 	udiv	r3, r1, r3
 8006414:	3301      	adds	r3, #1
 8006416:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800641a:	e051      	b.n	80064c0 <HAL_I2C_Init+0x1dc>
 800641c:	2304      	movs	r3, #4
 800641e:	e04f      	b.n	80064c0 <HAL_I2C_Init+0x1dc>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d111      	bne.n	800644c <HAL_I2C_Init+0x168>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	1e58      	subs	r0, r3, #1
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6859      	ldr	r1, [r3, #4]
 8006430:	460b      	mov	r3, r1
 8006432:	005b      	lsls	r3, r3, #1
 8006434:	440b      	add	r3, r1
 8006436:	fbb0 f3f3 	udiv	r3, r0, r3
 800643a:	3301      	adds	r3, #1
 800643c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006440:	2b00      	cmp	r3, #0
 8006442:	bf0c      	ite	eq
 8006444:	2301      	moveq	r3, #1
 8006446:	2300      	movne	r3, #0
 8006448:	b2db      	uxtb	r3, r3
 800644a:	e012      	b.n	8006472 <HAL_I2C_Init+0x18e>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	1e58      	subs	r0, r3, #1
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6859      	ldr	r1, [r3, #4]
 8006454:	460b      	mov	r3, r1
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	440b      	add	r3, r1
 800645a:	0099      	lsls	r1, r3, #2
 800645c:	440b      	add	r3, r1
 800645e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006462:	3301      	adds	r3, #1
 8006464:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006468:	2b00      	cmp	r3, #0
 800646a:	bf0c      	ite	eq
 800646c:	2301      	moveq	r3, #1
 800646e:	2300      	movne	r3, #0
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b00      	cmp	r3, #0
 8006474:	d001      	beq.n	800647a <HAL_I2C_Init+0x196>
 8006476:	2301      	movs	r3, #1
 8006478:	e022      	b.n	80064c0 <HAL_I2C_Init+0x1dc>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	689b      	ldr	r3, [r3, #8]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d10e      	bne.n	80064a0 <HAL_I2C_Init+0x1bc>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	1e58      	subs	r0, r3, #1
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6859      	ldr	r1, [r3, #4]
 800648a:	460b      	mov	r3, r1
 800648c:	005b      	lsls	r3, r3, #1
 800648e:	440b      	add	r3, r1
 8006490:	fbb0 f3f3 	udiv	r3, r0, r3
 8006494:	3301      	adds	r3, #1
 8006496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800649a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800649e:	e00f      	b.n	80064c0 <HAL_I2C_Init+0x1dc>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	1e58      	subs	r0, r3, #1
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6859      	ldr	r1, [r3, #4]
 80064a8:	460b      	mov	r3, r1
 80064aa:	009b      	lsls	r3, r3, #2
 80064ac:	440b      	add	r3, r1
 80064ae:	0099      	lsls	r1, r3, #2
 80064b0:	440b      	add	r3, r1
 80064b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80064b6:	3301      	adds	r3, #1
 80064b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80064c0:	6879      	ldr	r1, [r7, #4]
 80064c2:	6809      	ldr	r1, [r1, #0]
 80064c4:	4313      	orrs	r3, r2
 80064c6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	69da      	ldr	r2, [r3, #28]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	431a      	orrs	r2, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80064ee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80064f2:	687a      	ldr	r2, [r7, #4]
 80064f4:	6911      	ldr	r1, [r2, #16]
 80064f6:	687a      	ldr	r2, [r7, #4]
 80064f8:	68d2      	ldr	r2, [r2, #12]
 80064fa:	4311      	orrs	r1, r2
 80064fc:	687a      	ldr	r2, [r7, #4]
 80064fe:	6812      	ldr	r2, [r2, #0]
 8006500:	430b      	orrs	r3, r1
 8006502:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	695a      	ldr	r2, [r3, #20]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	699b      	ldr	r3, [r3, #24]
 8006516:	431a      	orrs	r2, r3
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	430a      	orrs	r2, r1
 800651e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0201 	orr.w	r2, r2, #1
 800652e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2220      	movs	r2, #32
 800653a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800654c:	2300      	movs	r3, #0
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	000186a0 	.word	0x000186a0
 800655c:	001e847f 	.word	0x001e847f
 8006560:	003d08ff 	.word	0x003d08ff
 8006564:	431bde83 	.word	0x431bde83
 8006568:	10624dd3 	.word	0x10624dd3

0800656c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d101      	bne.n	800657e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e267      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f003 0301 	and.w	r3, r3, #1
 8006586:	2b00      	cmp	r3, #0
 8006588:	d075      	beq.n	8006676 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800658a:	4b88      	ldr	r3, [pc, #544]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f003 030c 	and.w	r3, r3, #12
 8006592:	2b04      	cmp	r3, #4
 8006594:	d00c      	beq.n	80065b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006596:	4b85      	ldr	r3, [pc, #532]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800659e:	2b08      	cmp	r3, #8
 80065a0:	d112      	bne.n	80065c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065a2:	4b82      	ldr	r3, [pc, #520]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065ae:	d10b      	bne.n	80065c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065b0:	4b7e      	ldr	r3, [pc, #504]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d05b      	beq.n	8006674 <HAL_RCC_OscConfig+0x108>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d157      	bne.n	8006674 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	e242      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065d0:	d106      	bne.n	80065e0 <HAL_RCC_OscConfig+0x74>
 80065d2:	4b76      	ldr	r3, [pc, #472]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a75      	ldr	r2, [pc, #468]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 80065d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	e01d      	b.n	800661c <HAL_RCC_OscConfig+0xb0>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80065e8:	d10c      	bne.n	8006604 <HAL_RCC_OscConfig+0x98>
 80065ea:	4b70      	ldr	r3, [pc, #448]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a6f      	ldr	r2, [pc, #444]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 80065f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	4b6d      	ldr	r3, [pc, #436]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a6c      	ldr	r2, [pc, #432]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 80065fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006600:	6013      	str	r3, [r2, #0]
 8006602:	e00b      	b.n	800661c <HAL_RCC_OscConfig+0xb0>
 8006604:	4b69      	ldr	r3, [pc, #420]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	4a68      	ldr	r2, [pc, #416]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 800660a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800660e:	6013      	str	r3, [r2, #0]
 8006610:	4b66      	ldr	r3, [pc, #408]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a65      	ldr	r2, [pc, #404]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 8006616:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800661a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d013      	beq.n	800664c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006624:	f7fd faae 	bl	8003b84 <HAL_GetTick>
 8006628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800662a:	e008      	b.n	800663e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800662c:	f7fd faaa 	bl	8003b84 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	2b64      	cmp	r3, #100	@ 0x64
 8006638:	d901      	bls.n	800663e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800663a:	2303      	movs	r3, #3
 800663c:	e207      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800663e:	4b5b      	ldr	r3, [pc, #364]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d0f0      	beq.n	800662c <HAL_RCC_OscConfig+0xc0>
 800664a:	e014      	b.n	8006676 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800664c:	f7fd fa9a 	bl	8003b84 <HAL_GetTick>
 8006650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006652:	e008      	b.n	8006666 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006654:	f7fd fa96 	bl	8003b84 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b64      	cmp	r3, #100	@ 0x64
 8006660:	d901      	bls.n	8006666 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006662:	2303      	movs	r3, #3
 8006664:	e1f3      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006666:	4b51      	ldr	r3, [pc, #324]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1f0      	bne.n	8006654 <HAL_RCC_OscConfig+0xe8>
 8006672:	e000      	b.n	8006676 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d063      	beq.n	800674a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006682:	4b4a      	ldr	r3, [pc, #296]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	f003 030c 	and.w	r3, r3, #12
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00b      	beq.n	80066a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800668e:	4b47      	ldr	r3, [pc, #284]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006696:	2b08      	cmp	r3, #8
 8006698:	d11c      	bne.n	80066d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800669a:	4b44      	ldr	r3, [pc, #272]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d116      	bne.n	80066d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066a6:	4b41      	ldr	r3, [pc, #260]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d005      	beq.n	80066be <HAL_RCC_OscConfig+0x152>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	2b01      	cmp	r3, #1
 80066b8:	d001      	beq.n	80066be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80066ba:	2301      	movs	r3, #1
 80066bc:	e1c7      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066be:	4b3b      	ldr	r3, [pc, #236]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	00db      	lsls	r3, r3, #3
 80066cc:	4937      	ldr	r1, [pc, #220]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066d2:	e03a      	b.n	800674a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	68db      	ldr	r3, [r3, #12]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d020      	beq.n	800671e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066dc:	4b34      	ldr	r3, [pc, #208]	@ (80067b0 <HAL_RCC_OscConfig+0x244>)
 80066de:	2201      	movs	r2, #1
 80066e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e2:	f7fd fa4f 	bl	8003b84 <HAL_GetTick>
 80066e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066e8:	e008      	b.n	80066fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066ea:	f7fd fa4b 	bl	8003b84 <HAL_GetTick>
 80066ee:	4602      	mov	r2, r0
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	1ad3      	subs	r3, r2, r3
 80066f4:	2b02      	cmp	r3, #2
 80066f6:	d901      	bls.n	80066fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80066f8:	2303      	movs	r3, #3
 80066fa:	e1a8      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066fc:	4b2b      	ldr	r3, [pc, #172]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d0f0      	beq.n	80066ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006708:	4b28      	ldr	r3, [pc, #160]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	00db      	lsls	r3, r3, #3
 8006716:	4925      	ldr	r1, [pc, #148]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 8006718:	4313      	orrs	r3, r2
 800671a:	600b      	str	r3, [r1, #0]
 800671c:	e015      	b.n	800674a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800671e:	4b24      	ldr	r3, [pc, #144]	@ (80067b0 <HAL_RCC_OscConfig+0x244>)
 8006720:	2200      	movs	r2, #0
 8006722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006724:	f7fd fa2e 	bl	8003b84 <HAL_GetTick>
 8006728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800672a:	e008      	b.n	800673e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800672c:	f7fd fa2a 	bl	8003b84 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d901      	bls.n	800673e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e187      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800673e:	4b1b      	ldr	r3, [pc, #108]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0302 	and.w	r3, r3, #2
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1f0      	bne.n	800672c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f003 0308 	and.w	r3, r3, #8
 8006752:	2b00      	cmp	r3, #0
 8006754:	d036      	beq.n	80067c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d016      	beq.n	800678c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800675e:	4b15      	ldr	r3, [pc, #84]	@ (80067b4 <HAL_RCC_OscConfig+0x248>)
 8006760:	2201      	movs	r2, #1
 8006762:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006764:	f7fd fa0e 	bl	8003b84 <HAL_GetTick>
 8006768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800676a:	e008      	b.n	800677e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800676c:	f7fd fa0a 	bl	8003b84 <HAL_GetTick>
 8006770:	4602      	mov	r2, r0
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	1ad3      	subs	r3, r2, r3
 8006776:	2b02      	cmp	r3, #2
 8006778:	d901      	bls.n	800677e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800677a:	2303      	movs	r3, #3
 800677c:	e167      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800677e:	4b0b      	ldr	r3, [pc, #44]	@ (80067ac <HAL_RCC_OscConfig+0x240>)
 8006780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	2b00      	cmp	r3, #0
 8006788:	d0f0      	beq.n	800676c <HAL_RCC_OscConfig+0x200>
 800678a:	e01b      	b.n	80067c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800678c:	4b09      	ldr	r3, [pc, #36]	@ (80067b4 <HAL_RCC_OscConfig+0x248>)
 800678e:	2200      	movs	r2, #0
 8006790:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006792:	f7fd f9f7 	bl	8003b84 <HAL_GetTick>
 8006796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006798:	e00e      	b.n	80067b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800679a:	f7fd f9f3 	bl	8003b84 <HAL_GetTick>
 800679e:	4602      	mov	r2, r0
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	1ad3      	subs	r3, r2, r3
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d907      	bls.n	80067b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e150      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
 80067ac:	40023800 	.word	0x40023800
 80067b0:	42470000 	.word	0x42470000
 80067b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067b8:	4b88      	ldr	r3, [pc, #544]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 80067ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1ea      	bne.n	800679a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f003 0304 	and.w	r3, r3, #4
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	f000 8097 	beq.w	8006900 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80067d2:	2300      	movs	r3, #0
 80067d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067d6:	4b81      	ldr	r3, [pc, #516]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 80067d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10f      	bne.n	8006802 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80067e2:	2300      	movs	r3, #0
 80067e4:	60bb      	str	r3, [r7, #8]
 80067e6:	4b7d      	ldr	r3, [pc, #500]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 80067e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ea:	4a7c      	ldr	r2, [pc, #496]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 80067ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80067f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80067f2:	4b7a      	ldr	r3, [pc, #488]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 80067f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067fa:	60bb      	str	r3, [r7, #8]
 80067fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067fe:	2301      	movs	r3, #1
 8006800:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006802:	4b77      	ldr	r3, [pc, #476]	@ (80069e0 <HAL_RCC_OscConfig+0x474>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800680a:	2b00      	cmp	r3, #0
 800680c:	d118      	bne.n	8006840 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800680e:	4b74      	ldr	r3, [pc, #464]	@ (80069e0 <HAL_RCC_OscConfig+0x474>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	4a73      	ldr	r2, [pc, #460]	@ (80069e0 <HAL_RCC_OscConfig+0x474>)
 8006814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006818:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800681a:	f7fd f9b3 	bl	8003b84 <HAL_GetTick>
 800681e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006820:	e008      	b.n	8006834 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006822:	f7fd f9af 	bl	8003b84 <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	2b02      	cmp	r3, #2
 800682e:	d901      	bls.n	8006834 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006830:	2303      	movs	r3, #3
 8006832:	e10c      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006834:	4b6a      	ldr	r3, [pc, #424]	@ (80069e0 <HAL_RCC_OscConfig+0x474>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800683c:	2b00      	cmp	r3, #0
 800683e:	d0f0      	beq.n	8006822 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d106      	bne.n	8006856 <HAL_RCC_OscConfig+0x2ea>
 8006848:	4b64      	ldr	r3, [pc, #400]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 800684a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800684c:	4a63      	ldr	r2, [pc, #396]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 800684e:	f043 0301 	orr.w	r3, r3, #1
 8006852:	6713      	str	r3, [r2, #112]	@ 0x70
 8006854:	e01c      	b.n	8006890 <HAL_RCC_OscConfig+0x324>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	689b      	ldr	r3, [r3, #8]
 800685a:	2b05      	cmp	r3, #5
 800685c:	d10c      	bne.n	8006878 <HAL_RCC_OscConfig+0x30c>
 800685e:	4b5f      	ldr	r3, [pc, #380]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 8006860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006862:	4a5e      	ldr	r2, [pc, #376]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 8006864:	f043 0304 	orr.w	r3, r3, #4
 8006868:	6713      	str	r3, [r2, #112]	@ 0x70
 800686a:	4b5c      	ldr	r3, [pc, #368]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 800686c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800686e:	4a5b      	ldr	r2, [pc, #364]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 8006870:	f043 0301 	orr.w	r3, r3, #1
 8006874:	6713      	str	r3, [r2, #112]	@ 0x70
 8006876:	e00b      	b.n	8006890 <HAL_RCC_OscConfig+0x324>
 8006878:	4b58      	ldr	r3, [pc, #352]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 800687a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800687c:	4a57      	ldr	r2, [pc, #348]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 800687e:	f023 0301 	bic.w	r3, r3, #1
 8006882:	6713      	str	r3, [r2, #112]	@ 0x70
 8006884:	4b55      	ldr	r3, [pc, #340]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 8006886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006888:	4a54      	ldr	r2, [pc, #336]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 800688a:	f023 0304 	bic.w	r3, r3, #4
 800688e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d015      	beq.n	80068c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006898:	f7fd f974 	bl	8003b84 <HAL_GetTick>
 800689c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800689e:	e00a      	b.n	80068b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068a0:	f7fd f970 	bl	8003b84 <HAL_GetTick>
 80068a4:	4602      	mov	r2, r0
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d901      	bls.n	80068b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80068b2:	2303      	movs	r3, #3
 80068b4:	e0cb      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068b6:	4b49      	ldr	r3, [pc, #292]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 80068b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d0ee      	beq.n	80068a0 <HAL_RCC_OscConfig+0x334>
 80068c2:	e014      	b.n	80068ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068c4:	f7fd f95e 	bl	8003b84 <HAL_GetTick>
 80068c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068ca:	e00a      	b.n	80068e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068cc:	f7fd f95a 	bl	8003b84 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068da:	4293      	cmp	r3, r2
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e0b5      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068e2:	4b3e      	ldr	r3, [pc, #248]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 80068e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1ee      	bne.n	80068cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80068ee:	7dfb      	ldrb	r3, [r7, #23]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d105      	bne.n	8006900 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068f4:	4b39      	ldr	r3, [pc, #228]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 80068f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f8:	4a38      	ldr	r2, [pc, #224]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 80068fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80068fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	2b00      	cmp	r3, #0
 8006906:	f000 80a1 	beq.w	8006a4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800690a:	4b34      	ldr	r3, [pc, #208]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f003 030c 	and.w	r3, r3, #12
 8006912:	2b08      	cmp	r3, #8
 8006914:	d05c      	beq.n	80069d0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	699b      	ldr	r3, [r3, #24]
 800691a:	2b02      	cmp	r3, #2
 800691c:	d141      	bne.n	80069a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800691e:	4b31      	ldr	r3, [pc, #196]	@ (80069e4 <HAL_RCC_OscConfig+0x478>)
 8006920:	2200      	movs	r2, #0
 8006922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006924:	f7fd f92e 	bl	8003b84 <HAL_GetTick>
 8006928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800692a:	e008      	b.n	800693e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800692c:	f7fd f92a 	bl	8003b84 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	2b02      	cmp	r3, #2
 8006938:	d901      	bls.n	800693e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800693a:	2303      	movs	r3, #3
 800693c:	e087      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800693e:	4b27      	ldr	r3, [pc, #156]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d1f0      	bne.n	800692c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	69da      	ldr	r2, [r3, #28]
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a1b      	ldr	r3, [r3, #32]
 8006952:	431a      	orrs	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006958:	019b      	lsls	r3, r3, #6
 800695a:	431a      	orrs	r2, r3
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006960:	085b      	lsrs	r3, r3, #1
 8006962:	3b01      	subs	r3, #1
 8006964:	041b      	lsls	r3, r3, #16
 8006966:	431a      	orrs	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800696c:	061b      	lsls	r3, r3, #24
 800696e:	491b      	ldr	r1, [pc, #108]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 8006970:	4313      	orrs	r3, r2
 8006972:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006974:	4b1b      	ldr	r3, [pc, #108]	@ (80069e4 <HAL_RCC_OscConfig+0x478>)
 8006976:	2201      	movs	r2, #1
 8006978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800697a:	f7fd f903 	bl	8003b84 <HAL_GetTick>
 800697e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006980:	e008      	b.n	8006994 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006982:	f7fd f8ff 	bl	8003b84 <HAL_GetTick>
 8006986:	4602      	mov	r2, r0
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	1ad3      	subs	r3, r2, r3
 800698c:	2b02      	cmp	r3, #2
 800698e:	d901      	bls.n	8006994 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006990:	2303      	movs	r3, #3
 8006992:	e05c      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006994:	4b11      	ldr	r3, [pc, #68]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800699c:	2b00      	cmp	r3, #0
 800699e:	d0f0      	beq.n	8006982 <HAL_RCC_OscConfig+0x416>
 80069a0:	e054      	b.n	8006a4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069a2:	4b10      	ldr	r3, [pc, #64]	@ (80069e4 <HAL_RCC_OscConfig+0x478>)
 80069a4:	2200      	movs	r2, #0
 80069a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069a8:	f7fd f8ec 	bl	8003b84 <HAL_GetTick>
 80069ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069ae:	e008      	b.n	80069c2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069b0:	f7fd f8e8 	bl	8003b84 <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	2b02      	cmp	r3, #2
 80069bc:	d901      	bls.n	80069c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e045      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069c2:	4b06      	ldr	r3, [pc, #24]	@ (80069dc <HAL_RCC_OscConfig+0x470>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1f0      	bne.n	80069b0 <HAL_RCC_OscConfig+0x444>
 80069ce:	e03d      	b.n	8006a4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d107      	bne.n	80069e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e038      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
 80069dc:	40023800 	.word	0x40023800
 80069e0:	40007000 	.word	0x40007000
 80069e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80069e8:	4b1b      	ldr	r3, [pc, #108]	@ (8006a58 <HAL_RCC_OscConfig+0x4ec>)
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	2b01      	cmp	r3, #1
 80069f4:	d028      	beq.n	8006a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a00:	429a      	cmp	r2, r3
 8006a02:	d121      	bne.n	8006a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a0e:	429a      	cmp	r2, r3
 8006a10:	d11a      	bne.n	8006a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a12:	68fa      	ldr	r2, [r7, #12]
 8006a14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006a18:	4013      	ands	r3, r2
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d111      	bne.n	8006a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a2e:	085b      	lsrs	r3, r3, #1
 8006a30:	3b01      	subs	r3, #1
 8006a32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d107      	bne.n	8006a48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d001      	beq.n	8006a4c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e000      	b.n	8006a4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3718      	adds	r7, #24
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	40023800 	.word	0x40023800

08006a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d101      	bne.n	8006a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	e0cc      	b.n	8006c0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a70:	4b68      	ldr	r3, [pc, #416]	@ (8006c14 <HAL_RCC_ClockConfig+0x1b8>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0307 	and.w	r3, r3, #7
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	d90c      	bls.n	8006a98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a7e:	4b65      	ldr	r3, [pc, #404]	@ (8006c14 <HAL_RCC_ClockConfig+0x1b8>)
 8006a80:	683a      	ldr	r2, [r7, #0]
 8006a82:	b2d2      	uxtb	r2, r2
 8006a84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a86:	4b63      	ldr	r3, [pc, #396]	@ (8006c14 <HAL_RCC_ClockConfig+0x1b8>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f003 0307 	and.w	r3, r3, #7
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d001      	beq.n	8006a98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006a94:	2301      	movs	r3, #1
 8006a96:	e0b8      	b.n	8006c0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f003 0302 	and.w	r3, r3, #2
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d020      	beq.n	8006ae6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0304 	and.w	r3, r3, #4
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d005      	beq.n	8006abc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ab0:	4b59      	ldr	r3, [pc, #356]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	4a58      	ldr	r2, [pc, #352]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006ab6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006aba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0308 	and.w	r3, r3, #8
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d005      	beq.n	8006ad4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ac8:	4b53      	ldr	r3, [pc, #332]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006aca:	689b      	ldr	r3, [r3, #8]
 8006acc:	4a52      	ldr	r2, [pc, #328]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006ace:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006ad2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ad4:	4b50      	ldr	r3, [pc, #320]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	494d      	ldr	r1, [pc, #308]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f003 0301 	and.w	r3, r3, #1
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d044      	beq.n	8006b7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d107      	bne.n	8006b0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006afa:	4b47      	ldr	r3, [pc, #284]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d119      	bne.n	8006b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e07f      	b.n	8006c0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d003      	beq.n	8006b1a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b16:	2b03      	cmp	r3, #3
 8006b18:	d107      	bne.n	8006b2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b1a:	4b3f      	ldr	r3, [pc, #252]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d109      	bne.n	8006b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b26:	2301      	movs	r3, #1
 8006b28:	e06f      	b.n	8006c0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b2a:	4b3b      	ldr	r3, [pc, #236]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d101      	bne.n	8006b3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e067      	b.n	8006c0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b3a:	4b37      	ldr	r3, [pc, #220]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f023 0203 	bic.w	r2, r3, #3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	4934      	ldr	r1, [pc, #208]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b4c:	f7fd f81a 	bl	8003b84 <HAL_GetTick>
 8006b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b52:	e00a      	b.n	8006b6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b54:	f7fd f816 	bl	8003b84 <HAL_GetTick>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	1ad3      	subs	r3, r2, r3
 8006b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d901      	bls.n	8006b6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006b66:	2303      	movs	r3, #3
 8006b68:	e04f      	b.n	8006c0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b6a:	4b2b      	ldr	r3, [pc, #172]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f003 020c 	and.w	r2, r3, #12
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	429a      	cmp	r2, r3
 8006b7a:	d1eb      	bne.n	8006b54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b7c:	4b25      	ldr	r3, [pc, #148]	@ (8006c14 <HAL_RCC_ClockConfig+0x1b8>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f003 0307 	and.w	r3, r3, #7
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d20c      	bcs.n	8006ba4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b8a:	4b22      	ldr	r3, [pc, #136]	@ (8006c14 <HAL_RCC_ClockConfig+0x1b8>)
 8006b8c:	683a      	ldr	r2, [r7, #0]
 8006b8e:	b2d2      	uxtb	r2, r2
 8006b90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b92:	4b20      	ldr	r3, [pc, #128]	@ (8006c14 <HAL_RCC_ClockConfig+0x1b8>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0307 	and.w	r3, r3, #7
 8006b9a:	683a      	ldr	r2, [r7, #0]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d001      	beq.n	8006ba4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e032      	b.n	8006c0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d008      	beq.n	8006bc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bb0:	4b19      	ldr	r3, [pc, #100]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	4916      	ldr	r1, [pc, #88]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0308 	and.w	r3, r3, #8
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d009      	beq.n	8006be2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006bce:	4b12      	ldr	r3, [pc, #72]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	00db      	lsls	r3, r3, #3
 8006bdc:	490e      	ldr	r1, [pc, #56]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006be2:	f000 f821 	bl	8006c28 <HAL_RCC_GetSysClockFreq>
 8006be6:	4602      	mov	r2, r0
 8006be8:	4b0b      	ldr	r3, [pc, #44]	@ (8006c18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	091b      	lsrs	r3, r3, #4
 8006bee:	f003 030f 	and.w	r3, r3, #15
 8006bf2:	490a      	ldr	r1, [pc, #40]	@ (8006c1c <HAL_RCC_ClockConfig+0x1c0>)
 8006bf4:	5ccb      	ldrb	r3, [r1, r3]
 8006bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8006bfa:	4a09      	ldr	r2, [pc, #36]	@ (8006c20 <HAL_RCC_ClockConfig+0x1c4>)
 8006bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006bfe:	4b09      	ldr	r3, [pc, #36]	@ (8006c24 <HAL_RCC_ClockConfig+0x1c8>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fc ff7a 	bl	8003afc <HAL_InitTick>

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	40023c00 	.word	0x40023c00
 8006c18:	40023800 	.word	0x40023800
 8006c1c:	08017524 	.word	0x08017524
 8006c20:	20000038 	.word	0x20000038
 8006c24:	20000064 	.word	0x20000064

08006c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c2c:	b094      	sub	sp, #80	@ 0x50
 8006c2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006c30:	2300      	movs	r3, #0
 8006c32:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006c34:	2300      	movs	r3, #0
 8006c36:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c40:	4b79      	ldr	r3, [pc, #484]	@ (8006e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	f003 030c 	and.w	r3, r3, #12
 8006c48:	2b08      	cmp	r3, #8
 8006c4a:	d00d      	beq.n	8006c68 <HAL_RCC_GetSysClockFreq+0x40>
 8006c4c:	2b08      	cmp	r3, #8
 8006c4e:	f200 80e1 	bhi.w	8006e14 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d002      	beq.n	8006c5c <HAL_RCC_GetSysClockFreq+0x34>
 8006c56:	2b04      	cmp	r3, #4
 8006c58:	d003      	beq.n	8006c62 <HAL_RCC_GetSysClockFreq+0x3a>
 8006c5a:	e0db      	b.n	8006e14 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c5c:	4b73      	ldr	r3, [pc, #460]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0x204>)
 8006c5e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c60:	e0db      	b.n	8006e1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c62:	4b73      	ldr	r3, [pc, #460]	@ (8006e30 <HAL_RCC_GetSysClockFreq+0x208>)
 8006c64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006c66:	e0d8      	b.n	8006e1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c68:	4b6f      	ldr	r3, [pc, #444]	@ (8006e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c70:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c72:	4b6d      	ldr	r3, [pc, #436]	@ (8006e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d063      	beq.n	8006d46 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c7e:	4b6a      	ldr	r3, [pc, #424]	@ (8006e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	099b      	lsrs	r3, r3, #6
 8006c84:	2200      	movs	r2, #0
 8006c86:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006c88:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c90:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c92:	2300      	movs	r3, #0
 8006c94:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006c9a:	4622      	mov	r2, r4
 8006c9c:	462b      	mov	r3, r5
 8006c9e:	f04f 0000 	mov.w	r0, #0
 8006ca2:	f04f 0100 	mov.w	r1, #0
 8006ca6:	0159      	lsls	r1, r3, #5
 8006ca8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cac:	0150      	lsls	r0, r2, #5
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	4621      	mov	r1, r4
 8006cb4:	1a51      	subs	r1, r2, r1
 8006cb6:	6139      	str	r1, [r7, #16]
 8006cb8:	4629      	mov	r1, r5
 8006cba:	eb63 0301 	sbc.w	r3, r3, r1
 8006cbe:	617b      	str	r3, [r7, #20]
 8006cc0:	f04f 0200 	mov.w	r2, #0
 8006cc4:	f04f 0300 	mov.w	r3, #0
 8006cc8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ccc:	4659      	mov	r1, fp
 8006cce:	018b      	lsls	r3, r1, #6
 8006cd0:	4651      	mov	r1, sl
 8006cd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006cd6:	4651      	mov	r1, sl
 8006cd8:	018a      	lsls	r2, r1, #6
 8006cda:	4651      	mov	r1, sl
 8006cdc:	ebb2 0801 	subs.w	r8, r2, r1
 8006ce0:	4659      	mov	r1, fp
 8006ce2:	eb63 0901 	sbc.w	r9, r3, r1
 8006ce6:	f04f 0200 	mov.w	r2, #0
 8006cea:	f04f 0300 	mov.w	r3, #0
 8006cee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cf2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cf6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cfa:	4690      	mov	r8, r2
 8006cfc:	4699      	mov	r9, r3
 8006cfe:	4623      	mov	r3, r4
 8006d00:	eb18 0303 	adds.w	r3, r8, r3
 8006d04:	60bb      	str	r3, [r7, #8]
 8006d06:	462b      	mov	r3, r5
 8006d08:	eb49 0303 	adc.w	r3, r9, r3
 8006d0c:	60fb      	str	r3, [r7, #12]
 8006d0e:	f04f 0200 	mov.w	r2, #0
 8006d12:	f04f 0300 	mov.w	r3, #0
 8006d16:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d1a:	4629      	mov	r1, r5
 8006d1c:	024b      	lsls	r3, r1, #9
 8006d1e:	4621      	mov	r1, r4
 8006d20:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d24:	4621      	mov	r1, r4
 8006d26:	024a      	lsls	r2, r1, #9
 8006d28:	4610      	mov	r0, r2
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d2e:	2200      	movs	r2, #0
 8006d30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d34:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006d38:	f7f9 fa9a 	bl	8000270 <__aeabi_uldivmod>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4613      	mov	r3, r2
 8006d42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d44:	e058      	b.n	8006df8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d46:	4b38      	ldr	r3, [pc, #224]	@ (8006e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	099b      	lsrs	r3, r3, #6
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	4618      	mov	r0, r3
 8006d50:	4611      	mov	r1, r2
 8006d52:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d56:	623b      	str	r3, [r7, #32]
 8006d58:	2300      	movs	r3, #0
 8006d5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d5c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d60:	4642      	mov	r2, r8
 8006d62:	464b      	mov	r3, r9
 8006d64:	f04f 0000 	mov.w	r0, #0
 8006d68:	f04f 0100 	mov.w	r1, #0
 8006d6c:	0159      	lsls	r1, r3, #5
 8006d6e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d72:	0150      	lsls	r0, r2, #5
 8006d74:	4602      	mov	r2, r0
 8006d76:	460b      	mov	r3, r1
 8006d78:	4641      	mov	r1, r8
 8006d7a:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d7e:	4649      	mov	r1, r9
 8006d80:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d84:	f04f 0200 	mov.w	r2, #0
 8006d88:	f04f 0300 	mov.w	r3, #0
 8006d8c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006d90:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006d94:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006d98:	ebb2 040a 	subs.w	r4, r2, sl
 8006d9c:	eb63 050b 	sbc.w	r5, r3, fp
 8006da0:	f04f 0200 	mov.w	r2, #0
 8006da4:	f04f 0300 	mov.w	r3, #0
 8006da8:	00eb      	lsls	r3, r5, #3
 8006daa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dae:	00e2      	lsls	r2, r4, #3
 8006db0:	4614      	mov	r4, r2
 8006db2:	461d      	mov	r5, r3
 8006db4:	4643      	mov	r3, r8
 8006db6:	18e3      	adds	r3, r4, r3
 8006db8:	603b      	str	r3, [r7, #0]
 8006dba:	464b      	mov	r3, r9
 8006dbc:	eb45 0303 	adc.w	r3, r5, r3
 8006dc0:	607b      	str	r3, [r7, #4]
 8006dc2:	f04f 0200 	mov.w	r2, #0
 8006dc6:	f04f 0300 	mov.w	r3, #0
 8006dca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006dce:	4629      	mov	r1, r5
 8006dd0:	028b      	lsls	r3, r1, #10
 8006dd2:	4621      	mov	r1, r4
 8006dd4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006dd8:	4621      	mov	r1, r4
 8006dda:	028a      	lsls	r2, r1, #10
 8006ddc:	4610      	mov	r0, r2
 8006dde:	4619      	mov	r1, r3
 8006de0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006de2:	2200      	movs	r2, #0
 8006de4:	61bb      	str	r3, [r7, #24]
 8006de6:	61fa      	str	r2, [r7, #28]
 8006de8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006dec:	f7f9 fa40 	bl	8000270 <__aeabi_uldivmod>
 8006df0:	4602      	mov	r2, r0
 8006df2:	460b      	mov	r3, r1
 8006df4:	4613      	mov	r3, r2
 8006df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006df8:	4b0b      	ldr	r3, [pc, #44]	@ (8006e28 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dfa:	685b      	ldr	r3, [r3, #4]
 8006dfc:	0c1b      	lsrs	r3, r3, #16
 8006dfe:	f003 0303 	and.w	r3, r3, #3
 8006e02:	3301      	adds	r3, #1
 8006e04:	005b      	lsls	r3, r3, #1
 8006e06:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006e08:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e10:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e12:	e002      	b.n	8006e1a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e14:	4b05      	ldr	r3, [pc, #20]	@ (8006e2c <HAL_RCC_GetSysClockFreq+0x204>)
 8006e16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3750      	adds	r7, #80	@ 0x50
 8006e20:	46bd      	mov	sp, r7
 8006e22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e26:	bf00      	nop
 8006e28:	40023800 	.word	0x40023800
 8006e2c:	00f42400 	.word	0x00f42400
 8006e30:	007a1200 	.word	0x007a1200

08006e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e34:	b480      	push	{r7}
 8006e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e38:	4b03      	ldr	r3, [pc, #12]	@ (8006e48 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr
 8006e46:	bf00      	nop
 8006e48:	20000038 	.word	0x20000038

08006e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e50:	f7ff fff0 	bl	8006e34 <HAL_RCC_GetHCLKFreq>
 8006e54:	4602      	mov	r2, r0
 8006e56:	4b05      	ldr	r3, [pc, #20]	@ (8006e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	0a9b      	lsrs	r3, r3, #10
 8006e5c:	f003 0307 	and.w	r3, r3, #7
 8006e60:	4903      	ldr	r1, [pc, #12]	@ (8006e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e62:	5ccb      	ldrb	r3, [r1, r3]
 8006e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	40023800 	.word	0x40023800
 8006e70:	08017534 	.word	0x08017534

08006e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e78:	f7ff ffdc 	bl	8006e34 <HAL_RCC_GetHCLKFreq>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	4b05      	ldr	r3, [pc, #20]	@ (8006e94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	0b5b      	lsrs	r3, r3, #13
 8006e84:	f003 0307 	and.w	r3, r3, #7
 8006e88:	4903      	ldr	r1, [pc, #12]	@ (8006e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e8a:	5ccb      	ldrb	r3, [r1, r3]
 8006e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	40023800 	.word	0x40023800
 8006e98:	08017534 	.word	0x08017534

08006e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b082      	sub	sp, #8
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d101      	bne.n	8006eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006eaa:	2301      	movs	r3, #1
 8006eac:	e041      	b.n	8006f32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d106      	bne.n	8006ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7fb fd0a 	bl	80028dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2202      	movs	r2, #2
 8006ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	3304      	adds	r3, #4
 8006ed8:	4619      	mov	r1, r3
 8006eda:	4610      	mov	r0, r2
 8006edc:	f000 fcc4 	bl	8007868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2201      	movs	r2, #1
 8006f24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006f30:	2300      	movs	r3, #0
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	3708      	adds	r7, #8
 8006f36:	46bd      	mov	sp, r7
 8006f38:	bd80      	pop	{r7, pc}
	...

08006f3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d001      	beq.n	8006f54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e04e      	b.n	8006ff2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2202      	movs	r2, #2
 8006f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	68da      	ldr	r2, [r3, #12]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f042 0201 	orr.w	r2, r2, #1
 8006f6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a23      	ldr	r2, [pc, #140]	@ (8007000 <HAL_TIM_Base_Start_IT+0xc4>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d022      	beq.n	8006fbc <HAL_TIM_Base_Start_IT+0x80>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f7e:	d01d      	beq.n	8006fbc <HAL_TIM_Base_Start_IT+0x80>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a1f      	ldr	r2, [pc, #124]	@ (8007004 <HAL_TIM_Base_Start_IT+0xc8>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d018      	beq.n	8006fbc <HAL_TIM_Base_Start_IT+0x80>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a1e      	ldr	r2, [pc, #120]	@ (8007008 <HAL_TIM_Base_Start_IT+0xcc>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d013      	beq.n	8006fbc <HAL_TIM_Base_Start_IT+0x80>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a1c      	ldr	r2, [pc, #112]	@ (800700c <HAL_TIM_Base_Start_IT+0xd0>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d00e      	beq.n	8006fbc <HAL_TIM_Base_Start_IT+0x80>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a1b      	ldr	r2, [pc, #108]	@ (8007010 <HAL_TIM_Base_Start_IT+0xd4>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d009      	beq.n	8006fbc <HAL_TIM_Base_Start_IT+0x80>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a19      	ldr	r2, [pc, #100]	@ (8007014 <HAL_TIM_Base_Start_IT+0xd8>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d004      	beq.n	8006fbc <HAL_TIM_Base_Start_IT+0x80>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a18      	ldr	r2, [pc, #96]	@ (8007018 <HAL_TIM_Base_Start_IT+0xdc>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d111      	bne.n	8006fe0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f003 0307 	and.w	r3, r3, #7
 8006fc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2b06      	cmp	r3, #6
 8006fcc:	d010      	beq.n	8006ff0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f042 0201 	orr.w	r2, r2, #1
 8006fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fde:	e007      	b.n	8006ff0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f042 0201 	orr.w	r2, r2, #1
 8006fee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	40010000 	.word	0x40010000
 8007004:	40000400 	.word	0x40000400
 8007008:	40000800 	.word	0x40000800
 800700c:	40000c00 	.word	0x40000c00
 8007010:	40010400 	.word	0x40010400
 8007014:	40014000 	.word	0x40014000
 8007018:	40001800 	.word	0x40001800

0800701c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e041      	b.n	80070b2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d106      	bne.n	8007048 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7fb fbe6 	bl	8002814 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2202      	movs	r2, #2
 800704c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681a      	ldr	r2, [r3, #0]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	3304      	adds	r3, #4
 8007058:	4619      	mov	r1, r3
 800705a:	4610      	mov	r0, r2
 800705c:	f000 fc04 	bl	8007868 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2201      	movs	r2, #1
 800706c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2201      	movs	r2, #1
 8007074:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2201      	movs	r2, #1
 800707c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2201      	movs	r2, #1
 8007094:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
	...

080070bc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d109      	bne.n	80070e0 <HAL_TIM_PWM_Start+0x24>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	bf14      	ite	ne
 80070d8:	2301      	movne	r3, #1
 80070da:	2300      	moveq	r3, #0
 80070dc:	b2db      	uxtb	r3, r3
 80070de:	e022      	b.n	8007126 <HAL_TIM_PWM_Start+0x6a>
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	2b04      	cmp	r3, #4
 80070e4:	d109      	bne.n	80070fa <HAL_TIM_PWM_Start+0x3e>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80070ec:	b2db      	uxtb	r3, r3
 80070ee:	2b01      	cmp	r3, #1
 80070f0:	bf14      	ite	ne
 80070f2:	2301      	movne	r3, #1
 80070f4:	2300      	moveq	r3, #0
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	e015      	b.n	8007126 <HAL_TIM_PWM_Start+0x6a>
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2b08      	cmp	r3, #8
 80070fe:	d109      	bne.n	8007114 <HAL_TIM_PWM_Start+0x58>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b01      	cmp	r3, #1
 800710a:	bf14      	ite	ne
 800710c:	2301      	movne	r3, #1
 800710e:	2300      	moveq	r3, #0
 8007110:	b2db      	uxtb	r3, r3
 8007112:	e008      	b.n	8007126 <HAL_TIM_PWM_Start+0x6a>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800711a:	b2db      	uxtb	r3, r3
 800711c:	2b01      	cmp	r3, #1
 800711e:	bf14      	ite	ne
 8007120:	2301      	movne	r3, #1
 8007122:	2300      	moveq	r3, #0
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d001      	beq.n	800712e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800712a:	2301      	movs	r3, #1
 800712c:	e07c      	b.n	8007228 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d104      	bne.n	800713e <HAL_TIM_PWM_Start+0x82>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2202      	movs	r2, #2
 8007138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800713c:	e013      	b.n	8007166 <HAL_TIM_PWM_Start+0xaa>
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2b04      	cmp	r3, #4
 8007142:	d104      	bne.n	800714e <HAL_TIM_PWM_Start+0x92>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2202      	movs	r2, #2
 8007148:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800714c:	e00b      	b.n	8007166 <HAL_TIM_PWM_Start+0xaa>
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	2b08      	cmp	r3, #8
 8007152:	d104      	bne.n	800715e <HAL_TIM_PWM_Start+0xa2>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2202      	movs	r2, #2
 8007158:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800715c:	e003      	b.n	8007166 <HAL_TIM_PWM_Start+0xaa>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2202      	movs	r2, #2
 8007162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2201      	movs	r2, #1
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	4618      	mov	r0, r3
 8007170:	f000 fdd0 	bl	8007d14 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a2d      	ldr	r2, [pc, #180]	@ (8007230 <HAL_TIM_PWM_Start+0x174>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d004      	beq.n	8007188 <HAL_TIM_PWM_Start+0xcc>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a2c      	ldr	r2, [pc, #176]	@ (8007234 <HAL_TIM_PWM_Start+0x178>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d101      	bne.n	800718c <HAL_TIM_PWM_Start+0xd0>
 8007188:	2301      	movs	r3, #1
 800718a:	e000      	b.n	800718e <HAL_TIM_PWM_Start+0xd2>
 800718c:	2300      	movs	r3, #0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d007      	beq.n	80071a2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80071a0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a22      	ldr	r2, [pc, #136]	@ (8007230 <HAL_TIM_PWM_Start+0x174>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d022      	beq.n	80071f2 <HAL_TIM_PWM_Start+0x136>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071b4:	d01d      	beq.n	80071f2 <HAL_TIM_PWM_Start+0x136>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a1f      	ldr	r2, [pc, #124]	@ (8007238 <HAL_TIM_PWM_Start+0x17c>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d018      	beq.n	80071f2 <HAL_TIM_PWM_Start+0x136>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a1d      	ldr	r2, [pc, #116]	@ (800723c <HAL_TIM_PWM_Start+0x180>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d013      	beq.n	80071f2 <HAL_TIM_PWM_Start+0x136>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4a1c      	ldr	r2, [pc, #112]	@ (8007240 <HAL_TIM_PWM_Start+0x184>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d00e      	beq.n	80071f2 <HAL_TIM_PWM_Start+0x136>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	4a16      	ldr	r2, [pc, #88]	@ (8007234 <HAL_TIM_PWM_Start+0x178>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d009      	beq.n	80071f2 <HAL_TIM_PWM_Start+0x136>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	4a18      	ldr	r2, [pc, #96]	@ (8007244 <HAL_TIM_PWM_Start+0x188>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d004      	beq.n	80071f2 <HAL_TIM_PWM_Start+0x136>
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	4a16      	ldr	r2, [pc, #88]	@ (8007248 <HAL_TIM_PWM_Start+0x18c>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d111      	bne.n	8007216 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f003 0307 	and.w	r3, r3, #7
 80071fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2b06      	cmp	r3, #6
 8007202:	d010      	beq.n	8007226 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f042 0201 	orr.w	r2, r2, #1
 8007212:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007214:	e007      	b.n	8007226 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f042 0201 	orr.w	r2, r2, #1
 8007224:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}
 8007230:	40010000 	.word	0x40010000
 8007234:	40010400 	.word	0x40010400
 8007238:	40000400 	.word	0x40000400
 800723c:	40000800 	.word	0x40000800
 8007240:	40000c00 	.word	0x40000c00
 8007244:	40014000 	.word	0x40014000
 8007248:	40001800 	.word	0x40001800

0800724c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b086      	sub	sp, #24
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d101      	bne.n	8007260 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e097      	b.n	8007390 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b00      	cmp	r3, #0
 800726a:	d106      	bne.n	800727a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f7fb f9c5 	bl	8002604 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2202      	movs	r2, #2
 800727e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	6812      	ldr	r2, [r2, #0]
 800728c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007290:	f023 0307 	bic.w	r3, r3, #7
 8007294:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	3304      	adds	r3, #4
 800729e:	4619      	mov	r1, r3
 80072a0:	4610      	mov	r0, r2
 80072a2:	f000 fae1 	bl	8007868 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	699b      	ldr	r3, [r3, #24]
 80072b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	6a1b      	ldr	r3, [r3, #32]
 80072bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072ce:	f023 0303 	bic.w	r3, r3, #3
 80072d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	689a      	ldr	r2, [r3, #8]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	699b      	ldr	r3, [r3, #24]
 80072dc:	021b      	lsls	r3, r3, #8
 80072de:	4313      	orrs	r3, r2
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	4313      	orrs	r3, r2
 80072e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80072ec:	f023 030c 	bic.w	r3, r3, #12
 80072f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80072f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80072fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80072fe:	683b      	ldr	r3, [r7, #0]
 8007300:	68da      	ldr	r2, [r3, #12]
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	69db      	ldr	r3, [r3, #28]
 8007306:	021b      	lsls	r3, r3, #8
 8007308:	4313      	orrs	r3, r2
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	4313      	orrs	r3, r2
 800730e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	691b      	ldr	r3, [r3, #16]
 8007314:	011a      	lsls	r2, r3, #4
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	6a1b      	ldr	r3, [r3, #32]
 800731a:	031b      	lsls	r3, r3, #12
 800731c:	4313      	orrs	r3, r2
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	4313      	orrs	r3, r2
 8007322:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800732a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8007332:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	685a      	ldr	r2, [r3, #4]
 8007338:	683b      	ldr	r3, [r7, #0]
 800733a:	695b      	ldr	r3, [r3, #20]
 800733c:	011b      	lsls	r3, r3, #4
 800733e:	4313      	orrs	r3, r2
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	4313      	orrs	r3, r2
 8007344:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2201      	movs	r2, #1
 8007362:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	2201      	movs	r2, #1
 8007372:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2201      	movs	r2, #1
 800737a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2201      	movs	r2, #1
 8007382:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2201      	movs	r2, #1
 800738a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800738e:	2300      	movs	r3, #0
}
 8007390:	4618      	mov	r0, r3
 8007392:	3718      	adds	r7, #24
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80073a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80073b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80073b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80073c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d110      	bne.n	80073ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d102      	bne.n	80073d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80073ce:	7b7b      	ldrb	r3, [r7, #13]
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d001      	beq.n	80073d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80073d4:	2301      	movs	r3, #1
 80073d6:	e069      	b.n	80074ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2202      	movs	r2, #2
 80073dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2202      	movs	r2, #2
 80073e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073e8:	e031      	b.n	800744e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b04      	cmp	r3, #4
 80073ee:	d110      	bne.n	8007412 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80073f0:	7bbb      	ldrb	r3, [r7, #14]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d102      	bne.n	80073fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80073f6:	7b3b      	ldrb	r3, [r7, #12]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d001      	beq.n	8007400 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e055      	b.n	80074ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2202      	movs	r2, #2
 8007404:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2202      	movs	r2, #2
 800740c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007410:	e01d      	b.n	800744e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007412:	7bfb      	ldrb	r3, [r7, #15]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d108      	bne.n	800742a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007418:	7bbb      	ldrb	r3, [r7, #14]
 800741a:	2b01      	cmp	r3, #1
 800741c:	d105      	bne.n	800742a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800741e:	7b7b      	ldrb	r3, [r7, #13]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d102      	bne.n	800742a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007424:	7b3b      	ldrb	r3, [r7, #12]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d001      	beq.n	800742e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e03e      	b.n	80074ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2202      	movs	r2, #2
 8007432:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2202      	movs	r2, #2
 800743a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2202      	movs	r2, #2
 8007442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2202      	movs	r2, #2
 800744a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d003      	beq.n	800745c <HAL_TIM_Encoder_Start+0xc4>
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	2b04      	cmp	r3, #4
 8007458:	d008      	beq.n	800746c <HAL_TIM_Encoder_Start+0xd4>
 800745a:	e00f      	b.n	800747c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2201      	movs	r2, #1
 8007462:	2100      	movs	r1, #0
 8007464:	4618      	mov	r0, r3
 8007466:	f000 fc55 	bl	8007d14 <TIM_CCxChannelCmd>
      break;
 800746a:	e016      	b.n	800749a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2201      	movs	r2, #1
 8007472:	2104      	movs	r1, #4
 8007474:	4618      	mov	r0, r3
 8007476:	f000 fc4d 	bl	8007d14 <TIM_CCxChannelCmd>
      break;
 800747a:	e00e      	b.n	800749a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	2201      	movs	r2, #1
 8007482:	2100      	movs	r1, #0
 8007484:	4618      	mov	r0, r3
 8007486:	f000 fc45 	bl	8007d14 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2201      	movs	r2, #1
 8007490:	2104      	movs	r1, #4
 8007492:	4618      	mov	r0, r3
 8007494:	f000 fc3e 	bl	8007d14 <TIM_CCxChannelCmd>
      break;
 8007498:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f042 0201 	orr.w	r2, r2, #1
 80074a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	68db      	ldr	r3, [r3, #12]
 80074c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	691b      	ldr	r3, [r3, #16]
 80074ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d020      	beq.n	8007518 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d01b      	beq.n	8007518 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f06f 0202 	mvn.w	r2, #2
 80074e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	f003 0303 	and.w	r3, r3, #3
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d003      	beq.n	8007506 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f994 	bl	800782c <HAL_TIM_IC_CaptureCallback>
 8007504:	e005      	b.n	8007512 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007506:	6878      	ldr	r0, [r7, #4]
 8007508:	f000 f986 	bl	8007818 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 f997 	bl	8007840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	f003 0304 	and.w	r3, r3, #4
 800751e:	2b00      	cmp	r3, #0
 8007520:	d020      	beq.n	8007564 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f003 0304 	and.w	r3, r3, #4
 8007528:	2b00      	cmp	r3, #0
 800752a:	d01b      	beq.n	8007564 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f06f 0204 	mvn.w	r2, #4
 8007534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2202      	movs	r2, #2
 800753a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	699b      	ldr	r3, [r3, #24]
 8007542:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f96e 	bl	800782c <HAL_TIM_IC_CaptureCallback>
 8007550:	e005      	b.n	800755e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f960 	bl	8007818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f971 	bl	8007840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	f003 0308 	and.w	r3, r3, #8
 800756a:	2b00      	cmp	r3, #0
 800756c:	d020      	beq.n	80075b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	f003 0308 	and.w	r3, r3, #8
 8007574:	2b00      	cmp	r3, #0
 8007576:	d01b      	beq.n	80075b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f06f 0208 	mvn.w	r2, #8
 8007580:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2204      	movs	r2, #4
 8007586:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	69db      	ldr	r3, [r3, #28]
 800758e:	f003 0303 	and.w	r3, r3, #3
 8007592:	2b00      	cmp	r3, #0
 8007594:	d003      	beq.n	800759e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 f948 	bl	800782c <HAL_TIM_IC_CaptureCallback>
 800759c:	e005      	b.n	80075aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 f93a 	bl	8007818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075a4:	6878      	ldr	r0, [r7, #4]
 80075a6:	f000 f94b 	bl	8007840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	f003 0310 	and.w	r3, r3, #16
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d020      	beq.n	80075fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	f003 0310 	and.w	r3, r3, #16
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d01b      	beq.n	80075fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f06f 0210 	mvn.w	r2, #16
 80075cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2208      	movs	r2, #8
 80075d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	69db      	ldr	r3, [r3, #28]
 80075da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d003      	beq.n	80075ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f000 f922 	bl	800782c <HAL_TIM_IC_CaptureCallback>
 80075e8:	e005      	b.n	80075f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f914 	bl	8007818 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f925 	bl	8007840 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	f003 0301 	and.w	r3, r3, #1
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00c      	beq.n	8007620 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f003 0301 	and.w	r3, r3, #1
 800760c:	2b00      	cmp	r3, #0
 800760e:	d007      	beq.n	8007620 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f06f 0201 	mvn.w	r2, #1
 8007618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f7f9 fd50 	bl	80010c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00c      	beq.n	8007644 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007630:	2b00      	cmp	r3, #0
 8007632:	d007      	beq.n	8007644 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800763c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 fc66 	bl	8007f10 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800764a:	2b00      	cmp	r3, #0
 800764c:	d00c      	beq.n	8007668 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007654:	2b00      	cmp	r3, #0
 8007656:	d007      	beq.n	8007668 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f8f6 	bl	8007854 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	f003 0320 	and.w	r3, r3, #32
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00c      	beq.n	800768c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f003 0320 	and.w	r3, r3, #32
 8007678:	2b00      	cmp	r3, #0
 800767a:	d007      	beq.n	800768c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f06f 0220 	mvn.w	r2, #32
 8007684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f000 fc38 	bl	8007efc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800768c:	bf00      	nop
 800768e:	3710      	adds	r7, #16
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80076a0:	2300      	movs	r3, #0
 80076a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80076aa:	2b01      	cmp	r3, #1
 80076ac:	d101      	bne.n	80076b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80076ae:	2302      	movs	r3, #2
 80076b0:	e0ae      	b.n	8007810 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b0c      	cmp	r3, #12
 80076be:	f200 809f 	bhi.w	8007800 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80076c2:	a201      	add	r2, pc, #4	@ (adr r2, 80076c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80076c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c8:	080076fd 	.word	0x080076fd
 80076cc:	08007801 	.word	0x08007801
 80076d0:	08007801 	.word	0x08007801
 80076d4:	08007801 	.word	0x08007801
 80076d8:	0800773d 	.word	0x0800773d
 80076dc:	08007801 	.word	0x08007801
 80076e0:	08007801 	.word	0x08007801
 80076e4:	08007801 	.word	0x08007801
 80076e8:	0800777f 	.word	0x0800777f
 80076ec:	08007801 	.word	0x08007801
 80076f0:	08007801 	.word	0x08007801
 80076f4:	08007801 	.word	0x08007801
 80076f8:	080077bf 	.word	0x080077bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	68b9      	ldr	r1, [r7, #8]
 8007702:	4618      	mov	r0, r3
 8007704:	f000 f956 	bl	80079b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	699a      	ldr	r2, [r3, #24]
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f042 0208 	orr.w	r2, r2, #8
 8007716:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	699a      	ldr	r2, [r3, #24]
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f022 0204 	bic.w	r2, r2, #4
 8007726:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6999      	ldr	r1, [r3, #24]
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	691a      	ldr	r2, [r3, #16]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	430a      	orrs	r2, r1
 8007738:	619a      	str	r2, [r3, #24]
      break;
 800773a:	e064      	b.n	8007806 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68b9      	ldr	r1, [r7, #8]
 8007742:	4618      	mov	r0, r3
 8007744:	f000 f9a6 	bl	8007a94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	699a      	ldr	r2, [r3, #24]
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007756:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	699a      	ldr	r2, [r3, #24]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007766:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	6999      	ldr	r1, [r3, #24]
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	691b      	ldr	r3, [r3, #16]
 8007772:	021a      	lsls	r2, r3, #8
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	430a      	orrs	r2, r1
 800777a:	619a      	str	r2, [r3, #24]
      break;
 800777c:	e043      	b.n	8007806 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68b9      	ldr	r1, [r7, #8]
 8007784:	4618      	mov	r0, r3
 8007786:	f000 f9fb 	bl	8007b80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	69da      	ldr	r2, [r3, #28]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f042 0208 	orr.w	r2, r2, #8
 8007798:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	69da      	ldr	r2, [r3, #28]
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f022 0204 	bic.w	r2, r2, #4
 80077a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	69d9      	ldr	r1, [r3, #28]
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	691a      	ldr	r2, [r3, #16]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	430a      	orrs	r2, r1
 80077ba:	61da      	str	r2, [r3, #28]
      break;
 80077bc:	e023      	b.n	8007806 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68b9      	ldr	r1, [r7, #8]
 80077c4:	4618      	mov	r0, r3
 80077c6:	f000 fa4f 	bl	8007c68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	69da      	ldr	r2, [r3, #28]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80077d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	69da      	ldr	r2, [r3, #28]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80077e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	69d9      	ldr	r1, [r3, #28]
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	021a      	lsls	r2, r3, #8
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	430a      	orrs	r2, r1
 80077fc:	61da      	str	r2, [r3, #28]
      break;
 80077fe:	e002      	b.n	8007806 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	75fb      	strb	r3, [r7, #23]
      break;
 8007804:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800780e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007810:	4618      	mov	r0, r3
 8007812:	3718      	adds	r7, #24
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007834:	bf00      	nop
 8007836:	370c      	adds	r7, #12
 8007838:	46bd      	mov	sp, r7
 800783a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783e:	4770      	bx	lr

08007840 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	4a43      	ldr	r2, [pc, #268]	@ (8007988 <TIM_Base_SetConfig+0x120>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d013      	beq.n	80078a8 <TIM_Base_SetConfig+0x40>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007886:	d00f      	beq.n	80078a8 <TIM_Base_SetConfig+0x40>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4a40      	ldr	r2, [pc, #256]	@ (800798c <TIM_Base_SetConfig+0x124>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d00b      	beq.n	80078a8 <TIM_Base_SetConfig+0x40>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	4a3f      	ldr	r2, [pc, #252]	@ (8007990 <TIM_Base_SetConfig+0x128>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d007      	beq.n	80078a8 <TIM_Base_SetConfig+0x40>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	4a3e      	ldr	r2, [pc, #248]	@ (8007994 <TIM_Base_SetConfig+0x12c>)
 800789c:	4293      	cmp	r3, r2
 800789e:	d003      	beq.n	80078a8 <TIM_Base_SetConfig+0x40>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	4a3d      	ldr	r2, [pc, #244]	@ (8007998 <TIM_Base_SetConfig+0x130>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d108      	bne.n	80078ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	4313      	orrs	r3, r2
 80078b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	4a32      	ldr	r2, [pc, #200]	@ (8007988 <TIM_Base_SetConfig+0x120>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d02b      	beq.n	800791a <TIM_Base_SetConfig+0xb2>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078c8:	d027      	beq.n	800791a <TIM_Base_SetConfig+0xb2>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4a2f      	ldr	r2, [pc, #188]	@ (800798c <TIM_Base_SetConfig+0x124>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d023      	beq.n	800791a <TIM_Base_SetConfig+0xb2>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	4a2e      	ldr	r2, [pc, #184]	@ (8007990 <TIM_Base_SetConfig+0x128>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d01f      	beq.n	800791a <TIM_Base_SetConfig+0xb2>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4a2d      	ldr	r2, [pc, #180]	@ (8007994 <TIM_Base_SetConfig+0x12c>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d01b      	beq.n	800791a <TIM_Base_SetConfig+0xb2>
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	4a2c      	ldr	r2, [pc, #176]	@ (8007998 <TIM_Base_SetConfig+0x130>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d017      	beq.n	800791a <TIM_Base_SetConfig+0xb2>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4a2b      	ldr	r2, [pc, #172]	@ (800799c <TIM_Base_SetConfig+0x134>)
 80078ee:	4293      	cmp	r3, r2
 80078f0:	d013      	beq.n	800791a <TIM_Base_SetConfig+0xb2>
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	4a2a      	ldr	r2, [pc, #168]	@ (80079a0 <TIM_Base_SetConfig+0x138>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d00f      	beq.n	800791a <TIM_Base_SetConfig+0xb2>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a29      	ldr	r2, [pc, #164]	@ (80079a4 <TIM_Base_SetConfig+0x13c>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d00b      	beq.n	800791a <TIM_Base_SetConfig+0xb2>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a28      	ldr	r2, [pc, #160]	@ (80079a8 <TIM_Base_SetConfig+0x140>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d007      	beq.n	800791a <TIM_Base_SetConfig+0xb2>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a27      	ldr	r2, [pc, #156]	@ (80079ac <TIM_Base_SetConfig+0x144>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d003      	beq.n	800791a <TIM_Base_SetConfig+0xb2>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a26      	ldr	r2, [pc, #152]	@ (80079b0 <TIM_Base_SetConfig+0x148>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d108      	bne.n	800792c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	68db      	ldr	r3, [r3, #12]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	4313      	orrs	r3, r2
 800792a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	4313      	orrs	r3, r2
 8007938:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	689a      	ldr	r2, [r3, #8]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	681a      	ldr	r2, [r3, #0]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	4a0e      	ldr	r2, [pc, #56]	@ (8007988 <TIM_Base_SetConfig+0x120>)
 800794e:	4293      	cmp	r3, r2
 8007950:	d003      	beq.n	800795a <TIM_Base_SetConfig+0xf2>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	4a10      	ldr	r2, [pc, #64]	@ (8007998 <TIM_Base_SetConfig+0x130>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d103      	bne.n	8007962 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	691a      	ldr	r2, [r3, #16]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f043 0204 	orr.w	r2, r3, #4
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2201      	movs	r2, #1
 8007972:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	68fa      	ldr	r2, [r7, #12]
 8007978:	601a      	str	r2, [r3, #0]
}
 800797a:	bf00      	nop
 800797c:	3714      	adds	r7, #20
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	40010000 	.word	0x40010000
 800798c:	40000400 	.word	0x40000400
 8007990:	40000800 	.word	0x40000800
 8007994:	40000c00 	.word	0x40000c00
 8007998:	40010400 	.word	0x40010400
 800799c:	40014000 	.word	0x40014000
 80079a0:	40014400 	.word	0x40014400
 80079a4:	40014800 	.word	0x40014800
 80079a8:	40001800 	.word	0x40001800
 80079ac:	40001c00 	.word	0x40001c00
 80079b0:	40002000 	.word	0x40002000

080079b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b087      	sub	sp, #28
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a1b      	ldr	r3, [r3, #32]
 80079c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a1b      	ldr	r3, [r3, #32]
 80079c8:	f023 0201 	bic.w	r2, r3, #1
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	685b      	ldr	r3, [r3, #4]
 80079d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f023 0303 	bic.w	r3, r3, #3
 80079ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	f023 0302 	bic.w	r3, r3, #2
 80079fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	697a      	ldr	r2, [r7, #20]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	4a20      	ldr	r2, [pc, #128]	@ (8007a8c <TIM_OC1_SetConfig+0xd8>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d003      	beq.n	8007a18 <TIM_OC1_SetConfig+0x64>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	4a1f      	ldr	r2, [pc, #124]	@ (8007a90 <TIM_OC1_SetConfig+0xdc>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d10c      	bne.n	8007a32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	f023 0308 	bic.w	r3, r3, #8
 8007a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	697a      	ldr	r2, [r7, #20]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	f023 0304 	bic.w	r3, r3, #4
 8007a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	4a15      	ldr	r2, [pc, #84]	@ (8007a8c <TIM_OC1_SetConfig+0xd8>)
 8007a36:	4293      	cmp	r3, r2
 8007a38:	d003      	beq.n	8007a42 <TIM_OC1_SetConfig+0x8e>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	4a14      	ldr	r2, [pc, #80]	@ (8007a90 <TIM_OC1_SetConfig+0xdc>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d111      	bne.n	8007a66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007a42:	693b      	ldr	r3, [r7, #16]
 8007a44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007a4a:	693b      	ldr	r3, [r7, #16]
 8007a4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007a50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	695b      	ldr	r3, [r3, #20]
 8007a56:	693a      	ldr	r2, [r7, #16]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	699b      	ldr	r3, [r3, #24]
 8007a60:	693a      	ldr	r2, [r7, #16]
 8007a62:	4313      	orrs	r3, r2
 8007a64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	693a      	ldr	r2, [r7, #16]
 8007a6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	685a      	ldr	r2, [r3, #4]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	697a      	ldr	r2, [r7, #20]
 8007a7e:	621a      	str	r2, [r3, #32]
}
 8007a80:	bf00      	nop
 8007a82:	371c      	adds	r7, #28
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr
 8007a8c:	40010000 	.word	0x40010000
 8007a90:	40010400 	.word	0x40010400

08007a94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b087      	sub	sp, #28
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6a1b      	ldr	r3, [r3, #32]
 8007aa2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6a1b      	ldr	r3, [r3, #32]
 8007aa8:	f023 0210 	bic.w	r2, r3, #16
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	685b      	ldr	r3, [r3, #4]
 8007ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	699b      	ldr	r3, [r3, #24]
 8007aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	021b      	lsls	r3, r3, #8
 8007ad2:	68fa      	ldr	r2, [r7, #12]
 8007ad4:	4313      	orrs	r3, r2
 8007ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	f023 0320 	bic.w	r3, r3, #32
 8007ade:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	011b      	lsls	r3, r3, #4
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	4a22      	ldr	r2, [pc, #136]	@ (8007b78 <TIM_OC2_SetConfig+0xe4>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d003      	beq.n	8007afc <TIM_OC2_SetConfig+0x68>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	4a21      	ldr	r2, [pc, #132]	@ (8007b7c <TIM_OC2_SetConfig+0xe8>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d10d      	bne.n	8007b18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007afc:	697b      	ldr	r3, [r7, #20]
 8007afe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	011b      	lsls	r3, r3, #4
 8007b0a:	697a      	ldr	r2, [r7, #20]
 8007b0c:	4313      	orrs	r3, r2
 8007b0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a17      	ldr	r2, [pc, #92]	@ (8007b78 <TIM_OC2_SetConfig+0xe4>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d003      	beq.n	8007b28 <TIM_OC2_SetConfig+0x94>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	4a16      	ldr	r2, [pc, #88]	@ (8007b7c <TIM_OC2_SetConfig+0xe8>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d113      	bne.n	8007b50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007b2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007b36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	009b      	lsls	r3, r3, #2
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	4313      	orrs	r3, r2
 8007b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	009b      	lsls	r3, r3, #2
 8007b4a:	693a      	ldr	r2, [r7, #16]
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	693a      	ldr	r2, [r7, #16]
 8007b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	697a      	ldr	r2, [r7, #20]
 8007b68:	621a      	str	r2, [r3, #32]
}
 8007b6a:	bf00      	nop
 8007b6c:	371c      	adds	r7, #28
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	40010000 	.word	0x40010000
 8007b7c:	40010400 	.word	0x40010400

08007b80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b087      	sub	sp, #28
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6a1b      	ldr	r3, [r3, #32]
 8007b94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	69db      	ldr	r3, [r3, #28]
 8007ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	f023 0303 	bic.w	r3, r3, #3
 8007bb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007bc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	021b      	lsls	r3, r3, #8
 8007bd0:	697a      	ldr	r2, [r7, #20]
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a21      	ldr	r2, [pc, #132]	@ (8007c60 <TIM_OC3_SetConfig+0xe0>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d003      	beq.n	8007be6 <TIM_OC3_SetConfig+0x66>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a20      	ldr	r2, [pc, #128]	@ (8007c64 <TIM_OC3_SetConfig+0xe4>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d10d      	bne.n	8007c02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007bec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	021b      	lsls	r3, r3, #8
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	4313      	orrs	r3, r2
 8007bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	4a16      	ldr	r2, [pc, #88]	@ (8007c60 <TIM_OC3_SetConfig+0xe0>)
 8007c06:	4293      	cmp	r3, r2
 8007c08:	d003      	beq.n	8007c12 <TIM_OC3_SetConfig+0x92>
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	4a15      	ldr	r2, [pc, #84]	@ (8007c64 <TIM_OC3_SetConfig+0xe4>)
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	d113      	bne.n	8007c3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007c12:	693b      	ldr	r3, [r7, #16]
 8007c14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007c20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	011b      	lsls	r3, r3, #4
 8007c28:	693a      	ldr	r2, [r7, #16]
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	699b      	ldr	r3, [r3, #24]
 8007c32:	011b      	lsls	r3, r3, #4
 8007c34:	693a      	ldr	r2, [r7, #16]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	685a      	ldr	r2, [r3, #4]
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	621a      	str	r2, [r3, #32]
}
 8007c54:	bf00      	nop
 8007c56:	371c      	adds	r7, #28
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr
 8007c60:	40010000 	.word	0x40010000
 8007c64:	40010400 	.word	0x40010400

08007c68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b087      	sub	sp, #28
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a1b      	ldr	r3, [r3, #32]
 8007c7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	69db      	ldr	r3, [r3, #28]
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007c96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	021b      	lsls	r3, r3, #8
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007cb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	689b      	ldr	r3, [r3, #8]
 8007cb8:	031b      	lsls	r3, r3, #12
 8007cba:	693a      	ldr	r2, [r7, #16]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a12      	ldr	r2, [pc, #72]	@ (8007d0c <TIM_OC4_SetConfig+0xa4>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d003      	beq.n	8007cd0 <TIM_OC4_SetConfig+0x68>
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	4a11      	ldr	r2, [pc, #68]	@ (8007d10 <TIM_OC4_SetConfig+0xa8>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d109      	bne.n	8007ce4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007cd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	695b      	ldr	r3, [r3, #20]
 8007cdc:	019b      	lsls	r3, r3, #6
 8007cde:	697a      	ldr	r2, [r7, #20]
 8007ce0:	4313      	orrs	r3, r2
 8007ce2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	693a      	ldr	r2, [r7, #16]
 8007cfc:	621a      	str	r2, [r3, #32]
}
 8007cfe:	bf00      	nop
 8007d00:	371c      	adds	r7, #28
 8007d02:	46bd      	mov	sp, r7
 8007d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d08:	4770      	bx	lr
 8007d0a:	bf00      	nop
 8007d0c:	40010000 	.word	0x40010000
 8007d10:	40010400 	.word	0x40010400

08007d14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b087      	sub	sp, #28
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	60f8      	str	r0, [r7, #12]
 8007d1c:	60b9      	str	r1, [r7, #8]
 8007d1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	f003 031f 	and.w	r3, r3, #31
 8007d26:	2201      	movs	r2, #1
 8007d28:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6a1a      	ldr	r2, [r3, #32]
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	43db      	mvns	r3, r3
 8007d36:	401a      	ands	r2, r3
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6a1a      	ldr	r2, [r3, #32]
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	f003 031f 	and.w	r3, r3, #31
 8007d46:	6879      	ldr	r1, [r7, #4]
 8007d48:	fa01 f303 	lsl.w	r3, r1, r3
 8007d4c:	431a      	orrs	r2, r3
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	621a      	str	r2, [r3, #32]
}
 8007d52:	bf00      	nop
 8007d54:	371c      	adds	r7, #28
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr
	...

08007d60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d60:	b480      	push	{r7}
 8007d62:	b085      	sub	sp, #20
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d101      	bne.n	8007d78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d74:	2302      	movs	r3, #2
 8007d76:	e05a      	b.n	8007e2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2202      	movs	r2, #2
 8007d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	68fa      	ldr	r2, [r7, #12]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	4a21      	ldr	r2, [pc, #132]	@ (8007e3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d022      	beq.n	8007e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dc4:	d01d      	beq.n	8007e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	4a1d      	ldr	r2, [pc, #116]	@ (8007e40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d018      	beq.n	8007e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a1b      	ldr	r2, [pc, #108]	@ (8007e44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d013      	beq.n	8007e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4a1a      	ldr	r2, [pc, #104]	@ (8007e48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007de0:	4293      	cmp	r3, r2
 8007de2:	d00e      	beq.n	8007e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a18      	ldr	r2, [pc, #96]	@ (8007e4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d009      	beq.n	8007e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a17      	ldr	r2, [pc, #92]	@ (8007e50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d004      	beq.n	8007e02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a15      	ldr	r2, [pc, #84]	@ (8007e54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d10c      	bne.n	8007e1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	68ba      	ldr	r2, [r7, #8]
 8007e1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2201      	movs	r2, #1
 8007e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007e2c:	2300      	movs	r3, #0
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3714      	adds	r7, #20
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	40010000 	.word	0x40010000
 8007e40:	40000400 	.word	0x40000400
 8007e44:	40000800 	.word	0x40000800
 8007e48:	40000c00 	.word	0x40000c00
 8007e4c:	40010400 	.word	0x40010400
 8007e50:	40014000 	.word	0x40014000
 8007e54:	40001800 	.word	0x40001800

08007e58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b085      	sub	sp, #20
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
 8007e60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007e62:	2300      	movs	r3, #0
 8007e64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d101      	bne.n	8007e74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e70:	2302      	movs	r3, #2
 8007e72:	e03d      	b.n	8007ef0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	4313      	orrs	r3, r2
 8007e96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007e9e:	683b      	ldr	r3, [r7, #0]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	4313      	orrs	r3, r2
 8007ea4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4313      	orrs	r3, r2
 8007eb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	695b      	ldr	r3, [r3, #20]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	69db      	ldr	r3, [r3, #28]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	68fa      	ldr	r2, [r7, #12]
 8007ee4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	2200      	movs	r2, #0
 8007eea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3714      	adds	r7, #20
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d101      	bne.n	8007f36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e042      	b.n	8007fbc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d106      	bne.n	8007f50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7fb f858 	bl	8003000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2224      	movs	r2, #36	@ 0x24
 8007f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f000 fffb 	bl	8008f64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	691a      	ldr	r2, [r3, #16]
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007f7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	695a      	ldr	r2, [r3, #20]
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007f8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68da      	ldr	r2, [r3, #12]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2220      	movs	r2, #32
 8007fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2220      	movs	r2, #32
 8007fb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3708      	adds	r7, #8
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b08c      	sub	sp, #48	@ 0x30
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	2b20      	cmp	r3, #32
 8007fdc:	d162      	bne.n	80080a4 <HAL_UART_Transmit_DMA+0xe0>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d002      	beq.n	8007fea <HAL_UART_Transmit_DMA+0x26>
 8007fe4:	88fb      	ldrh	r3, [r7, #6]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d101      	bne.n	8007fee <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e05b      	b.n	80080a6 <HAL_UART_Transmit_DMA+0xe2>
    }

    huart->pTxBuffPtr = pData;
 8007fee:	68ba      	ldr	r2, [r7, #8]
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	88fa      	ldrh	r2, [r7, #6]
 8007ff8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	88fa      	ldrh	r2, [r7, #6]
 8007ffe:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	2221      	movs	r2, #33	@ 0x21
 800800a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008012:	4a27      	ldr	r2, [pc, #156]	@ (80080b0 <HAL_UART_Transmit_DMA+0xec>)
 8008014:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800801a:	4a26      	ldr	r2, [pc, #152]	@ (80080b4 <HAL_UART_Transmit_DMA+0xf0>)
 800801c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008022:	4a25      	ldr	r2, [pc, #148]	@ (80080b8 <HAL_UART_Transmit_DMA+0xf4>)
 8008024:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800802a:	2200      	movs	r2, #0
 800802c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800802e:	f107 0308 	add.w	r3, r7, #8
 8008032:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size) != HAL_OK)
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800803a:	6819      	ldr	r1, [r3, #0]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3304      	adds	r3, #4
 8008042:	461a      	mov	r2, r3
 8008044:	88fb      	ldrh	r3, [r7, #6]
 8008046:	f7fc faeb 	bl	8004620 <HAL_DMA_Start_IT>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d008      	beq.n	8008062 <HAL_UART_Transmit_DMA+0x9e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	2210      	movs	r2, #16
 8008054:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Restore huart->gState to ready */
      huart->gState = HAL_UART_STATE_READY;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	2220      	movs	r2, #32
 800805a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_ERROR;
 800805e:	2301      	movs	r3, #1
 8008060:	e021      	b.n	80080a6 <HAL_UART_Transmit_DMA+0xe2>
    }
    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800806a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	3314      	adds	r3, #20
 8008072:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	e853 3f00 	ldrex	r3, [r3]
 800807a:	617b      	str	r3, [r7, #20]
   return(result);
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008082:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3314      	adds	r3, #20
 800808a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800808c:	627a      	str	r2, [r7, #36]	@ 0x24
 800808e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008090:	6a39      	ldr	r1, [r7, #32]
 8008092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008094:	e841 2300 	strex	r3, r2, [r1]
 8008098:	61fb      	str	r3, [r7, #28]
   return(result);
 800809a:	69fb      	ldr	r3, [r7, #28]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d1e5      	bne.n	800806c <HAL_UART_Transmit_DMA+0xa8>

    return HAL_OK;
 80080a0:	2300      	movs	r3, #0
 80080a2:	e000      	b.n	80080a6 <HAL_UART_Transmit_DMA+0xe2>
  }
  else
  {
    return HAL_BUSY;
 80080a4:	2302      	movs	r3, #2
  }
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3730      	adds	r7, #48	@ 0x30
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bd80      	pop	{r7, pc}
 80080ae:	bf00      	nop
 80080b0:	080087e1 	.word	0x080087e1
 80080b4:	0800887b 	.word	0x0800887b
 80080b8:	080089ff 	.word	0x080089ff

080080bc <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	b084      	sub	sp, #16
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	60f8      	str	r0, [r7, #12]
 80080c4:	60b9      	str	r1, [r7, #8]
 80080c6:	4613      	mov	r3, r2
 80080c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80080d0:	b2db      	uxtb	r3, r3
 80080d2:	2b20      	cmp	r3, #32
 80080d4:	d112      	bne.n	80080fc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d002      	beq.n	80080e2 <HAL_UART_Receive_DMA+0x26>
 80080dc:	88fb      	ldrh	r3, [r7, #6]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d101      	bne.n	80080e6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80080e2:	2301      	movs	r3, #1
 80080e4:	e00b      	b.n	80080fe <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2200      	movs	r2, #0
 80080ea:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80080ec:	88fb      	ldrh	r3, [r7, #6]
 80080ee:	461a      	mov	r2, r3
 80080f0:	68b9      	ldr	r1, [r7, #8]
 80080f2:	68f8      	ldr	r0, [r7, #12]
 80080f4:	f000 fcce 	bl	8008a94 <UART_Start_Receive_DMA>
 80080f8:	4603      	mov	r3, r0
 80080fa:	e000      	b.n	80080fe <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80080fc:	2302      	movs	r3, #2
  }
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3710      	adds	r7, #16
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8008106:	b580      	push	{r7, lr}
 8008108:	b09a      	sub	sp, #104	@ 0x68
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	330c      	adds	r3, #12
 8008114:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008116:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008118:	e853 3f00 	ldrex	r3, [r3]
 800811c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800811e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008120:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008124:	667b      	str	r3, [r7, #100]	@ 0x64
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	330c      	adds	r3, #12
 800812c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800812e:	657a      	str	r2, [r7, #84]	@ 0x54
 8008130:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008132:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008134:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008136:	e841 2300 	strex	r3, r2, [r1]
 800813a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800813c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1e5      	bne.n	800810e <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	3314      	adds	r3, #20
 8008148:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800814c:	e853 3f00 	ldrex	r3, [r3]
 8008150:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008154:	f023 0301 	bic.w	r3, r3, #1
 8008158:	663b      	str	r3, [r7, #96]	@ 0x60
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	3314      	adds	r3, #20
 8008160:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008162:	643a      	str	r2, [r7, #64]	@ 0x40
 8008164:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008166:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008168:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800816a:	e841 2300 	strex	r3, r2, [r1]
 800816e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008172:	2b00      	cmp	r3, #0
 8008174:	d1e5      	bne.n	8008142 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800817a:	2b01      	cmp	r3, #1
 800817c:	d119      	bne.n	80081b2 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	330c      	adds	r3, #12
 8008184:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008186:	6a3b      	ldr	r3, [r7, #32]
 8008188:	e853 3f00 	ldrex	r3, [r3]
 800818c:	61fb      	str	r3, [r7, #28]
   return(result);
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	f023 0310 	bic.w	r3, r3, #16
 8008194:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	330c      	adds	r3, #12
 800819c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800819e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80081a0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081a6:	e841 2300 	strex	r3, r2, [r1]
 80081aa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d1e5      	bne.n	800817e <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	695b      	ldr	r3, [r3, #20]
 80081b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081bc:	2b40      	cmp	r3, #64	@ 0x40
 80081be:	d136      	bne.n	800822e <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	3314      	adds	r3, #20
 80081c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	e853 3f00 	ldrex	r3, [r3]
 80081ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80081d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	3314      	adds	r3, #20
 80081de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80081e0:	61ba      	str	r2, [r7, #24]
 80081e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e4:	6979      	ldr	r1, [r7, #20]
 80081e6:	69ba      	ldr	r2, [r7, #24]
 80081e8:	e841 2300 	strex	r3, r2, [r1]
 80081ec:	613b      	str	r3, [r7, #16]
   return(result);
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d1e5      	bne.n	80081c0 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d018      	beq.n	800822e <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008200:	2200      	movs	r2, #0
 8008202:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008208:	4618      	mov	r0, r3
 800820a:	f7fc fa61 	bl	80046d0 <HAL_DMA_Abort>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00c      	beq.n	800822e <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008218:	4618      	mov	r0, r3
 800821a:	f7fc fc75 	bl	8004b08 <HAL_DMA_GetError>
 800821e:	4603      	mov	r3, r0
 8008220:	2b20      	cmp	r3, #32
 8008222:	d104      	bne.n	800822e <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2210      	movs	r2, #16
 8008228:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 800822a:	2303      	movs	r3, #3
 800822c:	e00a      	b.n	8008244 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2220      	movs	r2, #32
 8008238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3768      	adds	r7, #104	@ 0x68
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b0ba      	sub	sp, #232	@ 0xe8
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	695b      	ldr	r3, [r3, #20]
 800826e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008272:	2300      	movs	r3, #0
 8008274:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008278:	2300      	movs	r3, #0
 800827a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800827e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008282:	f003 030f 	and.w	r3, r3, #15
 8008286:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800828a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800828e:	2b00      	cmp	r3, #0
 8008290:	d10f      	bne.n	80082b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008296:	f003 0320 	and.w	r3, r3, #32
 800829a:	2b00      	cmp	r3, #0
 800829c:	d009      	beq.n	80082b2 <HAL_UART_IRQHandler+0x66>
 800829e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082a2:	f003 0320 	and.w	r3, r3, #32
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d003      	beq.n	80082b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80082aa:	6878      	ldr	r0, [r7, #4]
 80082ac:	f000 fd9c 	bl	8008de8 <UART_Receive_IT>
      return;
 80082b0:	e273      	b.n	800879a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80082b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	f000 80de 	beq.w	8008478 <HAL_UART_IRQHandler+0x22c>
 80082bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80082c0:	f003 0301 	and.w	r3, r3, #1
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d106      	bne.n	80082d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80082c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082cc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	f000 80d1 	beq.w	8008478 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80082d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082da:	f003 0301 	and.w	r3, r3, #1
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d00b      	beq.n	80082fa <HAL_UART_IRQHandler+0xae>
 80082e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80082e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d005      	beq.n	80082fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80082f2:	f043 0201 	orr.w	r2, r3, #1
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80082fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80082fe:	f003 0304 	and.w	r3, r3, #4
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00b      	beq.n	800831e <HAL_UART_IRQHandler+0xd2>
 8008306:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800830a:	f003 0301 	and.w	r3, r3, #1
 800830e:	2b00      	cmp	r3, #0
 8008310:	d005      	beq.n	800831e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008316:	f043 0202 	orr.w	r2, r3, #2
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800831e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008322:	f003 0302 	and.w	r3, r3, #2
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00b      	beq.n	8008342 <HAL_UART_IRQHandler+0xf6>
 800832a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	d005      	beq.n	8008342 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800833a:	f043 0204 	orr.w	r2, r3, #4
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008346:	f003 0308 	and.w	r3, r3, #8
 800834a:	2b00      	cmp	r3, #0
 800834c:	d011      	beq.n	8008372 <HAL_UART_IRQHandler+0x126>
 800834e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008352:	f003 0320 	and.w	r3, r3, #32
 8008356:	2b00      	cmp	r3, #0
 8008358:	d105      	bne.n	8008366 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800835a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800835e:	f003 0301 	and.w	r3, r3, #1
 8008362:	2b00      	cmp	r3, #0
 8008364:	d005      	beq.n	8008372 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800836a:	f043 0208 	orr.w	r2, r3, #8
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008376:	2b00      	cmp	r3, #0
 8008378:	f000 820a 	beq.w	8008790 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800837c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008380:	f003 0320 	and.w	r3, r3, #32
 8008384:	2b00      	cmp	r3, #0
 8008386:	d008      	beq.n	800839a <HAL_UART_IRQHandler+0x14e>
 8008388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800838c:	f003 0320 	and.w	r3, r3, #32
 8008390:	2b00      	cmp	r3, #0
 8008392:	d002      	beq.n	800839a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 fd27 	bl	8008de8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	695b      	ldr	r3, [r3, #20]
 80083a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083a4:	2b40      	cmp	r3, #64	@ 0x40
 80083a6:	bf0c      	ite	eq
 80083a8:	2301      	moveq	r3, #1
 80083aa:	2300      	movne	r3, #0
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083b6:	f003 0308 	and.w	r3, r3, #8
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d103      	bne.n	80083c6 <HAL_UART_IRQHandler+0x17a>
 80083be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d04f      	beq.n	8008466 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 fc32 	bl	8008c30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083d6:	2b40      	cmp	r3, #64	@ 0x40
 80083d8:	d141      	bne.n	800845e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	3314      	adds	r3, #20
 80083e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80083e8:	e853 3f00 	ldrex	r3, [r3]
 80083ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80083f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80083f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	3314      	adds	r3, #20
 8008402:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008406:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800840a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800840e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008412:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008416:	e841 2300 	strex	r3, r2, [r1]
 800841a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800841e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008422:	2b00      	cmp	r3, #0
 8008424:	d1d9      	bne.n	80083da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800842a:	2b00      	cmp	r3, #0
 800842c:	d013      	beq.n	8008456 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008432:	4a8a      	ldr	r2, [pc, #552]	@ (800865c <HAL_UART_IRQHandler+0x410>)
 8008434:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800843a:	4618      	mov	r0, r3
 800843c:	f7fc f9b8 	bl	80047b0 <HAL_DMA_Abort_IT>
 8008440:	4603      	mov	r3, r0
 8008442:	2b00      	cmp	r3, #0
 8008444:	d016      	beq.n	8008474 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800844a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8008450:	4610      	mov	r0, r2
 8008452:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008454:	e00e      	b.n	8008474 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7f9 f8b0 	bl	80015bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800845c:	e00a      	b.n	8008474 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f7f9 f8ac 	bl	80015bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008464:	e006      	b.n	8008474 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008466:	6878      	ldr	r0, [r7, #4]
 8008468:	f7f9 f8a8 	bl	80015bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8008472:	e18d      	b.n	8008790 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008474:	bf00      	nop
    return;
 8008476:	e18b      	b.n	8008790 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800847c:	2b01      	cmp	r3, #1
 800847e:	f040 8167 	bne.w	8008750 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008486:	f003 0310 	and.w	r3, r3, #16
 800848a:	2b00      	cmp	r3, #0
 800848c:	f000 8160 	beq.w	8008750 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8008490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008494:	f003 0310 	and.w	r3, r3, #16
 8008498:	2b00      	cmp	r3, #0
 800849a:	f000 8159 	beq.w	8008750 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800849e:	2300      	movs	r3, #0
 80084a0:	60bb      	str	r3, [r7, #8]
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	60bb      	str	r3, [r7, #8]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	60bb      	str	r3, [r7, #8]
 80084b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	695b      	ldr	r3, [r3, #20]
 80084ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80084be:	2b40      	cmp	r3, #64	@ 0x40
 80084c0:	f040 80ce 	bne.w	8008660 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80084d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f000 80a9 	beq.w	800862c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80084de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80084e2:	429a      	cmp	r2, r3
 80084e4:	f080 80a2 	bcs.w	800862c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80084ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80084f4:	69db      	ldr	r3, [r3, #28]
 80084f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80084fa:	f000 8088 	beq.w	800860e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	330c      	adds	r3, #12
 8008504:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008508:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800850c:	e853 3f00 	ldrex	r3, [r3]
 8008510:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008514:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008518:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800851c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	330c      	adds	r3, #12
 8008526:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800852a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800852e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008532:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008536:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800853a:	e841 2300 	strex	r3, r2, [r1]
 800853e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008542:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008546:	2b00      	cmp	r3, #0
 8008548:	d1d9      	bne.n	80084fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	3314      	adds	r3, #20
 8008550:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008552:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008554:	e853 3f00 	ldrex	r3, [r3]
 8008558:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800855a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800855c:	f023 0301 	bic.w	r3, r3, #1
 8008560:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	3314      	adds	r3, #20
 800856a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800856e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008572:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008574:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008576:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800857a:	e841 2300 	strex	r3, r2, [r1]
 800857e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008580:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008582:	2b00      	cmp	r3, #0
 8008584:	d1e1      	bne.n	800854a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	3314      	adds	r3, #20
 800858c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800858e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008590:	e853 3f00 	ldrex	r3, [r3]
 8008594:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008596:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008598:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800859c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	3314      	adds	r3, #20
 80085a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80085aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80085ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80085b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80085b2:	e841 2300 	strex	r3, r2, [r1]
 80085b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80085b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d1e3      	bne.n	8008586 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2220      	movs	r2, #32
 80085c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2200      	movs	r2, #0
 80085ca:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	330c      	adds	r3, #12
 80085d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80085d6:	e853 3f00 	ldrex	r3, [r3]
 80085da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80085dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80085de:	f023 0310 	bic.w	r3, r3, #16
 80085e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	330c      	adds	r3, #12
 80085ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80085f0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80085f2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80085f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80085f8:	e841 2300 	strex	r3, r2, [r1]
 80085fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80085fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008600:	2b00      	cmp	r3, #0
 8008602:	d1e3      	bne.n	80085cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008608:	4618      	mov	r0, r3
 800860a:	f7fc f861 	bl	80046d0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2202      	movs	r2, #2
 8008612:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800861c:	b29b      	uxth	r3, r3
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	b29b      	uxth	r3, r3
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f8cf 	bl	80087c8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800862a:	e0b3      	b.n	8008794 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008630:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008634:	429a      	cmp	r2, r3
 8008636:	f040 80ad 	bne.w	8008794 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800863e:	69db      	ldr	r3, [r3, #28]
 8008640:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008644:	f040 80a6 	bne.w	8008794 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2202      	movs	r2, #2
 800864c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008652:	4619      	mov	r1, r3
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 f8b7 	bl	80087c8 <HAL_UARTEx_RxEventCallback>
      return;
 800865a:	e09b      	b.n	8008794 <HAL_UART_IRQHandler+0x548>
 800865c:	08008cf7 	.word	0x08008cf7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008668:	b29b      	uxth	r3, r3
 800866a:	1ad3      	subs	r3, r2, r3
 800866c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008674:	b29b      	uxth	r3, r3
 8008676:	2b00      	cmp	r3, #0
 8008678:	f000 808e 	beq.w	8008798 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800867c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008680:	2b00      	cmp	r3, #0
 8008682:	f000 8089 	beq.w	8008798 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	330c      	adds	r3, #12
 800868c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008690:	e853 3f00 	ldrex	r3, [r3]
 8008694:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008698:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800869c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	330c      	adds	r3, #12
 80086a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80086aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80086ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80086b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086b2:	e841 2300 	strex	r3, r2, [r1]
 80086b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80086b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1e3      	bne.n	8008686 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	3314      	adds	r3, #20
 80086c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c8:	e853 3f00 	ldrex	r3, [r3]
 80086cc:	623b      	str	r3, [r7, #32]
   return(result);
 80086ce:	6a3b      	ldr	r3, [r7, #32]
 80086d0:	f023 0301 	bic.w	r3, r3, #1
 80086d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	3314      	adds	r3, #20
 80086de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80086e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80086e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086ea:	e841 2300 	strex	r3, r2, [r1]
 80086ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1e3      	bne.n	80086be <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2220      	movs	r2, #32
 80086fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	330c      	adds	r3, #12
 800870a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870c:	693b      	ldr	r3, [r7, #16]
 800870e:	e853 3f00 	ldrex	r3, [r3]
 8008712:	60fb      	str	r3, [r7, #12]
   return(result);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	f023 0310 	bic.w	r3, r3, #16
 800871a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	330c      	adds	r3, #12
 8008724:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8008728:	61fa      	str	r2, [r7, #28]
 800872a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872c:	69b9      	ldr	r1, [r7, #24]
 800872e:	69fa      	ldr	r2, [r7, #28]
 8008730:	e841 2300 	strex	r3, r2, [r1]
 8008734:	617b      	str	r3, [r7, #20]
   return(result);
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d1e3      	bne.n	8008704 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2202      	movs	r2, #2
 8008740:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008742:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008746:	4619      	mov	r1, r3
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 f83d 	bl	80087c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800874e:	e023      	b.n	8008798 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008758:	2b00      	cmp	r3, #0
 800875a:	d009      	beq.n	8008770 <HAL_UART_IRQHandler+0x524>
 800875c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008764:	2b00      	cmp	r3, #0
 8008766:	d003      	beq.n	8008770 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f000 fad5 	bl	8008d18 <UART_Transmit_IT>
    return;
 800876e:	e014      	b.n	800879a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008778:	2b00      	cmp	r3, #0
 800877a:	d00e      	beq.n	800879a <HAL_UART_IRQHandler+0x54e>
 800877c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008780:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008784:	2b00      	cmp	r3, #0
 8008786:	d008      	beq.n	800879a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fb15 	bl	8008db8 <UART_EndTransmit_IT>
    return;
 800878e:	e004      	b.n	800879a <HAL_UART_IRQHandler+0x54e>
    return;
 8008790:	bf00      	nop
 8008792:	e002      	b.n	800879a <HAL_UART_IRQHandler+0x54e>
      return;
 8008794:	bf00      	nop
 8008796:	e000      	b.n	800879a <HAL_UART_IRQHandler+0x54e>
      return;
 8008798:	bf00      	nop
  }
}
 800879a:	37e8      	adds	r7, #232	@ 0xe8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	460b      	mov	r3, r1
 80087d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b090      	sub	sp, #64	@ 0x40
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d137      	bne.n	800886c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80087fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80087fe:	2200      	movs	r2, #0
 8008800:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	3314      	adds	r3, #20
 8008808:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800880a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800880c:	e853 3f00 	ldrex	r3, [r3]
 8008810:	623b      	str	r3, [r7, #32]
   return(result);
 8008812:	6a3b      	ldr	r3, [r7, #32]
 8008814:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008818:	63bb      	str	r3, [r7, #56]	@ 0x38
 800881a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	3314      	adds	r3, #20
 8008820:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008822:	633a      	str	r2, [r7, #48]	@ 0x30
 8008824:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008826:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008828:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800882a:	e841 2300 	strex	r3, r2, [r1]
 800882e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008830:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008832:	2b00      	cmp	r3, #0
 8008834:	d1e5      	bne.n	8008802 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008836:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	330c      	adds	r3, #12
 800883c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	e853 3f00 	ldrex	r3, [r3]
 8008844:	60fb      	str	r3, [r7, #12]
   return(result);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800884c:	637b      	str	r3, [r7, #52]	@ 0x34
 800884e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	330c      	adds	r3, #12
 8008854:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008856:	61fa      	str	r2, [r7, #28]
 8008858:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885a:	69b9      	ldr	r1, [r7, #24]
 800885c:	69fa      	ldr	r2, [r7, #28]
 800885e:	e841 2300 	strex	r3, r2, [r1]
 8008862:	617b      	str	r3, [r7, #20]
   return(result);
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	2b00      	cmp	r3, #0
 8008868:	d1e5      	bne.n	8008836 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800886a:	e002      	b.n	8008872 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800886c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800886e:	f7ff ff97 	bl	80087a0 <HAL_UART_TxCpltCallback>
}
 8008872:	bf00      	nop
 8008874:	3740      	adds	r7, #64	@ 0x40
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}

0800887a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800887a:	b580      	push	{r7, lr}
 800887c:	b084      	sub	sp, #16
 800887e:	af00      	add	r7, sp, #0
 8008880:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008886:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f7ff ff93 	bl	80087b4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800888e:	bf00      	nop
 8008890:	3710      	adds	r7, #16
 8008892:	46bd      	mov	sp, r7
 8008894:	bd80      	pop	{r7, pc}

08008896 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008896:	b580      	push	{r7, lr}
 8008898:	b09c      	sub	sp, #112	@ 0x70
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088a2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d172      	bne.n	8008998 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80088b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088b4:	2200      	movs	r2, #0
 80088b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	330c      	adds	r3, #12
 80088be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088c2:	e853 3f00 	ldrex	r3, [r3]
 80088c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80088c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80088ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80088d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	330c      	adds	r3, #12
 80088d6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80088d8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80088da:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80088de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80088e0:	e841 2300 	strex	r3, r2, [r1]
 80088e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80088e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1e5      	bne.n	80088b8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3314      	adds	r3, #20
 80088f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088f6:	e853 3f00 	ldrex	r3, [r3]
 80088fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80088fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088fe:	f023 0301 	bic.w	r3, r3, #1
 8008902:	667b      	str	r3, [r7, #100]	@ 0x64
 8008904:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	3314      	adds	r3, #20
 800890a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800890c:	647a      	str	r2, [r7, #68]	@ 0x44
 800890e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008910:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008912:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008914:	e841 2300 	strex	r3, r2, [r1]
 8008918:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800891a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800891c:	2b00      	cmp	r3, #0
 800891e:	d1e5      	bne.n	80088ec <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008920:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	3314      	adds	r3, #20
 8008926:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800892a:	e853 3f00 	ldrex	r3, [r3]
 800892e:	623b      	str	r3, [r7, #32]
   return(result);
 8008930:	6a3b      	ldr	r3, [r7, #32]
 8008932:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008936:	663b      	str	r3, [r7, #96]	@ 0x60
 8008938:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	3314      	adds	r3, #20
 800893e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008940:	633a      	str	r2, [r7, #48]	@ 0x30
 8008942:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008944:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008948:	e841 2300 	strex	r3, r2, [r1]
 800894c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800894e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008950:	2b00      	cmp	r3, #0
 8008952:	d1e5      	bne.n	8008920 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008954:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008956:	2220      	movs	r2, #32
 8008958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800895c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800895e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008960:	2b01      	cmp	r3, #1
 8008962:	d119      	bne.n	8008998 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008964:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	330c      	adds	r3, #12
 800896a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896c:	693b      	ldr	r3, [r7, #16]
 800896e:	e853 3f00 	ldrex	r3, [r3]
 8008972:	60fb      	str	r3, [r7, #12]
   return(result);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f023 0310 	bic.w	r3, r3, #16
 800897a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800897c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	330c      	adds	r3, #12
 8008982:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008984:	61fa      	str	r2, [r7, #28]
 8008986:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008988:	69b9      	ldr	r1, [r7, #24]
 800898a:	69fa      	ldr	r2, [r7, #28]
 800898c:	e841 2300 	strex	r3, r2, [r1]
 8008990:	617b      	str	r3, [r7, #20]
   return(result);
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d1e5      	bne.n	8008964 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008998:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800899a:	2200      	movs	r2, #0
 800899c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800899e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089a2:	2b01      	cmp	r3, #1
 80089a4:	d106      	bne.n	80089b4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80089a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80089aa:	4619      	mov	r1, r3
 80089ac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80089ae:	f7ff ff0b 	bl	80087c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80089b2:	e002      	b.n	80089ba <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80089b4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80089b6:	f7f8 fb93 	bl	80010e0 <HAL_UART_RxCpltCallback>
}
 80089ba:	bf00      	nop
 80089bc:	3770      	adds	r7, #112	@ 0x70
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80089c2:	b580      	push	{r7, lr}
 80089c4:	b084      	sub	sp, #16
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ce:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2201      	movs	r2, #1
 80089d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089da:	2b01      	cmp	r3, #1
 80089dc:	d108      	bne.n	80089f0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80089e2:	085b      	lsrs	r3, r3, #1
 80089e4:	b29b      	uxth	r3, r3
 80089e6:	4619      	mov	r1, r3
 80089e8:	68f8      	ldr	r0, [r7, #12]
 80089ea:	f7ff feed 	bl	80087c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80089ee:	e002      	b.n	80089f6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f7f8 fd33 	bl	800145c <HAL_UART_RxHalfCpltCallback>
}
 80089f6:	bf00      	nop
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b084      	sub	sp, #16
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008a06:	2300      	movs	r3, #0
 8008a08:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a0e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	695b      	ldr	r3, [r3, #20]
 8008a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a1a:	2b80      	cmp	r3, #128	@ 0x80
 8008a1c:	bf0c      	ite	eq
 8008a1e:	2301      	moveq	r3, #1
 8008a20:	2300      	movne	r3, #0
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	2b21      	cmp	r3, #33	@ 0x21
 8008a30:	d108      	bne.n	8008a44 <UART_DMAError+0x46>
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d005      	beq.n	8008a44 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008a3e:	68b8      	ldr	r0, [r7, #8]
 8008a40:	f000 f8ce 	bl	8008be0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	695b      	ldr	r3, [r3, #20]
 8008a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a4e:	2b40      	cmp	r3, #64	@ 0x40
 8008a50:	bf0c      	ite	eq
 8008a52:	2301      	moveq	r3, #1
 8008a54:	2300      	movne	r3, #0
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	2b22      	cmp	r3, #34	@ 0x22
 8008a64:	d108      	bne.n	8008a78 <UART_DMAError+0x7a>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d005      	beq.n	8008a78 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008a72:	68b8      	ldr	r0, [r7, #8]
 8008a74:	f000 f8dc 	bl	8008c30 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a7c:	f043 0210 	orr.w	r2, r3, #16
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a84:	68b8      	ldr	r0, [r7, #8]
 8008a86:	f7f8 fd99 	bl	80015bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a8a:	bf00      	nop
 8008a8c:	3710      	adds	r7, #16
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
	...

08008a94 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b098      	sub	sp, #96	@ 0x60
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	60f8      	str	r0, [r7, #12]
 8008a9c:	60b9      	str	r1, [r7, #8]
 8008a9e:	4613      	mov	r3, r2
 8008aa0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008aa2:	68ba      	ldr	r2, [r7, #8]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	88fa      	ldrh	r2, [r7, #6]
 8008aac:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2222      	movs	r2, #34	@ 0x22
 8008ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ac0:	4a44      	ldr	r2, [pc, #272]	@ (8008bd4 <UART_Start_Receive_DMA+0x140>)
 8008ac2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ac8:	4a43      	ldr	r2, [pc, #268]	@ (8008bd8 <UART_Start_Receive_DMA+0x144>)
 8008aca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ad0:	4a42      	ldr	r2, [pc, #264]	@ (8008bdc <UART_Start_Receive_DMA+0x148>)
 8008ad2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ad8:	2200      	movs	r2, #0
 8008ada:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008adc:	f107 0308 	add.w	r3, r7, #8
 8008ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	3304      	adds	r3, #4
 8008aec:	4619      	mov	r1, r3
 8008aee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008af0:	681a      	ldr	r2, [r3, #0]
 8008af2:	88fb      	ldrh	r3, [r7, #6]
 8008af4:	f7fb fd94 	bl	8004620 <HAL_DMA_Start_IT>
 8008af8:	4603      	mov	r3, r0
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d008      	beq.n	8008b10 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	2210      	movs	r2, #16
 8008b02:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2220      	movs	r2, #32
 8008b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	e05d      	b.n	8008bcc <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008b10:	2300      	movs	r3, #0
 8008b12:	613b      	str	r3, [r7, #16]
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	613b      	str	r3, [r7, #16]
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	613b      	str	r3, [r7, #16]
 8008b24:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	691b      	ldr	r3, [r3, #16]
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d019      	beq.n	8008b62 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	330c      	adds	r3, #12
 8008b34:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b38:	e853 3f00 	ldrex	r3, [r3]
 8008b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008b44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	330c      	adds	r3, #12
 8008b4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b4e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008b50:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b52:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008b54:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008b56:	e841 2300 	strex	r3, r2, [r1]
 8008b5a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008b5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1e5      	bne.n	8008b2e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	3314      	adds	r3, #20
 8008b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b6c:	e853 3f00 	ldrex	r3, [r3]
 8008b70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b74:	f043 0301 	orr.w	r3, r3, #1
 8008b78:	657b      	str	r3, [r7, #84]	@ 0x54
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	3314      	adds	r3, #20
 8008b80:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008b82:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008b84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b86:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8008b88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b8a:	e841 2300 	strex	r3, r2, [r1]
 8008b8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1e5      	bne.n	8008b62 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	3314      	adds	r3, #20
 8008b9c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9e:	69bb      	ldr	r3, [r7, #24]
 8008ba0:	e853 3f00 	ldrex	r3, [r3]
 8008ba4:	617b      	str	r3, [r7, #20]
   return(result);
 8008ba6:	697b      	ldr	r3, [r7, #20]
 8008ba8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bac:	653b      	str	r3, [r7, #80]	@ 0x50
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	3314      	adds	r3, #20
 8008bb4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008bb6:	627a      	str	r2, [r7, #36]	@ 0x24
 8008bb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bba:	6a39      	ldr	r1, [r7, #32]
 8008bbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008bbe:	e841 2300 	strex	r3, r2, [r1]
 8008bc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1e5      	bne.n	8008b96 <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3760      	adds	r7, #96	@ 0x60
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	08008897 	.word	0x08008897
 8008bd8:	080089c3 	.word	0x080089c3
 8008bdc:	080089ff 	.word	0x080089ff

08008be0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b089      	sub	sp, #36	@ 0x24
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	330c      	adds	r3, #12
 8008bee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	e853 3f00 	ldrex	r3, [r3]
 8008bf6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008bfe:	61fb      	str	r3, [r7, #28]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	330c      	adds	r3, #12
 8008c06:	69fa      	ldr	r2, [r7, #28]
 8008c08:	61ba      	str	r2, [r7, #24]
 8008c0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0c:	6979      	ldr	r1, [r7, #20]
 8008c0e:	69ba      	ldr	r2, [r7, #24]
 8008c10:	e841 2300 	strex	r3, r2, [r1]
 8008c14:	613b      	str	r3, [r7, #16]
   return(result);
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d1e5      	bne.n	8008be8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2220      	movs	r2, #32
 8008c20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8008c24:	bf00      	nop
 8008c26:	3724      	adds	r7, #36	@ 0x24
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b095      	sub	sp, #84	@ 0x54
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	330c      	adds	r3, #12
 8008c3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c42:	e853 3f00 	ldrex	r3, [r3]
 8008c46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	330c      	adds	r3, #12
 8008c56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008c58:	643a      	str	r2, [r7, #64]	@ 0x40
 8008c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008c5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008c60:	e841 2300 	strex	r3, r2, [r1]
 8008c64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d1e5      	bne.n	8008c38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	3314      	adds	r3, #20
 8008c72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c74:	6a3b      	ldr	r3, [r7, #32]
 8008c76:	e853 3f00 	ldrex	r3, [r3]
 8008c7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	f023 0301 	bic.w	r3, r3, #1
 8008c82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	3314      	adds	r3, #20
 8008c8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008c8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008c92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c94:	e841 2300 	strex	r3, r2, [r1]
 8008c98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d1e5      	bne.n	8008c6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ca4:	2b01      	cmp	r3, #1
 8008ca6:	d119      	bne.n	8008cdc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	330c      	adds	r3, #12
 8008cae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	e853 3f00 	ldrex	r3, [r3]
 8008cb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	f023 0310 	bic.w	r3, r3, #16
 8008cbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	330c      	adds	r3, #12
 8008cc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cc8:	61ba      	str	r2, [r7, #24]
 8008cca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ccc:	6979      	ldr	r1, [r7, #20]
 8008cce:	69ba      	ldr	r2, [r7, #24]
 8008cd0:	e841 2300 	strex	r3, r2, [r1]
 8008cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8008cd6:	693b      	ldr	r3, [r7, #16]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d1e5      	bne.n	8008ca8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2220      	movs	r2, #32
 8008ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008cea:	bf00      	nop
 8008cec:	3754      	adds	r7, #84	@ 0x54
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr

08008cf6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b084      	sub	sp, #16
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2200      	movs	r2, #0
 8008d08:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f7f8 fc56 	bl	80015bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d10:	bf00      	nop
 8008d12:	3710      	adds	r7, #16
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d26:	b2db      	uxtb	r3, r3
 8008d28:	2b21      	cmp	r3, #33	@ 0x21
 8008d2a:	d13e      	bne.n	8008daa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d34:	d114      	bne.n	8008d60 <UART_Transmit_IT+0x48>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	691b      	ldr	r3, [r3, #16]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d110      	bne.n	8008d60 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	881b      	ldrh	r3, [r3, #0]
 8008d48:	461a      	mov	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d52:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a1b      	ldr	r3, [r3, #32]
 8008d58:	1c9a      	adds	r2, r3, #2
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	621a      	str	r2, [r3, #32]
 8008d5e:	e008      	b.n	8008d72 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	6a1b      	ldr	r3, [r3, #32]
 8008d64:	1c59      	adds	r1, r3, #1
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	6211      	str	r1, [r2, #32]
 8008d6a:	781a      	ldrb	r2, [r3, #0]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	b29b      	uxth	r3, r3
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	4619      	mov	r1, r3
 8008d80:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d10f      	bne.n	8008da6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68da      	ldr	r2, [r3, #12]
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008d94:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	68da      	ldr	r2, [r3, #12]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008da4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008da6:	2300      	movs	r3, #0
 8008da8:	e000      	b.n	8008dac <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008daa:	2302      	movs	r3, #2
  }
}
 8008dac:	4618      	mov	r0, r3
 8008dae:	3714      	adds	r7, #20
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b082      	sub	sp, #8
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68da      	ldr	r2, [r3, #12]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008dce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2220      	movs	r2, #32
 8008dd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008dd8:	6878      	ldr	r0, [r7, #4]
 8008dda:	f7ff fce1 	bl	80087a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008dde:	2300      	movs	r3, #0
}
 8008de0:	4618      	mov	r0, r3
 8008de2:	3708      	adds	r7, #8
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b08c      	sub	sp, #48	@ 0x30
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8008df0:	2300      	movs	r3, #0
 8008df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8008df4:	2300      	movs	r3, #0
 8008df6:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	2b22      	cmp	r3, #34	@ 0x22
 8008e02:	f040 80aa 	bne.w	8008f5a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	689b      	ldr	r3, [r3, #8]
 8008e0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e0e:	d115      	bne.n	8008e3c <UART_Receive_IT+0x54>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	691b      	ldr	r3, [r3, #16]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d111      	bne.n	8008e3c <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	b29b      	uxth	r3, r3
 8008e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e2a:	b29a      	uxth	r2, r3
 8008e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e2e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e34:	1c9a      	adds	r2, r3, #2
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	629a      	str	r2, [r3, #40]	@ 0x28
 8008e3a:	e024      	b.n	8008e86 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e4a:	d007      	beq.n	8008e5c <UART_Receive_IT+0x74>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d10a      	bne.n	8008e6a <UART_Receive_IT+0x82>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	691b      	ldr	r3, [r3, #16]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d106      	bne.n	8008e6a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	b2da      	uxtb	r2, r3
 8008e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e66:	701a      	strb	r2, [r3, #0]
 8008e68:	e008      	b.n	8008e7c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	685b      	ldr	r3, [r3, #4]
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e76:	b2da      	uxtb	r2, r3
 8008e78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e7a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e80:	1c5a      	adds	r2, r3, #1
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	3b01      	subs	r3, #1
 8008e8e:	b29b      	uxth	r3, r3
 8008e90:	687a      	ldr	r2, [r7, #4]
 8008e92:	4619      	mov	r1, r3
 8008e94:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d15d      	bne.n	8008f56 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68da      	ldr	r2, [r3, #12]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f022 0220 	bic.w	r2, r2, #32
 8008ea8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	68da      	ldr	r2, [r3, #12]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8008eb8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	695a      	ldr	r2, [r3, #20]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f022 0201 	bic.w	r2, r2, #1
 8008ec8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2220      	movs	r2, #32
 8008ece:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008edc:	2b01      	cmp	r3, #1
 8008ede:	d135      	bne.n	8008f4c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	330c      	adds	r3, #12
 8008eec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	e853 3f00 	ldrex	r3, [r3]
 8008ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8008ef6:	693b      	ldr	r3, [r7, #16]
 8008ef8:	f023 0310 	bic.w	r3, r3, #16
 8008efc:	627b      	str	r3, [r7, #36]	@ 0x24
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	330c      	adds	r3, #12
 8008f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f06:	623a      	str	r2, [r7, #32]
 8008f08:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0a:	69f9      	ldr	r1, [r7, #28]
 8008f0c:	6a3a      	ldr	r2, [r7, #32]
 8008f0e:	e841 2300 	strex	r3, r2, [r1]
 8008f12:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f14:	69bb      	ldr	r3, [r7, #24]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1e5      	bne.n	8008ee6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 0310 	and.w	r3, r3, #16
 8008f24:	2b10      	cmp	r3, #16
 8008f26:	d10a      	bne.n	8008f3e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f28:	2300      	movs	r3, #0
 8008f2a:	60fb      	str	r3, [r7, #12]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	60fb      	str	r3, [r7, #12]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	60fb      	str	r3, [r7, #12]
 8008f3c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008f42:	4619      	mov	r1, r3
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f7ff fc3f 	bl	80087c8 <HAL_UARTEx_RxEventCallback>
 8008f4a:	e002      	b.n	8008f52 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f7f8 f8c7 	bl	80010e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008f52:	2300      	movs	r3, #0
 8008f54:	e002      	b.n	8008f5c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8008f56:	2300      	movs	r3, #0
 8008f58:	e000      	b.n	8008f5c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8008f5a:	2302      	movs	r3, #2
  }
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3730      	adds	r7, #48	@ 0x30
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f68:	b0c0      	sub	sp, #256	@ 0x100
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	691b      	ldr	r3, [r3, #16]
 8008f78:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f80:	68d9      	ldr	r1, [r3, #12]
 8008f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	ea40 0301 	orr.w	r3, r0, r1
 8008f8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f92:	689a      	ldr	r2, [r3, #8]
 8008f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	431a      	orrs	r2, r3
 8008f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	431a      	orrs	r2, r3
 8008fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fa8:	69db      	ldr	r3, [r3, #28]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008fbc:	f021 010c 	bic.w	r1, r1, #12
 8008fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008fca:	430b      	orrs	r3, r1
 8008fcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fde:	6999      	ldr	r1, [r3, #24]
 8008fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008fe4:	681a      	ldr	r2, [r3, #0]
 8008fe6:	ea40 0301 	orr.w	r3, r0, r1
 8008fea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	4b8f      	ldr	r3, [pc, #572]	@ (8009230 <UART_SetConfig+0x2cc>)
 8008ff4:	429a      	cmp	r2, r3
 8008ff6:	d005      	beq.n	8009004 <UART_SetConfig+0xa0>
 8008ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ffc:	681a      	ldr	r2, [r3, #0]
 8008ffe:	4b8d      	ldr	r3, [pc, #564]	@ (8009234 <UART_SetConfig+0x2d0>)
 8009000:	429a      	cmp	r2, r3
 8009002:	d104      	bne.n	800900e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009004:	f7fd ff36 	bl	8006e74 <HAL_RCC_GetPCLK2Freq>
 8009008:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800900c:	e003      	b.n	8009016 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800900e:	f7fd ff1d 	bl	8006e4c <HAL_RCC_GetPCLK1Freq>
 8009012:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009016:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800901a:	69db      	ldr	r3, [r3, #28]
 800901c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009020:	f040 810c 	bne.w	800923c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009024:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009028:	2200      	movs	r2, #0
 800902a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800902e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009032:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009036:	4622      	mov	r2, r4
 8009038:	462b      	mov	r3, r5
 800903a:	1891      	adds	r1, r2, r2
 800903c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800903e:	415b      	adcs	r3, r3
 8009040:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009042:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009046:	4621      	mov	r1, r4
 8009048:	eb12 0801 	adds.w	r8, r2, r1
 800904c:	4629      	mov	r1, r5
 800904e:	eb43 0901 	adc.w	r9, r3, r1
 8009052:	f04f 0200 	mov.w	r2, #0
 8009056:	f04f 0300 	mov.w	r3, #0
 800905a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800905e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009062:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009066:	4690      	mov	r8, r2
 8009068:	4699      	mov	r9, r3
 800906a:	4623      	mov	r3, r4
 800906c:	eb18 0303 	adds.w	r3, r8, r3
 8009070:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009074:	462b      	mov	r3, r5
 8009076:	eb49 0303 	adc.w	r3, r9, r3
 800907a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800907e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	2200      	movs	r2, #0
 8009086:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800908a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800908e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009092:	460b      	mov	r3, r1
 8009094:	18db      	adds	r3, r3, r3
 8009096:	653b      	str	r3, [r7, #80]	@ 0x50
 8009098:	4613      	mov	r3, r2
 800909a:	eb42 0303 	adc.w	r3, r2, r3
 800909e:	657b      	str	r3, [r7, #84]	@ 0x54
 80090a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80090a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80090a8:	f7f7 f8e2 	bl	8000270 <__aeabi_uldivmod>
 80090ac:	4602      	mov	r2, r0
 80090ae:	460b      	mov	r3, r1
 80090b0:	4b61      	ldr	r3, [pc, #388]	@ (8009238 <UART_SetConfig+0x2d4>)
 80090b2:	fba3 2302 	umull	r2, r3, r3, r2
 80090b6:	095b      	lsrs	r3, r3, #5
 80090b8:	011c      	lsls	r4, r3, #4
 80090ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80090be:	2200      	movs	r2, #0
 80090c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80090c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80090c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80090cc:	4642      	mov	r2, r8
 80090ce:	464b      	mov	r3, r9
 80090d0:	1891      	adds	r1, r2, r2
 80090d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80090d4:	415b      	adcs	r3, r3
 80090d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80090d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80090dc:	4641      	mov	r1, r8
 80090de:	eb12 0a01 	adds.w	sl, r2, r1
 80090e2:	4649      	mov	r1, r9
 80090e4:	eb43 0b01 	adc.w	fp, r3, r1
 80090e8:	f04f 0200 	mov.w	r2, #0
 80090ec:	f04f 0300 	mov.w	r3, #0
 80090f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80090f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80090f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80090fc:	4692      	mov	sl, r2
 80090fe:	469b      	mov	fp, r3
 8009100:	4643      	mov	r3, r8
 8009102:	eb1a 0303 	adds.w	r3, sl, r3
 8009106:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800910a:	464b      	mov	r3, r9
 800910c:	eb4b 0303 	adc.w	r3, fp, r3
 8009110:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	2200      	movs	r2, #0
 800911c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009120:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009124:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009128:	460b      	mov	r3, r1
 800912a:	18db      	adds	r3, r3, r3
 800912c:	643b      	str	r3, [r7, #64]	@ 0x40
 800912e:	4613      	mov	r3, r2
 8009130:	eb42 0303 	adc.w	r3, r2, r3
 8009134:	647b      	str	r3, [r7, #68]	@ 0x44
 8009136:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800913a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800913e:	f7f7 f897 	bl	8000270 <__aeabi_uldivmod>
 8009142:	4602      	mov	r2, r0
 8009144:	460b      	mov	r3, r1
 8009146:	4611      	mov	r1, r2
 8009148:	4b3b      	ldr	r3, [pc, #236]	@ (8009238 <UART_SetConfig+0x2d4>)
 800914a:	fba3 2301 	umull	r2, r3, r3, r1
 800914e:	095b      	lsrs	r3, r3, #5
 8009150:	2264      	movs	r2, #100	@ 0x64
 8009152:	fb02 f303 	mul.w	r3, r2, r3
 8009156:	1acb      	subs	r3, r1, r3
 8009158:	00db      	lsls	r3, r3, #3
 800915a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800915e:	4b36      	ldr	r3, [pc, #216]	@ (8009238 <UART_SetConfig+0x2d4>)
 8009160:	fba3 2302 	umull	r2, r3, r3, r2
 8009164:	095b      	lsrs	r3, r3, #5
 8009166:	005b      	lsls	r3, r3, #1
 8009168:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800916c:	441c      	add	r4, r3
 800916e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009172:	2200      	movs	r2, #0
 8009174:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009178:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800917c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009180:	4642      	mov	r2, r8
 8009182:	464b      	mov	r3, r9
 8009184:	1891      	adds	r1, r2, r2
 8009186:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009188:	415b      	adcs	r3, r3
 800918a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800918c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009190:	4641      	mov	r1, r8
 8009192:	1851      	adds	r1, r2, r1
 8009194:	6339      	str	r1, [r7, #48]	@ 0x30
 8009196:	4649      	mov	r1, r9
 8009198:	414b      	adcs	r3, r1
 800919a:	637b      	str	r3, [r7, #52]	@ 0x34
 800919c:	f04f 0200 	mov.w	r2, #0
 80091a0:	f04f 0300 	mov.w	r3, #0
 80091a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80091a8:	4659      	mov	r1, fp
 80091aa:	00cb      	lsls	r3, r1, #3
 80091ac:	4651      	mov	r1, sl
 80091ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80091b2:	4651      	mov	r1, sl
 80091b4:	00ca      	lsls	r2, r1, #3
 80091b6:	4610      	mov	r0, r2
 80091b8:	4619      	mov	r1, r3
 80091ba:	4603      	mov	r3, r0
 80091bc:	4642      	mov	r2, r8
 80091be:	189b      	adds	r3, r3, r2
 80091c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80091c4:	464b      	mov	r3, r9
 80091c6:	460a      	mov	r2, r1
 80091c8:	eb42 0303 	adc.w	r3, r2, r3
 80091cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80091d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80091dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80091e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80091e4:	460b      	mov	r3, r1
 80091e6:	18db      	adds	r3, r3, r3
 80091e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80091ea:	4613      	mov	r3, r2
 80091ec:	eb42 0303 	adc.w	r3, r2, r3
 80091f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80091f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80091f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80091fa:	f7f7 f839 	bl	8000270 <__aeabi_uldivmod>
 80091fe:	4602      	mov	r2, r0
 8009200:	460b      	mov	r3, r1
 8009202:	4b0d      	ldr	r3, [pc, #52]	@ (8009238 <UART_SetConfig+0x2d4>)
 8009204:	fba3 1302 	umull	r1, r3, r3, r2
 8009208:	095b      	lsrs	r3, r3, #5
 800920a:	2164      	movs	r1, #100	@ 0x64
 800920c:	fb01 f303 	mul.w	r3, r1, r3
 8009210:	1ad3      	subs	r3, r2, r3
 8009212:	00db      	lsls	r3, r3, #3
 8009214:	3332      	adds	r3, #50	@ 0x32
 8009216:	4a08      	ldr	r2, [pc, #32]	@ (8009238 <UART_SetConfig+0x2d4>)
 8009218:	fba2 2303 	umull	r2, r3, r2, r3
 800921c:	095b      	lsrs	r3, r3, #5
 800921e:	f003 0207 	and.w	r2, r3, #7
 8009222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4422      	add	r2, r4
 800922a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800922c:	e106      	b.n	800943c <UART_SetConfig+0x4d8>
 800922e:	bf00      	nop
 8009230:	40011000 	.word	0x40011000
 8009234:	40011400 	.word	0x40011400
 8009238:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800923c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009240:	2200      	movs	r2, #0
 8009242:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009246:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800924a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800924e:	4642      	mov	r2, r8
 8009250:	464b      	mov	r3, r9
 8009252:	1891      	adds	r1, r2, r2
 8009254:	6239      	str	r1, [r7, #32]
 8009256:	415b      	adcs	r3, r3
 8009258:	627b      	str	r3, [r7, #36]	@ 0x24
 800925a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800925e:	4641      	mov	r1, r8
 8009260:	1854      	adds	r4, r2, r1
 8009262:	4649      	mov	r1, r9
 8009264:	eb43 0501 	adc.w	r5, r3, r1
 8009268:	f04f 0200 	mov.w	r2, #0
 800926c:	f04f 0300 	mov.w	r3, #0
 8009270:	00eb      	lsls	r3, r5, #3
 8009272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009276:	00e2      	lsls	r2, r4, #3
 8009278:	4614      	mov	r4, r2
 800927a:	461d      	mov	r5, r3
 800927c:	4643      	mov	r3, r8
 800927e:	18e3      	adds	r3, r4, r3
 8009280:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009284:	464b      	mov	r3, r9
 8009286:	eb45 0303 	adc.w	r3, r5, r3
 800928a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800928e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800929a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800929e:	f04f 0200 	mov.w	r2, #0
 80092a2:	f04f 0300 	mov.w	r3, #0
 80092a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80092aa:	4629      	mov	r1, r5
 80092ac:	008b      	lsls	r3, r1, #2
 80092ae:	4621      	mov	r1, r4
 80092b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80092b4:	4621      	mov	r1, r4
 80092b6:	008a      	lsls	r2, r1, #2
 80092b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80092bc:	f7f6 ffd8 	bl	8000270 <__aeabi_uldivmod>
 80092c0:	4602      	mov	r2, r0
 80092c2:	460b      	mov	r3, r1
 80092c4:	4b60      	ldr	r3, [pc, #384]	@ (8009448 <UART_SetConfig+0x4e4>)
 80092c6:	fba3 2302 	umull	r2, r3, r3, r2
 80092ca:	095b      	lsrs	r3, r3, #5
 80092cc:	011c      	lsls	r4, r3, #4
 80092ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80092d2:	2200      	movs	r2, #0
 80092d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80092d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80092dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80092e0:	4642      	mov	r2, r8
 80092e2:	464b      	mov	r3, r9
 80092e4:	1891      	adds	r1, r2, r2
 80092e6:	61b9      	str	r1, [r7, #24]
 80092e8:	415b      	adcs	r3, r3
 80092ea:	61fb      	str	r3, [r7, #28]
 80092ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80092f0:	4641      	mov	r1, r8
 80092f2:	1851      	adds	r1, r2, r1
 80092f4:	6139      	str	r1, [r7, #16]
 80092f6:	4649      	mov	r1, r9
 80092f8:	414b      	adcs	r3, r1
 80092fa:	617b      	str	r3, [r7, #20]
 80092fc:	f04f 0200 	mov.w	r2, #0
 8009300:	f04f 0300 	mov.w	r3, #0
 8009304:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009308:	4659      	mov	r1, fp
 800930a:	00cb      	lsls	r3, r1, #3
 800930c:	4651      	mov	r1, sl
 800930e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009312:	4651      	mov	r1, sl
 8009314:	00ca      	lsls	r2, r1, #3
 8009316:	4610      	mov	r0, r2
 8009318:	4619      	mov	r1, r3
 800931a:	4603      	mov	r3, r0
 800931c:	4642      	mov	r2, r8
 800931e:	189b      	adds	r3, r3, r2
 8009320:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009324:	464b      	mov	r3, r9
 8009326:	460a      	mov	r2, r1
 8009328:	eb42 0303 	adc.w	r3, r2, r3
 800932c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009334:	685b      	ldr	r3, [r3, #4]
 8009336:	2200      	movs	r2, #0
 8009338:	67bb      	str	r3, [r7, #120]	@ 0x78
 800933a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800933c:	f04f 0200 	mov.w	r2, #0
 8009340:	f04f 0300 	mov.w	r3, #0
 8009344:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009348:	4649      	mov	r1, r9
 800934a:	008b      	lsls	r3, r1, #2
 800934c:	4641      	mov	r1, r8
 800934e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009352:	4641      	mov	r1, r8
 8009354:	008a      	lsls	r2, r1, #2
 8009356:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800935a:	f7f6 ff89 	bl	8000270 <__aeabi_uldivmod>
 800935e:	4602      	mov	r2, r0
 8009360:	460b      	mov	r3, r1
 8009362:	4611      	mov	r1, r2
 8009364:	4b38      	ldr	r3, [pc, #224]	@ (8009448 <UART_SetConfig+0x4e4>)
 8009366:	fba3 2301 	umull	r2, r3, r3, r1
 800936a:	095b      	lsrs	r3, r3, #5
 800936c:	2264      	movs	r2, #100	@ 0x64
 800936e:	fb02 f303 	mul.w	r3, r2, r3
 8009372:	1acb      	subs	r3, r1, r3
 8009374:	011b      	lsls	r3, r3, #4
 8009376:	3332      	adds	r3, #50	@ 0x32
 8009378:	4a33      	ldr	r2, [pc, #204]	@ (8009448 <UART_SetConfig+0x4e4>)
 800937a:	fba2 2303 	umull	r2, r3, r2, r3
 800937e:	095b      	lsrs	r3, r3, #5
 8009380:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009384:	441c      	add	r4, r3
 8009386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800938a:	2200      	movs	r2, #0
 800938c:	673b      	str	r3, [r7, #112]	@ 0x70
 800938e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009390:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009394:	4642      	mov	r2, r8
 8009396:	464b      	mov	r3, r9
 8009398:	1891      	adds	r1, r2, r2
 800939a:	60b9      	str	r1, [r7, #8]
 800939c:	415b      	adcs	r3, r3
 800939e:	60fb      	str	r3, [r7, #12]
 80093a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80093a4:	4641      	mov	r1, r8
 80093a6:	1851      	adds	r1, r2, r1
 80093a8:	6039      	str	r1, [r7, #0]
 80093aa:	4649      	mov	r1, r9
 80093ac:	414b      	adcs	r3, r1
 80093ae:	607b      	str	r3, [r7, #4]
 80093b0:	f04f 0200 	mov.w	r2, #0
 80093b4:	f04f 0300 	mov.w	r3, #0
 80093b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80093bc:	4659      	mov	r1, fp
 80093be:	00cb      	lsls	r3, r1, #3
 80093c0:	4651      	mov	r1, sl
 80093c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093c6:	4651      	mov	r1, sl
 80093c8:	00ca      	lsls	r2, r1, #3
 80093ca:	4610      	mov	r0, r2
 80093cc:	4619      	mov	r1, r3
 80093ce:	4603      	mov	r3, r0
 80093d0:	4642      	mov	r2, r8
 80093d2:	189b      	adds	r3, r3, r2
 80093d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80093d6:	464b      	mov	r3, r9
 80093d8:	460a      	mov	r2, r1
 80093da:	eb42 0303 	adc.w	r3, r2, r3
 80093de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80093e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80093ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80093ec:	f04f 0200 	mov.w	r2, #0
 80093f0:	f04f 0300 	mov.w	r3, #0
 80093f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80093f8:	4649      	mov	r1, r9
 80093fa:	008b      	lsls	r3, r1, #2
 80093fc:	4641      	mov	r1, r8
 80093fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009402:	4641      	mov	r1, r8
 8009404:	008a      	lsls	r2, r1, #2
 8009406:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800940a:	f7f6 ff31 	bl	8000270 <__aeabi_uldivmod>
 800940e:	4602      	mov	r2, r0
 8009410:	460b      	mov	r3, r1
 8009412:	4b0d      	ldr	r3, [pc, #52]	@ (8009448 <UART_SetConfig+0x4e4>)
 8009414:	fba3 1302 	umull	r1, r3, r3, r2
 8009418:	095b      	lsrs	r3, r3, #5
 800941a:	2164      	movs	r1, #100	@ 0x64
 800941c:	fb01 f303 	mul.w	r3, r1, r3
 8009420:	1ad3      	subs	r3, r2, r3
 8009422:	011b      	lsls	r3, r3, #4
 8009424:	3332      	adds	r3, #50	@ 0x32
 8009426:	4a08      	ldr	r2, [pc, #32]	@ (8009448 <UART_SetConfig+0x4e4>)
 8009428:	fba2 2303 	umull	r2, r3, r2, r3
 800942c:	095b      	lsrs	r3, r3, #5
 800942e:	f003 020f 	and.w	r2, r3, #15
 8009432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4422      	add	r2, r4
 800943a:	609a      	str	r2, [r3, #8]
}
 800943c:	bf00      	nop
 800943e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009442:	46bd      	mov	sp, r7
 8009444:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009448:	51eb851f 	.word	0x51eb851f

0800944c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8009452:	4b87      	ldr	r3, [pc, #540]	@ (8009670 <MX_LWIP_Init+0x224>)
 8009454:	22c0      	movs	r2, #192	@ 0xc0
 8009456:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8009458:	4b85      	ldr	r3, [pc, #532]	@ (8009670 <MX_LWIP_Init+0x224>)
 800945a:	22a8      	movs	r2, #168	@ 0xa8
 800945c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 13;
 800945e:	4b84      	ldr	r3, [pc, #528]	@ (8009670 <MX_LWIP_Init+0x224>)
 8009460:	220d      	movs	r2, #13
 8009462:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 111;
 8009464:	4b82      	ldr	r3, [pc, #520]	@ (8009670 <MX_LWIP_Init+0x224>)
 8009466:	226f      	movs	r2, #111	@ 0x6f
 8009468:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800946a:	4b82      	ldr	r3, [pc, #520]	@ (8009674 <MX_LWIP_Init+0x228>)
 800946c:	22ff      	movs	r2, #255	@ 0xff
 800946e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009470:	4b80      	ldr	r3, [pc, #512]	@ (8009674 <MX_LWIP_Init+0x228>)
 8009472:	22ff      	movs	r2, #255	@ 0xff
 8009474:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8009476:	4b7f      	ldr	r3, [pc, #508]	@ (8009674 <MX_LWIP_Init+0x228>)
 8009478:	22ff      	movs	r2, #255	@ 0xff
 800947a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800947c:	4b7d      	ldr	r3, [pc, #500]	@ (8009674 <MX_LWIP_Init+0x228>)
 800947e:	2200      	movs	r2, #0
 8009480:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8009482:	4b7d      	ldr	r3, [pc, #500]	@ (8009678 <MX_LWIP_Init+0x22c>)
 8009484:	22c0      	movs	r2, #192	@ 0xc0
 8009486:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8009488:	4b7b      	ldr	r3, [pc, #492]	@ (8009678 <MX_LWIP_Init+0x22c>)
 800948a:	22a8      	movs	r2, #168	@ 0xa8
 800948c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 13;
 800948e:	4b7a      	ldr	r3, [pc, #488]	@ (8009678 <MX_LWIP_Init+0x22c>)
 8009490:	220d      	movs	r2, #13
 8009492:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 100;
 8009494:	4b78      	ldr	r3, [pc, #480]	@ (8009678 <MX_LWIP_Init+0x22c>)
 8009496:	2264      	movs	r2, #100	@ 0x64
 8009498:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initialize the LwIP stack without RTOS */
  lwip_init();
 800949a:	f000 fcfa 	bl	8009e92 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800949e:	4b74      	ldr	r3, [pc, #464]	@ (8009670 <MX_LWIP_Init+0x224>)
 80094a0:	781b      	ldrb	r3, [r3, #0]
 80094a2:	061a      	lsls	r2, r3, #24
 80094a4:	4b72      	ldr	r3, [pc, #456]	@ (8009670 <MX_LWIP_Init+0x224>)
 80094a6:	785b      	ldrb	r3, [r3, #1]
 80094a8:	041b      	lsls	r3, r3, #16
 80094aa:	431a      	orrs	r2, r3
 80094ac:	4b70      	ldr	r3, [pc, #448]	@ (8009670 <MX_LWIP_Init+0x224>)
 80094ae:	789b      	ldrb	r3, [r3, #2]
 80094b0:	021b      	lsls	r3, r3, #8
 80094b2:	4313      	orrs	r3, r2
 80094b4:	4a6e      	ldr	r2, [pc, #440]	@ (8009670 <MX_LWIP_Init+0x224>)
 80094b6:	78d2      	ldrb	r2, [r2, #3]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	061a      	lsls	r2, r3, #24
 80094bc:	4b6c      	ldr	r3, [pc, #432]	@ (8009670 <MX_LWIP_Init+0x224>)
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	0619      	lsls	r1, r3, #24
 80094c2:	4b6b      	ldr	r3, [pc, #428]	@ (8009670 <MX_LWIP_Init+0x224>)
 80094c4:	785b      	ldrb	r3, [r3, #1]
 80094c6:	041b      	lsls	r3, r3, #16
 80094c8:	4319      	orrs	r1, r3
 80094ca:	4b69      	ldr	r3, [pc, #420]	@ (8009670 <MX_LWIP_Init+0x224>)
 80094cc:	789b      	ldrb	r3, [r3, #2]
 80094ce:	021b      	lsls	r3, r3, #8
 80094d0:	430b      	orrs	r3, r1
 80094d2:	4967      	ldr	r1, [pc, #412]	@ (8009670 <MX_LWIP_Init+0x224>)
 80094d4:	78c9      	ldrb	r1, [r1, #3]
 80094d6:	430b      	orrs	r3, r1
 80094d8:	021b      	lsls	r3, r3, #8
 80094da:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80094de:	431a      	orrs	r2, r3
 80094e0:	4b63      	ldr	r3, [pc, #396]	@ (8009670 <MX_LWIP_Init+0x224>)
 80094e2:	781b      	ldrb	r3, [r3, #0]
 80094e4:	0619      	lsls	r1, r3, #24
 80094e6:	4b62      	ldr	r3, [pc, #392]	@ (8009670 <MX_LWIP_Init+0x224>)
 80094e8:	785b      	ldrb	r3, [r3, #1]
 80094ea:	041b      	lsls	r3, r3, #16
 80094ec:	4319      	orrs	r1, r3
 80094ee:	4b60      	ldr	r3, [pc, #384]	@ (8009670 <MX_LWIP_Init+0x224>)
 80094f0:	789b      	ldrb	r3, [r3, #2]
 80094f2:	021b      	lsls	r3, r3, #8
 80094f4:	430b      	orrs	r3, r1
 80094f6:	495e      	ldr	r1, [pc, #376]	@ (8009670 <MX_LWIP_Init+0x224>)
 80094f8:	78c9      	ldrb	r1, [r1, #3]
 80094fa:	430b      	orrs	r3, r1
 80094fc:	0a1b      	lsrs	r3, r3, #8
 80094fe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009502:	431a      	orrs	r2, r3
 8009504:	4b5a      	ldr	r3, [pc, #360]	@ (8009670 <MX_LWIP_Init+0x224>)
 8009506:	781b      	ldrb	r3, [r3, #0]
 8009508:	0619      	lsls	r1, r3, #24
 800950a:	4b59      	ldr	r3, [pc, #356]	@ (8009670 <MX_LWIP_Init+0x224>)
 800950c:	785b      	ldrb	r3, [r3, #1]
 800950e:	041b      	lsls	r3, r3, #16
 8009510:	4319      	orrs	r1, r3
 8009512:	4b57      	ldr	r3, [pc, #348]	@ (8009670 <MX_LWIP_Init+0x224>)
 8009514:	789b      	ldrb	r3, [r3, #2]
 8009516:	021b      	lsls	r3, r3, #8
 8009518:	430b      	orrs	r3, r1
 800951a:	4955      	ldr	r1, [pc, #340]	@ (8009670 <MX_LWIP_Init+0x224>)
 800951c:	78c9      	ldrb	r1, [r1, #3]
 800951e:	430b      	orrs	r3, r1
 8009520:	0e1b      	lsrs	r3, r3, #24
 8009522:	4313      	orrs	r3, r2
 8009524:	4a55      	ldr	r2, [pc, #340]	@ (800967c <MX_LWIP_Init+0x230>)
 8009526:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009528:	4b52      	ldr	r3, [pc, #328]	@ (8009674 <MX_LWIP_Init+0x228>)
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	061a      	lsls	r2, r3, #24
 800952e:	4b51      	ldr	r3, [pc, #324]	@ (8009674 <MX_LWIP_Init+0x228>)
 8009530:	785b      	ldrb	r3, [r3, #1]
 8009532:	041b      	lsls	r3, r3, #16
 8009534:	431a      	orrs	r2, r3
 8009536:	4b4f      	ldr	r3, [pc, #316]	@ (8009674 <MX_LWIP_Init+0x228>)
 8009538:	789b      	ldrb	r3, [r3, #2]
 800953a:	021b      	lsls	r3, r3, #8
 800953c:	4313      	orrs	r3, r2
 800953e:	4a4d      	ldr	r2, [pc, #308]	@ (8009674 <MX_LWIP_Init+0x228>)
 8009540:	78d2      	ldrb	r2, [r2, #3]
 8009542:	4313      	orrs	r3, r2
 8009544:	061a      	lsls	r2, r3, #24
 8009546:	4b4b      	ldr	r3, [pc, #300]	@ (8009674 <MX_LWIP_Init+0x228>)
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	0619      	lsls	r1, r3, #24
 800954c:	4b49      	ldr	r3, [pc, #292]	@ (8009674 <MX_LWIP_Init+0x228>)
 800954e:	785b      	ldrb	r3, [r3, #1]
 8009550:	041b      	lsls	r3, r3, #16
 8009552:	4319      	orrs	r1, r3
 8009554:	4b47      	ldr	r3, [pc, #284]	@ (8009674 <MX_LWIP_Init+0x228>)
 8009556:	789b      	ldrb	r3, [r3, #2]
 8009558:	021b      	lsls	r3, r3, #8
 800955a:	430b      	orrs	r3, r1
 800955c:	4945      	ldr	r1, [pc, #276]	@ (8009674 <MX_LWIP_Init+0x228>)
 800955e:	78c9      	ldrb	r1, [r1, #3]
 8009560:	430b      	orrs	r3, r1
 8009562:	021b      	lsls	r3, r3, #8
 8009564:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009568:	431a      	orrs	r2, r3
 800956a:	4b42      	ldr	r3, [pc, #264]	@ (8009674 <MX_LWIP_Init+0x228>)
 800956c:	781b      	ldrb	r3, [r3, #0]
 800956e:	0619      	lsls	r1, r3, #24
 8009570:	4b40      	ldr	r3, [pc, #256]	@ (8009674 <MX_LWIP_Init+0x228>)
 8009572:	785b      	ldrb	r3, [r3, #1]
 8009574:	041b      	lsls	r3, r3, #16
 8009576:	4319      	orrs	r1, r3
 8009578:	4b3e      	ldr	r3, [pc, #248]	@ (8009674 <MX_LWIP_Init+0x228>)
 800957a:	789b      	ldrb	r3, [r3, #2]
 800957c:	021b      	lsls	r3, r3, #8
 800957e:	430b      	orrs	r3, r1
 8009580:	493c      	ldr	r1, [pc, #240]	@ (8009674 <MX_LWIP_Init+0x228>)
 8009582:	78c9      	ldrb	r1, [r1, #3]
 8009584:	430b      	orrs	r3, r1
 8009586:	0a1b      	lsrs	r3, r3, #8
 8009588:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800958c:	431a      	orrs	r2, r3
 800958e:	4b39      	ldr	r3, [pc, #228]	@ (8009674 <MX_LWIP_Init+0x228>)
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	0619      	lsls	r1, r3, #24
 8009594:	4b37      	ldr	r3, [pc, #220]	@ (8009674 <MX_LWIP_Init+0x228>)
 8009596:	785b      	ldrb	r3, [r3, #1]
 8009598:	041b      	lsls	r3, r3, #16
 800959a:	4319      	orrs	r1, r3
 800959c:	4b35      	ldr	r3, [pc, #212]	@ (8009674 <MX_LWIP_Init+0x228>)
 800959e:	789b      	ldrb	r3, [r3, #2]
 80095a0:	021b      	lsls	r3, r3, #8
 80095a2:	430b      	orrs	r3, r1
 80095a4:	4933      	ldr	r1, [pc, #204]	@ (8009674 <MX_LWIP_Init+0x228>)
 80095a6:	78c9      	ldrb	r1, [r1, #3]
 80095a8:	430b      	orrs	r3, r1
 80095aa:	0e1b      	lsrs	r3, r3, #24
 80095ac:	4313      	orrs	r3, r2
 80095ae:	4a34      	ldr	r2, [pc, #208]	@ (8009680 <MX_LWIP_Init+0x234>)
 80095b0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80095b2:	4b31      	ldr	r3, [pc, #196]	@ (8009678 <MX_LWIP_Init+0x22c>)
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	061a      	lsls	r2, r3, #24
 80095b8:	4b2f      	ldr	r3, [pc, #188]	@ (8009678 <MX_LWIP_Init+0x22c>)
 80095ba:	785b      	ldrb	r3, [r3, #1]
 80095bc:	041b      	lsls	r3, r3, #16
 80095be:	431a      	orrs	r2, r3
 80095c0:	4b2d      	ldr	r3, [pc, #180]	@ (8009678 <MX_LWIP_Init+0x22c>)
 80095c2:	789b      	ldrb	r3, [r3, #2]
 80095c4:	021b      	lsls	r3, r3, #8
 80095c6:	4313      	orrs	r3, r2
 80095c8:	4a2b      	ldr	r2, [pc, #172]	@ (8009678 <MX_LWIP_Init+0x22c>)
 80095ca:	78d2      	ldrb	r2, [r2, #3]
 80095cc:	4313      	orrs	r3, r2
 80095ce:	061a      	lsls	r2, r3, #24
 80095d0:	4b29      	ldr	r3, [pc, #164]	@ (8009678 <MX_LWIP_Init+0x22c>)
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	0619      	lsls	r1, r3, #24
 80095d6:	4b28      	ldr	r3, [pc, #160]	@ (8009678 <MX_LWIP_Init+0x22c>)
 80095d8:	785b      	ldrb	r3, [r3, #1]
 80095da:	041b      	lsls	r3, r3, #16
 80095dc:	4319      	orrs	r1, r3
 80095de:	4b26      	ldr	r3, [pc, #152]	@ (8009678 <MX_LWIP_Init+0x22c>)
 80095e0:	789b      	ldrb	r3, [r3, #2]
 80095e2:	021b      	lsls	r3, r3, #8
 80095e4:	430b      	orrs	r3, r1
 80095e6:	4924      	ldr	r1, [pc, #144]	@ (8009678 <MX_LWIP_Init+0x22c>)
 80095e8:	78c9      	ldrb	r1, [r1, #3]
 80095ea:	430b      	orrs	r3, r1
 80095ec:	021b      	lsls	r3, r3, #8
 80095ee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80095f2:	431a      	orrs	r2, r3
 80095f4:	4b20      	ldr	r3, [pc, #128]	@ (8009678 <MX_LWIP_Init+0x22c>)
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	0619      	lsls	r1, r3, #24
 80095fa:	4b1f      	ldr	r3, [pc, #124]	@ (8009678 <MX_LWIP_Init+0x22c>)
 80095fc:	785b      	ldrb	r3, [r3, #1]
 80095fe:	041b      	lsls	r3, r3, #16
 8009600:	4319      	orrs	r1, r3
 8009602:	4b1d      	ldr	r3, [pc, #116]	@ (8009678 <MX_LWIP_Init+0x22c>)
 8009604:	789b      	ldrb	r3, [r3, #2]
 8009606:	021b      	lsls	r3, r3, #8
 8009608:	430b      	orrs	r3, r1
 800960a:	491b      	ldr	r1, [pc, #108]	@ (8009678 <MX_LWIP_Init+0x22c>)
 800960c:	78c9      	ldrb	r1, [r1, #3]
 800960e:	430b      	orrs	r3, r1
 8009610:	0a1b      	lsrs	r3, r3, #8
 8009612:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009616:	431a      	orrs	r2, r3
 8009618:	4b17      	ldr	r3, [pc, #92]	@ (8009678 <MX_LWIP_Init+0x22c>)
 800961a:	781b      	ldrb	r3, [r3, #0]
 800961c:	0619      	lsls	r1, r3, #24
 800961e:	4b16      	ldr	r3, [pc, #88]	@ (8009678 <MX_LWIP_Init+0x22c>)
 8009620:	785b      	ldrb	r3, [r3, #1]
 8009622:	041b      	lsls	r3, r3, #16
 8009624:	4319      	orrs	r1, r3
 8009626:	4b14      	ldr	r3, [pc, #80]	@ (8009678 <MX_LWIP_Init+0x22c>)
 8009628:	789b      	ldrb	r3, [r3, #2]
 800962a:	021b      	lsls	r3, r3, #8
 800962c:	430b      	orrs	r3, r1
 800962e:	4912      	ldr	r1, [pc, #72]	@ (8009678 <MX_LWIP_Init+0x22c>)
 8009630:	78c9      	ldrb	r1, [r1, #3]
 8009632:	430b      	orrs	r3, r1
 8009634:	0e1b      	lsrs	r3, r3, #24
 8009636:	4313      	orrs	r3, r2
 8009638:	4a12      	ldr	r2, [pc, #72]	@ (8009684 <MX_LWIP_Init+0x238>)
 800963a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800963c:	4b12      	ldr	r3, [pc, #72]	@ (8009688 <MX_LWIP_Init+0x23c>)
 800963e:	9302      	str	r3, [sp, #8]
 8009640:	4b12      	ldr	r3, [pc, #72]	@ (800968c <MX_LWIP_Init+0x240>)
 8009642:	9301      	str	r3, [sp, #4]
 8009644:	2300      	movs	r3, #0
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	4b0e      	ldr	r3, [pc, #56]	@ (8009684 <MX_LWIP_Init+0x238>)
 800964a:	4a0d      	ldr	r2, [pc, #52]	@ (8009680 <MX_LWIP_Init+0x234>)
 800964c:	490b      	ldr	r1, [pc, #44]	@ (800967c <MX_LWIP_Init+0x230>)
 800964e:	4810      	ldr	r0, [pc, #64]	@ (8009690 <MX_LWIP_Init+0x244>)
 8009650:	f001 f90a 	bl	800a868 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009654:	480e      	ldr	r0, [pc, #56]	@ (8009690 <MX_LWIP_Init+0x244>)
 8009656:	f001 fab9 	bl	800abcc <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800965a:	480d      	ldr	r0, [pc, #52]	@ (8009690 <MX_LWIP_Init+0x244>)
 800965c:	f001 fac6 	bl	800abec <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8009660:	490c      	ldr	r1, [pc, #48]	@ (8009694 <MX_LWIP_Init+0x248>)
 8009662:	480b      	ldr	r0, [pc, #44]	@ (8009690 <MX_LWIP_Init+0x244>)
 8009664:	f001 fbc4 	bl	800adf0 <netif_set_link_callback>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009668:	bf00      	nop
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	20000e94 	.word	0x20000e94
 8009674:	20000e98 	.word	0x20000e98
 8009678:	20000e9c 	.word	0x20000e9c
 800967c:	20000e88 	.word	0x20000e88
 8009680:	20000e8c 	.word	0x20000e8c
 8009684:	20000e90 	.word	0x20000e90
 8009688:	08013971 	.word	0x08013971
 800968c:	080099b5 	.word	0x080099b5
 8009690:	20000e54 	.word	0x20000e54
 8009694:	080096e9 	.word	0x080096e9

08009698 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 80096a0:	f7fa fa70 	bl	8003b84 <HAL_GetTick>
 80096a4:	4602      	mov	r2, r0
 80096a6:	4b08      	ldr	r3, [pc, #32]	@ (80096c8 <Ethernet_Link_Periodic_Handle+0x30>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	1ad3      	subs	r3, r2, r3
 80096ac:	2b63      	cmp	r3, #99	@ 0x63
 80096ae:	d907      	bls.n	80096c0 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 80096b0:	f7fa fa68 	bl	8003b84 <HAL_GetTick>
 80096b4:	4603      	mov	r3, r0
 80096b6:	4a04      	ldr	r2, [pc, #16]	@ (80096c8 <Ethernet_Link_Periodic_Handle+0x30>)
 80096b8:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 fabe 	bl	8009c3c <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 80096c0:	bf00      	nop
 80096c2:	3708      	adds	r7, #8
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}
 80096c8:	20000e50 	.word	0x20000e50

080096cc <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 80096d0:	4804      	ldr	r0, [pc, #16]	@ (80096e4 <MX_LWIP_Process+0x18>)
 80096d2:	f000 f94f 	bl	8009974 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 80096d6:	f007 fbf9 	bl	8010ecc <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 80096da:	4802      	ldr	r0, [pc, #8]	@ (80096e4 <MX_LWIP_Process+0x18>)
 80096dc:	f7ff ffdc 	bl	8009698 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 80096e0:	bf00      	nop
 80096e2:	bd80      	pop	{r7, pc}
 80096e4:	20000e54 	.word	0x20000e54

080096e8 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 80096f0:	bf00      	nop
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8009704:	2300      	movs	r3, #0
 8009706:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009708:	4b44      	ldr	r3, [pc, #272]	@ (800981c <low_level_init+0x120>)
 800970a:	4a45      	ldr	r2, [pc, #276]	@ (8009820 <low_level_init+0x124>)
 800970c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x12;
 800970e:	2312      	movs	r3, #18
 8009710:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x34;
 8009712:	2334      	movs	r3, #52	@ 0x34
 8009714:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0x56;
 8009716:	2356      	movs	r3, #86	@ 0x56
 8009718:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x12;
 800971a:	2312      	movs	r3, #18
 800971c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x34;
 800971e:	2334      	movs	r3, #52	@ 0x34
 8009720:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x56;
 8009722:	2356      	movs	r3, #86	@ 0x56
 8009724:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8009726:	4a3d      	ldr	r2, [pc, #244]	@ (800981c <low_level_init+0x120>)
 8009728:	f107 0308 	add.w	r3, r7, #8
 800972c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800972e:	4b3b      	ldr	r3, [pc, #236]	@ (800981c <low_level_init+0x120>)
 8009730:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8009734:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8009736:	4b39      	ldr	r3, [pc, #228]	@ (800981c <low_level_init+0x120>)
 8009738:	4a3a      	ldr	r2, [pc, #232]	@ (8009824 <low_level_init+0x128>)
 800973a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800973c:	4b37      	ldr	r3, [pc, #220]	@ (800981c <low_level_init+0x120>)
 800973e:	4a3a      	ldr	r2, [pc, #232]	@ (8009828 <low_level_init+0x12c>)
 8009740:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8009742:	4b36      	ldr	r3, [pc, #216]	@ (800981c <low_level_init+0x120>)
 8009744:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8009748:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800974a:	4834      	ldr	r0, [pc, #208]	@ (800981c <low_level_init+0x120>)
 800974c:	f7fb fac8 	bl	8004ce0 <HAL_ETH_Init>
 8009750:	4603      	mov	r3, r0
 8009752:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8009754:	2238      	movs	r2, #56	@ 0x38
 8009756:	2100      	movs	r1, #0
 8009758:	4834      	ldr	r0, [pc, #208]	@ (800982c <low_level_init+0x130>)
 800975a:	f00a fb44 	bl	8013de6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800975e:	4b33      	ldr	r3, [pc, #204]	@ (800982c <low_level_init+0x130>)
 8009760:	2221      	movs	r2, #33	@ 0x21
 8009762:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8009764:	4b31      	ldr	r3, [pc, #196]	@ (800982c <low_level_init+0x130>)
 8009766:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 800976a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800976c:	4b2f      	ldr	r3, [pc, #188]	@ (800982c <low_level_init+0x130>)
 800976e:	2200      	movs	r2, #0
 8009770:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8009772:	482f      	ldr	r0, [pc, #188]	@ (8009830 <low_level_init+0x134>)
 8009774:	f000 ff40 	bl	800a5f8 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2206      	movs	r2, #6
 800977c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009780:	4b26      	ldr	r3, [pc, #152]	@ (800981c <low_level_init+0x120>)
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	781a      	ldrb	r2, [r3, #0]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800978c:	4b23      	ldr	r3, [pc, #140]	@ (800981c <low_level_init+0x120>)
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	785a      	ldrb	r2, [r3, #1]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009798:	4b20      	ldr	r3, [pc, #128]	@ (800981c <low_level_init+0x120>)
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	789a      	ldrb	r2, [r3, #2]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80097a4:	4b1d      	ldr	r3, [pc, #116]	@ (800981c <low_level_init+0x120>)
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	78da      	ldrb	r2, [r3, #3]
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80097b0:	4b1a      	ldr	r3, [pc, #104]	@ (800981c <low_level_init+0x120>)
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	791a      	ldrb	r2, [r3, #4]
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80097bc:	4b17      	ldr	r3, [pc, #92]	@ (800981c <low_level_init+0x120>)
 80097be:	685b      	ldr	r3, [r3, #4]
 80097c0:	795a      	ldrb	r2, [r3, #5]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80097ce:	849a      	strh	r2, [r3, #36]	@ 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80097d6:	f043 030a 	orr.w	r3, r3, #10
 80097da:	b2da      	uxtb	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 80097e2:	4914      	ldr	r1, [pc, #80]	@ (8009834 <low_level_init+0x138>)
 80097e4:	4814      	ldr	r0, [pc, #80]	@ (8009838 <low_level_init+0x13c>)
 80097e6:	f7fa f860 	bl	80038aa <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  if(LAN8742_Init(&LAN8742) != LAN8742_STATUS_OK)
 80097ea:	4813      	ldr	r0, [pc, #76]	@ (8009838 <low_level_init+0x13c>)
 80097ec:	f7fa f88f 	bl	800390e <LAN8742_Init>
 80097f0:	4603      	mov	r3, r0
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d006      	beq.n	8009804 <low_level_init+0x108>
  {
    netif_set_link_down(netif);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f001 faca 	bl	800ad90 <netif_set_link_down>
    netif_set_down(netif);
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f001 fa61 	bl	800acc4 <netif_set_down>
 8009802:	e008      	b.n	8009816 <low_level_init+0x11a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8009804:	7bfb      	ldrb	r3, [r7, #15]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d103      	bne.n	8009812 <low_level_init+0x116>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f000 fa16 	bl	8009c3c <ethernet_link_check_state>
 8009810:	e001      	b.n	8009816 <low_level_init+0x11a>
  }
  else
  {
    Error_Handler();
 8009812:	f7f7 ffed 	bl	80017f0 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009816:	3710      	adds	r7, #16
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	2000596c 	.word	0x2000596c
 8009820:	40028000 	.word	0x40028000
 8009824:	200058cc 	.word	0x200058cc
 8009828:	2000582c 	.word	0x2000582c
 800982c:	20005a1c 	.word	0x20005a1c
 8009830:	08017544 	.word	0x08017544
 8009834:	2000006c 	.word	0x2000006c
 8009838:	20005a54 	.word	0x20005a54

0800983c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b092      	sub	sp, #72	@ 0x48
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8009846:	2300      	movs	r3, #0
 8009848:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 800984a:	2300      	movs	r3, #0
 800984c:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800984e:	2300      	movs	r3, #0
 8009850:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8009854:	f107 030c 	add.w	r3, r7, #12
 8009858:	2230      	movs	r2, #48	@ 0x30
 800985a:	2100      	movs	r1, #0
 800985c:	4618      	mov	r0, r3
 800985e:	f00a fac2 	bl	8013de6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8009862:	f107 030c 	add.w	r3, r7, #12
 8009866:	2230      	movs	r2, #48	@ 0x30
 8009868:	2100      	movs	r1, #0
 800986a:	4618      	mov	r0, r3
 800986c:	f00a fabb 	bl	8013de6 <memset>

  for(q = p; q != NULL; q = q->next)
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	643b      	str	r3, [r7, #64]	@ 0x40
 8009874:	e045      	b.n	8009902 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8009876:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009878:	2b03      	cmp	r3, #3
 800987a:	d902      	bls.n	8009882 <low_level_output+0x46>
      return ERR_IF;
 800987c:	f06f 030b 	mvn.w	r3, #11
 8009880:	e055      	b.n	800992e <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 8009882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009884:	6859      	ldr	r1, [r3, #4]
 8009886:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009888:	4613      	mov	r3, r2
 800988a:	005b      	lsls	r3, r3, #1
 800988c:	4413      	add	r3, r2
 800988e:	009b      	lsls	r3, r3, #2
 8009890:	3348      	adds	r3, #72	@ 0x48
 8009892:	443b      	add	r3, r7
 8009894:	3b3c      	subs	r3, #60	@ 0x3c
 8009896:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009898:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800989a:	895b      	ldrh	r3, [r3, #10]
 800989c:	4619      	mov	r1, r3
 800989e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098a0:	4613      	mov	r3, r2
 80098a2:	005b      	lsls	r3, r3, #1
 80098a4:	4413      	add	r3, r2
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	3348      	adds	r3, #72	@ 0x48
 80098aa:	443b      	add	r3, r7
 80098ac:	3b38      	subs	r3, #56	@ 0x38
 80098ae:	6019      	str	r1, [r3, #0]

    if(i>0)
 80098b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d011      	beq.n	80098da <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80098b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098b8:	1e5a      	subs	r2, r3, #1
 80098ba:	f107 000c 	add.w	r0, r7, #12
 80098be:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80098c0:	460b      	mov	r3, r1
 80098c2:	005b      	lsls	r3, r3, #1
 80098c4:	440b      	add	r3, r1
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	18c1      	adds	r1, r0, r3
 80098ca:	4613      	mov	r3, r2
 80098cc:	005b      	lsls	r3, r3, #1
 80098ce:	4413      	add	r3, r2
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	3348      	adds	r3, #72	@ 0x48
 80098d4:	443b      	add	r3, r7
 80098d6:	3b34      	subs	r3, #52	@ 0x34
 80098d8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80098da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d109      	bne.n	80098f6 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80098e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098e4:	4613      	mov	r3, r2
 80098e6:	005b      	lsls	r3, r3, #1
 80098e8:	4413      	add	r3, r2
 80098ea:	009b      	lsls	r3, r3, #2
 80098ec:	3348      	adds	r3, #72	@ 0x48
 80098ee:	443b      	add	r3, r7
 80098f0:	3b34      	subs	r3, #52	@ 0x34
 80098f2:	2200      	movs	r2, #0
 80098f4:	601a      	str	r2, [r3, #0]
    }

    i++;
 80098f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098f8:	3301      	adds	r3, #1
 80098fa:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80098fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	643b      	str	r3, [r7, #64]	@ 0x40
 8009902:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1b6      	bne.n	8009876 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	891b      	ldrh	r3, [r3, #8]
 800990c:	461a      	mov	r2, r3
 800990e:	4b0a      	ldr	r3, [pc, #40]	@ (8009938 <low_level_output+0xfc>)
 8009910:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8009912:	4a09      	ldr	r2, [pc, #36]	@ (8009938 <low_level_output+0xfc>)
 8009914:	f107 030c 	add.w	r3, r7, #12
 8009918:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800991a:	4a07      	ldr	r2, [pc, #28]	@ (8009938 <low_level_output+0xfc>)
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	6353      	str	r3, [r2, #52]	@ 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 8009920:	2214      	movs	r2, #20
 8009922:	4905      	ldr	r1, [pc, #20]	@ (8009938 <low_level_output+0xfc>)
 8009924:	4805      	ldr	r0, [pc, #20]	@ (800993c <low_level_output+0x100>)
 8009926:	f7fb fb2f 	bl	8004f88 <HAL_ETH_Transmit>

  return errval;
 800992a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800992e:	4618      	mov	r0, r3
 8009930:	3748      	adds	r7, #72	@ 0x48
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	20005a1c 	.word	0x20005a1c
 800993c:	2000596c 	.word	0x2000596c

08009940 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009948:	2300      	movs	r3, #0
 800994a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800994c:	4b07      	ldr	r3, [pc, #28]	@ (800996c <low_level_input+0x2c>)
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d105      	bne.n	8009960 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8009954:	f107 030c 	add.w	r3, r7, #12
 8009958:	4619      	mov	r1, r3
 800995a:	4805      	ldr	r0, [pc, #20]	@ (8009970 <low_level_input+0x30>)
 800995c:	f7fb fba8 	bl	80050b0 <HAL_ETH_ReadData>
  }

  return p;
 8009960:	68fb      	ldr	r3, [r7, #12]
}
 8009962:	4618      	mov	r0, r3
 8009964:	3710      	adds	r7, #16
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	20005828 	.word	0x20005828
 8009970:	2000596c 	.word	0x2000596c

08009974 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b084      	sub	sp, #16
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800997c:	2300      	movs	r3, #0
 800997e:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f7ff ffdd 	bl	8009940 <low_level_input>
 8009986:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00a      	beq.n	80099a4 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	6879      	ldr	r1, [r7, #4]
 8009994:	68f8      	ldr	r0, [r7, #12]
 8009996:	4798      	blx	r3
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d002      	beq.n	80099a4 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800999e:	68f8      	ldr	r0, [r7, #12]
 80099a0:	f001 fda6 	bl	800b4f0 <pbuf_free>
      }
    }
  } while(p!=NULL);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1ea      	bne.n	8009980 <ethernetif_input+0xc>
}
 80099aa:	bf00      	nop
 80099ac:	bf00      	nop
 80099ae:	3710      	adds	r7, #16
 80099b0:	46bd      	mov	sp, r7
 80099b2:	bd80      	pop	{r7, pc}

080099b4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d106      	bne.n	80099d0 <ethernetif_init+0x1c>
 80099c2:	4b0e      	ldr	r3, [pc, #56]	@ (80099fc <ethernetif_init+0x48>)
 80099c4:	f240 126f 	movw	r2, #367	@ 0x16f
 80099c8:	490d      	ldr	r1, [pc, #52]	@ (8009a00 <ethernetif_init+0x4c>)
 80099ca:	480e      	ldr	r0, [pc, #56]	@ (8009a04 <ethernetif_init+0x50>)
 80099cc:	f00a f9a6 	bl	8013d1c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2273      	movs	r2, #115	@ 0x73
 80099d4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->name[1] = IFNAME1;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2274      	movs	r2, #116	@ 0x74
 80099dc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	4a09      	ldr	r2, [pc, #36]	@ (8009a08 <ethernetif_init+0x54>)
 80099e4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	4a08      	ldr	r2, [pc, #32]	@ (8009a0c <ethernetif_init+0x58>)
 80099ea:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f7ff fe85 	bl	80096fc <low_level_init>

  return ERR_OK;
 80099f2:	2300      	movs	r3, #0
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3708      	adds	r7, #8
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	08014b44 	.word	0x08014b44
 8009a00:	08014b60 	.word	0x08014b60
 8009a04:	08014b70 	.word	0x08014b70
 8009a08:	08011e29 	.word	0x08011e29
 8009a0c:	0800983d 	.word	0x0800983d

08009a10 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8009a1c:	68f9      	ldr	r1, [r7, #12]
 8009a1e:	4807      	ldr	r0, [pc, #28]	@ (8009a3c <pbuf_free_custom+0x2c>)
 8009a20:	f000 fecc 	bl	800a7bc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8009a24:	4b06      	ldr	r3, [pc, #24]	@ (8009a40 <pbuf_free_custom+0x30>)
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d102      	bne.n	8009a32 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8009a2c:	4b04      	ldr	r3, [pc, #16]	@ (8009a40 <pbuf_free_custom+0x30>)
 8009a2e:	2200      	movs	r2, #0
 8009a30:	701a      	strb	r2, [r3, #0]
  }
}
 8009a32:	bf00      	nop
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	08017544 	.word	0x08017544
 8009a40:	20005828 	.word	0x20005828

08009a44 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8009a44:	b580      	push	{r7, lr}
 8009a46:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009a48:	f7fa f89c 	bl	8003b84 <HAL_GetTick>
 8009a4c:	4603      	mov	r3, r0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	bd80      	pop	{r7, pc}
	...

08009a54 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b08e      	sub	sp, #56	@ 0x38
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009a60:	2200      	movs	r2, #0
 8009a62:	601a      	str	r2, [r3, #0]
 8009a64:	605a      	str	r2, [r3, #4]
 8009a66:	609a      	str	r2, [r3, #8]
 8009a68:	60da      	str	r2, [r3, #12]
 8009a6a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a46      	ldr	r2, [pc, #280]	@ (8009b8c <HAL_ETH_MspInit+0x138>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	f040 8085 	bne.w	8009b82 <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009a78:	2300      	movs	r3, #0
 8009a7a:	623b      	str	r3, [r7, #32]
 8009a7c:	4b44      	ldr	r3, [pc, #272]	@ (8009b90 <HAL_ETH_MspInit+0x13c>)
 8009a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a80:	4a43      	ldr	r2, [pc, #268]	@ (8009b90 <HAL_ETH_MspInit+0x13c>)
 8009a82:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8009a86:	6313      	str	r3, [r2, #48]	@ 0x30
 8009a88:	4b41      	ldr	r3, [pc, #260]	@ (8009b90 <HAL_ETH_MspInit+0x13c>)
 8009a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009a90:	623b      	str	r3, [r7, #32]
 8009a92:	6a3b      	ldr	r3, [r7, #32]
 8009a94:	2300      	movs	r3, #0
 8009a96:	61fb      	str	r3, [r7, #28]
 8009a98:	4b3d      	ldr	r3, [pc, #244]	@ (8009b90 <HAL_ETH_MspInit+0x13c>)
 8009a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009a9c:	4a3c      	ldr	r2, [pc, #240]	@ (8009b90 <HAL_ETH_MspInit+0x13c>)
 8009a9e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009aa2:	6313      	str	r3, [r2, #48]	@ 0x30
 8009aa4:	4b3a      	ldr	r3, [pc, #232]	@ (8009b90 <HAL_ETH_MspInit+0x13c>)
 8009aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009aa8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8009aac:	61fb      	str	r3, [r7, #28]
 8009aae:	69fb      	ldr	r3, [r7, #28]
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	61bb      	str	r3, [r7, #24]
 8009ab4:	4b36      	ldr	r3, [pc, #216]	@ (8009b90 <HAL_ETH_MspInit+0x13c>)
 8009ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ab8:	4a35      	ldr	r2, [pc, #212]	@ (8009b90 <HAL_ETH_MspInit+0x13c>)
 8009aba:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009abe:	6313      	str	r3, [r2, #48]	@ 0x30
 8009ac0:	4b33      	ldr	r3, [pc, #204]	@ (8009b90 <HAL_ETH_MspInit+0x13c>)
 8009ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ac4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009ac8:	61bb      	str	r3, [r7, #24]
 8009aca:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009acc:	2300      	movs	r3, #0
 8009ace:	617b      	str	r3, [r7, #20]
 8009ad0:	4b2f      	ldr	r3, [pc, #188]	@ (8009b90 <HAL_ETH_MspInit+0x13c>)
 8009ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ad4:	4a2e      	ldr	r2, [pc, #184]	@ (8009b90 <HAL_ETH_MspInit+0x13c>)
 8009ad6:	f043 0304 	orr.w	r3, r3, #4
 8009ada:	6313      	str	r3, [r2, #48]	@ 0x30
 8009adc:	4b2c      	ldr	r3, [pc, #176]	@ (8009b90 <HAL_ETH_MspInit+0x13c>)
 8009ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009ae0:	f003 0304 	and.w	r3, r3, #4
 8009ae4:	617b      	str	r3, [r7, #20]
 8009ae6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ae8:	2300      	movs	r3, #0
 8009aea:	613b      	str	r3, [r7, #16]
 8009aec:	4b28      	ldr	r3, [pc, #160]	@ (8009b90 <HAL_ETH_MspInit+0x13c>)
 8009aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009af0:	4a27      	ldr	r2, [pc, #156]	@ (8009b90 <HAL_ETH_MspInit+0x13c>)
 8009af2:	f043 0301 	orr.w	r3, r3, #1
 8009af6:	6313      	str	r3, [r2, #48]	@ 0x30
 8009af8:	4b25      	ldr	r3, [pc, #148]	@ (8009b90 <HAL_ETH_MspInit+0x13c>)
 8009afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009afc:	f003 0301 	and.w	r3, r3, #1
 8009b00:	613b      	str	r3, [r7, #16]
 8009b02:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009b04:	2300      	movs	r3, #0
 8009b06:	60fb      	str	r3, [r7, #12]
 8009b08:	4b21      	ldr	r3, [pc, #132]	@ (8009b90 <HAL_ETH_MspInit+0x13c>)
 8009b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b0c:	4a20      	ldr	r2, [pc, #128]	@ (8009b90 <HAL_ETH_MspInit+0x13c>)
 8009b0e:	f043 0302 	orr.w	r3, r3, #2
 8009b12:	6313      	str	r3, [r2, #48]	@ 0x30
 8009b14:	4b1e      	ldr	r3, [pc, #120]	@ (8009b90 <HAL_ETH_MspInit+0x13c>)
 8009b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b18:	f003 0302 	and.w	r3, r3, #2
 8009b1c:	60fb      	str	r3, [r7, #12]
 8009b1e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009b20:	2332      	movs	r3, #50	@ 0x32
 8009b22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b24:	2302      	movs	r3, #2
 8009b26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b2c:	2303      	movs	r3, #3
 8009b2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009b30:	230b      	movs	r3, #11
 8009b32:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009b34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b38:	4619      	mov	r1, r3
 8009b3a:	4816      	ldr	r0, [pc, #88]	@ (8009b94 <HAL_ETH_MspInit+0x140>)
 8009b3c:	f7fc fa04 	bl	8005f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009b40:	2386      	movs	r3, #134	@ 0x86
 8009b42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b44:	2302      	movs	r3, #2
 8009b46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b48:	2300      	movs	r3, #0
 8009b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b4c:	2303      	movs	r3, #3
 8009b4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009b50:	230b      	movs	r3, #11
 8009b52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b58:	4619      	mov	r1, r3
 8009b5a:	480f      	ldr	r0, [pc, #60]	@ (8009b98 <HAL_ETH_MspInit+0x144>)
 8009b5c:	f7fc f9f4 	bl	8005f48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8009b60:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8009b64:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b66:	2302      	movs	r3, #2
 8009b68:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b6e:	2303      	movs	r3, #3
 8009b70:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009b72:	230b      	movs	r3, #11
 8009b74:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009b76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	4807      	ldr	r0, [pc, #28]	@ (8009b9c <HAL_ETH_MspInit+0x148>)
 8009b7e:	f7fc f9e3 	bl	8005f48 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009b82:	bf00      	nop
 8009b84:	3738      	adds	r7, #56	@ 0x38
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	40028000 	.word	0x40028000
 8009b90:	40023800 	.word	0x40023800
 8009b94:	40020800 	.word	0x40020800
 8009b98:	40020000 	.word	0x40020000
 8009b9c:	40020400 	.word	0x40020400

08009ba0 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8009ba4:	4802      	ldr	r0, [pc, #8]	@ (8009bb0 <ETH_PHY_IO_Init+0x10>)
 8009ba6:	f7fb fd6b 	bl	8005680 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8009baa:	2300      	movs	r3, #0
}
 8009bac:	4618      	mov	r0, r3
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	2000596c 	.word	0x2000596c

08009bb4 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8009bb4:	b480      	push	{r7}
 8009bb6:	af00      	add	r7, sp, #0
  return 0;
 8009bb8:	2300      	movs	r3, #0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	68ba      	ldr	r2, [r7, #8]
 8009bd4:	68f9      	ldr	r1, [r7, #12]
 8009bd6:	4807      	ldr	r0, [pc, #28]	@ (8009bf4 <ETH_PHY_IO_ReadReg+0x30>)
 8009bd8:	f7fb fbad 	bl	8005336 <HAL_ETH_ReadPHYRegister>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d002      	beq.n	8009be8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8009be2:	f04f 33ff 	mov.w	r3, #4294967295
 8009be6:	e000      	b.n	8009bea <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8009be8:	2300      	movs	r3, #0
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	2000596c 	.word	0x2000596c

08009bf8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	60f8      	str	r0, [r7, #12]
 8009c00:	60b9      	str	r1, [r7, #8]
 8009c02:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	68ba      	ldr	r2, [r7, #8]
 8009c08:	68f9      	ldr	r1, [r7, #12]
 8009c0a:	4807      	ldr	r0, [pc, #28]	@ (8009c28 <ETH_PHY_IO_WriteReg+0x30>)
 8009c0c:	f7fb fbde 	bl	80053cc <HAL_ETH_WritePHYRegister>
 8009c10:	4603      	mov	r3, r0
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d002      	beq.n	8009c1c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8009c16:	f04f 33ff 	mov.w	r3, #4294967295
 8009c1a:	e000      	b.n	8009c1e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8009c1c:	2300      	movs	r3, #0
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	2000596c 	.word	0x2000596c

08009c2c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009c30:	f7f9 ffa8 	bl	8003b84 <HAL_GetTick>
 8009c34:	4603      	mov	r3, r0
}
 8009c36:	4618      	mov	r0, r3
 8009c38:	bd80      	pop	{r7, pc}
	...

08009c3c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b0a0      	sub	sp, #128	@ 0x80
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8009c44:	f107 030c 	add.w	r3, r7, #12
 8009c48:	2264      	movs	r2, #100	@ 0x64
 8009c4a:	2100      	movs	r1, #0
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f00a f8ca 	bl	8013de6 <memset>
  int32_t PHYLinkState = 0;
 8009c52:	2300      	movs	r3, #0
 8009c54:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8009c56:	2300      	movs	r3, #0
 8009c58:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009c5e:	2300      	movs	r3, #0
 8009c60:	677b      	str	r3, [r7, #116]	@ 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8009c62:	483a      	ldr	r0, [pc, #232]	@ (8009d4c <ethernet_link_check_state+0x110>)
 8009c64:	f7f9 fea0 	bl	80039a8 <LAN8742_GetLinkState>
 8009c68:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009c70:	089b      	lsrs	r3, r3, #2
 8009c72:	f003 0301 	and.w	r3, r3, #1
 8009c76:	b2db      	uxtb	r3, r3
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d00c      	beq.n	8009c96 <ethernet_link_check_state+0x5a>
 8009c7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009c7e:	2b01      	cmp	r3, #1
 8009c80:	dc09      	bgt.n	8009c96 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 8009c82:	4833      	ldr	r0, [pc, #204]	@ (8009d50 <ethernet_link_check_state+0x114>)
 8009c84:	f7fb f927 	bl	8004ed6 <HAL_ETH_Stop>
    netif_set_down(netif);
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f001 f81b 	bl	800acc4 <netif_set_down>
    netif_set_link_down(netif);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f001 f87e 	bl	800ad90 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 8009c94:	e055      	b.n	8009d42 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8009c9c:	f003 0304 	and.w	r3, r3, #4
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d14e      	bne.n	8009d42 <ethernet_link_check_state+0x106>
 8009ca4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	dd4b      	ble.n	8009d42 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 8009caa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009cac:	3b02      	subs	r3, #2
 8009cae:	2b03      	cmp	r3, #3
 8009cb0:	d82a      	bhi.n	8009d08 <ethernet_link_check_state+0xcc>
 8009cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8009cb8 <ethernet_link_check_state+0x7c>)
 8009cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb8:	08009cc9 	.word	0x08009cc9
 8009cbc:	08009cdb 	.word	0x08009cdb
 8009cc0:	08009ceb 	.word	0x08009ceb
 8009cc4:	08009cfb 	.word	0x08009cfb
      duplex = ETH_FULLDUPLEX_MODE;
 8009cc8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009ccc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8009cce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009cd2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009cd4:	2301      	movs	r3, #1
 8009cd6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009cd8:	e017      	b.n	8009d0a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8009cda:	2300      	movs	r3, #0
 8009cdc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8009cde:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009ce2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009ce8:	e00f      	b.n	8009d0a <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 8009cea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009cee:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009cf8:	e007      	b.n	8009d0a <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009d02:	2301      	movs	r3, #1
 8009d04:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009d06:	e000      	b.n	8009d0a <ethernet_link_check_state+0xce>
      break;
 8009d08:	bf00      	nop
    if(linkchanged)
 8009d0a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d018      	beq.n	8009d42 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009d10:	f107 030c 	add.w	r3, r7, #12
 8009d14:	4619      	mov	r1, r3
 8009d16:	480e      	ldr	r0, [pc, #56]	@ (8009d50 <ethernet_link_check_state+0x114>)
 8009d18:	f7fb fba1 	bl	800545e <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8009d1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009d1e:	627b      	str	r3, [r7, #36]	@ 0x24
      MACConf.Speed = speed;
 8009d20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009d22:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009d24:	f107 030c 	add.w	r3, r7, #12
 8009d28:	4619      	mov	r1, r3
 8009d2a:	4809      	ldr	r0, [pc, #36]	@ (8009d50 <ethernet_link_check_state+0x114>)
 8009d2c:	f7fb fc8e 	bl	800564c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8009d30:	4807      	ldr	r0, [pc, #28]	@ (8009d50 <ethernet_link_check_state+0x114>)
 8009d32:	f7fb f871 	bl	8004e18 <HAL_ETH_Start>
      netif_set_up(netif);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 ff58 	bl	800abec <netif_set_up>
      netif_set_link_up(netif);
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 fff3 	bl	800ad28 <netif_set_link_up>
}
 8009d42:	bf00      	nop
 8009d44:	3780      	adds	r7, #128	@ 0x80
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	20005a54 	.word	0x20005a54
 8009d50:	2000596c 	.word	0x2000596c

08009d54 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b086      	sub	sp, #24
 8009d58:	af02      	add	r7, sp, #8
 8009d5a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009d5c:	4812      	ldr	r0, [pc, #72]	@ (8009da8 <HAL_ETH_RxAllocateCallback+0x54>)
 8009d5e:	f000 fcbf 	bl	800a6e0 <memp_malloc_pool>
 8009d62:	60f8      	str	r0, [r7, #12]
  if (p)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d014      	beq.n	8009d94 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	f103 0220 	add.w	r2, r3, #32
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	4a0d      	ldr	r2, [pc, #52]	@ (8009dac <HAL_ETH_RxAllocateCallback+0x58>)
 8009d78:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8009d82:	9201      	str	r2, [sp, #4]
 8009d84:	9300      	str	r3, [sp, #0]
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2241      	movs	r2, #65	@ 0x41
 8009d8a:	2100      	movs	r1, #0
 8009d8c:	2000      	movs	r0, #0
 8009d8e:	f001 f9f5 	bl	800b17c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8009d92:	e005      	b.n	8009da0 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8009d94:	4b06      	ldr	r3, [pc, #24]	@ (8009db0 <HAL_ETH_RxAllocateCallback+0x5c>)
 8009d96:	2201      	movs	r2, #1
 8009d98:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	601a      	str	r2, [r3, #0]
}
 8009da0:	bf00      	nop
 8009da2:	3710      	adds	r7, #16
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	08017544 	.word	0x08017544
 8009dac:	08009a11 	.word	0x08009a11
 8009db0:	20005828 	.word	0x20005828

08009db4 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b089      	sub	sp, #36	@ 0x24
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	60f8      	str	r0, [r7, #12]
 8009dbc:	60b9      	str	r1, [r7, #8]
 8009dbe:	607a      	str	r2, [r7, #4]
 8009dc0:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	3b20      	subs	r3, #32
 8009dd2:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8009dda:	69fb      	ldr	r3, [r7, #28]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8009de0:	69fb      	ldr	r3, [r7, #28]
 8009de2:	887a      	ldrh	r2, [r7, #2]
 8009de4:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d103      	bne.n	8009df6 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8009dee:	69bb      	ldr	r3, [r7, #24]
 8009df0:	69fa      	ldr	r2, [r7, #28]
 8009df2:	601a      	str	r2, [r3, #0]
 8009df4:	e003      	b.n	8009dfe <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8009df6:	697b      	ldr	r3, [r7, #20]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	69fa      	ldr	r2, [r7, #28]
 8009dfc:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	69fa      	ldr	r2, [r7, #28]
 8009e02:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8009e04:	69bb      	ldr	r3, [r7, #24]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	61fb      	str	r3, [r7, #28]
 8009e0a:	e009      	b.n	8009e20 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	891a      	ldrh	r2, [r3, #8]
 8009e10:	887b      	ldrh	r3, [r7, #2]
 8009e12:	4413      	add	r3, r2
 8009e14:	b29a      	uxth	r2, r3
 8009e16:	69fb      	ldr	r3, [r7, #28]
 8009e18:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8009e1a:	69fb      	ldr	r3, [r7, #28]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	61fb      	str	r3, [r7, #28]
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d1f2      	bne.n	8009e0c <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8009e26:	bf00      	nop
 8009e28:	bf00      	nop
 8009e2a:	3724      	adds	r7, #36	@ 0x24
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e32:	4770      	bx	lr

08009e34 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	4603      	mov	r3, r0
 8009e3c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009e3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009e42:	021b      	lsls	r3, r3, #8
 8009e44:	b21a      	sxth	r2, r3
 8009e46:	88fb      	ldrh	r3, [r7, #6]
 8009e48:	0a1b      	lsrs	r3, r3, #8
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	b21b      	sxth	r3, r3
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	b21b      	sxth	r3, r3
 8009e52:	b29b      	uxth	r3, r3
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	061a      	lsls	r2, r3, #24
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	021b      	lsls	r3, r3, #8
 8009e70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009e74:	431a      	orrs	r2, r3
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	0a1b      	lsrs	r3, r3, #8
 8009e7a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009e7e:	431a      	orrs	r2, r3
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	0e1b      	lsrs	r3, r3, #24
 8009e84:	4313      	orrs	r3, r2
}
 8009e86:	4618      	mov	r0, r3
 8009e88:	370c      	adds	r7, #12
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr

08009e92 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009e92:	b580      	push	{r7, lr}
 8009e94:	b082      	sub	sp, #8
 8009e96:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8009e9c:	f000 f8d4 	bl	800a048 <mem_init>
  memp_init();
 8009ea0:	f000 fbda 	bl	800a658 <memp_init>
  pbuf_init();
  netif_init();
 8009ea4:	f000 fcd8 	bl	800a858 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009ea8:	f007 f852 	bl	8010f50 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009eac:	f001 fdae 	bl	800ba0c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009eb0:	f006 ffc4 	bl	8010e3c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009eb4:	bf00      	nop
 8009eb6:	3708      	adds	r7, #8
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009ec6:	4b05      	ldr	r3, [pc, #20]	@ (8009edc <ptr_to_mem+0x20>)
 8009ec8:	681a      	ldr	r2, [r3, #0]
 8009eca:	88fb      	ldrh	r3, [r7, #6]
 8009ecc:	4413      	add	r3, r2
}
 8009ece:	4618      	mov	r0, r3
 8009ed0:	370c      	adds	r7, #12
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed8:	4770      	bx	lr
 8009eda:	bf00      	nop
 8009edc:	200082a0 	.word	0x200082a0

08009ee0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b083      	sub	sp, #12
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009ee8:	4b05      	ldr	r3, [pc, #20]	@ (8009f00 <mem_to_ptr+0x20>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	1ad3      	subs	r3, r2, r3
 8009ef0:	b29b      	uxth	r3, r3
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	370c      	adds	r7, #12
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr
 8009efe:	bf00      	nop
 8009f00:	200082a0 	.word	0x200082a0

08009f04 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009f04:	b590      	push	{r4, r7, lr}
 8009f06:	b085      	sub	sp, #20
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009f0c:	4b45      	ldr	r3, [pc, #276]	@ (800a024 <plug_holes+0x120>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	429a      	cmp	r2, r3
 8009f14:	d206      	bcs.n	8009f24 <plug_holes+0x20>
 8009f16:	4b44      	ldr	r3, [pc, #272]	@ (800a028 <plug_holes+0x124>)
 8009f18:	f240 12df 	movw	r2, #479	@ 0x1df
 8009f1c:	4943      	ldr	r1, [pc, #268]	@ (800a02c <plug_holes+0x128>)
 8009f1e:	4844      	ldr	r0, [pc, #272]	@ (800a030 <plug_holes+0x12c>)
 8009f20:	f009 fefc 	bl	8013d1c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009f24:	4b43      	ldr	r3, [pc, #268]	@ (800a034 <plug_holes+0x130>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	429a      	cmp	r2, r3
 8009f2c:	d306      	bcc.n	8009f3c <plug_holes+0x38>
 8009f2e:	4b3e      	ldr	r3, [pc, #248]	@ (800a028 <plug_holes+0x124>)
 8009f30:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8009f34:	4940      	ldr	r1, [pc, #256]	@ (800a038 <plug_holes+0x134>)
 8009f36:	483e      	ldr	r0, [pc, #248]	@ (800a030 <plug_holes+0x12c>)
 8009f38:	f009 fef0 	bl	8013d1c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	791b      	ldrb	r3, [r3, #4]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	d006      	beq.n	8009f52 <plug_holes+0x4e>
 8009f44:	4b38      	ldr	r3, [pc, #224]	@ (800a028 <plug_holes+0x124>)
 8009f46:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8009f4a:	493c      	ldr	r1, [pc, #240]	@ (800a03c <plug_holes+0x138>)
 8009f4c:	4838      	ldr	r0, [pc, #224]	@ (800a030 <plug_holes+0x12c>)
 8009f4e:	f009 fee5 	bl	8013d1c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	881b      	ldrh	r3, [r3, #0]
 8009f56:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8009f5a:	d906      	bls.n	8009f6a <plug_holes+0x66>
 8009f5c:	4b32      	ldr	r3, [pc, #200]	@ (800a028 <plug_holes+0x124>)
 8009f5e:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8009f62:	4937      	ldr	r1, [pc, #220]	@ (800a040 <plug_holes+0x13c>)
 8009f64:	4832      	ldr	r0, [pc, #200]	@ (800a030 <plug_holes+0x12c>)
 8009f66:	f009 fed9 	bl	8013d1c <iprintf>

  nmem = ptr_to_mem(mem->next);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	881b      	ldrh	r3, [r3, #0]
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f7ff ffa4 	bl	8009ebc <ptr_to_mem>
 8009f74:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d024      	beq.n	8009fc8 <plug_holes+0xc4>
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	791b      	ldrb	r3, [r3, #4]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d120      	bne.n	8009fc8 <plug_holes+0xc4>
 8009f86:	4b2b      	ldr	r3, [pc, #172]	@ (800a034 <plug_holes+0x130>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	68fa      	ldr	r2, [r7, #12]
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d01b      	beq.n	8009fc8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009f90:	4b2c      	ldr	r3, [pc, #176]	@ (800a044 <plug_holes+0x140>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	68fa      	ldr	r2, [r7, #12]
 8009f96:	429a      	cmp	r2, r3
 8009f98:	d102      	bne.n	8009fa0 <plug_holes+0x9c>
      lfree = mem;
 8009f9a:	4a2a      	ldr	r2, [pc, #168]	@ (800a044 <plug_holes+0x140>)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	881a      	ldrh	r2, [r3, #0]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	881b      	ldrh	r3, [r3, #0]
 8009fac:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 8009fb0:	d00a      	beq.n	8009fc8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	881b      	ldrh	r3, [r3, #0]
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	f7ff ff80 	bl	8009ebc <ptr_to_mem>
 8009fbc:	4604      	mov	r4, r0
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f7ff ff8e 	bl	8009ee0 <mem_to_ptr>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	885b      	ldrh	r3, [r3, #2]
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7ff ff75 	bl	8009ebc <ptr_to_mem>
 8009fd2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009fd4:	68ba      	ldr	r2, [r7, #8]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d01f      	beq.n	800a01c <plug_holes+0x118>
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	791b      	ldrb	r3, [r3, #4]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d11b      	bne.n	800a01c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009fe4:	4b17      	ldr	r3, [pc, #92]	@ (800a044 <plug_holes+0x140>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d102      	bne.n	8009ff4 <plug_holes+0xf0>
      lfree = pmem;
 8009fee:	4a15      	ldr	r2, [pc, #84]	@ (800a044 <plug_holes+0x140>)
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	881a      	ldrh	r2, [r3, #0]
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	881b      	ldrh	r3, [r3, #0]
 800a000:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a004:	d00a      	beq.n	800a01c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	881b      	ldrh	r3, [r3, #0]
 800a00a:	4618      	mov	r0, r3
 800a00c:	f7ff ff56 	bl	8009ebc <ptr_to_mem>
 800a010:	4604      	mov	r4, r0
 800a012:	68b8      	ldr	r0, [r7, #8]
 800a014:	f7ff ff64 	bl	8009ee0 <mem_to_ptr>
 800a018:	4603      	mov	r3, r0
 800a01a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a01c:	bf00      	nop
 800a01e:	3714      	adds	r7, #20
 800a020:	46bd      	mov	sp, r7
 800a022:	bd90      	pop	{r4, r7, pc}
 800a024:	200082a0 	.word	0x200082a0
 800a028:	08014b98 	.word	0x08014b98
 800a02c:	08014bc8 	.word	0x08014bc8
 800a030:	08014be0 	.word	0x08014be0
 800a034:	200082a4 	.word	0x200082a4
 800a038:	08014c08 	.word	0x08014c08
 800a03c:	08014c24 	.word	0x08014c24
 800a040:	08014c40 	.word	0x08014c40
 800a044:	200082a8 	.word	0x200082a8

0800a048 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a04e:	4b18      	ldr	r3, [pc, #96]	@ (800a0b0 <mem_init+0x68>)
 800a050:	3303      	adds	r3, #3
 800a052:	f023 0303 	bic.w	r3, r3, #3
 800a056:	461a      	mov	r2, r3
 800a058:	4b16      	ldr	r3, [pc, #88]	@ (800a0b4 <mem_init+0x6c>)
 800a05a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a05c:	4b15      	ldr	r3, [pc, #84]	@ (800a0b4 <mem_init+0x6c>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800a068:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	2200      	movs	r2, #0
 800a06e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a076:	f44f 5020 	mov.w	r0, #10240	@ 0x2800
 800a07a:	f7ff ff1f 	bl	8009ebc <ptr_to_mem>
 800a07e:	4603      	mov	r3, r0
 800a080:	4a0d      	ldr	r2, [pc, #52]	@ (800a0b8 <mem_init+0x70>)
 800a082:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a084:	4b0c      	ldr	r3, [pc, #48]	@ (800a0b8 <mem_init+0x70>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	2201      	movs	r2, #1
 800a08a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a08c:	4b0a      	ldr	r3, [pc, #40]	@ (800a0b8 <mem_init+0x70>)
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800a094:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a096:	4b08      	ldr	r3, [pc, #32]	@ (800a0b8 <mem_init+0x70>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f44f 5220 	mov.w	r2, #10240	@ 0x2800
 800a09e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a0a0:	4b04      	ldr	r3, [pc, #16]	@ (800a0b4 <mem_init+0x6c>)
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4a05      	ldr	r2, [pc, #20]	@ (800a0bc <mem_init+0x74>)
 800a0a6:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800a0a8:	bf00      	nop
 800a0aa:	3708      	adds	r7, #8
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}
 800a0b0:	20005a8c 	.word	0x20005a8c
 800a0b4:	200082a0 	.word	0x200082a0
 800a0b8:	200082a4 	.word	0x200082a4
 800a0bc:	200082a8 	.word	0x200082a8

0800a0c0 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b086      	sub	sp, #24
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	f7ff ff09 	bl	8009ee0 <mem_to_ptr>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	881b      	ldrh	r3, [r3, #0]
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	f7ff fef0 	bl	8009ebc <ptr_to_mem>
 800a0dc:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	885b      	ldrh	r3, [r3, #2]
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7ff feea 	bl	8009ebc <ptr_to_mem>
 800a0e8:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	881b      	ldrh	r3, [r3, #0]
 800a0ee:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a0f2:	d818      	bhi.n	800a126 <mem_link_valid+0x66>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	885b      	ldrh	r3, [r3, #2]
 800a0f8:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a0fc:	d813      	bhi.n	800a126 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a102:	8afa      	ldrh	r2, [r7, #22]
 800a104:	429a      	cmp	r2, r3
 800a106:	d004      	beq.n	800a112 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	881b      	ldrh	r3, [r3, #0]
 800a10c:	8afa      	ldrh	r2, [r7, #22]
 800a10e:	429a      	cmp	r2, r3
 800a110:	d109      	bne.n	800a126 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a112:	4b08      	ldr	r3, [pc, #32]	@ (800a134 <mem_link_valid+0x74>)
 800a114:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a116:	693a      	ldr	r2, [r7, #16]
 800a118:	429a      	cmp	r2, r3
 800a11a:	d006      	beq.n	800a12a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	885b      	ldrh	r3, [r3, #2]
 800a120:	8afa      	ldrh	r2, [r7, #22]
 800a122:	429a      	cmp	r2, r3
 800a124:	d001      	beq.n	800a12a <mem_link_valid+0x6a>
    return 0;
 800a126:	2300      	movs	r3, #0
 800a128:	e000      	b.n	800a12c <mem_link_valid+0x6c>
  }
  return 1;
 800a12a:	2301      	movs	r3, #1
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3718      	adds	r7, #24
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	200082a4 	.word	0x200082a4

0800a138 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b084      	sub	sp, #16
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d04c      	beq.n	800a1e0 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f003 0303 	and.w	r3, r3, #3
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d007      	beq.n	800a160 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a150:	4b25      	ldr	r3, [pc, #148]	@ (800a1e8 <mem_free+0xb0>)
 800a152:	f240 2273 	movw	r2, #627	@ 0x273
 800a156:	4925      	ldr	r1, [pc, #148]	@ (800a1ec <mem_free+0xb4>)
 800a158:	4825      	ldr	r0, [pc, #148]	@ (800a1f0 <mem_free+0xb8>)
 800a15a:	f009 fddf 	bl	8013d1c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a15e:	e040      	b.n	800a1e2 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	3b08      	subs	r3, #8
 800a164:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a166:	4b23      	ldr	r3, [pc, #140]	@ (800a1f4 <mem_free+0xbc>)
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	68fa      	ldr	r2, [r7, #12]
 800a16c:	429a      	cmp	r2, r3
 800a16e:	d306      	bcc.n	800a17e <mem_free+0x46>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f103 020c 	add.w	r2, r3, #12
 800a176:	4b20      	ldr	r3, [pc, #128]	@ (800a1f8 <mem_free+0xc0>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d907      	bls.n	800a18e <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a17e:	4b1a      	ldr	r3, [pc, #104]	@ (800a1e8 <mem_free+0xb0>)
 800a180:	f240 227f 	movw	r2, #639	@ 0x27f
 800a184:	491d      	ldr	r1, [pc, #116]	@ (800a1fc <mem_free+0xc4>)
 800a186:	481a      	ldr	r0, [pc, #104]	@ (800a1f0 <mem_free+0xb8>)
 800a188:	f009 fdc8 	bl	8013d1c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a18c:	e029      	b.n	800a1e2 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	791b      	ldrb	r3, [r3, #4]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d107      	bne.n	800a1a6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a196:	4b14      	ldr	r3, [pc, #80]	@ (800a1e8 <mem_free+0xb0>)
 800a198:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800a19c:	4918      	ldr	r1, [pc, #96]	@ (800a200 <mem_free+0xc8>)
 800a19e:	4814      	ldr	r0, [pc, #80]	@ (800a1f0 <mem_free+0xb8>)
 800a1a0:	f009 fdbc 	bl	8013d1c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a1a4:	e01d      	b.n	800a1e2 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800a1a6:	68f8      	ldr	r0, [r7, #12]
 800a1a8:	f7ff ff8a 	bl	800a0c0 <mem_link_valid>
 800a1ac:	4603      	mov	r3, r0
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d107      	bne.n	800a1c2 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a1b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a1e8 <mem_free+0xb0>)
 800a1b4:	f240 2295 	movw	r2, #661	@ 0x295
 800a1b8:	4912      	ldr	r1, [pc, #72]	@ (800a204 <mem_free+0xcc>)
 800a1ba:	480d      	ldr	r0, [pc, #52]	@ (800a1f0 <mem_free+0xb8>)
 800a1bc:	f009 fdae 	bl	8013d1c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a1c0:	e00f      	b.n	800a1e2 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a1c8:	4b0f      	ldr	r3, [pc, #60]	@ (800a208 <mem_free+0xd0>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	68fa      	ldr	r2, [r7, #12]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d202      	bcs.n	800a1d8 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a1d2:	4a0d      	ldr	r2, [pc, #52]	@ (800a208 <mem_free+0xd0>)
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f7ff fe93 	bl	8009f04 <plug_holes>
 800a1de:	e000      	b.n	800a1e2 <mem_free+0xaa>
    return;
 800a1e0:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	08014b98 	.word	0x08014b98
 800a1ec:	08014c6c 	.word	0x08014c6c
 800a1f0:	08014be0 	.word	0x08014be0
 800a1f4:	200082a0 	.word	0x200082a0
 800a1f8:	200082a4 	.word	0x200082a4
 800a1fc:	08014c90 	.word	0x08014c90
 800a200:	08014cac 	.word	0x08014cac
 800a204:	08014cd4 	.word	0x08014cd4
 800a208:	200082a8 	.word	0x200082a8

0800a20c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b088      	sub	sp, #32
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
 800a214:	460b      	mov	r3, r1
 800a216:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a218:	887b      	ldrh	r3, [r7, #2]
 800a21a:	3303      	adds	r3, #3
 800a21c:	b29b      	uxth	r3, r3
 800a21e:	f023 0303 	bic.w	r3, r3, #3
 800a222:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a224:	8bfb      	ldrh	r3, [r7, #30]
 800a226:	2b0b      	cmp	r3, #11
 800a228:	d801      	bhi.n	800a22e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a22a:	230c      	movs	r3, #12
 800a22c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a22e:	8bfb      	ldrh	r3, [r7, #30]
 800a230:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a234:	d803      	bhi.n	800a23e <mem_trim+0x32>
 800a236:	8bfa      	ldrh	r2, [r7, #30]
 800a238:	887b      	ldrh	r3, [r7, #2]
 800a23a:	429a      	cmp	r2, r3
 800a23c:	d201      	bcs.n	800a242 <mem_trim+0x36>
    return NULL;
 800a23e:	2300      	movs	r3, #0
 800a240:	e0cc      	b.n	800a3dc <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a242:	4b68      	ldr	r3, [pc, #416]	@ (800a3e4 <mem_trim+0x1d8>)
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	687a      	ldr	r2, [r7, #4]
 800a248:	429a      	cmp	r2, r3
 800a24a:	d304      	bcc.n	800a256 <mem_trim+0x4a>
 800a24c:	4b66      	ldr	r3, [pc, #408]	@ (800a3e8 <mem_trim+0x1dc>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	687a      	ldr	r2, [r7, #4]
 800a252:	429a      	cmp	r2, r3
 800a254:	d306      	bcc.n	800a264 <mem_trim+0x58>
 800a256:	4b65      	ldr	r3, [pc, #404]	@ (800a3ec <mem_trim+0x1e0>)
 800a258:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800a25c:	4964      	ldr	r1, [pc, #400]	@ (800a3f0 <mem_trim+0x1e4>)
 800a25e:	4865      	ldr	r0, [pc, #404]	@ (800a3f4 <mem_trim+0x1e8>)
 800a260:	f009 fd5c 	bl	8013d1c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a264:	4b5f      	ldr	r3, [pc, #380]	@ (800a3e4 <mem_trim+0x1d8>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	687a      	ldr	r2, [r7, #4]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	d304      	bcc.n	800a278 <mem_trim+0x6c>
 800a26e:	4b5e      	ldr	r3, [pc, #376]	@ (800a3e8 <mem_trim+0x1dc>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	429a      	cmp	r2, r3
 800a276:	d301      	bcc.n	800a27c <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	e0af      	b.n	800a3dc <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	3b08      	subs	r3, #8
 800a280:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a282:	69b8      	ldr	r0, [r7, #24]
 800a284:	f7ff fe2c 	bl	8009ee0 <mem_to_ptr>
 800a288:	4603      	mov	r3, r0
 800a28a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	881a      	ldrh	r2, [r3, #0]
 800a290:	8afb      	ldrh	r3, [r7, #22]
 800a292:	1ad3      	subs	r3, r2, r3
 800a294:	b29b      	uxth	r3, r3
 800a296:	3b08      	subs	r3, #8
 800a298:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a29a:	8bfa      	ldrh	r2, [r7, #30]
 800a29c:	8abb      	ldrh	r3, [r7, #20]
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d906      	bls.n	800a2b0 <mem_trim+0xa4>
 800a2a2:	4b52      	ldr	r3, [pc, #328]	@ (800a3ec <mem_trim+0x1e0>)
 800a2a4:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800a2a8:	4953      	ldr	r1, [pc, #332]	@ (800a3f8 <mem_trim+0x1ec>)
 800a2aa:	4852      	ldr	r0, [pc, #328]	@ (800a3f4 <mem_trim+0x1e8>)
 800a2ac:	f009 fd36 	bl	8013d1c <iprintf>
  if (newsize > size) {
 800a2b0:	8bfa      	ldrh	r2, [r7, #30]
 800a2b2:	8abb      	ldrh	r3, [r7, #20]
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d901      	bls.n	800a2bc <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	e08f      	b.n	800a3dc <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800a2bc:	8bfa      	ldrh	r2, [r7, #30]
 800a2be:	8abb      	ldrh	r3, [r7, #20]
 800a2c0:	429a      	cmp	r2, r3
 800a2c2:	d101      	bne.n	800a2c8 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	e089      	b.n	800a3dc <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800a2c8:	69bb      	ldr	r3, [r7, #24]
 800a2ca:	881b      	ldrh	r3, [r3, #0]
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7ff fdf5 	bl	8009ebc <ptr_to_mem>
 800a2d2:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	791b      	ldrb	r3, [r3, #4]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d13f      	bne.n	800a35c <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a2dc:	69bb      	ldr	r3, [r7, #24]
 800a2de:	881b      	ldrh	r3, [r3, #0]
 800a2e0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a2e4:	d106      	bne.n	800a2f4 <mem_trim+0xe8>
 800a2e6:	4b41      	ldr	r3, [pc, #260]	@ (800a3ec <mem_trim+0x1e0>)
 800a2e8:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800a2ec:	4943      	ldr	r1, [pc, #268]	@ (800a3fc <mem_trim+0x1f0>)
 800a2ee:	4841      	ldr	r0, [pc, #260]	@ (800a3f4 <mem_trim+0x1e8>)
 800a2f0:	f009 fd14 	bl	8013d1c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a2f4:	693b      	ldr	r3, [r7, #16]
 800a2f6:	881b      	ldrh	r3, [r3, #0]
 800a2f8:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a2fa:	8afa      	ldrh	r2, [r7, #22]
 800a2fc:	8bfb      	ldrh	r3, [r7, #30]
 800a2fe:	4413      	add	r3, r2
 800a300:	b29b      	uxth	r3, r3
 800a302:	3308      	adds	r3, #8
 800a304:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a306:	4b3e      	ldr	r3, [pc, #248]	@ (800a400 <mem_trim+0x1f4>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	693a      	ldr	r2, [r7, #16]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d106      	bne.n	800a31e <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800a310:	89fb      	ldrh	r3, [r7, #14]
 800a312:	4618      	mov	r0, r3
 800a314:	f7ff fdd2 	bl	8009ebc <ptr_to_mem>
 800a318:	4603      	mov	r3, r0
 800a31a:	4a39      	ldr	r2, [pc, #228]	@ (800a400 <mem_trim+0x1f4>)
 800a31c:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a31e:	89fb      	ldrh	r3, [r7, #14]
 800a320:	4618      	mov	r0, r3
 800a322:	f7ff fdcb 	bl	8009ebc <ptr_to_mem>
 800a326:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	2200      	movs	r2, #0
 800a32c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a32e:	693b      	ldr	r3, [r7, #16]
 800a330:	89ba      	ldrh	r2, [r7, #12]
 800a332:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	8afa      	ldrh	r2, [r7, #22]
 800a338:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	89fa      	ldrh	r2, [r7, #14]
 800a33e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	881b      	ldrh	r3, [r3, #0]
 800a344:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a348:	d047      	beq.n	800a3da <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	881b      	ldrh	r3, [r3, #0]
 800a34e:	4618      	mov	r0, r3
 800a350:	f7ff fdb4 	bl	8009ebc <ptr_to_mem>
 800a354:	4602      	mov	r2, r0
 800a356:	89fb      	ldrh	r3, [r7, #14]
 800a358:	8053      	strh	r3, [r2, #2]
 800a35a:	e03e      	b.n	800a3da <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a35c:	8bfb      	ldrh	r3, [r7, #30]
 800a35e:	f103 0214 	add.w	r2, r3, #20
 800a362:	8abb      	ldrh	r3, [r7, #20]
 800a364:	429a      	cmp	r2, r3
 800a366:	d838      	bhi.n	800a3da <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a368:	8afa      	ldrh	r2, [r7, #22]
 800a36a:	8bfb      	ldrh	r3, [r7, #30]
 800a36c:	4413      	add	r3, r2
 800a36e:	b29b      	uxth	r3, r3
 800a370:	3308      	adds	r3, #8
 800a372:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a374:	69bb      	ldr	r3, [r7, #24]
 800a376:	881b      	ldrh	r3, [r3, #0]
 800a378:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a37c:	d106      	bne.n	800a38c <mem_trim+0x180>
 800a37e:	4b1b      	ldr	r3, [pc, #108]	@ (800a3ec <mem_trim+0x1e0>)
 800a380:	f240 3216 	movw	r2, #790	@ 0x316
 800a384:	491d      	ldr	r1, [pc, #116]	@ (800a3fc <mem_trim+0x1f0>)
 800a386:	481b      	ldr	r0, [pc, #108]	@ (800a3f4 <mem_trim+0x1e8>)
 800a388:	f009 fcc8 	bl	8013d1c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a38c:	89fb      	ldrh	r3, [r7, #14]
 800a38e:	4618      	mov	r0, r3
 800a390:	f7ff fd94 	bl	8009ebc <ptr_to_mem>
 800a394:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a396:	4b1a      	ldr	r3, [pc, #104]	@ (800a400 <mem_trim+0x1f4>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	693a      	ldr	r2, [r7, #16]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d202      	bcs.n	800a3a6 <mem_trim+0x19a>
      lfree = mem2;
 800a3a0:	4a17      	ldr	r2, [pc, #92]	@ (800a400 <mem_trim+0x1f4>)
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a3ac:	69bb      	ldr	r3, [r7, #24]
 800a3ae:	881a      	ldrh	r2, [r3, #0]
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	8afa      	ldrh	r2, [r7, #22]
 800a3b8:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a3ba:	69bb      	ldr	r3, [r7, #24]
 800a3bc:	89fa      	ldrh	r2, [r7, #14]
 800a3be:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	881b      	ldrh	r3, [r3, #0]
 800a3c4:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a3c8:	d007      	beq.n	800a3da <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	881b      	ldrh	r3, [r3, #0]
 800a3ce:	4618      	mov	r0, r3
 800a3d0:	f7ff fd74 	bl	8009ebc <ptr_to_mem>
 800a3d4:	4602      	mov	r2, r0
 800a3d6:	89fb      	ldrh	r3, [r7, #14]
 800a3d8:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800a3da:	687b      	ldr	r3, [r7, #4]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3720      	adds	r7, #32
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	bd80      	pop	{r7, pc}
 800a3e4:	200082a0 	.word	0x200082a0
 800a3e8:	200082a4 	.word	0x200082a4
 800a3ec:	08014b98 	.word	0x08014b98
 800a3f0:	08014d08 	.word	0x08014d08
 800a3f4:	08014be0 	.word	0x08014be0
 800a3f8:	08014d20 	.word	0x08014d20
 800a3fc:	08014d40 	.word	0x08014d40
 800a400:	200082a8 	.word	0x200082a8

0800a404 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b088      	sub	sp, #32
 800a408:	af00      	add	r7, sp, #0
 800a40a:	4603      	mov	r3, r0
 800a40c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a40e:	88fb      	ldrh	r3, [r7, #6]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d101      	bne.n	800a418 <mem_malloc+0x14>
    return NULL;
 800a414:	2300      	movs	r3, #0
 800a416:	e0d9      	b.n	800a5cc <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a418:	88fb      	ldrh	r3, [r7, #6]
 800a41a:	3303      	adds	r3, #3
 800a41c:	b29b      	uxth	r3, r3
 800a41e:	f023 0303 	bic.w	r3, r3, #3
 800a422:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a424:	8bbb      	ldrh	r3, [r7, #28]
 800a426:	2b0b      	cmp	r3, #11
 800a428:	d801      	bhi.n	800a42e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a42a:	230c      	movs	r3, #12
 800a42c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a42e:	8bbb      	ldrh	r3, [r7, #28]
 800a430:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a434:	d803      	bhi.n	800a43e <mem_malloc+0x3a>
 800a436:	8bba      	ldrh	r2, [r7, #28]
 800a438:	88fb      	ldrh	r3, [r7, #6]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d201      	bcs.n	800a442 <mem_malloc+0x3e>
    return NULL;
 800a43e:	2300      	movs	r3, #0
 800a440:	e0c4      	b.n	800a5cc <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a442:	4b64      	ldr	r3, [pc, #400]	@ (800a5d4 <mem_malloc+0x1d0>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4618      	mov	r0, r3
 800a448:	f7ff fd4a 	bl	8009ee0 <mem_to_ptr>
 800a44c:	4603      	mov	r3, r0
 800a44e:	83fb      	strh	r3, [r7, #30]
 800a450:	e0b4      	b.n	800a5bc <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a452:	8bfb      	ldrh	r3, [r7, #30]
 800a454:	4618      	mov	r0, r3
 800a456:	f7ff fd31 	bl	8009ebc <ptr_to_mem>
 800a45a:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	791b      	ldrb	r3, [r3, #4]
 800a460:	2b00      	cmp	r3, #0
 800a462:	f040 80a4 	bne.w	800a5ae <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	881b      	ldrh	r3, [r3, #0]
 800a46a:	461a      	mov	r2, r3
 800a46c:	8bfb      	ldrh	r3, [r7, #30]
 800a46e:	1ad3      	subs	r3, r2, r3
 800a470:	f1a3 0208 	sub.w	r2, r3, #8
 800a474:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a476:	429a      	cmp	r2, r3
 800a478:	f0c0 8099 	bcc.w	800a5ae <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	881b      	ldrh	r3, [r3, #0]
 800a480:	461a      	mov	r2, r3
 800a482:	8bfb      	ldrh	r3, [r7, #30]
 800a484:	1ad3      	subs	r3, r2, r3
 800a486:	f1a3 0208 	sub.w	r2, r3, #8
 800a48a:	8bbb      	ldrh	r3, [r7, #28]
 800a48c:	3314      	adds	r3, #20
 800a48e:	429a      	cmp	r2, r3
 800a490:	d333      	bcc.n	800a4fa <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a492:	8bfa      	ldrh	r2, [r7, #30]
 800a494:	8bbb      	ldrh	r3, [r7, #28]
 800a496:	4413      	add	r3, r2
 800a498:	b29b      	uxth	r3, r3
 800a49a:	3308      	adds	r3, #8
 800a49c:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a49e:	8a7b      	ldrh	r3, [r7, #18]
 800a4a0:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a4a4:	d106      	bne.n	800a4b4 <mem_malloc+0xb0>
 800a4a6:	4b4c      	ldr	r3, [pc, #304]	@ (800a5d8 <mem_malloc+0x1d4>)
 800a4a8:	f240 3287 	movw	r2, #903	@ 0x387
 800a4ac:	494b      	ldr	r1, [pc, #300]	@ (800a5dc <mem_malloc+0x1d8>)
 800a4ae:	484c      	ldr	r0, [pc, #304]	@ (800a5e0 <mem_malloc+0x1dc>)
 800a4b0:	f009 fc34 	bl	8013d1c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a4b4:	8a7b      	ldrh	r3, [r7, #18]
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7ff fd00 	bl	8009ebc <ptr_to_mem>
 800a4bc:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	881a      	ldrh	r2, [r3, #0]
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	8bfa      	ldrh	r2, [r7, #30]
 800a4d0:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	8a7a      	ldrh	r2, [r7, #18]
 800a4d6:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	2201      	movs	r2, #1
 800a4dc:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	881b      	ldrh	r3, [r3, #0]
 800a4e2:	f5b3 5f20 	cmp.w	r3, #10240	@ 0x2800
 800a4e6:	d00b      	beq.n	800a500 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	881b      	ldrh	r3, [r3, #0]
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	f7ff fce5 	bl	8009ebc <ptr_to_mem>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	8a7b      	ldrh	r3, [r7, #18]
 800a4f6:	8053      	strh	r3, [r2, #2]
 800a4f8:	e002      	b.n	800a500 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a500:	4b34      	ldr	r3, [pc, #208]	@ (800a5d4 <mem_malloc+0x1d0>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	697a      	ldr	r2, [r7, #20]
 800a506:	429a      	cmp	r2, r3
 800a508:	d127      	bne.n	800a55a <mem_malloc+0x156>
          struct mem *cur = lfree;
 800a50a:	4b32      	ldr	r3, [pc, #200]	@ (800a5d4 <mem_malloc+0x1d0>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a510:	e005      	b.n	800a51e <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a512:	69bb      	ldr	r3, [r7, #24]
 800a514:	881b      	ldrh	r3, [r3, #0]
 800a516:	4618      	mov	r0, r3
 800a518:	f7ff fcd0 	bl	8009ebc <ptr_to_mem>
 800a51c:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	791b      	ldrb	r3, [r3, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d004      	beq.n	800a530 <mem_malloc+0x12c>
 800a526:	4b2f      	ldr	r3, [pc, #188]	@ (800a5e4 <mem_malloc+0x1e0>)
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	69ba      	ldr	r2, [r7, #24]
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d1f0      	bne.n	800a512 <mem_malloc+0x10e>
          }
          lfree = cur;
 800a530:	4a28      	ldr	r2, [pc, #160]	@ (800a5d4 <mem_malloc+0x1d0>)
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a536:	4b27      	ldr	r3, [pc, #156]	@ (800a5d4 <mem_malloc+0x1d0>)
 800a538:	681a      	ldr	r2, [r3, #0]
 800a53a:	4b2a      	ldr	r3, [pc, #168]	@ (800a5e4 <mem_malloc+0x1e0>)
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	429a      	cmp	r2, r3
 800a540:	d00b      	beq.n	800a55a <mem_malloc+0x156>
 800a542:	4b24      	ldr	r3, [pc, #144]	@ (800a5d4 <mem_malloc+0x1d0>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	791b      	ldrb	r3, [r3, #4]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d006      	beq.n	800a55a <mem_malloc+0x156>
 800a54c:	4b22      	ldr	r3, [pc, #136]	@ (800a5d8 <mem_malloc+0x1d4>)
 800a54e:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800a552:	4925      	ldr	r1, [pc, #148]	@ (800a5e8 <mem_malloc+0x1e4>)
 800a554:	4822      	ldr	r0, [pc, #136]	@ (800a5e0 <mem_malloc+0x1dc>)
 800a556:	f009 fbe1 	bl	8013d1c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a55a:	8bba      	ldrh	r2, [r7, #28]
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	4413      	add	r3, r2
 800a560:	3308      	adds	r3, #8
 800a562:	4a20      	ldr	r2, [pc, #128]	@ (800a5e4 <mem_malloc+0x1e0>)
 800a564:	6812      	ldr	r2, [r2, #0]
 800a566:	4293      	cmp	r3, r2
 800a568:	d906      	bls.n	800a578 <mem_malloc+0x174>
 800a56a:	4b1b      	ldr	r3, [pc, #108]	@ (800a5d8 <mem_malloc+0x1d4>)
 800a56c:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800a570:	491e      	ldr	r1, [pc, #120]	@ (800a5ec <mem_malloc+0x1e8>)
 800a572:	481b      	ldr	r0, [pc, #108]	@ (800a5e0 <mem_malloc+0x1dc>)
 800a574:	f009 fbd2 	bl	8013d1c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a578:	697b      	ldr	r3, [r7, #20]
 800a57a:	f003 0303 	and.w	r3, r3, #3
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d006      	beq.n	800a590 <mem_malloc+0x18c>
 800a582:	4b15      	ldr	r3, [pc, #84]	@ (800a5d8 <mem_malloc+0x1d4>)
 800a584:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800a588:	4919      	ldr	r1, [pc, #100]	@ (800a5f0 <mem_malloc+0x1ec>)
 800a58a:	4815      	ldr	r0, [pc, #84]	@ (800a5e0 <mem_malloc+0x1dc>)
 800a58c:	f009 fbc6 	bl	8013d1c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	f003 0303 	and.w	r3, r3, #3
 800a596:	2b00      	cmp	r3, #0
 800a598:	d006      	beq.n	800a5a8 <mem_malloc+0x1a4>
 800a59a:	4b0f      	ldr	r3, [pc, #60]	@ (800a5d8 <mem_malloc+0x1d4>)
 800a59c:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800a5a0:	4914      	ldr	r1, [pc, #80]	@ (800a5f4 <mem_malloc+0x1f0>)
 800a5a2:	480f      	ldr	r0, [pc, #60]	@ (800a5e0 <mem_malloc+0x1dc>)
 800a5a4:	f009 fbba 	bl	8013d1c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a5a8:	697b      	ldr	r3, [r7, #20]
 800a5aa:	3308      	adds	r3, #8
 800a5ac:	e00e      	b.n	800a5cc <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800a5ae:	8bfb      	ldrh	r3, [r7, #30]
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7ff fc83 	bl	8009ebc <ptr_to_mem>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	881b      	ldrh	r3, [r3, #0]
 800a5ba:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a5bc:	8bfa      	ldrh	r2, [r7, #30]
 800a5be:	8bbb      	ldrh	r3, [r7, #28]
 800a5c0:	f5c3 5320 	rsb	r3, r3, #10240	@ 0x2800
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	f4ff af44 	bcc.w	800a452 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a5ca:	2300      	movs	r3, #0
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3720      	adds	r7, #32
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	200082a8 	.word	0x200082a8
 800a5d8:	08014b98 	.word	0x08014b98
 800a5dc:	08014d40 	.word	0x08014d40
 800a5e0:	08014be0 	.word	0x08014be0
 800a5e4:	200082a4 	.word	0x200082a4
 800a5e8:	08014d54 	.word	0x08014d54
 800a5ec:	08014d70 	.word	0x08014d70
 800a5f0:	08014da0 	.word	0x08014da0
 800a5f4:	08014dd0 	.word	0x08014dd0

0800a5f8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a5f8:	b480      	push	{r7}
 800a5fa:	b085      	sub	sp, #20
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	2200      	movs	r2, #0
 800a606:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	685b      	ldr	r3, [r3, #4]
 800a60c:	3303      	adds	r3, #3
 800a60e:	f023 0303 	bic.w	r3, r3, #3
 800a612:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a614:	2300      	movs	r3, #0
 800a616:	60fb      	str	r3, [r7, #12]
 800a618:	e011      	b.n	800a63e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	689b      	ldr	r3, [r3, #8]
 800a61e:	681a      	ldr	r2, [r3, #0]
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	689b      	ldr	r3, [r3, #8]
 800a628:	68ba      	ldr	r2, [r7, #8]
 800a62a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	881b      	ldrh	r3, [r3, #0]
 800a630:	461a      	mov	r2, r3
 800a632:	68bb      	ldr	r3, [r7, #8]
 800a634:	4413      	add	r3, r2
 800a636:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	3301      	adds	r3, #1
 800a63c:	60fb      	str	r3, [r7, #12]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	885b      	ldrh	r3, [r3, #2]
 800a642:	461a      	mov	r2, r3
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	4293      	cmp	r3, r2
 800a648:	dbe7      	blt.n	800a61a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a64a:	bf00      	nop
 800a64c:	bf00      	nop
 800a64e:	3714      	adds	r7, #20
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a65e:	2300      	movs	r3, #0
 800a660:	80fb      	strh	r3, [r7, #6]
 800a662:	e009      	b.n	800a678 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a664:	88fb      	ldrh	r3, [r7, #6]
 800a666:	4a08      	ldr	r2, [pc, #32]	@ (800a688 <memp_init+0x30>)
 800a668:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a66c:	4618      	mov	r0, r3
 800a66e:	f7ff ffc3 	bl	800a5f8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a672:	88fb      	ldrh	r3, [r7, #6]
 800a674:	3301      	adds	r3, #1
 800a676:	80fb      	strh	r3, [r7, #6]
 800a678:	88fb      	ldrh	r3, [r7, #6]
 800a67a:	2b08      	cmp	r3, #8
 800a67c:	d9f2      	bls.n	800a664 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a67e:	bf00      	nop
 800a680:	bf00      	nop
 800a682:	3708      	adds	r7, #8
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}
 800a688:	080175bc 	.word	0x080175bc

0800a68c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b084      	sub	sp, #16
 800a690:	af00      	add	r7, sp, #0
 800a692:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d012      	beq.n	800a6c8 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	68fa      	ldr	r2, [r7, #12]
 800a6a8:	6812      	ldr	r2, [r2, #0]
 800a6aa:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	f003 0303 	and.w	r3, r3, #3
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d006      	beq.n	800a6c4 <do_memp_malloc_pool+0x38>
 800a6b6:	4b07      	ldr	r3, [pc, #28]	@ (800a6d4 <do_memp_malloc_pool+0x48>)
 800a6b8:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800a6bc:	4906      	ldr	r1, [pc, #24]	@ (800a6d8 <do_memp_malloc_pool+0x4c>)
 800a6be:	4807      	ldr	r0, [pc, #28]	@ (800a6dc <do_memp_malloc_pool+0x50>)
 800a6c0:	f009 fb2c 	bl	8013d1c <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	e000      	b.n	800a6ca <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3710      	adds	r7, #16
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}
 800a6d2:	bf00      	nop
 800a6d4:	08014df4 	.word	0x08014df4
 800a6d8:	08014e24 	.word	0x08014e24
 800a6dc:	08014e48 	.word	0x08014e48

0800a6e0 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b082      	sub	sp, #8
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d106      	bne.n	800a6fc <memp_malloc_pool+0x1c>
 800a6ee:	4b0a      	ldr	r3, [pc, #40]	@ (800a718 <memp_malloc_pool+0x38>)
 800a6f0:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800a6f4:	4909      	ldr	r1, [pc, #36]	@ (800a71c <memp_malloc_pool+0x3c>)
 800a6f6:	480a      	ldr	r0, [pc, #40]	@ (800a720 <memp_malloc_pool+0x40>)
 800a6f8:	f009 fb10 	bl	8013d1c <iprintf>
  if (desc == NULL) {
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d101      	bne.n	800a706 <memp_malloc_pool+0x26>
    return NULL;
 800a702:	2300      	movs	r3, #0
 800a704:	e003      	b.n	800a70e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	f7ff ffc0 	bl	800a68c <do_memp_malloc_pool>
 800a70c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3708      	adds	r7, #8
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	08014df4 	.word	0x08014df4
 800a71c:	08014e70 	.word	0x08014e70
 800a720:	08014e48 	.word	0x08014e48

0800a724 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b084      	sub	sp, #16
 800a728:	af00      	add	r7, sp, #0
 800a72a:	4603      	mov	r3, r0
 800a72c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a72e:	79fb      	ldrb	r3, [r7, #7]
 800a730:	2b08      	cmp	r3, #8
 800a732:	d908      	bls.n	800a746 <memp_malloc+0x22>
 800a734:	4b0a      	ldr	r3, [pc, #40]	@ (800a760 <memp_malloc+0x3c>)
 800a736:	f240 1257 	movw	r2, #343	@ 0x157
 800a73a:	490a      	ldr	r1, [pc, #40]	@ (800a764 <memp_malloc+0x40>)
 800a73c:	480a      	ldr	r0, [pc, #40]	@ (800a768 <memp_malloc+0x44>)
 800a73e:	f009 faed 	bl	8013d1c <iprintf>
 800a742:	2300      	movs	r3, #0
 800a744:	e008      	b.n	800a758 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a746:	79fb      	ldrb	r3, [r7, #7]
 800a748:	4a08      	ldr	r2, [pc, #32]	@ (800a76c <memp_malloc+0x48>)
 800a74a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a74e:	4618      	mov	r0, r3
 800a750:	f7ff ff9c 	bl	800a68c <do_memp_malloc_pool>
 800a754:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a756:	68fb      	ldr	r3, [r7, #12]
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3710      	adds	r7, #16
 800a75c:	46bd      	mov	sp, r7
 800a75e:	bd80      	pop	{r7, pc}
 800a760:	08014df4 	.word	0x08014df4
 800a764:	08014e84 	.word	0x08014e84
 800a768:	08014e48 	.word	0x08014e48
 800a76c:	080175bc 	.word	0x080175bc

0800a770 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	f003 0303 	and.w	r3, r3, #3
 800a780:	2b00      	cmp	r3, #0
 800a782:	d006      	beq.n	800a792 <do_memp_free_pool+0x22>
 800a784:	4b0a      	ldr	r3, [pc, #40]	@ (800a7b0 <do_memp_free_pool+0x40>)
 800a786:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800a78a:	490a      	ldr	r1, [pc, #40]	@ (800a7b4 <do_memp_free_pool+0x44>)
 800a78c:	480a      	ldr	r0, [pc, #40]	@ (800a7b8 <do_memp_free_pool+0x48>)
 800a78e:	f009 fac5 	bl	8013d1c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a792:	683b      	ldr	r3, [r7, #0]
 800a794:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	689b      	ldr	r3, [r3, #8]
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	68fa      	ldr	r2, [r7, #12]
 800a7a6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800a7a8:	bf00      	nop
 800a7aa:	3710      	adds	r7, #16
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	bd80      	pop	{r7, pc}
 800a7b0:	08014df4 	.word	0x08014df4
 800a7b4:	08014ea4 	.word	0x08014ea4
 800a7b8:	08014e48 	.word	0x08014e48

0800a7bc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b082      	sub	sp, #8
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	6078      	str	r0, [r7, #4]
 800a7c4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d106      	bne.n	800a7da <memp_free_pool+0x1e>
 800a7cc:	4b0a      	ldr	r3, [pc, #40]	@ (800a7f8 <memp_free_pool+0x3c>)
 800a7ce:	f240 1295 	movw	r2, #405	@ 0x195
 800a7d2:	490a      	ldr	r1, [pc, #40]	@ (800a7fc <memp_free_pool+0x40>)
 800a7d4:	480a      	ldr	r0, [pc, #40]	@ (800a800 <memp_free_pool+0x44>)
 800a7d6:	f009 faa1 	bl	8013d1c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d007      	beq.n	800a7f0 <memp_free_pool+0x34>
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d004      	beq.n	800a7f0 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800a7e6:	6839      	ldr	r1, [r7, #0]
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f7ff ffc1 	bl	800a770 <do_memp_free_pool>
 800a7ee:	e000      	b.n	800a7f2 <memp_free_pool+0x36>
    return;
 800a7f0:	bf00      	nop
}
 800a7f2:	3708      	adds	r7, #8
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	08014df4 	.word	0x08014df4
 800a7fc:	08014e70 	.word	0x08014e70
 800a800:	08014e48 	.word	0x08014e48

0800a804 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	4603      	mov	r3, r0
 800a80c:	6039      	str	r1, [r7, #0]
 800a80e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a810:	79fb      	ldrb	r3, [r7, #7]
 800a812:	2b08      	cmp	r3, #8
 800a814:	d907      	bls.n	800a826 <memp_free+0x22>
 800a816:	4b0c      	ldr	r3, [pc, #48]	@ (800a848 <memp_free+0x44>)
 800a818:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 800a81c:	490b      	ldr	r1, [pc, #44]	@ (800a84c <memp_free+0x48>)
 800a81e:	480c      	ldr	r0, [pc, #48]	@ (800a850 <memp_free+0x4c>)
 800a820:	f009 fa7c 	bl	8013d1c <iprintf>
 800a824:	e00c      	b.n	800a840 <memp_free+0x3c>

  if (mem == NULL) {
 800a826:	683b      	ldr	r3, [r7, #0]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d008      	beq.n	800a83e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a82c:	79fb      	ldrb	r3, [r7, #7]
 800a82e:	4a09      	ldr	r2, [pc, #36]	@ (800a854 <memp_free+0x50>)
 800a830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a834:	6839      	ldr	r1, [r7, #0]
 800a836:	4618      	mov	r0, r3
 800a838:	f7ff ff9a 	bl	800a770 <do_memp_free_pool>
 800a83c:	e000      	b.n	800a840 <memp_free+0x3c>
    return;
 800a83e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a840:	3708      	adds	r7, #8
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}
 800a846:	bf00      	nop
 800a848:	08014df4 	.word	0x08014df4
 800a84c:	08014ec4 	.word	0x08014ec4
 800a850:	08014e48 	.word	0x08014e48
 800a854:	080175bc 	.word	0x080175bc

0800a858 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a858:	b480      	push	{r7}
 800a85a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a85c:	bf00      	nop
 800a85e:	46bd      	mov	sp, r7
 800a860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a864:	4770      	bx	lr
	...

0800a868 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b086      	sub	sp, #24
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	607a      	str	r2, [r7, #4]
 800a874:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d108      	bne.n	800a88e <netif_add+0x26>
 800a87c:	4b57      	ldr	r3, [pc, #348]	@ (800a9dc <netif_add+0x174>)
 800a87e:	f240 1227 	movw	r2, #295	@ 0x127
 800a882:	4957      	ldr	r1, [pc, #348]	@ (800a9e0 <netif_add+0x178>)
 800a884:	4857      	ldr	r0, [pc, #348]	@ (800a9e4 <netif_add+0x17c>)
 800a886:	f009 fa49 	bl	8013d1c <iprintf>
 800a88a:	2300      	movs	r3, #0
 800a88c:	e0a2      	b.n	800a9d4 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a88e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a890:	2b00      	cmp	r3, #0
 800a892:	d108      	bne.n	800a8a6 <netif_add+0x3e>
 800a894:	4b51      	ldr	r3, [pc, #324]	@ (800a9dc <netif_add+0x174>)
 800a896:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800a89a:	4953      	ldr	r1, [pc, #332]	@ (800a9e8 <netif_add+0x180>)
 800a89c:	4851      	ldr	r0, [pc, #324]	@ (800a9e4 <netif_add+0x17c>)
 800a89e:	f009 fa3d 	bl	8013d1c <iprintf>
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	e096      	b.n	800a9d4 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d101      	bne.n	800a8b0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a8ac:	4b4f      	ldr	r3, [pc, #316]	@ (800a9ec <netif_add+0x184>)
 800a8ae:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d101      	bne.n	800a8ba <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a8b6:	4b4d      	ldr	r3, [pc, #308]	@ (800a9ec <netif_add+0x184>)
 800a8b8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d101      	bne.n	800a8c4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a8c0:	4b4a      	ldr	r3, [pc, #296]	@ (800a9ec <netif_add+0x184>)
 800a8c2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	2200      	movs	r2, #0
 800a8ce:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	4a45      	ldr	r2, [pc, #276]	@ (800a9f0 <netif_add+0x188>)
 800a8da:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	2200      	movs	r2, #0
 800a8e0:	849a      	strh	r2, [r3, #36]	@ 0x24
  netif->flags = 0;
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	6a3a      	ldr	r2, [r7, #32]
 800a8f4:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a8f6:	4b3f      	ldr	r3, [pc, #252]	@ (800a9f4 <netif_add+0x18c>)
 800a8f8:	781a      	ldrb	r2, [r3, #0]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  netif->input = input;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a904:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	68b9      	ldr	r1, [r7, #8]
 800a90c:	68f8      	ldr	r0, [r7, #12]
 800a90e:	f000 f913 	bl	800ab38 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a914:	68f8      	ldr	r0, [r7, #12]
 800a916:	4798      	blx	r3
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d001      	beq.n	800a922 <netif_add+0xba>
    return NULL;
 800a91e:	2300      	movs	r3, #0
 800a920:	e058      	b.n	800a9d4 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a928:	2bff      	cmp	r3, #255	@ 0xff
 800a92a:	d103      	bne.n	800a934 <netif_add+0xcc>
        netif->num = 0;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	2200      	movs	r2, #0
 800a930:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      }
      num_netifs = 0;
 800a934:	2300      	movs	r3, #0
 800a936:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a938:	4b2f      	ldr	r3, [pc, #188]	@ (800a9f8 <netif_add+0x190>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	617b      	str	r3, [r7, #20]
 800a93e:	e02b      	b.n	800a998 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a940:	697a      	ldr	r2, [r7, #20]
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	429a      	cmp	r2, r3
 800a946:	d106      	bne.n	800a956 <netif_add+0xee>
 800a948:	4b24      	ldr	r3, [pc, #144]	@ (800a9dc <netif_add+0x174>)
 800a94a:	f240 128b 	movw	r2, #395	@ 0x18b
 800a94e:	492b      	ldr	r1, [pc, #172]	@ (800a9fc <netif_add+0x194>)
 800a950:	4824      	ldr	r0, [pc, #144]	@ (800a9e4 <netif_add+0x17c>)
 800a952:	f009 f9e3 	bl	8013d1c <iprintf>
        num_netifs++;
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	3301      	adds	r3, #1
 800a95a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	2bff      	cmp	r3, #255	@ 0xff
 800a960:	dd06      	ble.n	800a970 <netif_add+0x108>
 800a962:	4b1e      	ldr	r3, [pc, #120]	@ (800a9dc <netif_add+0x174>)
 800a964:	f240 128d 	movw	r2, #397	@ 0x18d
 800a968:	4925      	ldr	r1, [pc, #148]	@ (800aa00 <netif_add+0x198>)
 800a96a:	481e      	ldr	r0, [pc, #120]	@ (800a9e4 <netif_add+0x17c>)
 800a96c:	f009 f9d6 	bl	8013d1c <iprintf>
        if (netif2->num == netif->num) {
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d108      	bne.n	800a992 <netif_add+0x12a>
          netif->num++;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a986:	3301      	adds	r3, #1
 800a988:	b2da      	uxtb	r2, r3
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          break;
 800a990:	e005      	b.n	800a99e <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a992:	697b      	ldr	r3, [r7, #20]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	617b      	str	r3, [r7, #20]
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d1d0      	bne.n	800a940 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d1be      	bne.n	800a922 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a9aa:	2bfe      	cmp	r3, #254	@ 0xfe
 800a9ac:	d103      	bne.n	800a9b6 <netif_add+0x14e>
    netif_num = 0;
 800a9ae:	4b11      	ldr	r3, [pc, #68]	@ (800a9f4 <netif_add+0x18c>)
 800a9b0:	2200      	movs	r2, #0
 800a9b2:	701a      	strb	r2, [r3, #0]
 800a9b4:	e006      	b.n	800a9c4 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800a9bc:	3301      	adds	r3, #1
 800a9be:	b2da      	uxtb	r2, r3
 800a9c0:	4b0c      	ldr	r3, [pc, #48]	@ (800a9f4 <netif_add+0x18c>)
 800a9c2:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a9c4:	4b0c      	ldr	r3, [pc, #48]	@ (800a9f8 <netif_add+0x190>)
 800a9c6:	681a      	ldr	r2, [r3, #0]
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a9cc:	4a0a      	ldr	r2, [pc, #40]	@ (800a9f8 <netif_add+0x190>)
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3718      	adds	r7, #24
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	08014ee0 	.word	0x08014ee0
 800a9e0:	08014f74 	.word	0x08014f74
 800a9e4:	08014f30 	.word	0x08014f30
 800a9e8:	08014f90 	.word	0x08014f90
 800a9ec:	08017620 	.word	0x08017620
 800a9f0:	0800ae13 	.word	0x0800ae13
 800a9f4:	2000b1a0 	.word	0x2000b1a0
 800a9f8:	2000b198 	.word	0x2000b198
 800a9fc:	08014fb4 	.word	0x08014fb4
 800aa00:	08014fc8 	.word	0x08014fc8

0800aa04 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b082      	sub	sp, #8
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800aa0e:	6839      	ldr	r1, [r7, #0]
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f002 fb45 	bl	800d0a0 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800aa16:	6839      	ldr	r1, [r7, #0]
 800aa18:	6878      	ldr	r0, [r7, #4]
 800aa1a:	f006 fd89 	bl	8011530 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800aa1e:	bf00      	nop
 800aa20:	3708      	adds	r7, #8
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
	...

0800aa28 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b086      	sub	sp, #24
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	60f8      	str	r0, [r7, #12]
 800aa30:	60b9      	str	r1, [r7, #8]
 800aa32:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800aa34:	68bb      	ldr	r3, [r7, #8]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d106      	bne.n	800aa48 <netif_do_set_ipaddr+0x20>
 800aa3a:	4b1d      	ldr	r3, [pc, #116]	@ (800aab0 <netif_do_set_ipaddr+0x88>)
 800aa3c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 800aa40:	491c      	ldr	r1, [pc, #112]	@ (800aab4 <netif_do_set_ipaddr+0x8c>)
 800aa42:	481d      	ldr	r0, [pc, #116]	@ (800aab8 <netif_do_set_ipaddr+0x90>)
 800aa44:	f009 f96a 	bl	8013d1c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d106      	bne.n	800aa5c <netif_do_set_ipaddr+0x34>
 800aa4e:	4b18      	ldr	r3, [pc, #96]	@ (800aab0 <netif_do_set_ipaddr+0x88>)
 800aa50:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 800aa54:	4917      	ldr	r1, [pc, #92]	@ (800aab4 <netif_do_set_ipaddr+0x8c>)
 800aa56:	4818      	ldr	r0, [pc, #96]	@ (800aab8 <netif_do_set_ipaddr+0x90>)
 800aa58:	f009 f960 	bl	8013d1c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800aa5c:	68bb      	ldr	r3, [r7, #8]
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	3304      	adds	r3, #4
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	429a      	cmp	r2, r3
 800aa68:	d01c      	beq.n	800aaa4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800aa6a:	68bb      	ldr	r3, [r7, #8]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	3304      	adds	r3, #4
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800aa7a:	f107 0314 	add.w	r3, r7, #20
 800aa7e:	4619      	mov	r1, r3
 800aa80:	6878      	ldr	r0, [r7, #4]
 800aa82:	f7ff ffbf 	bl	800aa04 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d002      	beq.n	800aa92 <netif_do_set_ipaddr+0x6a>
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	e000      	b.n	800aa94 <netif_do_set_ipaddr+0x6c>
 800aa92:	2300      	movs	r3, #0
 800aa94:	68fa      	ldr	r2, [r7, #12]
 800aa96:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800aa98:	2101      	movs	r1, #1
 800aa9a:	68f8      	ldr	r0, [r7, #12]
 800aa9c:	f000 f8d2 	bl	800ac44 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800aaa0:	2301      	movs	r3, #1
 800aaa2:	e000      	b.n	800aaa6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800aaa4:	2300      	movs	r3, #0
}
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	3718      	adds	r7, #24
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	08014ee0 	.word	0x08014ee0
 800aab4:	08014ff8 	.word	0x08014ff8
 800aab8:	08014f30 	.word	0x08014f30

0800aabc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	681a      	ldr	r2, [r3, #0]
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	3308      	adds	r3, #8
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	429a      	cmp	r2, r3
 800aad4:	d00a      	beq.n	800aaec <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d002      	beq.n	800aae2 <netif_do_set_netmask+0x26>
 800aadc:	68bb      	ldr	r3, [r7, #8]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	e000      	b.n	800aae4 <netif_do_set_netmask+0x28>
 800aae2:	2300      	movs	r3, #0
 800aae4:	68fa      	ldr	r2, [r7, #12]
 800aae6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800aae8:	2301      	movs	r3, #1
 800aaea:	e000      	b.n	800aaee <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800aaec:	2300      	movs	r3, #0
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3714      	adds	r7, #20
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr

0800aafa <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800aafa:	b480      	push	{r7}
 800aafc:	b085      	sub	sp, #20
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	60f8      	str	r0, [r7, #12]
 800ab02:	60b9      	str	r1, [r7, #8]
 800ab04:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	330c      	adds	r3, #12
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d00a      	beq.n	800ab2a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ab14:	68bb      	ldr	r3, [r7, #8]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d002      	beq.n	800ab20 <netif_do_set_gw+0x26>
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	e000      	b.n	800ab22 <netif_do_set_gw+0x28>
 800ab20:	2300      	movs	r3, #0
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ab26:	2301      	movs	r3, #1
 800ab28:	e000      	b.n	800ab2c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3714      	adds	r7, #20
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b088      	sub	sp, #32
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	60f8      	str	r0, [r7, #12]
 800ab40:	60b9      	str	r1, [r7, #8]
 800ab42:	607a      	str	r2, [r7, #4]
 800ab44:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ab46:	2300      	movs	r3, #0
 800ab48:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ab4e:	68bb      	ldr	r3, [r7, #8]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d101      	bne.n	800ab58 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ab54:	4b1c      	ldr	r3, [pc, #112]	@ (800abc8 <netif_set_addr+0x90>)
 800ab56:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d101      	bne.n	800ab62 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ab5e:	4b1a      	ldr	r3, [pc, #104]	@ (800abc8 <netif_set_addr+0x90>)
 800ab60:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d101      	bne.n	800ab6c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ab68:	4b17      	ldr	r3, [pc, #92]	@ (800abc8 <netif_set_addr+0x90>)
 800ab6a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ab6c:	68bb      	ldr	r3, [r7, #8]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d003      	beq.n	800ab7a <netif_set_addr+0x42>
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d101      	bne.n	800ab7e <netif_set_addr+0x46>
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	e000      	b.n	800ab80 <netif_set_addr+0x48>
 800ab7e:	2300      	movs	r3, #0
 800ab80:	617b      	str	r3, [r7, #20]
  if (remove) {
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d006      	beq.n	800ab96 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ab88:	f107 0310 	add.w	r3, r7, #16
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	68b9      	ldr	r1, [r7, #8]
 800ab90:	68f8      	ldr	r0, [r7, #12]
 800ab92:	f7ff ff49 	bl	800aa28 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800ab96:	69fa      	ldr	r2, [r7, #28]
 800ab98:	6879      	ldr	r1, [r7, #4]
 800ab9a:	68f8      	ldr	r0, [r7, #12]
 800ab9c:	f7ff ff8e 	bl	800aabc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800aba0:	69ba      	ldr	r2, [r7, #24]
 800aba2:	6839      	ldr	r1, [r7, #0]
 800aba4:	68f8      	ldr	r0, [r7, #12]
 800aba6:	f7ff ffa8 	bl	800aafa <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d106      	bne.n	800abbe <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800abb0:	f107 0310 	add.w	r3, r7, #16
 800abb4:	461a      	mov	r2, r3
 800abb6:	68b9      	ldr	r1, [r7, #8]
 800abb8:	68f8      	ldr	r0, [r7, #12]
 800abba:	f7ff ff35 	bl	800aa28 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800abbe:	bf00      	nop
 800abc0:	3720      	adds	r7, #32
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
 800abc6:	bf00      	nop
 800abc8:	08017620 	.word	0x08017620

0800abcc <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800abcc:	b480      	push	{r7}
 800abce:	b083      	sub	sp, #12
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800abd4:	4a04      	ldr	r2, [pc, #16]	@ (800abe8 <netif_set_default+0x1c>)
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800abda:	bf00      	nop
 800abdc:	370c      	adds	r7, #12
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr
 800abe6:	bf00      	nop
 800abe8:	2000b19c 	.word	0x2000b19c

0800abec <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b082      	sub	sp, #8
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d107      	bne.n	800ac0a <netif_set_up+0x1e>
 800abfa:	4b0f      	ldr	r3, [pc, #60]	@ (800ac38 <netif_set_up+0x4c>)
 800abfc:	f44f 7254 	mov.w	r2, #848	@ 0x350
 800ac00:	490e      	ldr	r1, [pc, #56]	@ (800ac3c <netif_set_up+0x50>)
 800ac02:	480f      	ldr	r0, [pc, #60]	@ (800ac40 <netif_set_up+0x54>)
 800ac04:	f009 f88a 	bl	8013d1c <iprintf>
 800ac08:	e013      	b.n	800ac32 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ac10:	f003 0301 	and.w	r3, r3, #1
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d10c      	bne.n	800ac32 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ac1e:	f043 0301 	orr.w	r3, r3, #1
 800ac22:	b2da      	uxtb	r2, r3
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ac2a:	2103      	movs	r1, #3
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 f809 	bl	800ac44 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ac32:	3708      	adds	r7, #8
 800ac34:	46bd      	mov	sp, r7
 800ac36:	bd80      	pop	{r7, pc}
 800ac38:	08014ee0 	.word	0x08014ee0
 800ac3c:	08015068 	.word	0x08015068
 800ac40:	08014f30 	.word	0x08014f30

0800ac44 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b082      	sub	sp, #8
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d106      	bne.n	800ac64 <netif_issue_reports+0x20>
 800ac56:	4b18      	ldr	r3, [pc, #96]	@ (800acb8 <netif_issue_reports+0x74>)
 800ac58:	f240 326d 	movw	r2, #877	@ 0x36d
 800ac5c:	4917      	ldr	r1, [pc, #92]	@ (800acbc <netif_issue_reports+0x78>)
 800ac5e:	4818      	ldr	r0, [pc, #96]	@ (800acc0 <netif_issue_reports+0x7c>)
 800ac60:	f009 f85c 	bl	8013d1c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ac6a:	f003 0304 	and.w	r3, r3, #4
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d01e      	beq.n	800acb0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ac78:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d017      	beq.n	800acb0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ac80:	78fb      	ldrb	r3, [r7, #3]
 800ac82:	f003 0301 	and.w	r3, r3, #1
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d013      	beq.n	800acb2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	3304      	adds	r3, #4
 800ac8e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d00e      	beq.n	800acb2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ac9a:	f003 0308 	and.w	r3, r3, #8
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d007      	beq.n	800acb2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	3304      	adds	r3, #4
 800aca6:	4619      	mov	r1, r3
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f007 fbab 	bl	8012404 <etharp_request>
 800acae:	e000      	b.n	800acb2 <netif_issue_reports+0x6e>
    return;
 800acb0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800acb2:	3708      	adds	r7, #8
 800acb4:	46bd      	mov	sp, r7
 800acb6:	bd80      	pop	{r7, pc}
 800acb8:	08014ee0 	.word	0x08014ee0
 800acbc:	08015084 	.word	0x08015084
 800acc0:	08014f30 	.word	0x08014f30

0800acc4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d107      	bne.n	800ace2 <netif_set_down+0x1e>
 800acd2:	4b12      	ldr	r3, [pc, #72]	@ (800ad1c <netif_set_down+0x58>)
 800acd4:	f240 329b 	movw	r2, #923	@ 0x39b
 800acd8:	4911      	ldr	r1, [pc, #68]	@ (800ad20 <netif_set_down+0x5c>)
 800acda:	4812      	ldr	r0, [pc, #72]	@ (800ad24 <netif_set_down+0x60>)
 800acdc:	f009 f81e 	bl	8013d1c <iprintf>
 800ace0:	e019      	b.n	800ad16 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ace8:	f003 0301 	and.w	r3, r3, #1
 800acec:	2b00      	cmp	r3, #0
 800acee:	d012      	beq.n	800ad16 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800acf6:	f023 0301 	bic.w	r3, r3, #1
 800acfa:	b2da      	uxtb	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ad08:	f003 0308 	and.w	r3, r3, #8
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d002      	beq.n	800ad16 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ad10:	6878      	ldr	r0, [r7, #4]
 800ad12:	f006 ff35 	bl	8011b80 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ad16:	3708      	adds	r7, #8
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}
 800ad1c:	08014ee0 	.word	0x08014ee0
 800ad20:	080150a8 	.word	0x080150a8
 800ad24:	08014f30 	.word	0x08014f30

0800ad28 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d107      	bne.n	800ad46 <netif_set_link_up+0x1e>
 800ad36:	4b13      	ldr	r3, [pc, #76]	@ (800ad84 <netif_set_link_up+0x5c>)
 800ad38:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 800ad3c:	4912      	ldr	r1, [pc, #72]	@ (800ad88 <netif_set_link_up+0x60>)
 800ad3e:	4813      	ldr	r0, [pc, #76]	@ (800ad8c <netif_set_link_up+0x64>)
 800ad40:	f008 ffec 	bl	8013d1c <iprintf>
 800ad44:	e01b      	b.n	800ad7e <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ad4c:	f003 0304 	and.w	r3, r3, #4
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d114      	bne.n	800ad7e <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800ad5a:	f043 0304 	orr.w	r3, r3, #4
 800ad5e:	b2da      	uxtb	r2, r3
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ad66:	2103      	movs	r1, #3
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f7ff ff6b 	bl	800ac44 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	69db      	ldr	r3, [r3, #28]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d003      	beq.n	800ad7e <netif_set_link_up+0x56>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	69db      	ldr	r3, [r3, #28]
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ad7e:	3708      	adds	r7, #8
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}
 800ad84:	08014ee0 	.word	0x08014ee0
 800ad88:	080150c8 	.word	0x080150c8
 800ad8c:	08014f30 	.word	0x08014f30

0800ad90 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d107      	bne.n	800adae <netif_set_link_down+0x1e>
 800ad9e:	4b11      	ldr	r3, [pc, #68]	@ (800ade4 <netif_set_link_down+0x54>)
 800ada0:	f240 4206 	movw	r2, #1030	@ 0x406
 800ada4:	4910      	ldr	r1, [pc, #64]	@ (800ade8 <netif_set_link_down+0x58>)
 800ada6:	4811      	ldr	r0, [pc, #68]	@ (800adec <netif_set_link_down+0x5c>)
 800ada8:	f008 ffb8 	bl	8013d1c <iprintf>
 800adac:	e017      	b.n	800adde <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800adb4:	f003 0304 	and.w	r3, r3, #4
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d010      	beq.n	800adde <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800adc2:	f023 0304 	bic.w	r3, r3, #4
 800adc6:	b2da      	uxtb	r2, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    NETIF_LINK_CALLBACK(netif);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	69db      	ldr	r3, [r3, #28]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d003      	beq.n	800adde <netif_set_link_down+0x4e>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	69db      	ldr	r3, [r3, #28]
 800adda:	6878      	ldr	r0, [r7, #4]
 800addc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800adde:	3708      	adds	r7, #8
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}
 800ade4:	08014ee0 	.word	0x08014ee0
 800ade8:	080150ec 	.word	0x080150ec
 800adec:	08014f30 	.word	0x08014f30

0800adf0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b083      	sub	sp, #12
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
 800adf8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d002      	beq.n	800ae06 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	683a      	ldr	r2, [r7, #0]
 800ae04:	61da      	str	r2, [r3, #28]
  }
}
 800ae06:	bf00      	nop
 800ae08:	370c      	adds	r7, #12
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae10:	4770      	bx	lr

0800ae12 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ae12:	b480      	push	{r7}
 800ae14:	b085      	sub	sp, #20
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	60f8      	str	r0, [r7, #12]
 800ae1a:	60b9      	str	r1, [r7, #8]
 800ae1c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ae1e:	f06f 030b 	mvn.w	r3, #11
}
 800ae22:	4618      	mov	r0, r3
 800ae24:	3714      	adds	r7, #20
 800ae26:	46bd      	mov	sp, r7
 800ae28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2c:	4770      	bx	lr
	...

0800ae30 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b085      	sub	sp, #20
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	4603      	mov	r3, r0
 800ae38:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ae3a:	79fb      	ldrb	r3, [r7, #7]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d013      	beq.n	800ae68 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ae40:	4b0d      	ldr	r3, [pc, #52]	@ (800ae78 <netif_get_by_index+0x48>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	60fb      	str	r3, [r7, #12]
 800ae46:	e00c      	b.n	800ae62 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ae4e:	3301      	adds	r3, #1
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	79fa      	ldrb	r2, [r7, #7]
 800ae54:	429a      	cmp	r2, r3
 800ae56:	d101      	bne.n	800ae5c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	e006      	b.n	800ae6a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	60fb      	str	r3, [r7, #12]
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d1ef      	bne.n	800ae48 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800ae68:	2300      	movs	r3, #0
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3714      	adds	r7, #20
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae74:	4770      	bx	lr
 800ae76:	bf00      	nop
 800ae78:	2000b198 	.word	0x2000b198

0800ae7c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b082      	sub	sp, #8
 800ae80:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ae82:	4b0c      	ldr	r3, [pc, #48]	@ (800aeb4 <pbuf_free_ooseq+0x38>)
 800ae84:	2200      	movs	r2, #0
 800ae86:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ae88:	4b0b      	ldr	r3, [pc, #44]	@ (800aeb8 <pbuf_free_ooseq+0x3c>)
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	607b      	str	r3, [r7, #4]
 800ae8e:	e00a      	b.n	800aea6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d003      	beq.n	800aea0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f002 f93f 	bl	800d11c <tcp_free_ooseq>
      return;
 800ae9e:	e005      	b.n	800aeac <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	68db      	ldr	r3, [r3, #12]
 800aea4:	607b      	str	r3, [r7, #4]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d1f1      	bne.n	800ae90 <pbuf_free_ooseq+0x14>
    }
  }
}
 800aeac:	3708      	adds	r7, #8
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	2000b1a1 	.word	0x2000b1a1
 800aeb8:	2000b1b0 	.word	0x2000b1b0

0800aebc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800aebc:	b480      	push	{r7}
 800aebe:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800aec0:	4b03      	ldr	r3, [pc, #12]	@ (800aed0 <pbuf_pool_is_empty+0x14>)
 800aec2:	2201      	movs	r2, #1
 800aec4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800aec6:	bf00      	nop
 800aec8:	46bd      	mov	sp, r7
 800aeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aece:	4770      	bx	lr
 800aed0:	2000b1a1 	.word	0x2000b1a1

0800aed4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	60f8      	str	r0, [r7, #12]
 800aedc:	60b9      	str	r1, [r7, #8]
 800aede:	4611      	mov	r1, r2
 800aee0:	461a      	mov	r2, r3
 800aee2:	460b      	mov	r3, r1
 800aee4:	80fb      	strh	r3, [r7, #6]
 800aee6:	4613      	mov	r3, r2
 800aee8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	2200      	movs	r2, #0
 800aeee:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	68ba      	ldr	r2, [r7, #8]
 800aef4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	88fa      	ldrh	r2, [r7, #6]
 800aefa:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	88ba      	ldrh	r2, [r7, #4]
 800af00:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800af02:	8b3b      	ldrh	r3, [r7, #24]
 800af04:	b2da      	uxtb	r2, r3
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	7f3a      	ldrb	r2, [r7, #28]
 800af0e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2201      	movs	r2, #1
 800af14:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	2200      	movs	r2, #0
 800af1a:	73da      	strb	r2, [r3, #15]
}
 800af1c:	bf00      	nop
 800af1e:	3714      	adds	r7, #20
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b08c      	sub	sp, #48	@ 0x30
 800af2c:	af02      	add	r7, sp, #8
 800af2e:	4603      	mov	r3, r0
 800af30:	71fb      	strb	r3, [r7, #7]
 800af32:	460b      	mov	r3, r1
 800af34:	80bb      	strh	r3, [r7, #4]
 800af36:	4613      	mov	r3, r2
 800af38:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800af3a:	79fb      	ldrb	r3, [r7, #7]
 800af3c:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800af3e:	887b      	ldrh	r3, [r7, #2]
 800af40:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800af44:	d07f      	beq.n	800b046 <pbuf_alloc+0x11e>
 800af46:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 800af4a:	f300 80c8 	bgt.w	800b0de <pbuf_alloc+0x1b6>
 800af4e:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800af52:	d010      	beq.n	800af76 <pbuf_alloc+0x4e>
 800af54:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 800af58:	f300 80c1 	bgt.w	800b0de <pbuf_alloc+0x1b6>
 800af5c:	2b01      	cmp	r3, #1
 800af5e:	d002      	beq.n	800af66 <pbuf_alloc+0x3e>
 800af60:	2b41      	cmp	r3, #65	@ 0x41
 800af62:	f040 80bc 	bne.w	800b0de <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800af66:	887a      	ldrh	r2, [r7, #2]
 800af68:	88bb      	ldrh	r3, [r7, #4]
 800af6a:	4619      	mov	r1, r3
 800af6c:	2000      	movs	r0, #0
 800af6e:	f000 f8d1 	bl	800b114 <pbuf_alloc_reference>
 800af72:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 800af74:	e0bd      	b.n	800b0f2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800af76:	2300      	movs	r3, #0
 800af78:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 800af7a:	2300      	movs	r3, #0
 800af7c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800af7e:	88bb      	ldrh	r3, [r7, #4]
 800af80:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800af82:	2008      	movs	r0, #8
 800af84:	f7ff fbce 	bl	800a724 <memp_malloc>
 800af88:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d109      	bne.n	800afa4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800af90:	f7ff ff94 	bl	800aebc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800af94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af96:	2b00      	cmp	r3, #0
 800af98:	d002      	beq.n	800afa0 <pbuf_alloc+0x78>
            pbuf_free(p);
 800af9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800af9c:	f000 faa8 	bl	800b4f0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800afa0:	2300      	movs	r3, #0
 800afa2:	e0a7      	b.n	800b0f4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800afa4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800afa6:	3303      	adds	r3, #3
 800afa8:	b29b      	uxth	r3, r3
 800afaa:	f023 0303 	bic.w	r3, r3, #3
 800afae:	b29b      	uxth	r3, r3
 800afb0:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	8b7a      	ldrh	r2, [r7, #26]
 800afb8:	4293      	cmp	r3, r2
 800afba:	bf28      	it	cs
 800afbc:	4613      	movcs	r3, r2
 800afbe:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800afc0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800afc2:	3310      	adds	r3, #16
 800afc4:	693a      	ldr	r2, [r7, #16]
 800afc6:	4413      	add	r3, r2
 800afc8:	3303      	adds	r3, #3
 800afca:	f023 0303 	bic.w	r3, r3, #3
 800afce:	4618      	mov	r0, r3
 800afd0:	89f9      	ldrh	r1, [r7, #14]
 800afd2:	8b7a      	ldrh	r2, [r7, #26]
 800afd4:	2300      	movs	r3, #0
 800afd6:	9301      	str	r3, [sp, #4]
 800afd8:	887b      	ldrh	r3, [r7, #2]
 800afda:	9300      	str	r3, [sp, #0]
 800afdc:	460b      	mov	r3, r1
 800afde:	4601      	mov	r1, r0
 800afe0:	6938      	ldr	r0, [r7, #16]
 800afe2:	f7ff ff77 	bl	800aed4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	685b      	ldr	r3, [r3, #4]
 800afea:	f003 0303 	and.w	r3, r3, #3
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d006      	beq.n	800b000 <pbuf_alloc+0xd8>
 800aff2:	4b42      	ldr	r3, [pc, #264]	@ (800b0fc <pbuf_alloc+0x1d4>)
 800aff4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800aff8:	4941      	ldr	r1, [pc, #260]	@ (800b100 <pbuf_alloc+0x1d8>)
 800affa:	4842      	ldr	r0, [pc, #264]	@ (800b104 <pbuf_alloc+0x1dc>)
 800affc:	f008 fe8e 	bl	8013d1c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b000:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b002:	3303      	adds	r3, #3
 800b004:	f023 0303 	bic.w	r3, r3, #3
 800b008:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 800b00c:	d106      	bne.n	800b01c <pbuf_alloc+0xf4>
 800b00e:	4b3b      	ldr	r3, [pc, #236]	@ (800b0fc <pbuf_alloc+0x1d4>)
 800b010:	f44f 7281 	mov.w	r2, #258	@ 0x102
 800b014:	493c      	ldr	r1, [pc, #240]	@ (800b108 <pbuf_alloc+0x1e0>)
 800b016:	483b      	ldr	r0, [pc, #236]	@ (800b104 <pbuf_alloc+0x1dc>)
 800b018:	f008 fe80 	bl	8013d1c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d102      	bne.n	800b028 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b022:	693b      	ldr	r3, [r7, #16]
 800b024:	627b      	str	r3, [r7, #36]	@ 0x24
 800b026:	e002      	b.n	800b02e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b028:	69fb      	ldr	r3, [r7, #28]
 800b02a:	693a      	ldr	r2, [r7, #16]
 800b02c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b02e:	693b      	ldr	r3, [r7, #16]
 800b030:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b032:	8b7a      	ldrh	r2, [r7, #26]
 800b034:	89fb      	ldrh	r3, [r7, #14]
 800b036:	1ad3      	subs	r3, r2, r3
 800b038:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b03a:	2300      	movs	r3, #0
 800b03c:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 800b03e:	8b7b      	ldrh	r3, [r7, #26]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d19e      	bne.n	800af82 <pbuf_alloc+0x5a>
      break;
 800b044:	e055      	b.n	800b0f2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b046:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b048:	3303      	adds	r3, #3
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	f023 0303 	bic.w	r3, r3, #3
 800b050:	b29a      	uxth	r2, r3
 800b052:	88bb      	ldrh	r3, [r7, #4]
 800b054:	3303      	adds	r3, #3
 800b056:	b29b      	uxth	r3, r3
 800b058:	f023 0303 	bic.w	r3, r3, #3
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	4413      	add	r3, r2
 800b060:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b062:	8b3b      	ldrh	r3, [r7, #24]
 800b064:	3310      	adds	r3, #16
 800b066:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b068:	8b3a      	ldrh	r2, [r7, #24]
 800b06a:	88bb      	ldrh	r3, [r7, #4]
 800b06c:	3303      	adds	r3, #3
 800b06e:	f023 0303 	bic.w	r3, r3, #3
 800b072:	429a      	cmp	r2, r3
 800b074:	d306      	bcc.n	800b084 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b076:	8afa      	ldrh	r2, [r7, #22]
 800b078:	88bb      	ldrh	r3, [r7, #4]
 800b07a:	3303      	adds	r3, #3
 800b07c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b080:	429a      	cmp	r2, r3
 800b082:	d201      	bcs.n	800b088 <pbuf_alloc+0x160>
        return NULL;
 800b084:	2300      	movs	r3, #0
 800b086:	e035      	b.n	800b0f4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b088:	8afb      	ldrh	r3, [r7, #22]
 800b08a:	4618      	mov	r0, r3
 800b08c:	f7ff f9ba 	bl	800a404 <mem_malloc>
 800b090:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 800b092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b094:	2b00      	cmp	r3, #0
 800b096:	d101      	bne.n	800b09c <pbuf_alloc+0x174>
        return NULL;
 800b098:	2300      	movs	r3, #0
 800b09a:	e02b      	b.n	800b0f4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b09c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800b09e:	3310      	adds	r3, #16
 800b0a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b0a2:	4413      	add	r3, r2
 800b0a4:	3303      	adds	r3, #3
 800b0a6:	f023 0303 	bic.w	r3, r3, #3
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	88b9      	ldrh	r1, [r7, #4]
 800b0ae:	88ba      	ldrh	r2, [r7, #4]
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	9301      	str	r3, [sp, #4]
 800b0b4:	887b      	ldrh	r3, [r7, #2]
 800b0b6:	9300      	str	r3, [sp, #0]
 800b0b8:	460b      	mov	r3, r1
 800b0ba:	4601      	mov	r1, r0
 800b0bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b0be:	f7ff ff09 	bl	800aed4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	f003 0303 	and.w	r3, r3, #3
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d010      	beq.n	800b0f0 <pbuf_alloc+0x1c8>
 800b0ce:	4b0b      	ldr	r3, [pc, #44]	@ (800b0fc <pbuf_alloc+0x1d4>)
 800b0d0:	f44f 7291 	mov.w	r2, #290	@ 0x122
 800b0d4:	490d      	ldr	r1, [pc, #52]	@ (800b10c <pbuf_alloc+0x1e4>)
 800b0d6:	480b      	ldr	r0, [pc, #44]	@ (800b104 <pbuf_alloc+0x1dc>)
 800b0d8:	f008 fe20 	bl	8013d1c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b0dc:	e008      	b.n	800b0f0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b0de:	4b07      	ldr	r3, [pc, #28]	@ (800b0fc <pbuf_alloc+0x1d4>)
 800b0e0:	f240 1227 	movw	r2, #295	@ 0x127
 800b0e4:	490a      	ldr	r1, [pc, #40]	@ (800b110 <pbuf_alloc+0x1e8>)
 800b0e6:	4807      	ldr	r0, [pc, #28]	@ (800b104 <pbuf_alloc+0x1dc>)
 800b0e8:	f008 fe18 	bl	8013d1c <iprintf>
      return NULL;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	e001      	b.n	800b0f4 <pbuf_alloc+0x1cc>
      break;
 800b0f0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b0f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3728      	adds	r7, #40	@ 0x28
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}
 800b0fc:	08015110 	.word	0x08015110
 800b100:	08015140 	.word	0x08015140
 800b104:	08015170 	.word	0x08015170
 800b108:	08015198 	.word	0x08015198
 800b10c:	080151cc 	.word	0x080151cc
 800b110:	080151f8 	.word	0x080151f8

0800b114 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b086      	sub	sp, #24
 800b118:	af02      	add	r7, sp, #8
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	460b      	mov	r3, r1
 800b11e:	807b      	strh	r3, [r7, #2]
 800b120:	4613      	mov	r3, r2
 800b122:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b124:	883b      	ldrh	r3, [r7, #0]
 800b126:	2b41      	cmp	r3, #65	@ 0x41
 800b128:	d009      	beq.n	800b13e <pbuf_alloc_reference+0x2a>
 800b12a:	883b      	ldrh	r3, [r7, #0]
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d006      	beq.n	800b13e <pbuf_alloc_reference+0x2a>
 800b130:	4b0f      	ldr	r3, [pc, #60]	@ (800b170 <pbuf_alloc_reference+0x5c>)
 800b132:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 800b136:	490f      	ldr	r1, [pc, #60]	@ (800b174 <pbuf_alloc_reference+0x60>)
 800b138:	480f      	ldr	r0, [pc, #60]	@ (800b178 <pbuf_alloc_reference+0x64>)
 800b13a:	f008 fdef 	bl	8013d1c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b13e:	2007      	movs	r0, #7
 800b140:	f7ff faf0 	bl	800a724 <memp_malloc>
 800b144:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d101      	bne.n	800b150 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b14c:	2300      	movs	r3, #0
 800b14e:	e00b      	b.n	800b168 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b150:	8879      	ldrh	r1, [r7, #2]
 800b152:	887a      	ldrh	r2, [r7, #2]
 800b154:	2300      	movs	r3, #0
 800b156:	9301      	str	r3, [sp, #4]
 800b158:	883b      	ldrh	r3, [r7, #0]
 800b15a:	9300      	str	r3, [sp, #0]
 800b15c:	460b      	mov	r3, r1
 800b15e:	6879      	ldr	r1, [r7, #4]
 800b160:	68f8      	ldr	r0, [r7, #12]
 800b162:	f7ff feb7 	bl	800aed4 <pbuf_init_alloced_pbuf>
  return p;
 800b166:	68fb      	ldr	r3, [r7, #12]
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3710      	adds	r7, #16
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}
 800b170:	08015110 	.word	0x08015110
 800b174:	08015214 	.word	0x08015214
 800b178:	08015170 	.word	0x08015170

0800b17c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b088      	sub	sp, #32
 800b180:	af02      	add	r7, sp, #8
 800b182:	607b      	str	r3, [r7, #4]
 800b184:	4603      	mov	r3, r0
 800b186:	73fb      	strb	r3, [r7, #15]
 800b188:	460b      	mov	r3, r1
 800b18a:	81bb      	strh	r3, [r7, #12]
 800b18c:	4613      	mov	r3, r2
 800b18e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b190:	7bfb      	ldrb	r3, [r7, #15]
 800b192:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b194:	8a7b      	ldrh	r3, [r7, #18]
 800b196:	3303      	adds	r3, #3
 800b198:	f023 0203 	bic.w	r2, r3, #3
 800b19c:	89bb      	ldrh	r3, [r7, #12]
 800b19e:	441a      	add	r2, r3
 800b1a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d901      	bls.n	800b1aa <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	e018      	b.n	800b1dc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b1aa:	6a3b      	ldr	r3, [r7, #32]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d007      	beq.n	800b1c0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b1b0:	8a7b      	ldrh	r3, [r7, #18]
 800b1b2:	3303      	adds	r3, #3
 800b1b4:	f023 0303 	bic.w	r3, r3, #3
 800b1b8:	6a3a      	ldr	r2, [r7, #32]
 800b1ba:	4413      	add	r3, r2
 800b1bc:	617b      	str	r3, [r7, #20]
 800b1be:	e001      	b.n	800b1c4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	89b9      	ldrh	r1, [r7, #12]
 800b1c8:	89ba      	ldrh	r2, [r7, #12]
 800b1ca:	2302      	movs	r3, #2
 800b1cc:	9301      	str	r3, [sp, #4]
 800b1ce:	897b      	ldrh	r3, [r7, #10]
 800b1d0:	9300      	str	r3, [sp, #0]
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	6979      	ldr	r1, [r7, #20]
 800b1d6:	f7ff fe7d 	bl	800aed4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b1da:	687b      	ldr	r3, [r7, #4]
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3718      	adds	r7, #24
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	bd80      	pop	{r7, pc}

0800b1e4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b084      	sub	sp, #16
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	460b      	mov	r3, r1
 800b1ee:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d106      	bne.n	800b204 <pbuf_realloc+0x20>
 800b1f6:	4b3a      	ldr	r3, [pc, #232]	@ (800b2e0 <pbuf_realloc+0xfc>)
 800b1f8:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 800b1fc:	4939      	ldr	r1, [pc, #228]	@ (800b2e4 <pbuf_realloc+0x100>)
 800b1fe:	483a      	ldr	r0, [pc, #232]	@ (800b2e8 <pbuf_realloc+0x104>)
 800b200:	f008 fd8c 	bl	8013d1c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	891b      	ldrh	r3, [r3, #8]
 800b208:	887a      	ldrh	r2, [r7, #2]
 800b20a:	429a      	cmp	r2, r3
 800b20c:	d263      	bcs.n	800b2d6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	891a      	ldrh	r2, [r3, #8]
 800b212:	887b      	ldrh	r3, [r7, #2]
 800b214:	1ad3      	subs	r3, r2, r3
 800b216:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b218:	887b      	ldrh	r3, [r7, #2]
 800b21a:	817b      	strh	r3, [r7, #10]
  q = p;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b220:	e018      	b.n	800b254 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	895b      	ldrh	r3, [r3, #10]
 800b226:	897a      	ldrh	r2, [r7, #10]
 800b228:	1ad3      	subs	r3, r2, r3
 800b22a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	891a      	ldrh	r2, [r3, #8]
 800b230:	893b      	ldrh	r3, [r7, #8]
 800b232:	1ad3      	subs	r3, r2, r3
 800b234:	b29a      	uxth	r2, r3
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d106      	bne.n	800b254 <pbuf_realloc+0x70>
 800b246:	4b26      	ldr	r3, [pc, #152]	@ (800b2e0 <pbuf_realloc+0xfc>)
 800b248:	f240 12af 	movw	r2, #431	@ 0x1af
 800b24c:	4927      	ldr	r1, [pc, #156]	@ (800b2ec <pbuf_realloc+0x108>)
 800b24e:	4826      	ldr	r0, [pc, #152]	@ (800b2e8 <pbuf_realloc+0x104>)
 800b250:	f008 fd64 	bl	8013d1c <iprintf>
  while (rem_len > q->len) {
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	895b      	ldrh	r3, [r3, #10]
 800b258:	897a      	ldrh	r2, [r7, #10]
 800b25a:	429a      	cmp	r2, r3
 800b25c:	d8e1      	bhi.n	800b222 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	7b1b      	ldrb	r3, [r3, #12]
 800b262:	f003 030f 	and.w	r3, r3, #15
 800b266:	2b00      	cmp	r3, #0
 800b268:	d121      	bne.n	800b2ae <pbuf_realloc+0xca>
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	895b      	ldrh	r3, [r3, #10]
 800b26e:	897a      	ldrh	r2, [r7, #10]
 800b270:	429a      	cmp	r2, r3
 800b272:	d01c      	beq.n	800b2ae <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	7b5b      	ldrb	r3, [r3, #13]
 800b278:	f003 0302 	and.w	r3, r3, #2
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d116      	bne.n	800b2ae <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	685a      	ldr	r2, [r3, #4]
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	1ad3      	subs	r3, r2, r3
 800b288:	b29a      	uxth	r2, r3
 800b28a:	897b      	ldrh	r3, [r7, #10]
 800b28c:	4413      	add	r3, r2
 800b28e:	b29b      	uxth	r3, r3
 800b290:	4619      	mov	r1, r3
 800b292:	68f8      	ldr	r0, [r7, #12]
 800b294:	f7fe ffba 	bl	800a20c <mem_trim>
 800b298:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d106      	bne.n	800b2ae <pbuf_realloc+0xca>
 800b2a0:	4b0f      	ldr	r3, [pc, #60]	@ (800b2e0 <pbuf_realloc+0xfc>)
 800b2a2:	f240 12bd 	movw	r2, #445	@ 0x1bd
 800b2a6:	4912      	ldr	r1, [pc, #72]	@ (800b2f0 <pbuf_realloc+0x10c>)
 800b2a8:	480f      	ldr	r0, [pc, #60]	@ (800b2e8 <pbuf_realloc+0x104>)
 800b2aa:	f008 fd37 	bl	8013d1c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	897a      	ldrh	r2, [r7, #10]
 800b2b2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	895a      	ldrh	r2, [r3, #10]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d004      	beq.n	800b2ce <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	f000 f911 	bl	800b4f0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	601a      	str	r2, [r3, #0]
 800b2d4:	e000      	b.n	800b2d8 <pbuf_realloc+0xf4>
    return;
 800b2d6:	bf00      	nop

}
 800b2d8:	3710      	adds	r7, #16
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	08015110 	.word	0x08015110
 800b2e4:	08015228 	.word	0x08015228
 800b2e8:	08015170 	.word	0x08015170
 800b2ec:	08015240 	.word	0x08015240
 800b2f0:	08015258 	.word	0x08015258

0800b2f4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b086      	sub	sp, #24
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	60f8      	str	r0, [r7, #12]
 800b2fc:	60b9      	str	r1, [r7, #8]
 800b2fe:	4613      	mov	r3, r2
 800b300:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d106      	bne.n	800b316 <pbuf_add_header_impl+0x22>
 800b308:	4b2b      	ldr	r3, [pc, #172]	@ (800b3b8 <pbuf_add_header_impl+0xc4>)
 800b30a:	f240 12df 	movw	r2, #479	@ 0x1df
 800b30e:	492b      	ldr	r1, [pc, #172]	@ (800b3bc <pbuf_add_header_impl+0xc8>)
 800b310:	482b      	ldr	r0, [pc, #172]	@ (800b3c0 <pbuf_add_header_impl+0xcc>)
 800b312:	f008 fd03 	bl	8013d1c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d003      	beq.n	800b324 <pbuf_add_header_impl+0x30>
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b322:	d301      	bcc.n	800b328 <pbuf_add_header_impl+0x34>
    return 1;
 800b324:	2301      	movs	r3, #1
 800b326:	e043      	b.n	800b3b0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d101      	bne.n	800b332 <pbuf_add_header_impl+0x3e>
    return 0;
 800b32e:	2300      	movs	r3, #0
 800b330:	e03e      	b.n	800b3b0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b332:	68bb      	ldr	r3, [r7, #8]
 800b334:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	891a      	ldrh	r2, [r3, #8]
 800b33a:	8a7b      	ldrh	r3, [r7, #18]
 800b33c:	4413      	add	r3, r2
 800b33e:	b29b      	uxth	r3, r3
 800b340:	8a7a      	ldrh	r2, [r7, #18]
 800b342:	429a      	cmp	r2, r3
 800b344:	d901      	bls.n	800b34a <pbuf_add_header_impl+0x56>
    return 1;
 800b346:	2301      	movs	r3, #1
 800b348:	e032      	b.n	800b3b0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	7b1b      	ldrb	r3, [r3, #12]
 800b34e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b350:	8a3b      	ldrh	r3, [r7, #16]
 800b352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b356:	2b00      	cmp	r3, #0
 800b358:	d00c      	beq.n	800b374 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	685a      	ldr	r2, [r3, #4]
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	425b      	negs	r3, r3
 800b362:	4413      	add	r3, r2
 800b364:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	3310      	adds	r3, #16
 800b36a:	697a      	ldr	r2, [r7, #20]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	d20d      	bcs.n	800b38c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b370:	2301      	movs	r3, #1
 800b372:	e01d      	b.n	800b3b0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b374:	79fb      	ldrb	r3, [r7, #7]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d006      	beq.n	800b388 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	685a      	ldr	r2, [r3, #4]
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	425b      	negs	r3, r3
 800b382:	4413      	add	r3, r2
 800b384:	617b      	str	r3, [r7, #20]
 800b386:	e001      	b.n	800b38c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b388:	2301      	movs	r3, #1
 800b38a:	e011      	b.n	800b3b0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	697a      	ldr	r2, [r7, #20]
 800b390:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	895a      	ldrh	r2, [r3, #10]
 800b396:	8a7b      	ldrh	r3, [r7, #18]
 800b398:	4413      	add	r3, r2
 800b39a:	b29a      	uxth	r2, r3
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	891a      	ldrh	r2, [r3, #8]
 800b3a4:	8a7b      	ldrh	r3, [r7, #18]
 800b3a6:	4413      	add	r3, r2
 800b3a8:	b29a      	uxth	r2, r3
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	811a      	strh	r2, [r3, #8]


  return 0;
 800b3ae:	2300      	movs	r3, #0
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3718      	adds	r7, #24
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	08015110 	.word	0x08015110
 800b3bc:	08015274 	.word	0x08015274
 800b3c0:	08015170 	.word	0x08015170

0800b3c4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
 800b3cc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	6839      	ldr	r1, [r7, #0]
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f7ff ff8e 	bl	800b2f4 <pbuf_add_header_impl>
 800b3d8:	4603      	mov	r3, r0
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3708      	adds	r7, #8
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
	...

0800b3e4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b084      	sub	sp, #16
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d106      	bne.n	800b402 <pbuf_remove_header+0x1e>
 800b3f4:	4b20      	ldr	r3, [pc, #128]	@ (800b478 <pbuf_remove_header+0x94>)
 800b3f6:	f240 224b 	movw	r2, #587	@ 0x24b
 800b3fa:	4920      	ldr	r1, [pc, #128]	@ (800b47c <pbuf_remove_header+0x98>)
 800b3fc:	4820      	ldr	r0, [pc, #128]	@ (800b480 <pbuf_remove_header+0x9c>)
 800b3fe:	f008 fc8d 	bl	8013d1c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d003      	beq.n	800b410 <pbuf_remove_header+0x2c>
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b40e:	d301      	bcc.n	800b414 <pbuf_remove_header+0x30>
    return 1;
 800b410:	2301      	movs	r3, #1
 800b412:	e02c      	b.n	800b46e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d101      	bne.n	800b41e <pbuf_remove_header+0x3a>
    return 0;
 800b41a:	2300      	movs	r3, #0
 800b41c:	e027      	b.n	800b46e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	895b      	ldrh	r3, [r3, #10]
 800b426:	89fa      	ldrh	r2, [r7, #14]
 800b428:	429a      	cmp	r2, r3
 800b42a:	d908      	bls.n	800b43e <pbuf_remove_header+0x5a>
 800b42c:	4b12      	ldr	r3, [pc, #72]	@ (800b478 <pbuf_remove_header+0x94>)
 800b42e:	f240 2255 	movw	r2, #597	@ 0x255
 800b432:	4914      	ldr	r1, [pc, #80]	@ (800b484 <pbuf_remove_header+0xa0>)
 800b434:	4812      	ldr	r0, [pc, #72]	@ (800b480 <pbuf_remove_header+0x9c>)
 800b436:	f008 fc71 	bl	8013d1c <iprintf>
 800b43a:	2301      	movs	r3, #1
 800b43c:	e017      	b.n	800b46e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	685a      	ldr	r2, [r3, #4]
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	441a      	add	r2, r3
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	895a      	ldrh	r2, [r3, #10]
 800b454:	89fb      	ldrh	r3, [r7, #14]
 800b456:	1ad3      	subs	r3, r2, r3
 800b458:	b29a      	uxth	r2, r3
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	891a      	ldrh	r2, [r3, #8]
 800b462:	89fb      	ldrh	r3, [r7, #14]
 800b464:	1ad3      	subs	r3, r2, r3
 800b466:	b29a      	uxth	r2, r3
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b46c:	2300      	movs	r3, #0
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	08015110 	.word	0x08015110
 800b47c:	08015274 	.word	0x08015274
 800b480:	08015170 	.word	0x08015170
 800b484:	08015280 	.word	0x08015280

0800b488 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b082      	sub	sp, #8
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	460b      	mov	r3, r1
 800b492:	807b      	strh	r3, [r7, #2]
 800b494:	4613      	mov	r3, r2
 800b496:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b498:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	da08      	bge.n	800b4b2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b4a0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b4a4:	425b      	negs	r3, r3
 800b4a6:	4619      	mov	r1, r3
 800b4a8:	6878      	ldr	r0, [r7, #4]
 800b4aa:	f7ff ff9b 	bl	800b3e4 <pbuf_remove_header>
 800b4ae:	4603      	mov	r3, r0
 800b4b0:	e007      	b.n	800b4c2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b4b2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b4b6:	787a      	ldrb	r2, [r7, #1]
 800b4b8:	4619      	mov	r1, r3
 800b4ba:	6878      	ldr	r0, [r7, #4]
 800b4bc:	f7ff ff1a 	bl	800b2f4 <pbuf_add_header_impl>
 800b4c0:	4603      	mov	r3, r0
  }
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	3708      	adds	r7, #8
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	bd80      	pop	{r7, pc}

0800b4ca <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b4ca:	b580      	push	{r7, lr}
 800b4cc:	b082      	sub	sp, #8
 800b4ce:	af00      	add	r7, sp, #0
 800b4d0:	6078      	str	r0, [r7, #4]
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b4d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b4da:	2201      	movs	r2, #1
 800b4dc:	4619      	mov	r1, r3
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f7ff ffd2 	bl	800b488 <pbuf_header_impl>
 800b4e4:	4603      	mov	r3, r0
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3708      	adds	r7, #8
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
	...

0800b4f0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b086      	sub	sp, #24
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d10b      	bne.n	800b516 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d106      	bne.n	800b512 <pbuf_free+0x22>
 800b504:	4b38      	ldr	r3, [pc, #224]	@ (800b5e8 <pbuf_free+0xf8>)
 800b506:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 800b50a:	4938      	ldr	r1, [pc, #224]	@ (800b5ec <pbuf_free+0xfc>)
 800b50c:	4838      	ldr	r0, [pc, #224]	@ (800b5f0 <pbuf_free+0x100>)
 800b50e:	f008 fc05 	bl	8013d1c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b512:	2300      	movs	r3, #0
 800b514:	e063      	b.n	800b5de <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b516:	2300      	movs	r3, #0
 800b518:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b51a:	e05c      	b.n	800b5d6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	7b9b      	ldrb	r3, [r3, #14]
 800b520:	2b00      	cmp	r3, #0
 800b522:	d106      	bne.n	800b532 <pbuf_free+0x42>
 800b524:	4b30      	ldr	r3, [pc, #192]	@ (800b5e8 <pbuf_free+0xf8>)
 800b526:	f240 22f1 	movw	r2, #753	@ 0x2f1
 800b52a:	4932      	ldr	r1, [pc, #200]	@ (800b5f4 <pbuf_free+0x104>)
 800b52c:	4830      	ldr	r0, [pc, #192]	@ (800b5f0 <pbuf_free+0x100>)
 800b52e:	f008 fbf5 	bl	8013d1c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	7b9b      	ldrb	r3, [r3, #14]
 800b536:	3b01      	subs	r3, #1
 800b538:	b2da      	uxtb	r2, r3
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	739a      	strb	r2, [r3, #14]
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	7b9b      	ldrb	r3, [r3, #14]
 800b542:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b544:	7dbb      	ldrb	r3, [r7, #22]
 800b546:	2b00      	cmp	r3, #0
 800b548:	d143      	bne.n	800b5d2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	7b1b      	ldrb	r3, [r3, #12]
 800b554:	f003 030f 	and.w	r3, r3, #15
 800b558:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	7b5b      	ldrb	r3, [r3, #13]
 800b55e:	f003 0302 	and.w	r3, r3, #2
 800b562:	2b00      	cmp	r3, #0
 800b564:	d011      	beq.n	800b58a <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	691b      	ldr	r3, [r3, #16]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d106      	bne.n	800b580 <pbuf_free+0x90>
 800b572:	4b1d      	ldr	r3, [pc, #116]	@ (800b5e8 <pbuf_free+0xf8>)
 800b574:	f240 22ff 	movw	r2, #767	@ 0x2ff
 800b578:	491f      	ldr	r1, [pc, #124]	@ (800b5f8 <pbuf_free+0x108>)
 800b57a:	481d      	ldr	r0, [pc, #116]	@ (800b5f0 <pbuf_free+0x100>)
 800b57c:	f008 fbce 	bl	8013d1c <iprintf>
        pc->custom_free_function(p);
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	691b      	ldr	r3, [r3, #16]
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	4798      	blx	r3
 800b588:	e01d      	b.n	800b5c6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b58a:	7bfb      	ldrb	r3, [r7, #15]
 800b58c:	2b02      	cmp	r3, #2
 800b58e:	d104      	bne.n	800b59a <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800b590:	6879      	ldr	r1, [r7, #4]
 800b592:	2008      	movs	r0, #8
 800b594:	f7ff f936 	bl	800a804 <memp_free>
 800b598:	e015      	b.n	800b5c6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b59a:	7bfb      	ldrb	r3, [r7, #15]
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d104      	bne.n	800b5aa <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800b5a0:	6879      	ldr	r1, [r7, #4]
 800b5a2:	2007      	movs	r0, #7
 800b5a4:	f7ff f92e 	bl	800a804 <memp_free>
 800b5a8:	e00d      	b.n	800b5c6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b5aa:	7bfb      	ldrb	r3, [r7, #15]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d103      	bne.n	800b5b8 <pbuf_free+0xc8>
          mem_free(p);
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f7fe fdc1 	bl	800a138 <mem_free>
 800b5b6:	e006      	b.n	800b5c6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b5b8:	4b0b      	ldr	r3, [pc, #44]	@ (800b5e8 <pbuf_free+0xf8>)
 800b5ba:	f240 320f 	movw	r2, #783	@ 0x30f
 800b5be:	490f      	ldr	r1, [pc, #60]	@ (800b5fc <pbuf_free+0x10c>)
 800b5c0:	480b      	ldr	r0, [pc, #44]	@ (800b5f0 <pbuf_free+0x100>)
 800b5c2:	f008 fbab 	bl	8013d1c <iprintf>
        }
      }
      count++;
 800b5c6:	7dfb      	ldrb	r3, [r7, #23]
 800b5c8:	3301      	adds	r3, #1
 800b5ca:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	607b      	str	r3, [r7, #4]
 800b5d0:	e001      	b.n	800b5d6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d19f      	bne.n	800b51c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b5dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3718      	adds	r7, #24
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}
 800b5e6:	bf00      	nop
 800b5e8:	08015110 	.word	0x08015110
 800b5ec:	08015274 	.word	0x08015274
 800b5f0:	08015170 	.word	0x08015170
 800b5f4:	080152a0 	.word	0x080152a0
 800b5f8:	080152b8 	.word	0x080152b8
 800b5fc:	080152dc 	.word	0x080152dc

0800b600 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b600:	b480      	push	{r7}
 800b602:	b085      	sub	sp, #20
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b608:	2300      	movs	r3, #0
 800b60a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b60c:	e005      	b.n	800b61a <pbuf_clen+0x1a>
    ++len;
 800b60e:	89fb      	ldrh	r3, [r7, #14]
 800b610:	3301      	adds	r3, #1
 800b612:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d1f6      	bne.n	800b60e <pbuf_clen+0xe>
  }
  return len;
 800b620:	89fb      	ldrh	r3, [r7, #14]
}
 800b622:	4618      	mov	r0, r3
 800b624:	3714      	adds	r7, #20
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr
	...

0800b630 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d010      	beq.n	800b660 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	7b9b      	ldrb	r3, [r3, #14]
 800b642:	3301      	adds	r3, #1
 800b644:	b2da      	uxtb	r2, r3
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	7b9b      	ldrb	r3, [r3, #14]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d106      	bne.n	800b660 <pbuf_ref+0x30>
 800b652:	4b05      	ldr	r3, [pc, #20]	@ (800b668 <pbuf_ref+0x38>)
 800b654:	f240 3242 	movw	r2, #834	@ 0x342
 800b658:	4904      	ldr	r1, [pc, #16]	@ (800b66c <pbuf_ref+0x3c>)
 800b65a:	4805      	ldr	r0, [pc, #20]	@ (800b670 <pbuf_ref+0x40>)
 800b65c:	f008 fb5e 	bl	8013d1c <iprintf>
  }
}
 800b660:	bf00      	nop
 800b662:	3708      	adds	r7, #8
 800b664:	46bd      	mov	sp, r7
 800b666:	bd80      	pop	{r7, pc}
 800b668:	08015110 	.word	0x08015110
 800b66c:	080152f0 	.word	0x080152f0
 800b670:	08015170 	.word	0x08015170

0800b674 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b084      	sub	sp, #16
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
 800b67c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2b00      	cmp	r3, #0
 800b682:	d002      	beq.n	800b68a <pbuf_cat+0x16>
 800b684:	683b      	ldr	r3, [r7, #0]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d107      	bne.n	800b69a <pbuf_cat+0x26>
 800b68a:	4b20      	ldr	r3, [pc, #128]	@ (800b70c <pbuf_cat+0x98>)
 800b68c:	f240 3259 	movw	r2, #857	@ 0x359
 800b690:	491f      	ldr	r1, [pc, #124]	@ (800b710 <pbuf_cat+0x9c>)
 800b692:	4820      	ldr	r0, [pc, #128]	@ (800b714 <pbuf_cat+0xa0>)
 800b694:	f008 fb42 	bl	8013d1c <iprintf>
 800b698:	e034      	b.n	800b704 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	60fb      	str	r3, [r7, #12]
 800b69e:	e00a      	b.n	800b6b6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	891a      	ldrh	r2, [r3, #8]
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	891b      	ldrh	r3, [r3, #8]
 800b6a8:	4413      	add	r3, r2
 800b6aa:	b29a      	uxth	r2, r3
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	60fb      	str	r3, [r7, #12]
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d1f0      	bne.n	800b6a0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	891a      	ldrh	r2, [r3, #8]
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	895b      	ldrh	r3, [r3, #10]
 800b6c6:	429a      	cmp	r2, r3
 800b6c8:	d006      	beq.n	800b6d8 <pbuf_cat+0x64>
 800b6ca:	4b10      	ldr	r3, [pc, #64]	@ (800b70c <pbuf_cat+0x98>)
 800b6cc:	f240 3262 	movw	r2, #866	@ 0x362
 800b6d0:	4911      	ldr	r1, [pc, #68]	@ (800b718 <pbuf_cat+0xa4>)
 800b6d2:	4810      	ldr	r0, [pc, #64]	@ (800b714 <pbuf_cat+0xa0>)
 800b6d4:	f008 fb22 	bl	8013d1c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d006      	beq.n	800b6ee <pbuf_cat+0x7a>
 800b6e0:	4b0a      	ldr	r3, [pc, #40]	@ (800b70c <pbuf_cat+0x98>)
 800b6e2:	f240 3263 	movw	r2, #867	@ 0x363
 800b6e6:	490d      	ldr	r1, [pc, #52]	@ (800b71c <pbuf_cat+0xa8>)
 800b6e8:	480a      	ldr	r0, [pc, #40]	@ (800b714 <pbuf_cat+0xa0>)
 800b6ea:	f008 fb17 	bl	8013d1c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	891a      	ldrh	r2, [r3, #8]
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	891b      	ldrh	r3, [r3, #8]
 800b6f6:	4413      	add	r3, r2
 800b6f8:	b29a      	uxth	r2, r3
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	683a      	ldr	r2, [r7, #0]
 800b702:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b704:	3710      	adds	r7, #16
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}
 800b70a:	bf00      	nop
 800b70c:	08015110 	.word	0x08015110
 800b710:	08015304 	.word	0x08015304
 800b714:	08015170 	.word	0x08015170
 800b718:	0801533c 	.word	0x0801533c
 800b71c:	0801536c 	.word	0x0801536c

0800b720 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b086      	sub	sp, #24
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b72a:	2300      	movs	r3, #0
 800b72c:	617b      	str	r3, [r7, #20]
 800b72e:	2300      	movs	r3, #0
 800b730:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d008      	beq.n	800b74a <pbuf_copy+0x2a>
 800b738:	683b      	ldr	r3, [r7, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d005      	beq.n	800b74a <pbuf_copy+0x2a>
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	891a      	ldrh	r2, [r3, #8]
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	891b      	ldrh	r3, [r3, #8]
 800b746:	429a      	cmp	r2, r3
 800b748:	d209      	bcs.n	800b75e <pbuf_copy+0x3e>
 800b74a:	4b57      	ldr	r3, [pc, #348]	@ (800b8a8 <pbuf_copy+0x188>)
 800b74c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 800b750:	4956      	ldr	r1, [pc, #344]	@ (800b8ac <pbuf_copy+0x18c>)
 800b752:	4857      	ldr	r0, [pc, #348]	@ (800b8b0 <pbuf_copy+0x190>)
 800b754:	f008 fae2 	bl	8013d1c <iprintf>
 800b758:	f06f 030f 	mvn.w	r3, #15
 800b75c:	e09f      	b.n	800b89e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	895b      	ldrh	r3, [r3, #10]
 800b762:	461a      	mov	r2, r3
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	1ad2      	subs	r2, r2, r3
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	895b      	ldrh	r3, [r3, #10]
 800b76c:	4619      	mov	r1, r3
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	1acb      	subs	r3, r1, r3
 800b772:	429a      	cmp	r2, r3
 800b774:	d306      	bcc.n	800b784 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	895b      	ldrh	r3, [r3, #10]
 800b77a:	461a      	mov	r2, r3
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	1ad3      	subs	r3, r2, r3
 800b780:	60fb      	str	r3, [r7, #12]
 800b782:	e005      	b.n	800b790 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	895b      	ldrh	r3, [r3, #10]
 800b788:	461a      	mov	r2, r3
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	1ad3      	subs	r3, r2, r3
 800b78e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	685a      	ldr	r2, [r3, #4]
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	18d0      	adds	r0, r2, r3
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	685a      	ldr	r2, [r3, #4]
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	4413      	add	r3, r2
 800b7a0:	68fa      	ldr	r2, [r7, #12]
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	f008 fb95 	bl	8013ed2 <memcpy>
    offset_to += len;
 800b7a8:	697a      	ldr	r2, [r7, #20]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b7b0:	693a      	ldr	r2, [r7, #16]
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	895b      	ldrh	r3, [r3, #10]
 800b7bc:	461a      	mov	r2, r3
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	4293      	cmp	r3, r2
 800b7c2:	d906      	bls.n	800b7d2 <pbuf_copy+0xb2>
 800b7c4:	4b38      	ldr	r3, [pc, #224]	@ (800b8a8 <pbuf_copy+0x188>)
 800b7c6:	f240 32d9 	movw	r2, #985	@ 0x3d9
 800b7ca:	493a      	ldr	r1, [pc, #232]	@ (800b8b4 <pbuf_copy+0x194>)
 800b7cc:	4838      	ldr	r0, [pc, #224]	@ (800b8b0 <pbuf_copy+0x190>)
 800b7ce:	f008 faa5 	bl	8013d1c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b7d2:	683b      	ldr	r3, [r7, #0]
 800b7d4:	895b      	ldrh	r3, [r3, #10]
 800b7d6:	461a      	mov	r2, r3
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d906      	bls.n	800b7ec <pbuf_copy+0xcc>
 800b7de:	4b32      	ldr	r3, [pc, #200]	@ (800b8a8 <pbuf_copy+0x188>)
 800b7e0:	f240 32da 	movw	r2, #986	@ 0x3da
 800b7e4:	4934      	ldr	r1, [pc, #208]	@ (800b8b8 <pbuf_copy+0x198>)
 800b7e6:	4832      	ldr	r0, [pc, #200]	@ (800b8b0 <pbuf_copy+0x190>)
 800b7e8:	f008 fa98 	bl	8013d1c <iprintf>
    if (offset_from >= p_from->len) {
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	895b      	ldrh	r3, [r3, #10]
 800b7f0:	461a      	mov	r2, r3
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	4293      	cmp	r3, r2
 800b7f6:	d304      	bcc.n	800b802 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b7fc:	683b      	ldr	r3, [r7, #0]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	895b      	ldrh	r3, [r3, #10]
 800b806:	461a      	mov	r2, r3
 800b808:	697b      	ldr	r3, [r7, #20]
 800b80a:	4293      	cmp	r3, r2
 800b80c:	d114      	bne.n	800b838 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b80e:	2300      	movs	r3, #0
 800b810:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d10c      	bne.n	800b838 <pbuf_copy+0x118>
 800b81e:	683b      	ldr	r3, [r7, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d009      	beq.n	800b838 <pbuf_copy+0x118>
 800b824:	4b20      	ldr	r3, [pc, #128]	@ (800b8a8 <pbuf_copy+0x188>)
 800b826:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 800b82a:	4924      	ldr	r1, [pc, #144]	@ (800b8bc <pbuf_copy+0x19c>)
 800b82c:	4820      	ldr	r0, [pc, #128]	@ (800b8b0 <pbuf_copy+0x190>)
 800b82e:	f008 fa75 	bl	8013d1c <iprintf>
 800b832:	f06f 030f 	mvn.w	r3, #15
 800b836:	e032      	b.n	800b89e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d013      	beq.n	800b866 <pbuf_copy+0x146>
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	895a      	ldrh	r2, [r3, #10]
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	891b      	ldrh	r3, [r3, #8]
 800b846:	429a      	cmp	r2, r3
 800b848:	d10d      	bne.n	800b866 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d009      	beq.n	800b866 <pbuf_copy+0x146>
 800b852:	4b15      	ldr	r3, [pc, #84]	@ (800b8a8 <pbuf_copy+0x188>)
 800b854:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 800b858:	4919      	ldr	r1, [pc, #100]	@ (800b8c0 <pbuf_copy+0x1a0>)
 800b85a:	4815      	ldr	r0, [pc, #84]	@ (800b8b0 <pbuf_copy+0x190>)
 800b85c:	f008 fa5e 	bl	8013d1c <iprintf>
 800b860:	f06f 0305 	mvn.w	r3, #5
 800b864:	e01b      	b.n	800b89e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d013      	beq.n	800b894 <pbuf_copy+0x174>
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	895a      	ldrh	r2, [r3, #10]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	891b      	ldrh	r3, [r3, #8]
 800b874:	429a      	cmp	r2, r3
 800b876:	d10d      	bne.n	800b894 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d009      	beq.n	800b894 <pbuf_copy+0x174>
 800b880:	4b09      	ldr	r3, [pc, #36]	@ (800b8a8 <pbuf_copy+0x188>)
 800b882:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800b886:	490e      	ldr	r1, [pc, #56]	@ (800b8c0 <pbuf_copy+0x1a0>)
 800b888:	4809      	ldr	r0, [pc, #36]	@ (800b8b0 <pbuf_copy+0x190>)
 800b88a:	f008 fa47 	bl	8013d1c <iprintf>
 800b88e:	f06f 0305 	mvn.w	r3, #5
 800b892:	e004      	b.n	800b89e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	f47f af61 	bne.w	800b75e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b89c:	2300      	movs	r3, #0
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3718      	adds	r7, #24
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}
 800b8a6:	bf00      	nop
 800b8a8:	08015110 	.word	0x08015110
 800b8ac:	080153b8 	.word	0x080153b8
 800b8b0:	08015170 	.word	0x08015170
 800b8b4:	080153e8 	.word	0x080153e8
 800b8b8:	08015400 	.word	0x08015400
 800b8bc:	0801541c 	.word	0x0801541c
 800b8c0:	0801542c 	.word	0x0801542c

0800b8c4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b8c4:	b580      	push	{r7, lr}
 800b8c6:	b088      	sub	sp, #32
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	60f8      	str	r0, [r7, #12]
 800b8cc:	60b9      	str	r1, [r7, #8]
 800b8ce:	4611      	mov	r1, r2
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	80fb      	strh	r3, [r7, #6]
 800b8d6:	4613      	mov	r3, r2
 800b8d8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b8da:	2300      	movs	r3, #0
 800b8dc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b8de:	2300      	movs	r3, #0
 800b8e0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d108      	bne.n	800b8fa <pbuf_copy_partial+0x36>
 800b8e8:	4b2b      	ldr	r3, [pc, #172]	@ (800b998 <pbuf_copy_partial+0xd4>)
 800b8ea:	f240 420a 	movw	r2, #1034	@ 0x40a
 800b8ee:	492b      	ldr	r1, [pc, #172]	@ (800b99c <pbuf_copy_partial+0xd8>)
 800b8f0:	482b      	ldr	r0, [pc, #172]	@ (800b9a0 <pbuf_copy_partial+0xdc>)
 800b8f2:	f008 fa13 	bl	8013d1c <iprintf>
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	e04a      	b.n	800b990 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b8fa:	68bb      	ldr	r3, [r7, #8]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d108      	bne.n	800b912 <pbuf_copy_partial+0x4e>
 800b900:	4b25      	ldr	r3, [pc, #148]	@ (800b998 <pbuf_copy_partial+0xd4>)
 800b902:	f240 420b 	movw	r2, #1035	@ 0x40b
 800b906:	4927      	ldr	r1, [pc, #156]	@ (800b9a4 <pbuf_copy_partial+0xe0>)
 800b908:	4825      	ldr	r0, [pc, #148]	@ (800b9a0 <pbuf_copy_partial+0xdc>)
 800b90a:	f008 fa07 	bl	8013d1c <iprintf>
 800b90e:	2300      	movs	r3, #0
 800b910:	e03e      	b.n	800b990 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	61fb      	str	r3, [r7, #28]
 800b916:	e034      	b.n	800b982 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b918:	88bb      	ldrh	r3, [r7, #4]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d00a      	beq.n	800b934 <pbuf_copy_partial+0x70>
 800b91e:	69fb      	ldr	r3, [r7, #28]
 800b920:	895b      	ldrh	r3, [r3, #10]
 800b922:	88ba      	ldrh	r2, [r7, #4]
 800b924:	429a      	cmp	r2, r3
 800b926:	d305      	bcc.n	800b934 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b928:	69fb      	ldr	r3, [r7, #28]
 800b92a:	895b      	ldrh	r3, [r3, #10]
 800b92c:	88ba      	ldrh	r2, [r7, #4]
 800b92e:	1ad3      	subs	r3, r2, r3
 800b930:	80bb      	strh	r3, [r7, #4]
 800b932:	e023      	b.n	800b97c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b934:	69fb      	ldr	r3, [r7, #28]
 800b936:	895a      	ldrh	r2, [r3, #10]
 800b938:	88bb      	ldrh	r3, [r7, #4]
 800b93a:	1ad3      	subs	r3, r2, r3
 800b93c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b93e:	8b3a      	ldrh	r2, [r7, #24]
 800b940:	88fb      	ldrh	r3, [r7, #6]
 800b942:	429a      	cmp	r2, r3
 800b944:	d901      	bls.n	800b94a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b946:	88fb      	ldrh	r3, [r7, #6]
 800b948:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b94a:	8b7b      	ldrh	r3, [r7, #26]
 800b94c:	68ba      	ldr	r2, [r7, #8]
 800b94e:	18d0      	adds	r0, r2, r3
 800b950:	69fb      	ldr	r3, [r7, #28]
 800b952:	685a      	ldr	r2, [r3, #4]
 800b954:	88bb      	ldrh	r3, [r7, #4]
 800b956:	4413      	add	r3, r2
 800b958:	8b3a      	ldrh	r2, [r7, #24]
 800b95a:	4619      	mov	r1, r3
 800b95c:	f008 fab9 	bl	8013ed2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b960:	8afa      	ldrh	r2, [r7, #22]
 800b962:	8b3b      	ldrh	r3, [r7, #24]
 800b964:	4413      	add	r3, r2
 800b966:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b968:	8b7a      	ldrh	r2, [r7, #26]
 800b96a:	8b3b      	ldrh	r3, [r7, #24]
 800b96c:	4413      	add	r3, r2
 800b96e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b970:	88fa      	ldrh	r2, [r7, #6]
 800b972:	8b3b      	ldrh	r3, [r7, #24]
 800b974:	1ad3      	subs	r3, r2, r3
 800b976:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b978:	2300      	movs	r3, #0
 800b97a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b97c:	69fb      	ldr	r3, [r7, #28]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	61fb      	str	r3, [r7, #28]
 800b982:	88fb      	ldrh	r3, [r7, #6]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d002      	beq.n	800b98e <pbuf_copy_partial+0xca>
 800b988:	69fb      	ldr	r3, [r7, #28]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d1c4      	bne.n	800b918 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b98e:	8afb      	ldrh	r3, [r7, #22]
}
 800b990:	4618      	mov	r0, r3
 800b992:	3720      	adds	r7, #32
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	08015110 	.word	0x08015110
 800b99c:	08015458 	.word	0x08015458
 800b9a0:	08015170 	.word	0x08015170
 800b9a4:	08015478 	.word	0x08015478

0800b9a8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b9a8:	b580      	push	{r7, lr}
 800b9aa:	b084      	sub	sp, #16
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	4603      	mov	r3, r0
 800b9b0:	603a      	str	r2, [r7, #0]
 800b9b2:	71fb      	strb	r3, [r7, #7]
 800b9b4:	460b      	mov	r3, r1
 800b9b6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	8919      	ldrh	r1, [r3, #8]
 800b9bc:	88ba      	ldrh	r2, [r7, #4]
 800b9be:	79fb      	ldrb	r3, [r7, #7]
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	f7ff fab1 	bl	800af28 <pbuf_alloc>
 800b9c6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d101      	bne.n	800b9d2 <pbuf_clone+0x2a>
    return NULL;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	e011      	b.n	800b9f6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b9d2:	6839      	ldr	r1, [r7, #0]
 800b9d4:	68f8      	ldr	r0, [r7, #12]
 800b9d6:	f7ff fea3 	bl	800b720 <pbuf_copy>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b9de:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d006      	beq.n	800b9f4 <pbuf_clone+0x4c>
 800b9e6:	4b06      	ldr	r3, [pc, #24]	@ (800ba00 <pbuf_clone+0x58>)
 800b9e8:	f240 5224 	movw	r2, #1316	@ 0x524
 800b9ec:	4905      	ldr	r1, [pc, #20]	@ (800ba04 <pbuf_clone+0x5c>)
 800b9ee:	4806      	ldr	r0, [pc, #24]	@ (800ba08 <pbuf_clone+0x60>)
 800b9f0:	f008 f994 	bl	8013d1c <iprintf>
  return q;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
}
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	3710      	adds	r7, #16
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	08015110 	.word	0x08015110
 800ba04:	08015584 	.word	0x08015584
 800ba08:	08015170 	.word	0x08015170

0800ba0c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ba10:	f008 f884 	bl	8013b1c <rand>
 800ba14:	4603      	mov	r3, r0
 800ba16:	b29b      	uxth	r3, r3
 800ba18:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ba1c:	b29b      	uxth	r3, r3
 800ba1e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800ba22:	b29a      	uxth	r2, r3
 800ba24:	4b01      	ldr	r3, [pc, #4]	@ (800ba2c <tcp_init+0x20>)
 800ba26:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800ba28:	bf00      	nop
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	20000080 	.word	0x20000080

0800ba30 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b082      	sub	sp, #8
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	7d1b      	ldrb	r3, [r3, #20]
 800ba3c:	2b01      	cmp	r3, #1
 800ba3e:	d105      	bne.n	800ba4c <tcp_free+0x1c>
 800ba40:	4b06      	ldr	r3, [pc, #24]	@ (800ba5c <tcp_free+0x2c>)
 800ba42:	22d4      	movs	r2, #212	@ 0xd4
 800ba44:	4906      	ldr	r1, [pc, #24]	@ (800ba60 <tcp_free+0x30>)
 800ba46:	4807      	ldr	r0, [pc, #28]	@ (800ba64 <tcp_free+0x34>)
 800ba48:	f008 f968 	bl	8013d1c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800ba4c:	6879      	ldr	r1, [r7, #4]
 800ba4e:	2001      	movs	r0, #1
 800ba50:	f7fe fed8 	bl	800a804 <memp_free>
}
 800ba54:	bf00      	nop
 800ba56:	3708      	adds	r7, #8
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}
 800ba5c:	08015610 	.word	0x08015610
 800ba60:	08015640 	.word	0x08015640
 800ba64:	08015654 	.word	0x08015654

0800ba68 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b082      	sub	sp, #8
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	7d1b      	ldrb	r3, [r3, #20]
 800ba74:	2b01      	cmp	r3, #1
 800ba76:	d105      	bne.n	800ba84 <tcp_free_listen+0x1c>
 800ba78:	4b06      	ldr	r3, [pc, #24]	@ (800ba94 <tcp_free_listen+0x2c>)
 800ba7a:	22df      	movs	r2, #223	@ 0xdf
 800ba7c:	4906      	ldr	r1, [pc, #24]	@ (800ba98 <tcp_free_listen+0x30>)
 800ba7e:	4807      	ldr	r0, [pc, #28]	@ (800ba9c <tcp_free_listen+0x34>)
 800ba80:	f008 f94c 	bl	8013d1c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ba84:	6879      	ldr	r1, [r7, #4]
 800ba86:	2002      	movs	r0, #2
 800ba88:	f7fe febc 	bl	800a804 <memp_free>
}
 800ba8c:	bf00      	nop
 800ba8e:	3708      	adds	r7, #8
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}
 800ba94:	08015610 	.word	0x08015610
 800ba98:	0801567c 	.word	0x0801567c
 800ba9c:	08015654 	.word	0x08015654

0800baa0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800baa4:	f000 fea4 	bl	800c7f0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800baa8:	4b07      	ldr	r3, [pc, #28]	@ (800bac8 <tcp_tmr+0x28>)
 800baaa:	781b      	ldrb	r3, [r3, #0]
 800baac:	3301      	adds	r3, #1
 800baae:	b2da      	uxtb	r2, r3
 800bab0:	4b05      	ldr	r3, [pc, #20]	@ (800bac8 <tcp_tmr+0x28>)
 800bab2:	701a      	strb	r2, [r3, #0]
 800bab4:	4b04      	ldr	r3, [pc, #16]	@ (800bac8 <tcp_tmr+0x28>)
 800bab6:	781b      	ldrb	r3, [r3, #0]
 800bab8:	f003 0301 	and.w	r3, r3, #1
 800babc:	2b00      	cmp	r3, #0
 800babe:	d001      	beq.n	800bac4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800bac0:	f000 fb54 	bl	800c16c <tcp_slowtmr>
  }
}
 800bac4:	bf00      	nop
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	2000b1b9 	.word	0x2000b1b9

0800bacc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b084      	sub	sp, #16
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d105      	bne.n	800bae8 <tcp_remove_listener+0x1c>
 800badc:	4b0d      	ldr	r3, [pc, #52]	@ (800bb14 <tcp_remove_listener+0x48>)
 800bade:	22ff      	movs	r2, #255	@ 0xff
 800bae0:	490d      	ldr	r1, [pc, #52]	@ (800bb18 <tcp_remove_listener+0x4c>)
 800bae2:	480e      	ldr	r0, [pc, #56]	@ (800bb1c <tcp_remove_listener+0x50>)
 800bae4:	f008 f91a 	bl	8013d1c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	60fb      	str	r3, [r7, #12]
 800baec:	e00a      	b.n	800bb04 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800baf2:	683a      	ldr	r2, [r7, #0]
 800baf4:	429a      	cmp	r2, r3
 800baf6:	d102      	bne.n	800bafe <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	2200      	movs	r2, #0
 800bafc:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	68db      	ldr	r3, [r3, #12]
 800bb02:	60fb      	str	r3, [r7, #12]
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d1f1      	bne.n	800baee <tcp_remove_listener+0x22>
    }
  }
}
 800bb0a:	bf00      	nop
 800bb0c:	bf00      	nop
 800bb0e:	3710      	adds	r7, #16
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	08015610 	.word	0x08015610
 800bb18:	08015698 	.word	0x08015698
 800bb1c:	08015654 	.word	0x08015654

0800bb20 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b084      	sub	sp, #16
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d106      	bne.n	800bb3c <tcp_listen_closed+0x1c>
 800bb2e:	4b14      	ldr	r3, [pc, #80]	@ (800bb80 <tcp_listen_closed+0x60>)
 800bb30:	f240 1211 	movw	r2, #273	@ 0x111
 800bb34:	4913      	ldr	r1, [pc, #76]	@ (800bb84 <tcp_listen_closed+0x64>)
 800bb36:	4814      	ldr	r0, [pc, #80]	@ (800bb88 <tcp_listen_closed+0x68>)
 800bb38:	f008 f8f0 	bl	8013d1c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	7d1b      	ldrb	r3, [r3, #20]
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d006      	beq.n	800bb52 <tcp_listen_closed+0x32>
 800bb44:	4b0e      	ldr	r3, [pc, #56]	@ (800bb80 <tcp_listen_closed+0x60>)
 800bb46:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800bb4a:	4910      	ldr	r1, [pc, #64]	@ (800bb8c <tcp_listen_closed+0x6c>)
 800bb4c:	480e      	ldr	r0, [pc, #56]	@ (800bb88 <tcp_listen_closed+0x68>)
 800bb4e:	f008 f8e5 	bl	8013d1c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bb52:	2301      	movs	r3, #1
 800bb54:	60fb      	str	r3, [r7, #12]
 800bb56:	e00b      	b.n	800bb70 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800bb58:	4a0d      	ldr	r2, [pc, #52]	@ (800bb90 <tcp_listen_closed+0x70>)
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	6879      	ldr	r1, [r7, #4]
 800bb64:	4618      	mov	r0, r3
 800bb66:	f7ff ffb1 	bl	800bacc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	60fb      	str	r3, [r7, #12]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2b03      	cmp	r3, #3
 800bb74:	d9f0      	bls.n	800bb58 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bb76:	bf00      	nop
 800bb78:	bf00      	nop
 800bb7a:	3710      	adds	r7, #16
 800bb7c:	46bd      	mov	sp, r7
 800bb7e:	bd80      	pop	{r7, pc}
 800bb80:	08015610 	.word	0x08015610
 800bb84:	080156c0 	.word	0x080156c0
 800bb88:	08015654 	.word	0x08015654
 800bb8c:	080156cc 	.word	0x080156cc
 800bb90:	080175f8 	.word	0x080175f8

0800bb94 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bb94:	b5b0      	push	{r4, r5, r7, lr}
 800bb96:	b088      	sub	sp, #32
 800bb98:	af04      	add	r7, sp, #16
 800bb9a:	6078      	str	r0, [r7, #4]
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d106      	bne.n	800bbb4 <tcp_close_shutdown+0x20>
 800bba6:	4b63      	ldr	r3, [pc, #396]	@ (800bd34 <tcp_close_shutdown+0x1a0>)
 800bba8:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 800bbac:	4962      	ldr	r1, [pc, #392]	@ (800bd38 <tcp_close_shutdown+0x1a4>)
 800bbae:	4863      	ldr	r0, [pc, #396]	@ (800bd3c <tcp_close_shutdown+0x1a8>)
 800bbb0:	f008 f8b4 	bl	8013d1c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bbb4:	78fb      	ldrb	r3, [r7, #3]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d066      	beq.n	800bc88 <tcp_close_shutdown+0xf4>
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	7d1b      	ldrb	r3, [r3, #20]
 800bbbe:	2b04      	cmp	r3, #4
 800bbc0:	d003      	beq.n	800bbca <tcp_close_shutdown+0x36>
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	7d1b      	ldrb	r3, [r3, #20]
 800bbc6:	2b07      	cmp	r3, #7
 800bbc8:	d15e      	bne.n	800bc88 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d104      	bne.n	800bbdc <tcp_close_shutdown+0x48>
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bbd6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800bbda:	d055      	beq.n	800bc88 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	8b5b      	ldrh	r3, [r3, #26]
 800bbe0:	f003 0310 	and.w	r3, r3, #16
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d106      	bne.n	800bbf6 <tcp_close_shutdown+0x62>
 800bbe8:	4b52      	ldr	r3, [pc, #328]	@ (800bd34 <tcp_close_shutdown+0x1a0>)
 800bbea:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 800bbee:	4954      	ldr	r1, [pc, #336]	@ (800bd40 <tcp_close_shutdown+0x1ac>)
 800bbf0:	4852      	ldr	r0, [pc, #328]	@ (800bd3c <tcp_close_shutdown+0x1a8>)
 800bbf2:	f008 f893 	bl	8013d1c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800bbfe:	687d      	ldr	r5, [r7, #4]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	3304      	adds	r3, #4
 800bc04:	687a      	ldr	r2, [r7, #4]
 800bc06:	8ad2      	ldrh	r2, [r2, #22]
 800bc08:	6879      	ldr	r1, [r7, #4]
 800bc0a:	8b09      	ldrh	r1, [r1, #24]
 800bc0c:	9102      	str	r1, [sp, #8]
 800bc0e:	9201      	str	r2, [sp, #4]
 800bc10:	9300      	str	r3, [sp, #0]
 800bc12:	462b      	mov	r3, r5
 800bc14:	4622      	mov	r2, r4
 800bc16:	4601      	mov	r1, r0
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f004 fe8d 	bl	8010938 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f001 f8c8 	bl	800cdb4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bc24:	4b47      	ldr	r3, [pc, #284]	@ (800bd44 <tcp_close_shutdown+0x1b0>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	429a      	cmp	r2, r3
 800bc2c:	d105      	bne.n	800bc3a <tcp_close_shutdown+0xa6>
 800bc2e:	4b45      	ldr	r3, [pc, #276]	@ (800bd44 <tcp_close_shutdown+0x1b0>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	4a43      	ldr	r2, [pc, #268]	@ (800bd44 <tcp_close_shutdown+0x1b0>)
 800bc36:	6013      	str	r3, [r2, #0]
 800bc38:	e013      	b.n	800bc62 <tcp_close_shutdown+0xce>
 800bc3a:	4b42      	ldr	r3, [pc, #264]	@ (800bd44 <tcp_close_shutdown+0x1b0>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	60fb      	str	r3, [r7, #12]
 800bc40:	e00c      	b.n	800bc5c <tcp_close_shutdown+0xc8>
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	68db      	ldr	r3, [r3, #12]
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d104      	bne.n	800bc56 <tcp_close_shutdown+0xc2>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	68da      	ldr	r2, [r3, #12]
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	60da      	str	r2, [r3, #12]
 800bc54:	e005      	b.n	800bc62 <tcp_close_shutdown+0xce>
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	68db      	ldr	r3, [r3, #12]
 800bc5a:	60fb      	str	r3, [r7, #12]
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d1ef      	bne.n	800bc42 <tcp_close_shutdown+0xae>
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2200      	movs	r2, #0
 800bc66:	60da      	str	r2, [r3, #12]
 800bc68:	4b37      	ldr	r3, [pc, #220]	@ (800bd48 <tcp_close_shutdown+0x1b4>)
 800bc6a:	2201      	movs	r2, #1
 800bc6c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800bc6e:	4b37      	ldr	r3, [pc, #220]	@ (800bd4c <tcp_close_shutdown+0x1b8>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	429a      	cmp	r2, r3
 800bc76:	d102      	bne.n	800bc7e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800bc78:	f003 fd5c 	bl	800f734 <tcp_trigger_input_pcb_close>
 800bc7c:	e002      	b.n	800bc84 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f7ff fed6 	bl	800ba30 <tcp_free>
      }
      return ERR_OK;
 800bc84:	2300      	movs	r3, #0
 800bc86:	e050      	b.n	800bd2a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	7d1b      	ldrb	r3, [r3, #20]
 800bc8c:	2b02      	cmp	r3, #2
 800bc8e:	d03b      	beq.n	800bd08 <tcp_close_shutdown+0x174>
 800bc90:	2b02      	cmp	r3, #2
 800bc92:	dc44      	bgt.n	800bd1e <tcp_close_shutdown+0x18a>
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d002      	beq.n	800bc9e <tcp_close_shutdown+0x10a>
 800bc98:	2b01      	cmp	r3, #1
 800bc9a:	d02a      	beq.n	800bcf2 <tcp_close_shutdown+0x15e>
 800bc9c:	e03f      	b.n	800bd1e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	8adb      	ldrh	r3, [r3, #22]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d021      	beq.n	800bcea <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bca6:	4b2a      	ldr	r3, [pc, #168]	@ (800bd50 <tcp_close_shutdown+0x1bc>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	429a      	cmp	r2, r3
 800bcae:	d105      	bne.n	800bcbc <tcp_close_shutdown+0x128>
 800bcb0:	4b27      	ldr	r3, [pc, #156]	@ (800bd50 <tcp_close_shutdown+0x1bc>)
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	68db      	ldr	r3, [r3, #12]
 800bcb6:	4a26      	ldr	r2, [pc, #152]	@ (800bd50 <tcp_close_shutdown+0x1bc>)
 800bcb8:	6013      	str	r3, [r2, #0]
 800bcba:	e013      	b.n	800bce4 <tcp_close_shutdown+0x150>
 800bcbc:	4b24      	ldr	r3, [pc, #144]	@ (800bd50 <tcp_close_shutdown+0x1bc>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	60bb      	str	r3, [r7, #8]
 800bcc2:	e00c      	b.n	800bcde <tcp_close_shutdown+0x14a>
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	68db      	ldr	r3, [r3, #12]
 800bcc8:	687a      	ldr	r2, [r7, #4]
 800bcca:	429a      	cmp	r2, r3
 800bccc:	d104      	bne.n	800bcd8 <tcp_close_shutdown+0x144>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	68da      	ldr	r2, [r3, #12]
 800bcd2:	68bb      	ldr	r3, [r7, #8]
 800bcd4:	60da      	str	r2, [r3, #12]
 800bcd6:	e005      	b.n	800bce4 <tcp_close_shutdown+0x150>
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	68db      	ldr	r3, [r3, #12]
 800bcdc:	60bb      	str	r3, [r7, #8]
 800bcde:	68bb      	ldr	r3, [r7, #8]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d1ef      	bne.n	800bcc4 <tcp_close_shutdown+0x130>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2200      	movs	r2, #0
 800bce8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f7ff fea0 	bl	800ba30 <tcp_free>
      break;
 800bcf0:	e01a      	b.n	800bd28 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f7ff ff14 	bl	800bb20 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800bcf8:	6879      	ldr	r1, [r7, #4]
 800bcfa:	4816      	ldr	r0, [pc, #88]	@ (800bd54 <tcp_close_shutdown+0x1c0>)
 800bcfc:	f001 f8aa 	bl	800ce54 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f7ff feb1 	bl	800ba68 <tcp_free_listen>
      break;
 800bd06:	e00f      	b.n	800bd28 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bd08:	6879      	ldr	r1, [r7, #4]
 800bd0a:	480e      	ldr	r0, [pc, #56]	@ (800bd44 <tcp_close_shutdown+0x1b0>)
 800bd0c:	f001 f8a2 	bl	800ce54 <tcp_pcb_remove>
 800bd10:	4b0d      	ldr	r3, [pc, #52]	@ (800bd48 <tcp_close_shutdown+0x1b4>)
 800bd12:	2201      	movs	r2, #1
 800bd14:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f7ff fe8a 	bl	800ba30 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800bd1c:	e004      	b.n	800bd28 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 f81a 	bl	800bd58 <tcp_close_shutdown_fin>
 800bd24:	4603      	mov	r3, r0
 800bd26:	e000      	b.n	800bd2a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800bd28:	2300      	movs	r3, #0
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3710      	adds	r7, #16
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bdb0      	pop	{r4, r5, r7, pc}
 800bd32:	bf00      	nop
 800bd34:	08015610 	.word	0x08015610
 800bd38:	080156e4 	.word	0x080156e4
 800bd3c:	08015654 	.word	0x08015654
 800bd40:	08015704 	.word	0x08015704
 800bd44:	2000b1b0 	.word	0x2000b1b0
 800bd48:	2000b1b8 	.word	0x2000b1b8
 800bd4c:	2000b1f0 	.word	0x2000b1f0
 800bd50:	2000b1a8 	.word	0x2000b1a8
 800bd54:	2000b1ac 	.word	0x2000b1ac

0800bd58 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b084      	sub	sp, #16
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d106      	bne.n	800bd74 <tcp_close_shutdown_fin+0x1c>
 800bd66:	4b2e      	ldr	r3, [pc, #184]	@ (800be20 <tcp_close_shutdown_fin+0xc8>)
 800bd68:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 800bd6c:	492d      	ldr	r1, [pc, #180]	@ (800be24 <tcp_close_shutdown_fin+0xcc>)
 800bd6e:	482e      	ldr	r0, [pc, #184]	@ (800be28 <tcp_close_shutdown_fin+0xd0>)
 800bd70:	f007 ffd4 	bl	8013d1c <iprintf>

  switch (pcb->state) {
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	7d1b      	ldrb	r3, [r3, #20]
 800bd78:	2b07      	cmp	r3, #7
 800bd7a:	d020      	beq.n	800bdbe <tcp_close_shutdown_fin+0x66>
 800bd7c:	2b07      	cmp	r3, #7
 800bd7e:	dc2b      	bgt.n	800bdd8 <tcp_close_shutdown_fin+0x80>
 800bd80:	2b03      	cmp	r3, #3
 800bd82:	d002      	beq.n	800bd8a <tcp_close_shutdown_fin+0x32>
 800bd84:	2b04      	cmp	r3, #4
 800bd86:	d00d      	beq.n	800bda4 <tcp_close_shutdown_fin+0x4c>
 800bd88:	e026      	b.n	800bdd8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f003 fee2 	bl	800fb54 <tcp_send_fin>
 800bd90:	4603      	mov	r3, r0
 800bd92:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bd94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d11f      	bne.n	800bddc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2205      	movs	r2, #5
 800bda0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bda2:	e01b      	b.n	800bddc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f003 fed5 	bl	800fb54 <tcp_send_fin>
 800bdaa:	4603      	mov	r3, r0
 800bdac:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bdae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d114      	bne.n	800bde0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2205      	movs	r2, #5
 800bdba:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bdbc:	e010      	b.n	800bde0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f003 fec8 	bl	800fb54 <tcp_send_fin>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bdc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d109      	bne.n	800bde4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	2209      	movs	r2, #9
 800bdd4:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bdd6:	e005      	b.n	800bde4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800bdd8:	2300      	movs	r3, #0
 800bdda:	e01c      	b.n	800be16 <tcp_close_shutdown_fin+0xbe>
      break;
 800bddc:	bf00      	nop
 800bdde:	e002      	b.n	800bde6 <tcp_close_shutdown_fin+0x8e>
      break;
 800bde0:	bf00      	nop
 800bde2:	e000      	b.n	800bde6 <tcp_close_shutdown_fin+0x8e>
      break;
 800bde4:	bf00      	nop
  }

  if (err == ERR_OK) {
 800bde6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d103      	bne.n	800bdf6 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f003 ffee 	bl	800fdd0 <tcp_output>
 800bdf4:	e00d      	b.n	800be12 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800bdf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bdfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdfe:	d108      	bne.n	800be12 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	8b5b      	ldrh	r3, [r3, #26]
 800be04:	f043 0308 	orr.w	r3, r3, #8
 800be08:	b29a      	uxth	r2, r3
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800be0e:	2300      	movs	r3, #0
 800be10:	e001      	b.n	800be16 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800be12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be16:	4618      	mov	r0, r3
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	08015610 	.word	0x08015610
 800be24:	080156c0 	.word	0x080156c0
 800be28:	08015654 	.word	0x08015654

0800be2c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b082      	sub	sp, #8
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2b00      	cmp	r3, #0
 800be38:	d109      	bne.n	800be4e <tcp_close+0x22>
 800be3a:	4b0f      	ldr	r3, [pc, #60]	@ (800be78 <tcp_close+0x4c>)
 800be3c:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 800be40:	490e      	ldr	r1, [pc, #56]	@ (800be7c <tcp_close+0x50>)
 800be42:	480f      	ldr	r0, [pc, #60]	@ (800be80 <tcp_close+0x54>)
 800be44:	f007 ff6a 	bl	8013d1c <iprintf>
 800be48:	f06f 030f 	mvn.w	r3, #15
 800be4c:	e00f      	b.n	800be6e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	7d1b      	ldrb	r3, [r3, #20]
 800be52:	2b01      	cmp	r3, #1
 800be54:	d006      	beq.n	800be64 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	8b5b      	ldrh	r3, [r3, #26]
 800be5a:	f043 0310 	orr.w	r3, r3, #16
 800be5e:	b29a      	uxth	r2, r3
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800be64:	2101      	movs	r1, #1
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f7ff fe94 	bl	800bb94 <tcp_close_shutdown>
 800be6c:	4603      	mov	r3, r0
}
 800be6e:	4618      	mov	r0, r3
 800be70:	3708      	adds	r7, #8
 800be72:	46bd      	mov	sp, r7
 800be74:	bd80      	pop	{r7, pc}
 800be76:	bf00      	nop
 800be78:	08015610 	.word	0x08015610
 800be7c:	08015720 	.word	0x08015720
 800be80:	08015654 	.word	0x08015654

0800be84 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800be84:	b580      	push	{r7, lr}
 800be86:	b08e      	sub	sp, #56	@ 0x38
 800be88:	af04      	add	r7, sp, #16
 800be8a:	6078      	str	r0, [r7, #4]
 800be8c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2b00      	cmp	r3, #0
 800be92:	d107      	bne.n	800bea4 <tcp_abandon+0x20>
 800be94:	4b52      	ldr	r3, [pc, #328]	@ (800bfe0 <tcp_abandon+0x15c>)
 800be96:	f240 223d 	movw	r2, #573	@ 0x23d
 800be9a:	4952      	ldr	r1, [pc, #328]	@ (800bfe4 <tcp_abandon+0x160>)
 800be9c:	4852      	ldr	r0, [pc, #328]	@ (800bfe8 <tcp_abandon+0x164>)
 800be9e:	f007 ff3d 	bl	8013d1c <iprintf>
 800bea2:	e099      	b.n	800bfd8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	7d1b      	ldrb	r3, [r3, #20]
 800bea8:	2b01      	cmp	r3, #1
 800beaa:	d106      	bne.n	800beba <tcp_abandon+0x36>
 800beac:	4b4c      	ldr	r3, [pc, #304]	@ (800bfe0 <tcp_abandon+0x15c>)
 800beae:	f44f 7210 	mov.w	r2, #576	@ 0x240
 800beb2:	494e      	ldr	r1, [pc, #312]	@ (800bfec <tcp_abandon+0x168>)
 800beb4:	484c      	ldr	r0, [pc, #304]	@ (800bfe8 <tcp_abandon+0x164>)
 800beb6:	f007 ff31 	bl	8013d1c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	7d1b      	ldrb	r3, [r3, #20]
 800bebe:	2b0a      	cmp	r3, #10
 800bec0:	d107      	bne.n	800bed2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800bec2:	6879      	ldr	r1, [r7, #4]
 800bec4:	484a      	ldr	r0, [pc, #296]	@ (800bff0 <tcp_abandon+0x16c>)
 800bec6:	f000 ffc5 	bl	800ce54 <tcp_pcb_remove>
    tcp_free(pcb);
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f7ff fdb0 	bl	800ba30 <tcp_free>
 800bed0:	e082      	b.n	800bfd8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800bed2:	2300      	movs	r3, #0
 800bed4:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 800bed6:	2300      	movs	r3, #0
 800bed8:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bede:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bee4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800beec:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	691b      	ldr	r3, [r3, #16]
 800bef2:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	7d1b      	ldrb	r3, [r3, #20]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d126      	bne.n	800bf4a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	8adb      	ldrh	r3, [r3, #22]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d02e      	beq.n	800bf62 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bf04:	4b3b      	ldr	r3, [pc, #236]	@ (800bff4 <tcp_abandon+0x170>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	687a      	ldr	r2, [r7, #4]
 800bf0a:	429a      	cmp	r2, r3
 800bf0c:	d105      	bne.n	800bf1a <tcp_abandon+0x96>
 800bf0e:	4b39      	ldr	r3, [pc, #228]	@ (800bff4 <tcp_abandon+0x170>)
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	68db      	ldr	r3, [r3, #12]
 800bf14:	4a37      	ldr	r2, [pc, #220]	@ (800bff4 <tcp_abandon+0x170>)
 800bf16:	6013      	str	r3, [r2, #0]
 800bf18:	e013      	b.n	800bf42 <tcp_abandon+0xbe>
 800bf1a:	4b36      	ldr	r3, [pc, #216]	@ (800bff4 <tcp_abandon+0x170>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	61fb      	str	r3, [r7, #28]
 800bf20:	e00c      	b.n	800bf3c <tcp_abandon+0xb8>
 800bf22:	69fb      	ldr	r3, [r7, #28]
 800bf24:	68db      	ldr	r3, [r3, #12]
 800bf26:	687a      	ldr	r2, [r7, #4]
 800bf28:	429a      	cmp	r2, r3
 800bf2a:	d104      	bne.n	800bf36 <tcp_abandon+0xb2>
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	68da      	ldr	r2, [r3, #12]
 800bf30:	69fb      	ldr	r3, [r7, #28]
 800bf32:	60da      	str	r2, [r3, #12]
 800bf34:	e005      	b.n	800bf42 <tcp_abandon+0xbe>
 800bf36:	69fb      	ldr	r3, [r7, #28]
 800bf38:	68db      	ldr	r3, [r3, #12]
 800bf3a:	61fb      	str	r3, [r7, #28]
 800bf3c:	69fb      	ldr	r3, [r7, #28]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d1ef      	bne.n	800bf22 <tcp_abandon+0x9e>
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2200      	movs	r2, #0
 800bf46:	60da      	str	r2, [r3, #12]
 800bf48:	e00b      	b.n	800bf62 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800bf4a:	683b      	ldr	r3, [r7, #0]
 800bf4c:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	8adb      	ldrh	r3, [r3, #22]
 800bf52:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bf54:	6879      	ldr	r1, [r7, #4]
 800bf56:	4828      	ldr	r0, [pc, #160]	@ (800bff8 <tcp_abandon+0x174>)
 800bf58:	f000 ff7c 	bl	800ce54 <tcp_pcb_remove>
 800bf5c:	4b27      	ldr	r3, [pc, #156]	@ (800bffc <tcp_abandon+0x178>)
 800bf5e:	2201      	movs	r2, #1
 800bf60:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d004      	beq.n	800bf74 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f000 fd1e 	bl	800c9b0 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d004      	beq.n	800bf86 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800bf80:	4618      	mov	r0, r3
 800bf82:	f000 fd15 	bl	800c9b0 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d004      	beq.n	800bf98 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bf92:	4618      	mov	r0, r3
 800bf94:	f000 fd0c 	bl	800c9b0 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800bf98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d00e      	beq.n	800bfbc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800bf9e:	6879      	ldr	r1, [r7, #4]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	3304      	adds	r3, #4
 800bfa4:	687a      	ldr	r2, [r7, #4]
 800bfa6:	8b12      	ldrh	r2, [r2, #24]
 800bfa8:	9202      	str	r2, [sp, #8]
 800bfaa:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800bfac:	9201      	str	r2, [sp, #4]
 800bfae:	9300      	str	r3, [sp, #0]
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	697a      	ldr	r2, [r7, #20]
 800bfb4:	69b9      	ldr	r1, [r7, #24]
 800bfb6:	6878      	ldr	r0, [r7, #4]
 800bfb8:	f004 fcbe 	bl	8010938 <tcp_rst>
    }
    last_state = pcb->state;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	7d1b      	ldrb	r3, [r3, #20]
 800bfc0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800bfc2:	6878      	ldr	r0, [r7, #4]
 800bfc4:	f7ff fd34 	bl	800ba30 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d004      	beq.n	800bfd8 <tcp_abandon+0x154>
 800bfce:	693b      	ldr	r3, [r7, #16]
 800bfd0:	f06f 010c 	mvn.w	r1, #12
 800bfd4:	68f8      	ldr	r0, [r7, #12]
 800bfd6:	4798      	blx	r3
  }
}
 800bfd8:	3728      	adds	r7, #40	@ 0x28
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}
 800bfde:	bf00      	nop
 800bfe0:	08015610 	.word	0x08015610
 800bfe4:	08015754 	.word	0x08015754
 800bfe8:	08015654 	.word	0x08015654
 800bfec:	08015770 	.word	0x08015770
 800bff0:	2000b1b4 	.word	0x2000b1b4
 800bff4:	2000b1a8 	.word	0x2000b1a8
 800bff8:	2000b1b0 	.word	0x2000b1b0
 800bffc:	2000b1b8 	.word	0x2000b1b8

0800c000 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c000:	b580      	push	{r7, lr}
 800c002:	b082      	sub	sp, #8
 800c004:	af00      	add	r7, sp, #0
 800c006:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c008:	2101      	movs	r1, #1
 800c00a:	6878      	ldr	r0, [r7, #4]
 800c00c:	f7ff ff3a 	bl	800be84 <tcp_abandon>
}
 800c010:	bf00      	nop
 800c012:	3708      	adds	r7, #8
 800c014:	46bd      	mov	sp, r7
 800c016:	bd80      	pop	{r7, pc}

0800c018 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b084      	sub	sp, #16
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d106      	bne.n	800c034 <tcp_update_rcv_ann_wnd+0x1c>
 800c026:	4b25      	ldr	r3, [pc, #148]	@ (800c0bc <tcp_update_rcv_ann_wnd+0xa4>)
 800c028:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800c02c:	4924      	ldr	r1, [pc, #144]	@ (800c0c0 <tcp_update_rcv_ann_wnd+0xa8>)
 800c02e:	4825      	ldr	r0, [pc, #148]	@ (800c0c4 <tcp_update_rcv_ann_wnd+0xac>)
 800c030:	f007 fe74 	bl	8013d1c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c038:	687a      	ldr	r2, [r7, #4]
 800c03a:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800c03c:	4413      	add	r3, r2
 800c03e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c044:	687a      	ldr	r2, [r7, #4]
 800c046:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 800c048:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 800c04c:	bf28      	it	cs
 800c04e:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 800c052:	b292      	uxth	r2, r2
 800c054:	4413      	add	r3, r2
 800c056:	68fa      	ldr	r2, [r7, #12]
 800c058:	1ad3      	subs	r3, r2, r3
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	db08      	blt.n	800c070 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c06a:	68fa      	ldr	r2, [r7, #12]
 800c06c:	1ad3      	subs	r3, r2, r3
 800c06e:	e020      	b.n	800c0b2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c078:	1ad3      	subs	r3, r2, r3
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	dd03      	ble.n	800c086 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2200      	movs	r2, #0
 800c082:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c084:	e014      	b.n	800c0b0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c08e:	1ad3      	subs	r3, r2, r3
 800c090:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c098:	d306      	bcc.n	800c0a8 <tcp_update_rcv_ann_wnd+0x90>
 800c09a:	4b08      	ldr	r3, [pc, #32]	@ (800c0bc <tcp_update_rcv_ann_wnd+0xa4>)
 800c09c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 800c0a0:	4909      	ldr	r1, [pc, #36]	@ (800c0c8 <tcp_update_rcv_ann_wnd+0xb0>)
 800c0a2:	4808      	ldr	r0, [pc, #32]	@ (800c0c4 <tcp_update_rcv_ann_wnd+0xac>)
 800c0a4:	f007 fe3a 	bl	8013d1c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	b29a      	uxth	r2, r3
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 800c0b0:	2300      	movs	r3, #0
  }
}
 800c0b2:	4618      	mov	r0, r3
 800c0b4:	3710      	adds	r7, #16
 800c0b6:	46bd      	mov	sp, r7
 800c0b8:	bd80      	pop	{r7, pc}
 800c0ba:	bf00      	nop
 800c0bc:	08015610 	.word	0x08015610
 800c0c0:	0801586c 	.word	0x0801586c
 800c0c4:	08015654 	.word	0x08015654
 800c0c8:	08015890 	.word	0x08015890

0800c0cc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b084      	sub	sp, #16
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d107      	bne.n	800c0ee <tcp_recved+0x22>
 800c0de:	4b1f      	ldr	r3, [pc, #124]	@ (800c15c <tcp_recved+0x90>)
 800c0e0:	f240 32cf 	movw	r2, #975	@ 0x3cf
 800c0e4:	491e      	ldr	r1, [pc, #120]	@ (800c160 <tcp_recved+0x94>)
 800c0e6:	481f      	ldr	r0, [pc, #124]	@ (800c164 <tcp_recved+0x98>)
 800c0e8:	f007 fe18 	bl	8013d1c <iprintf>
 800c0ec:	e032      	b.n	800c154 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	7d1b      	ldrb	r3, [r3, #20]
 800c0f2:	2b01      	cmp	r3, #1
 800c0f4:	d106      	bne.n	800c104 <tcp_recved+0x38>
 800c0f6:	4b19      	ldr	r3, [pc, #100]	@ (800c15c <tcp_recved+0x90>)
 800c0f8:	f240 32d2 	movw	r2, #978	@ 0x3d2
 800c0fc:	491a      	ldr	r1, [pc, #104]	@ (800c168 <tcp_recved+0x9c>)
 800c0fe:	4819      	ldr	r0, [pc, #100]	@ (800c164 <tcp_recved+0x98>)
 800c100:	f007 fe0c 	bl	8013d1c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800c108:	887b      	ldrh	r3, [r7, #2]
 800c10a:	4413      	add	r3, r2
 800c10c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c10e:	89fb      	ldrh	r3, [r7, #14]
 800c110:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c114:	d804      	bhi.n	800c120 <tcp_recved+0x54>
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c11a:	89fa      	ldrh	r2, [r7, #14]
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d204      	bcs.n	800c12a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800c126:	851a      	strh	r2, [r3, #40]	@ 0x28
 800c128:	e002      	b.n	800c130 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	89fa      	ldrh	r2, [r7, #14]
 800c12e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f7ff ff71 	bl	800c018 <tcp_update_rcv_ann_wnd>
 800c136:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c138:	68bb      	ldr	r3, [r7, #8]
 800c13a:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800c13e:	d309      	bcc.n	800c154 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	8b5b      	ldrh	r3, [r3, #26]
 800c144:	f043 0302 	orr.w	r3, r3, #2
 800c148:	b29a      	uxth	r2, r3
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c14e:	6878      	ldr	r0, [r7, #4]
 800c150:	f003 fe3e 	bl	800fdd0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c154:	3710      	adds	r7, #16
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}
 800c15a:	bf00      	nop
 800c15c:	08015610 	.word	0x08015610
 800c160:	080158ac 	.word	0x080158ac
 800c164:	08015654 	.word	0x08015654
 800c168:	080158c4 	.word	0x080158c4

0800c16c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c16c:	b5b0      	push	{r4, r5, r7, lr}
 800c16e:	b090      	sub	sp, #64	@ 0x40
 800c170:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c172:	2300      	movs	r3, #0
 800c174:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 800c178:	4b95      	ldr	r3, [pc, #596]	@ (800c3d0 <tcp_slowtmr+0x264>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	3301      	adds	r3, #1
 800c17e:	4a94      	ldr	r2, [pc, #592]	@ (800c3d0 <tcp_slowtmr+0x264>)
 800c180:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c182:	4b94      	ldr	r3, [pc, #592]	@ (800c3d4 <tcp_slowtmr+0x268>)
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	3301      	adds	r3, #1
 800c188:	b2da      	uxtb	r2, r3
 800c18a:	4b92      	ldr	r3, [pc, #584]	@ (800c3d4 <tcp_slowtmr+0x268>)
 800c18c:	701a      	strb	r2, [r3, #0]
 800c18e:	e000      	b.n	800c192 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 800c190:	bf00      	nop
  prev = NULL;
 800c192:	2300      	movs	r3, #0
 800c194:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 800c196:	4b90      	ldr	r3, [pc, #576]	@ (800c3d8 <tcp_slowtmr+0x26c>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800c19c:	e29f      	b.n	800c6de <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c19e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1a0:	7d1b      	ldrb	r3, [r3, #20]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d106      	bne.n	800c1b4 <tcp_slowtmr+0x48>
 800c1a6:	4b8d      	ldr	r3, [pc, #564]	@ (800c3dc <tcp_slowtmr+0x270>)
 800c1a8:	f240 42be 	movw	r2, #1214	@ 0x4be
 800c1ac:	498c      	ldr	r1, [pc, #560]	@ (800c3e0 <tcp_slowtmr+0x274>)
 800c1ae:	488d      	ldr	r0, [pc, #564]	@ (800c3e4 <tcp_slowtmr+0x278>)
 800c1b0:	f007 fdb4 	bl	8013d1c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c1b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1b6:	7d1b      	ldrb	r3, [r3, #20]
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d106      	bne.n	800c1ca <tcp_slowtmr+0x5e>
 800c1bc:	4b87      	ldr	r3, [pc, #540]	@ (800c3dc <tcp_slowtmr+0x270>)
 800c1be:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 800c1c2:	4989      	ldr	r1, [pc, #548]	@ (800c3e8 <tcp_slowtmr+0x27c>)
 800c1c4:	4887      	ldr	r0, [pc, #540]	@ (800c3e4 <tcp_slowtmr+0x278>)
 800c1c6:	f007 fda9 	bl	8013d1c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c1ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1cc:	7d1b      	ldrb	r3, [r3, #20]
 800c1ce:	2b0a      	cmp	r3, #10
 800c1d0:	d106      	bne.n	800c1e0 <tcp_slowtmr+0x74>
 800c1d2:	4b82      	ldr	r3, [pc, #520]	@ (800c3dc <tcp_slowtmr+0x270>)
 800c1d4:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 800c1d8:	4984      	ldr	r1, [pc, #528]	@ (800c3ec <tcp_slowtmr+0x280>)
 800c1da:	4882      	ldr	r0, [pc, #520]	@ (800c3e4 <tcp_slowtmr+0x278>)
 800c1dc:	f007 fd9e 	bl	8013d1c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c1e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1e2:	7f9a      	ldrb	r2, [r3, #30]
 800c1e4:	4b7b      	ldr	r3, [pc, #492]	@ (800c3d4 <tcp_slowtmr+0x268>)
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	429a      	cmp	r2, r3
 800c1ea:	d105      	bne.n	800c1f8 <tcp_slowtmr+0x8c>
      prev = pcb;
 800c1ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800c1f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1f2:	68db      	ldr	r3, [r3, #12]
 800c1f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 800c1f6:	e272      	b.n	800c6de <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 800c1f8:	4b76      	ldr	r3, [pc, #472]	@ (800c3d4 <tcp_slowtmr+0x268>)
 800c1fa:	781a      	ldrb	r2, [r3, #0]
 800c1fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1fe:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 800c200:	2300      	movs	r3, #0
 800c202:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 800c206:	2300      	movs	r3, #0
 800c208:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c20c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c20e:	7d1b      	ldrb	r3, [r3, #20]
 800c210:	2b02      	cmp	r3, #2
 800c212:	d10a      	bne.n	800c22a <tcp_slowtmr+0xbe>
 800c214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c216:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c21a:	2b05      	cmp	r3, #5
 800c21c:	d905      	bls.n	800c22a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800c21e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c222:	3301      	adds	r3, #1
 800c224:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c228:	e11e      	b.n	800c468 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c22a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c22c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c230:	2b0b      	cmp	r3, #11
 800c232:	d905      	bls.n	800c240 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 800c234:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c238:	3301      	adds	r3, #1
 800c23a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c23e:	e113      	b.n	800c468 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 800c240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c242:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c246:	2b00      	cmp	r3, #0
 800c248:	d075      	beq.n	800c336 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c24a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c24c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c24e:	2b00      	cmp	r3, #0
 800c250:	d006      	beq.n	800c260 <tcp_slowtmr+0xf4>
 800c252:	4b62      	ldr	r3, [pc, #392]	@ (800c3dc <tcp_slowtmr+0x270>)
 800c254:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 800c258:	4965      	ldr	r1, [pc, #404]	@ (800c3f0 <tcp_slowtmr+0x284>)
 800c25a:	4862      	ldr	r0, [pc, #392]	@ (800c3e4 <tcp_slowtmr+0x278>)
 800c25c:	f007 fd5e 	bl	8013d1c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c262:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c264:	2b00      	cmp	r3, #0
 800c266:	d106      	bne.n	800c276 <tcp_slowtmr+0x10a>
 800c268:	4b5c      	ldr	r3, [pc, #368]	@ (800c3dc <tcp_slowtmr+0x270>)
 800c26a:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 800c26e:	4961      	ldr	r1, [pc, #388]	@ (800c3f4 <tcp_slowtmr+0x288>)
 800c270:	485c      	ldr	r0, [pc, #368]	@ (800c3e4 <tcp_slowtmr+0x278>)
 800c272:	f007 fd53 	bl	8013d1c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c278:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 800c27c:	2b0b      	cmp	r3, #11
 800c27e:	d905      	bls.n	800c28c <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 800c280:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c284:	3301      	adds	r3, #1
 800c286:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c28a:	e0ed      	b.n	800c468 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c28c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c28e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c292:	3b01      	subs	r3, #1
 800c294:	4a58      	ldr	r2, [pc, #352]	@ (800c3f8 <tcp_slowtmr+0x28c>)
 800c296:	5cd3      	ldrb	r3, [r2, r3]
 800c298:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c29a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c29c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c2a0:	7c7a      	ldrb	r2, [r7, #17]
 800c2a2:	429a      	cmp	r2, r3
 800c2a4:	d907      	bls.n	800c2b6 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 800c2a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2a8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	b2da      	uxtb	r2, r3
 800c2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2b2:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 800c2b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2b8:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 800c2bc:	7c7a      	ldrb	r2, [r7, #17]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	f200 80d2 	bhi.w	800c468 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 800c2c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d108      	bne.n	800c2e4 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c2d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c2d4:	f004 fc24 	bl	8010b20 <tcp_zero_window_probe>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d014      	beq.n	800c308 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 800c2de:	2300      	movs	r3, #0
 800c2e0:	623b      	str	r3, [r7, #32]
 800c2e2:	e011      	b.n	800c308 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c2e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c2e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c2ee:	f003 fae9 	bl	800f8c4 <tcp_split_unsent_seg>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d107      	bne.n	800c308 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 800c2f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c2fa:	f003 fd69 	bl	800fdd0 <tcp_output>
 800c2fe:	4603      	mov	r3, r0
 800c300:	2b00      	cmp	r3, #0
 800c302:	d101      	bne.n	800c308 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 800c304:	2300      	movs	r3, #0
 800c306:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 800c308:	6a3b      	ldr	r3, [r7, #32]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	f000 80ac 	beq.w	800c468 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 800c310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c312:	2200      	movs	r2, #0
 800c314:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c31a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c31e:	2b06      	cmp	r3, #6
 800c320:	f200 80a2 	bhi.w	800c468 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 800c324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c326:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800c32a:	3301      	adds	r3, #1
 800c32c:	b2da      	uxtb	r2, r3
 800c32e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c330:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 800c334:	e098      	b.n	800c468 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c338:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	db0f      	blt.n	800c360 <tcp_slowtmr+0x1f4>
 800c340:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c342:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c346:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c34a:	4293      	cmp	r3, r2
 800c34c:	d008      	beq.n	800c360 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 800c34e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c350:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800c354:	b29b      	uxth	r3, r3
 800c356:	3301      	adds	r3, #1
 800c358:	b29b      	uxth	r3, r3
 800c35a:	b21a      	sxth	r2, r3
 800c35c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c35e:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 800c360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c362:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 800c366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c368:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800c36c:	429a      	cmp	r2, r3
 800c36e:	db7b      	blt.n	800c468 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c370:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c372:	f004 f821 	bl	80103b8 <tcp_rexmit_rto_prepare>
 800c376:	4603      	mov	r3, r0
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d007      	beq.n	800c38c <tcp_slowtmr+0x220>
 800c37c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c37e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c380:	2b00      	cmp	r3, #0
 800c382:	d171      	bne.n	800c468 <tcp_slowtmr+0x2fc>
 800c384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c386:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d06d      	beq.n	800c468 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 800c38c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c38e:	7d1b      	ldrb	r3, [r3, #20]
 800c390:	2b02      	cmp	r3, #2
 800c392:	d03a      	beq.n	800c40a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c394:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c396:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c39a:	2b0c      	cmp	r3, #12
 800c39c:	bf28      	it	cs
 800c39e:	230c      	movcs	r3, #12
 800c3a0:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c3a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800c3a8:	10db      	asrs	r3, r3, #3
 800c3aa:	b21b      	sxth	r3, r3
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c3b0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800c3b4:	4413      	add	r3, r2
 800c3b6:	7efa      	ldrb	r2, [r7, #27]
 800c3b8:	4910      	ldr	r1, [pc, #64]	@ (800c3fc <tcp_slowtmr+0x290>)
 800c3ba:	5c8a      	ldrb	r2, [r1, r2]
 800c3bc:	4093      	lsls	r3, r2
 800c3be:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	dc1a      	bgt.n	800c400 <tcp_slowtmr+0x294>
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	b21a      	sxth	r2, r3
 800c3ce:	e019      	b.n	800c404 <tcp_slowtmr+0x298>
 800c3d0:	2000b1a4 	.word	0x2000b1a4
 800c3d4:	2000b1ba 	.word	0x2000b1ba
 800c3d8:	2000b1b0 	.word	0x2000b1b0
 800c3dc:	08015610 	.word	0x08015610
 800c3e0:	08015954 	.word	0x08015954
 800c3e4:	08015654 	.word	0x08015654
 800c3e8:	08015980 	.word	0x08015980
 800c3ec:	080159ac 	.word	0x080159ac
 800c3f0:	080159dc 	.word	0x080159dc
 800c3f4:	08015a10 	.word	0x08015a10
 800c3f8:	080175f0 	.word	0x080175f0
 800c3fc:	080175e0 	.word	0x080175e0
 800c400:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800c404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c406:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 800c40a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c40c:	2200      	movs	r2, #0
 800c40e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c412:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800c416:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c418:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800c41c:	4293      	cmp	r3, r2
 800c41e:	bf28      	it	cs
 800c420:	4613      	movcs	r3, r2
 800c422:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c424:	8a7b      	ldrh	r3, [r7, #18]
 800c426:	085b      	lsrs	r3, r3, #1
 800c428:	b29a      	uxth	r2, r3
 800c42a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c42c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c432:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800c436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c438:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c43a:	005b      	lsls	r3, r3, #1
 800c43c:	b29b      	uxth	r3, r3
 800c43e:	429a      	cmp	r2, r3
 800c440:	d206      	bcs.n	800c450 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c442:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c444:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800c446:	005b      	lsls	r3, r3, #1
 800c448:	b29a      	uxth	r2, r3
 800c44a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c44c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 800c450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c452:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 800c454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c456:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 800c45a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c45c:	2200      	movs	r2, #0
 800c45e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 800c462:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c464:	f004 f818 	bl	8010498 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 800c468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c46a:	7d1b      	ldrb	r3, [r3, #20]
 800c46c:	2b06      	cmp	r3, #6
 800c46e:	d111      	bne.n	800c494 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 800c470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c472:	8b5b      	ldrh	r3, [r3, #26]
 800c474:	f003 0310 	and.w	r3, r3, #16
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d00b      	beq.n	800c494 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c47c:	4b9d      	ldr	r3, [pc, #628]	@ (800c6f4 <tcp_slowtmr+0x588>)
 800c47e:	681a      	ldr	r2, [r3, #0]
 800c480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c482:	6a1b      	ldr	r3, [r3, #32]
 800c484:	1ad3      	subs	r3, r2, r3
 800c486:	2b28      	cmp	r3, #40	@ 0x28
 800c488:	d904      	bls.n	800c494 <tcp_slowtmr+0x328>
          ++pcb_remove;
 800c48a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c48e:	3301      	adds	r3, #1
 800c490:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c496:	7a5b      	ldrb	r3, [r3, #9]
 800c498:	f003 0308 	and.w	r3, r3, #8
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d04c      	beq.n	800c53a <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 800c4a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4a2:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c4a4:	2b04      	cmp	r3, #4
 800c4a6:	d003      	beq.n	800c4b0 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 800c4a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4aa:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c4ac:	2b07      	cmp	r3, #7
 800c4ae:	d144      	bne.n	800c53a <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c4b0:	4b90      	ldr	r3, [pc, #576]	@ (800c6f4 <tcp_slowtmr+0x588>)
 800c4b2:	681a      	ldr	r2, [r3, #0]
 800c4b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4b6:	6a1b      	ldr	r3, [r3, #32]
 800c4b8:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c4ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c4c0:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 800c4c4:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 800c4c8:	498b      	ldr	r1, [pc, #556]	@ (800c6f8 <tcp_slowtmr+0x58c>)
 800c4ca:	fba1 1303 	umull	r1, r3, r1, r3
 800c4ce:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d90a      	bls.n	800c4ea <tcp_slowtmr+0x37e>
        ++pcb_remove;
 800c4d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c4d8:	3301      	adds	r3, #1
 800c4da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 800c4de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c4e2:	3301      	adds	r3, #1
 800c4e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800c4e8:	e027      	b.n	800c53a <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c4ea:	4b82      	ldr	r3, [pc, #520]	@ (800c6f4 <tcp_slowtmr+0x588>)
 800c4ec:	681a      	ldr	r2, [r3, #0]
 800c4ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4f0:	6a1b      	ldr	r3, [r3, #32]
 800c4f2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c4f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4f6:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 800c4fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c4fc:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800c500:	4618      	mov	r0, r3
 800c502:	4b7e      	ldr	r3, [pc, #504]	@ (800c6fc <tcp_slowtmr+0x590>)
 800c504:	fb00 f303 	mul.w	r3, r0, r3
 800c508:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c50a:	497b      	ldr	r1, [pc, #492]	@ (800c6f8 <tcp_slowtmr+0x58c>)
 800c50c:	fba1 1303 	umull	r1, r3, r1, r3
 800c510:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c512:	429a      	cmp	r2, r3
 800c514:	d911      	bls.n	800c53a <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 800c516:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c518:	f004 fac2 	bl	8010aa0 <tcp_keepalive>
 800c51c:	4603      	mov	r3, r0
 800c51e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 800c522:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800c526:	2b00      	cmp	r3, #0
 800c528:	d107      	bne.n	800c53a <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 800c52a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c52c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 800c530:	3301      	adds	r3, #1
 800c532:	b2da      	uxtb	r2, r3
 800c534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c536:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 800c53a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c53c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d011      	beq.n	800c566 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c542:	4b6c      	ldr	r3, [pc, #432]	@ (800c6f4 <tcp_slowtmr+0x588>)
 800c544:	681a      	ldr	r2, [r3, #0]
 800c546:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c548:	6a1b      	ldr	r3, [r3, #32]
 800c54a:	1ad2      	subs	r2, r2, r3
 800c54c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c54e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 800c552:	4619      	mov	r1, r3
 800c554:	460b      	mov	r3, r1
 800c556:	005b      	lsls	r3, r3, #1
 800c558:	440b      	add	r3, r1
 800c55a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d302      	bcc.n	800c566 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 800c560:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c562:	f000 fddb 	bl	800d11c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 800c566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c568:	7d1b      	ldrb	r3, [r3, #20]
 800c56a:	2b03      	cmp	r3, #3
 800c56c:	d10b      	bne.n	800c586 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c56e:	4b61      	ldr	r3, [pc, #388]	@ (800c6f4 <tcp_slowtmr+0x588>)
 800c570:	681a      	ldr	r2, [r3, #0]
 800c572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c574:	6a1b      	ldr	r3, [r3, #32]
 800c576:	1ad3      	subs	r3, r2, r3
 800c578:	2b28      	cmp	r3, #40	@ 0x28
 800c57a:	d904      	bls.n	800c586 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 800c57c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c580:	3301      	adds	r3, #1
 800c582:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 800c586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c588:	7d1b      	ldrb	r3, [r3, #20]
 800c58a:	2b09      	cmp	r3, #9
 800c58c:	d10b      	bne.n	800c5a6 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c58e:	4b59      	ldr	r3, [pc, #356]	@ (800c6f4 <tcp_slowtmr+0x588>)
 800c590:	681a      	ldr	r2, [r3, #0]
 800c592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c594:	6a1b      	ldr	r3, [r3, #32]
 800c596:	1ad3      	subs	r3, r2, r3
 800c598:	2bf0      	cmp	r3, #240	@ 0xf0
 800c59a:	d904      	bls.n	800c5a6 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 800c59c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c5a0:	3301      	adds	r3, #1
 800c5a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 800c5a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d060      	beq.n	800c670 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 800c5ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5b4:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 800c5b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c5b8:	f000 fbfc 	bl	800cdb4 <tcp_pcb_purge>
      if (prev != NULL) {
 800c5bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d010      	beq.n	800c5e4 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c5c2:	4b4f      	ldr	r3, [pc, #316]	@ (800c700 <tcp_slowtmr+0x594>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d106      	bne.n	800c5da <tcp_slowtmr+0x46e>
 800c5cc:	4b4d      	ldr	r3, [pc, #308]	@ (800c704 <tcp_slowtmr+0x598>)
 800c5ce:	f240 526d 	movw	r2, #1389	@ 0x56d
 800c5d2:	494d      	ldr	r1, [pc, #308]	@ (800c708 <tcp_slowtmr+0x59c>)
 800c5d4:	484d      	ldr	r0, [pc, #308]	@ (800c70c <tcp_slowtmr+0x5a0>)
 800c5d6:	f007 fba1 	bl	8013d1c <iprintf>
        prev->next = pcb->next;
 800c5da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5dc:	68da      	ldr	r2, [r3, #12]
 800c5de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5e0:	60da      	str	r2, [r3, #12]
 800c5e2:	e00f      	b.n	800c604 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c5e4:	4b46      	ldr	r3, [pc, #280]	@ (800c700 <tcp_slowtmr+0x594>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c5ea:	429a      	cmp	r2, r3
 800c5ec:	d006      	beq.n	800c5fc <tcp_slowtmr+0x490>
 800c5ee:	4b45      	ldr	r3, [pc, #276]	@ (800c704 <tcp_slowtmr+0x598>)
 800c5f0:	f240 5271 	movw	r2, #1393	@ 0x571
 800c5f4:	4946      	ldr	r1, [pc, #280]	@ (800c710 <tcp_slowtmr+0x5a4>)
 800c5f6:	4845      	ldr	r0, [pc, #276]	@ (800c70c <tcp_slowtmr+0x5a0>)
 800c5f8:	f007 fb90 	bl	8013d1c <iprintf>
        tcp_active_pcbs = pcb->next;
 800c5fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c5fe:	68db      	ldr	r3, [r3, #12]
 800c600:	4a3f      	ldr	r2, [pc, #252]	@ (800c700 <tcp_slowtmr+0x594>)
 800c602:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 800c604:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d013      	beq.n	800c634 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c60c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c60e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 800c610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c612:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c614:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 800c616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c618:	3304      	adds	r3, #4
 800c61a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c61c:	8ad2      	ldrh	r2, [r2, #22]
 800c61e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c620:	8b09      	ldrh	r1, [r1, #24]
 800c622:	9102      	str	r1, [sp, #8]
 800c624:	9201      	str	r2, [sp, #4]
 800c626:	9300      	str	r3, [sp, #0]
 800c628:	462b      	mov	r3, r5
 800c62a:	4622      	mov	r2, r4
 800c62c:	4601      	mov	r1, r0
 800c62e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c630:	f004 f982 	bl	8010938 <tcp_rst>
      err_arg = pcb->callback_arg;
 800c634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c636:	691b      	ldr	r3, [r3, #16]
 800c638:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c63a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c63c:	7d1b      	ldrb	r3, [r3, #20]
 800c63e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c642:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c646:	68db      	ldr	r3, [r3, #12]
 800c648:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800c64a:	6838      	ldr	r0, [r7, #0]
 800c64c:	f7ff f9f0 	bl	800ba30 <tcp_free>
      tcp_active_pcbs_changed = 0;
 800c650:	4b30      	ldr	r3, [pc, #192]	@ (800c714 <tcp_slowtmr+0x5a8>)
 800c652:	2200      	movs	r2, #0
 800c654:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d004      	beq.n	800c666 <tcp_slowtmr+0x4fa>
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	f06f 010c 	mvn.w	r1, #12
 800c662:	68b8      	ldr	r0, [r7, #8]
 800c664:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c666:	4b2b      	ldr	r3, [pc, #172]	@ (800c714 <tcp_slowtmr+0x5a8>)
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d037      	beq.n	800c6de <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 800c66e:	e590      	b.n	800c192 <tcp_slowtmr+0x26>
      prev = pcb;
 800c670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c672:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800c674:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c676:	68db      	ldr	r3, [r3, #12]
 800c678:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 800c67a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c67c:	7f1b      	ldrb	r3, [r3, #28]
 800c67e:	3301      	adds	r3, #1
 800c680:	b2da      	uxtb	r2, r3
 800c682:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c684:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c688:	7f1a      	ldrb	r2, [r3, #28]
 800c68a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c68c:	7f5b      	ldrb	r3, [r3, #29]
 800c68e:	429a      	cmp	r2, r3
 800c690:	d325      	bcc.n	800c6de <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 800c692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c694:	2200      	movs	r2, #0
 800c696:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 800c698:	4b1e      	ldr	r3, [pc, #120]	@ (800c714 <tcp_slowtmr+0x5a8>)
 800c69a:	2200      	movs	r2, #0
 800c69c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c69e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d00b      	beq.n	800c6c0 <tcp_slowtmr+0x554>
 800c6a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c6aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800c6ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c6b0:	6912      	ldr	r2, [r2, #16]
 800c6b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c6b4:	4610      	mov	r0, r2
 800c6b6:	4798      	blx	r3
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 800c6be:	e002      	b.n	800c6c6 <tcp_slowtmr+0x55a>
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 800c6c6:	4b13      	ldr	r3, [pc, #76]	@ (800c714 <tcp_slowtmr+0x5a8>)
 800c6c8:	781b      	ldrb	r3, [r3, #0]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	f47f ad60 	bne.w	800c190 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c6d0:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d102      	bne.n	800c6de <tcp_slowtmr+0x572>
          tcp_output(prev);
 800c6d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6da:	f003 fb79 	bl	800fdd0 <tcp_output>
  while (pcb != NULL) {
 800c6de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	f47f ad5c 	bne.w	800c19e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 800c6ea:	4b0b      	ldr	r3, [pc, #44]	@ (800c718 <tcp_slowtmr+0x5ac>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800c6f0:	e067      	b.n	800c7c2 <tcp_slowtmr+0x656>
 800c6f2:	bf00      	nop
 800c6f4:	2000b1a4 	.word	0x2000b1a4
 800c6f8:	10624dd3 	.word	0x10624dd3
 800c6fc:	000124f8 	.word	0x000124f8
 800c700:	2000b1b0 	.word	0x2000b1b0
 800c704:	08015610 	.word	0x08015610
 800c708:	08015a48 	.word	0x08015a48
 800c70c:	08015654 	.word	0x08015654
 800c710:	08015a74 	.word	0x08015a74
 800c714:	2000b1b8 	.word	0x2000b1b8
 800c718:	2000b1b4 	.word	0x2000b1b4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c71c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c71e:	7d1b      	ldrb	r3, [r3, #20]
 800c720:	2b0a      	cmp	r3, #10
 800c722:	d006      	beq.n	800c732 <tcp_slowtmr+0x5c6>
 800c724:	4b2b      	ldr	r3, [pc, #172]	@ (800c7d4 <tcp_slowtmr+0x668>)
 800c726:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 800c72a:	492b      	ldr	r1, [pc, #172]	@ (800c7d8 <tcp_slowtmr+0x66c>)
 800c72c:	482b      	ldr	r0, [pc, #172]	@ (800c7dc <tcp_slowtmr+0x670>)
 800c72e:	f007 faf5 	bl	8013d1c <iprintf>
    pcb_remove = 0;
 800c732:	2300      	movs	r3, #0
 800c734:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c738:	4b29      	ldr	r3, [pc, #164]	@ (800c7e0 <tcp_slowtmr+0x674>)
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c73e:	6a1b      	ldr	r3, [r3, #32]
 800c740:	1ad3      	subs	r3, r2, r3
 800c742:	2bf0      	cmp	r3, #240	@ 0xf0
 800c744:	d904      	bls.n	800c750 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 800c746:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c74a:	3301      	adds	r3, #1
 800c74c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c750:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c754:	2b00      	cmp	r3, #0
 800c756:	d02f      	beq.n	800c7b8 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c758:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800c75a:	f000 fb2b 	bl	800cdb4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c75e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c760:	2b00      	cmp	r3, #0
 800c762:	d010      	beq.n	800c786 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c764:	4b1f      	ldr	r3, [pc, #124]	@ (800c7e4 <tcp_slowtmr+0x678>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c76a:	429a      	cmp	r2, r3
 800c76c:	d106      	bne.n	800c77c <tcp_slowtmr+0x610>
 800c76e:	4b19      	ldr	r3, [pc, #100]	@ (800c7d4 <tcp_slowtmr+0x668>)
 800c770:	f240 52af 	movw	r2, #1455	@ 0x5af
 800c774:	491c      	ldr	r1, [pc, #112]	@ (800c7e8 <tcp_slowtmr+0x67c>)
 800c776:	4819      	ldr	r0, [pc, #100]	@ (800c7dc <tcp_slowtmr+0x670>)
 800c778:	f007 fad0 	bl	8013d1c <iprintf>
        prev->next = pcb->next;
 800c77c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c77e:	68da      	ldr	r2, [r3, #12]
 800c780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c782:	60da      	str	r2, [r3, #12]
 800c784:	e00f      	b.n	800c7a6 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c786:	4b17      	ldr	r3, [pc, #92]	@ (800c7e4 <tcp_slowtmr+0x678>)
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c78c:	429a      	cmp	r2, r3
 800c78e:	d006      	beq.n	800c79e <tcp_slowtmr+0x632>
 800c790:	4b10      	ldr	r3, [pc, #64]	@ (800c7d4 <tcp_slowtmr+0x668>)
 800c792:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 800c796:	4915      	ldr	r1, [pc, #84]	@ (800c7ec <tcp_slowtmr+0x680>)
 800c798:	4810      	ldr	r0, [pc, #64]	@ (800c7dc <tcp_slowtmr+0x670>)
 800c79a:	f007 fabf 	bl	8013d1c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c79e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7a0:	68db      	ldr	r3, [r3, #12]
 800c7a2:	4a10      	ldr	r2, [pc, #64]	@ (800c7e4 <tcp_slowtmr+0x678>)
 800c7a4:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c7a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7a8:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c7aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7ac:	68db      	ldr	r3, [r3, #12]
 800c7ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 800c7b0:	69f8      	ldr	r0, [r7, #28]
 800c7b2:	f7ff f93d 	bl	800ba30 <tcp_free>
 800c7b6:	e004      	b.n	800c7c2 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 800c7b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 800c7bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7be:	68db      	ldr	r3, [r3, #12]
 800c7c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 800c7c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d1a9      	bne.n	800c71c <tcp_slowtmr+0x5b0>
    }
  }
}
 800c7c8:	bf00      	nop
 800c7ca:	bf00      	nop
 800c7cc:	3730      	adds	r7, #48	@ 0x30
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bdb0      	pop	{r4, r5, r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	08015610 	.word	0x08015610
 800c7d8:	08015aa0 	.word	0x08015aa0
 800c7dc:	08015654 	.word	0x08015654
 800c7e0:	2000b1a4 	.word	0x2000b1a4
 800c7e4:	2000b1b4 	.word	0x2000b1b4
 800c7e8:	08015ad0 	.word	0x08015ad0
 800c7ec:	08015af8 	.word	0x08015af8

0800c7f0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b082      	sub	sp, #8
 800c7f4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c7f6:	4b2d      	ldr	r3, [pc, #180]	@ (800c8ac <tcp_fasttmr+0xbc>)
 800c7f8:	781b      	ldrb	r3, [r3, #0]
 800c7fa:	3301      	adds	r3, #1
 800c7fc:	b2da      	uxtb	r2, r3
 800c7fe:	4b2b      	ldr	r3, [pc, #172]	@ (800c8ac <tcp_fasttmr+0xbc>)
 800c800:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c802:	4b2b      	ldr	r3, [pc, #172]	@ (800c8b0 <tcp_fasttmr+0xc0>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c808:	e048      	b.n	800c89c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	7f9a      	ldrb	r2, [r3, #30]
 800c80e:	4b27      	ldr	r3, [pc, #156]	@ (800c8ac <tcp_fasttmr+0xbc>)
 800c810:	781b      	ldrb	r3, [r3, #0]
 800c812:	429a      	cmp	r2, r3
 800c814:	d03f      	beq.n	800c896 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c816:	4b25      	ldr	r3, [pc, #148]	@ (800c8ac <tcp_fasttmr+0xbc>)
 800c818:	781a      	ldrb	r2, [r3, #0]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	8b5b      	ldrh	r3, [r3, #26]
 800c822:	f003 0301 	and.w	r3, r3, #1
 800c826:	2b00      	cmp	r3, #0
 800c828:	d010      	beq.n	800c84c <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	8b5b      	ldrh	r3, [r3, #26]
 800c82e:	f043 0302 	orr.w	r3, r3, #2
 800c832:	b29a      	uxth	r2, r3
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c838:	6878      	ldr	r0, [r7, #4]
 800c83a:	f003 fac9 	bl	800fdd0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	8b5b      	ldrh	r3, [r3, #26]
 800c842:	f023 0303 	bic.w	r3, r3, #3
 800c846:	b29a      	uxth	r2, r3
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	8b5b      	ldrh	r3, [r3, #26]
 800c850:	f003 0308 	and.w	r3, r3, #8
 800c854:	2b00      	cmp	r3, #0
 800c856:	d009      	beq.n	800c86c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	8b5b      	ldrh	r3, [r3, #26]
 800c85c:	f023 0308 	bic.w	r3, r3, #8
 800c860:	b29a      	uxth	r2, r3
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f7ff fa76 	bl	800bd58 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	68db      	ldr	r3, [r3, #12]
 800c870:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c876:	2b00      	cmp	r3, #0
 800c878:	d00a      	beq.n	800c890 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c87a:	4b0e      	ldr	r3, [pc, #56]	@ (800c8b4 <tcp_fasttmr+0xc4>)
 800c87c:	2200      	movs	r2, #0
 800c87e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c880:	6878      	ldr	r0, [r7, #4]
 800c882:	f000 f819 	bl	800c8b8 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c886:	4b0b      	ldr	r3, [pc, #44]	@ (800c8b4 <tcp_fasttmr+0xc4>)
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d000      	beq.n	800c890 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c88e:	e7b8      	b.n	800c802 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	607b      	str	r3, [r7, #4]
 800c894:	e002      	b.n	800c89c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	68db      	ldr	r3, [r3, #12]
 800c89a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d1b3      	bne.n	800c80a <tcp_fasttmr+0x1a>
    }
  }
}
 800c8a2:	bf00      	nop
 800c8a4:	bf00      	nop
 800c8a6:	3708      	adds	r7, #8
 800c8a8:	46bd      	mov	sp, r7
 800c8aa:	bd80      	pop	{r7, pc}
 800c8ac:	2000b1ba 	.word	0x2000b1ba
 800c8b0:	2000b1b0 	.word	0x2000b1b0
 800c8b4:	2000b1b8 	.word	0x2000b1b8

0800c8b8 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c8b8:	b590      	push	{r4, r7, lr}
 800c8ba:	b085      	sub	sp, #20
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d109      	bne.n	800c8da <tcp_process_refused_data+0x22>
 800c8c6:	4b37      	ldr	r3, [pc, #220]	@ (800c9a4 <tcp_process_refused_data+0xec>)
 800c8c8:	f240 6209 	movw	r2, #1545	@ 0x609
 800c8cc:	4936      	ldr	r1, [pc, #216]	@ (800c9a8 <tcp_process_refused_data+0xf0>)
 800c8ce:	4837      	ldr	r0, [pc, #220]	@ (800c9ac <tcp_process_refused_data+0xf4>)
 800c8d0:	f007 fa24 	bl	8013d1c <iprintf>
 800c8d4:	f06f 030f 	mvn.w	r3, #15
 800c8d8:	e060      	b.n	800c99c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c8de:	7b5b      	ldrb	r3, [r3, #13]
 800c8e0:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800c8e6:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d00b      	beq.n	800c910 <tcp_process_refused_data+0x58>
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6918      	ldr	r0, [r3, #16]
 800c902:	2300      	movs	r3, #0
 800c904:	68ba      	ldr	r2, [r7, #8]
 800c906:	6879      	ldr	r1, [r7, #4]
 800c908:	47a0      	blx	r4
 800c90a:	4603      	mov	r3, r0
 800c90c:	73fb      	strb	r3, [r7, #15]
 800c90e:	e007      	b.n	800c920 <tcp_process_refused_data+0x68>
 800c910:	2300      	movs	r3, #0
 800c912:	68ba      	ldr	r2, [r7, #8]
 800c914:	6879      	ldr	r1, [r7, #4]
 800c916:	2000      	movs	r0, #0
 800c918:	f000 f8a4 	bl	800ca64 <tcp_recv_null>
 800c91c:	4603      	mov	r3, r0
 800c91e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c920:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d12a      	bne.n	800c97e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c928:	7bbb      	ldrb	r3, [r7, #14]
 800c92a:	f003 0320 	and.w	r3, r3, #32
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d033      	beq.n	800c99a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c936:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800c93a:	d005      	beq.n	800c948 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c940:	3301      	adds	r3, #1
 800c942:	b29a      	uxth	r2, r3
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d00b      	beq.n	800c96a <tcp_process_refused_data+0xb2>
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	6918      	ldr	r0, [r3, #16]
 800c95c:	2300      	movs	r3, #0
 800c95e:	2200      	movs	r2, #0
 800c960:	6879      	ldr	r1, [r7, #4]
 800c962:	47a0      	blx	r4
 800c964:	4603      	mov	r3, r0
 800c966:	73fb      	strb	r3, [r7, #15]
 800c968:	e001      	b.n	800c96e <tcp_process_refused_data+0xb6>
 800c96a:	2300      	movs	r3, #0
 800c96c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c96e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c972:	f113 0f0d 	cmn.w	r3, #13
 800c976:	d110      	bne.n	800c99a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800c978:	f06f 030c 	mvn.w	r3, #12
 800c97c:	e00e      	b.n	800c99c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800c97e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c982:	f113 0f0d 	cmn.w	r3, #13
 800c986:	d102      	bne.n	800c98e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c988:	f06f 030c 	mvn.w	r3, #12
 800c98c:	e006      	b.n	800c99c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	68ba      	ldr	r2, [r7, #8]
 800c992:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 800c994:	f06f 0304 	mvn.w	r3, #4
 800c998:	e000      	b.n	800c99c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800c99a:	2300      	movs	r3, #0
}
 800c99c:	4618      	mov	r0, r3
 800c99e:	3714      	adds	r7, #20
 800c9a0:	46bd      	mov	sp, r7
 800c9a2:	bd90      	pop	{r4, r7, pc}
 800c9a4:	08015610 	.word	0x08015610
 800c9a8:	08015b20 	.word	0x08015b20
 800c9ac:	08015654 	.word	0x08015654

0800c9b0 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c9b0:	b580      	push	{r7, lr}
 800c9b2:	b084      	sub	sp, #16
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c9b8:	e007      	b.n	800c9ca <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f000 f80a 	bl	800c9da <tcp_seg_free>
    seg = next;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d1f4      	bne.n	800c9ba <tcp_segs_free+0xa>
  }
}
 800c9d0:	bf00      	nop
 800c9d2:	bf00      	nop
 800c9d4:	3710      	adds	r7, #16
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}

0800c9da <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c9da:	b580      	push	{r7, lr}
 800c9dc:	b082      	sub	sp, #8
 800c9de:	af00      	add	r7, sp, #0
 800c9e0:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d00c      	beq.n	800ca02 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	685b      	ldr	r3, [r3, #4]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d004      	beq.n	800c9fa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	685b      	ldr	r3, [r3, #4]
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	f7fe fd7b 	bl	800b4f0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c9fa:	6879      	ldr	r1, [r7, #4]
 800c9fc:	2003      	movs	r0, #3
 800c9fe:	f7fd ff01 	bl	800a804 <memp_free>
  }
}
 800ca02:	bf00      	nop
 800ca04:	3708      	adds	r7, #8
 800ca06:	46bd      	mov	sp, r7
 800ca08:	bd80      	pop	{r7, pc}
	...

0800ca0c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b084      	sub	sp, #16
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d106      	bne.n	800ca28 <tcp_seg_copy+0x1c>
 800ca1a:	4b0f      	ldr	r3, [pc, #60]	@ (800ca58 <tcp_seg_copy+0x4c>)
 800ca1c:	f240 6282 	movw	r2, #1666	@ 0x682
 800ca20:	490e      	ldr	r1, [pc, #56]	@ (800ca5c <tcp_seg_copy+0x50>)
 800ca22:	480f      	ldr	r0, [pc, #60]	@ (800ca60 <tcp_seg_copy+0x54>)
 800ca24:	f007 f97a 	bl	8013d1c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ca28:	2003      	movs	r0, #3
 800ca2a:	f7fd fe7b 	bl	800a724 <memp_malloc>
 800ca2e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d101      	bne.n	800ca3a <tcp_seg_copy+0x2e>
    return NULL;
 800ca36:	2300      	movs	r3, #0
 800ca38:	e00a      	b.n	800ca50 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ca3a:	2210      	movs	r2, #16
 800ca3c:	6879      	ldr	r1, [r7, #4]
 800ca3e:	68f8      	ldr	r0, [r7, #12]
 800ca40:	f007 fa47 	bl	8013ed2 <memcpy>
  pbuf_ref(cseg->p);
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	685b      	ldr	r3, [r3, #4]
 800ca48:	4618      	mov	r0, r3
 800ca4a:	f7fe fdf1 	bl	800b630 <pbuf_ref>
  return cseg;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3710      	adds	r7, #16
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}
 800ca58:	08015610 	.word	0x08015610
 800ca5c:	08015b64 	.word	0x08015b64
 800ca60:	08015654 	.word	0x08015654

0800ca64 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	60f8      	str	r0, [r7, #12]
 800ca6c:	60b9      	str	r1, [r7, #8]
 800ca6e:	607a      	str	r2, [r7, #4]
 800ca70:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d109      	bne.n	800ca8c <tcp_recv_null+0x28>
 800ca78:	4b12      	ldr	r3, [pc, #72]	@ (800cac4 <tcp_recv_null+0x60>)
 800ca7a:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 800ca7e:	4912      	ldr	r1, [pc, #72]	@ (800cac8 <tcp_recv_null+0x64>)
 800ca80:	4812      	ldr	r0, [pc, #72]	@ (800cacc <tcp_recv_null+0x68>)
 800ca82:	f007 f94b 	bl	8013d1c <iprintf>
 800ca86:	f06f 030f 	mvn.w	r3, #15
 800ca8a:	e016      	b.n	800caba <tcp_recv_null+0x56>

  if (p != NULL) {
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d009      	beq.n	800caa6 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	891b      	ldrh	r3, [r3, #8]
 800ca96:	4619      	mov	r1, r3
 800ca98:	68b8      	ldr	r0, [r7, #8]
 800ca9a:	f7ff fb17 	bl	800c0cc <tcp_recved>
    pbuf_free(p);
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f7fe fd26 	bl	800b4f0 <pbuf_free>
 800caa4:	e008      	b.n	800cab8 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800caa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d104      	bne.n	800cab8 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800caae:	68b8      	ldr	r0, [r7, #8]
 800cab0:	f7ff f9bc 	bl	800be2c <tcp_close>
 800cab4:	4603      	mov	r3, r0
 800cab6:	e000      	b.n	800caba <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800cab8:	2300      	movs	r3, #0
}
 800caba:	4618      	mov	r0, r3
 800cabc:	3710      	adds	r7, #16
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bd80      	pop	{r7, pc}
 800cac2:	bf00      	nop
 800cac4:	08015610 	.word	0x08015610
 800cac8:	08015b80 	.word	0x08015b80
 800cacc:	08015654 	.word	0x08015654

0800cad0 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b086      	sub	sp, #24
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	4603      	mov	r3, r0
 800cad8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800cada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	db01      	blt.n	800cae6 <tcp_kill_prio+0x16>
 800cae2:	79fb      	ldrb	r3, [r7, #7]
 800cae4:	e000      	b.n	800cae8 <tcp_kill_prio+0x18>
 800cae6:	237f      	movs	r3, #127	@ 0x7f
 800cae8:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800caea:	7afb      	ldrb	r3, [r7, #11]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d034      	beq.n	800cb5a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800caf0:	7afb      	ldrb	r3, [r7, #11]
 800caf2:	3b01      	subs	r3, #1
 800caf4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800caf6:	2300      	movs	r3, #0
 800caf8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cafa:	2300      	movs	r3, #0
 800cafc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cafe:	4b19      	ldr	r3, [pc, #100]	@ (800cb64 <tcp_kill_prio+0x94>)
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	617b      	str	r3, [r7, #20]
 800cb04:	e01f      	b.n	800cb46 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	7d5b      	ldrb	r3, [r3, #21]
 800cb0a:	7afa      	ldrb	r2, [r7, #11]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d80c      	bhi.n	800cb2a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cb10:	697b      	ldr	r3, [r7, #20]
 800cb12:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800cb14:	7afa      	ldrb	r2, [r7, #11]
 800cb16:	429a      	cmp	r2, r3
 800cb18:	d112      	bne.n	800cb40 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cb1a:	4b13      	ldr	r3, [pc, #76]	@ (800cb68 <tcp_kill_prio+0x98>)
 800cb1c:	681a      	ldr	r2, [r3, #0]
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	6a1b      	ldr	r3, [r3, #32]
 800cb22:	1ad3      	subs	r3, r2, r3
 800cb24:	68fa      	ldr	r2, [r7, #12]
 800cb26:	429a      	cmp	r2, r3
 800cb28:	d80a      	bhi.n	800cb40 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800cb2a:	4b0f      	ldr	r3, [pc, #60]	@ (800cb68 <tcp_kill_prio+0x98>)
 800cb2c:	681a      	ldr	r2, [r3, #0]
 800cb2e:	697b      	ldr	r3, [r7, #20]
 800cb30:	6a1b      	ldr	r3, [r3, #32]
 800cb32:	1ad3      	subs	r3, r2, r3
 800cb34:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800cb36:	697b      	ldr	r3, [r7, #20]
 800cb38:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800cb3a:	697b      	ldr	r3, [r7, #20]
 800cb3c:	7d5b      	ldrb	r3, [r3, #21]
 800cb3e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cb40:	697b      	ldr	r3, [r7, #20]
 800cb42:	68db      	ldr	r3, [r3, #12]
 800cb44:	617b      	str	r3, [r7, #20]
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d1dc      	bne.n	800cb06 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800cb4c:	693b      	ldr	r3, [r7, #16]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d004      	beq.n	800cb5c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cb52:	6938      	ldr	r0, [r7, #16]
 800cb54:	f7ff fa54 	bl	800c000 <tcp_abort>
 800cb58:	e000      	b.n	800cb5c <tcp_kill_prio+0x8c>
    return;
 800cb5a:	bf00      	nop
  }
}
 800cb5c:	3718      	adds	r7, #24
 800cb5e:	46bd      	mov	sp, r7
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	2000b1b0 	.word	0x2000b1b0
 800cb68:	2000b1a4 	.word	0x2000b1a4

0800cb6c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b086      	sub	sp, #24
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	4603      	mov	r3, r0
 800cb74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800cb76:	79fb      	ldrb	r3, [r7, #7]
 800cb78:	2b08      	cmp	r3, #8
 800cb7a:	d009      	beq.n	800cb90 <tcp_kill_state+0x24>
 800cb7c:	79fb      	ldrb	r3, [r7, #7]
 800cb7e:	2b09      	cmp	r3, #9
 800cb80:	d006      	beq.n	800cb90 <tcp_kill_state+0x24>
 800cb82:	4b1a      	ldr	r3, [pc, #104]	@ (800cbec <tcp_kill_state+0x80>)
 800cb84:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 800cb88:	4919      	ldr	r1, [pc, #100]	@ (800cbf0 <tcp_kill_state+0x84>)
 800cb8a:	481a      	ldr	r0, [pc, #104]	@ (800cbf4 <tcp_kill_state+0x88>)
 800cb8c:	f007 f8c6 	bl	8013d1c <iprintf>

  inactivity = 0;
 800cb90:	2300      	movs	r3, #0
 800cb92:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cb94:	2300      	movs	r3, #0
 800cb96:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cb98:	4b17      	ldr	r3, [pc, #92]	@ (800cbf8 <tcp_kill_state+0x8c>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	617b      	str	r3, [r7, #20]
 800cb9e:	e017      	b.n	800cbd0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800cba0:	697b      	ldr	r3, [r7, #20]
 800cba2:	7d1b      	ldrb	r3, [r3, #20]
 800cba4:	79fa      	ldrb	r2, [r7, #7]
 800cba6:	429a      	cmp	r2, r3
 800cba8:	d10f      	bne.n	800cbca <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cbaa:	4b14      	ldr	r3, [pc, #80]	@ (800cbfc <tcp_kill_state+0x90>)
 800cbac:	681a      	ldr	r2, [r3, #0]
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	6a1b      	ldr	r3, [r3, #32]
 800cbb2:	1ad3      	subs	r3, r2, r3
 800cbb4:	68fa      	ldr	r2, [r7, #12]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d807      	bhi.n	800cbca <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800cbba:	4b10      	ldr	r3, [pc, #64]	@ (800cbfc <tcp_kill_state+0x90>)
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	6a1b      	ldr	r3, [r3, #32]
 800cbc2:	1ad3      	subs	r3, r2, r3
 800cbc4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800cbc6:	697b      	ldr	r3, [r7, #20]
 800cbc8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	68db      	ldr	r3, [r3, #12]
 800cbce:	617b      	str	r3, [r7, #20]
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d1e4      	bne.n	800cba0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800cbd6:	693b      	ldr	r3, [r7, #16]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d003      	beq.n	800cbe4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800cbdc:	2100      	movs	r1, #0
 800cbde:	6938      	ldr	r0, [r7, #16]
 800cbe0:	f7ff f950 	bl	800be84 <tcp_abandon>
  }
}
 800cbe4:	bf00      	nop
 800cbe6:	3718      	adds	r7, #24
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	08015610 	.word	0x08015610
 800cbf0:	08015b9c 	.word	0x08015b9c
 800cbf4:	08015654 	.word	0x08015654
 800cbf8:	2000b1b0 	.word	0x2000b1b0
 800cbfc:	2000b1a4 	.word	0x2000b1a4

0800cc00 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b084      	sub	sp, #16
 800cc04:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800cc06:	2300      	movs	r3, #0
 800cc08:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc0e:	4b12      	ldr	r3, [pc, #72]	@ (800cc58 <tcp_kill_timewait+0x58>)
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	60fb      	str	r3, [r7, #12]
 800cc14:	e012      	b.n	800cc3c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cc16:	4b11      	ldr	r3, [pc, #68]	@ (800cc5c <tcp_kill_timewait+0x5c>)
 800cc18:	681a      	ldr	r2, [r3, #0]
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	6a1b      	ldr	r3, [r3, #32]
 800cc1e:	1ad3      	subs	r3, r2, r3
 800cc20:	687a      	ldr	r2, [r7, #4]
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d807      	bhi.n	800cc36 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800cc26:	4b0d      	ldr	r3, [pc, #52]	@ (800cc5c <tcp_kill_timewait+0x5c>)
 800cc28:	681a      	ldr	r2, [r3, #0]
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	6a1b      	ldr	r3, [r3, #32]
 800cc2e:	1ad3      	subs	r3, r2, r3
 800cc30:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800cc32:	68fb      	ldr	r3, [r7, #12]
 800cc34:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	68db      	ldr	r3, [r3, #12]
 800cc3a:	60fb      	str	r3, [r7, #12]
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d1e9      	bne.n	800cc16 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800cc42:	68bb      	ldr	r3, [r7, #8]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d002      	beq.n	800cc4e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cc48:	68b8      	ldr	r0, [r7, #8]
 800cc4a:	f7ff f9d9 	bl	800c000 <tcp_abort>
  }
}
 800cc4e:	bf00      	nop
 800cc50:	3710      	adds	r7, #16
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}
 800cc56:	bf00      	nop
 800cc58:	2000b1b4 	.word	0x2000b1b4
 800cc5c:	2000b1a4 	.word	0x2000b1a4

0800cc60 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b082      	sub	sp, #8
 800cc64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800cc66:	4b10      	ldr	r3, [pc, #64]	@ (800cca8 <tcp_handle_closepend+0x48>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cc6c:	e014      	b.n	800cc98 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	68db      	ldr	r3, [r3, #12]
 800cc72:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	8b5b      	ldrh	r3, [r3, #26]
 800cc78:	f003 0308 	and.w	r3, r3, #8
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d009      	beq.n	800cc94 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	8b5b      	ldrh	r3, [r3, #26]
 800cc84:	f023 0308 	bic.w	r3, r3, #8
 800cc88:	b29a      	uxth	r2, r3
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	f7ff f862 	bl	800bd58 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d1e7      	bne.n	800cc6e <tcp_handle_closepend+0xe>
  }
}
 800cc9e:	bf00      	nop
 800cca0:	bf00      	nop
 800cca2:	3708      	adds	r7, #8
 800cca4:	46bd      	mov	sp, r7
 800cca6:	bd80      	pop	{r7, pc}
 800cca8:	2000b1b0 	.word	0x2000b1b0

0800ccac <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b084      	sub	sp, #16
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ccb6:	2001      	movs	r0, #1
 800ccb8:	f7fd fd34 	bl	800a724 <memp_malloc>
 800ccbc:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d126      	bne.n	800cd12 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800ccc4:	f7ff ffcc 	bl	800cc60 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ccc8:	f7ff ff9a 	bl	800cc00 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cccc:	2001      	movs	r0, #1
 800ccce:	f7fd fd29 	bl	800a724 <memp_malloc>
 800ccd2:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d11b      	bne.n	800cd12 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ccda:	2009      	movs	r0, #9
 800ccdc:	f7ff ff46 	bl	800cb6c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cce0:	2001      	movs	r0, #1
 800cce2:	f7fd fd1f 	bl	800a724 <memp_malloc>
 800cce6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d111      	bne.n	800cd12 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ccee:	2008      	movs	r0, #8
 800ccf0:	f7ff ff3c 	bl	800cb6c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ccf4:	2001      	movs	r0, #1
 800ccf6:	f7fd fd15 	bl	800a724 <memp_malloc>
 800ccfa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ccfc:	68fb      	ldr	r3, [r7, #12]
 800ccfe:	2b00      	cmp	r3, #0
 800cd00:	d107      	bne.n	800cd12 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800cd02:	79fb      	ldrb	r3, [r7, #7]
 800cd04:	4618      	mov	r0, r3
 800cd06:	f7ff fee3 	bl	800cad0 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cd0a:	2001      	movs	r0, #1
 800cd0c:	f7fd fd0a 	bl	800a724 <memp_malloc>
 800cd10:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d03f      	beq.n	800cd98 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800cd18:	229c      	movs	r2, #156	@ 0x9c
 800cd1a:	2100      	movs	r1, #0
 800cd1c:	68f8      	ldr	r0, [r7, #12]
 800cd1e:	f007 f862 	bl	8013de6 <memset>
    pcb->prio = prio;
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	79fa      	ldrb	r2, [r7, #7]
 800cd26:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800cd2e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 800cd38:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	22ff      	movs	r2, #255	@ 0xff
 800cd46:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800cd4e:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2206      	movs	r2, #6
 800cd54:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2206      	movs	r2, #6
 800cd5c:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800cd64:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	2201      	movs	r2, #1
 800cd6a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 800cd6e:	4b0d      	ldr	r3, [pc, #52]	@ (800cda4 <tcp_alloc+0xf8>)
 800cd70:	681a      	ldr	r2, [r3, #0]
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800cd76:	4b0c      	ldr	r3, [pc, #48]	@ (800cda8 <tcp_alloc+0xfc>)
 800cd78:	781a      	ldrb	r2, [r3, #0]
 800cd7a:	68fb      	ldr	r3, [r7, #12]
 800cd7c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800cd84:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	4a08      	ldr	r2, [pc, #32]	@ (800cdac <tcp_alloc+0x100>)
 800cd8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	4a07      	ldr	r2, [pc, #28]	@ (800cdb0 <tcp_alloc+0x104>)
 800cd94:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800cd98:	68fb      	ldr	r3, [r7, #12]
}
 800cd9a:	4618      	mov	r0, r3
 800cd9c:	3710      	adds	r7, #16
 800cd9e:	46bd      	mov	sp, r7
 800cda0:	bd80      	pop	{r7, pc}
 800cda2:	bf00      	nop
 800cda4:	2000b1a4 	.word	0x2000b1a4
 800cda8:	2000b1ba 	.word	0x2000b1ba
 800cdac:	0800ca65 	.word	0x0800ca65
 800cdb0:	006ddd00 	.word	0x006ddd00

0800cdb4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b082      	sub	sp, #8
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d107      	bne.n	800cdd2 <tcp_pcb_purge+0x1e>
 800cdc2:	4b21      	ldr	r3, [pc, #132]	@ (800ce48 <tcp_pcb_purge+0x94>)
 800cdc4:	f640 0251 	movw	r2, #2129	@ 0x851
 800cdc8:	4920      	ldr	r1, [pc, #128]	@ (800ce4c <tcp_pcb_purge+0x98>)
 800cdca:	4821      	ldr	r0, [pc, #132]	@ (800ce50 <tcp_pcb_purge+0x9c>)
 800cdcc:	f006 ffa6 	bl	8013d1c <iprintf>
 800cdd0:	e037      	b.n	800ce42 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	7d1b      	ldrb	r3, [r3, #20]
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d033      	beq.n	800ce42 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800cdde:	2b0a      	cmp	r3, #10
 800cde0:	d02f      	beq.n	800ce42 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800cde6:	2b01      	cmp	r3, #1
 800cde8:	d02b      	beq.n	800ce42 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d007      	beq.n	800ce02 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f7fe fb7a 	bl	800b4f0 <pbuf_free>
      pcb->refused_data = NULL;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ce06:	2b00      	cmp	r3, #0
 800ce08:	d002      	beq.n	800ce10 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	f000 f986 	bl	800d11c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ce16:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ce1c:	4618      	mov	r0, r3
 800ce1e:	f7ff fdc7 	bl	800c9b0 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ce26:	4618      	mov	r0, r3
 800ce28:	f7ff fdc2 	bl	800c9b0 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	66da      	str	r2, [r3, #108]	@ 0x6c
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800ce42:	3708      	adds	r7, #8
 800ce44:	46bd      	mov	sp, r7
 800ce46:	bd80      	pop	{r7, pc}
 800ce48:	08015610 	.word	0x08015610
 800ce4c:	08015c5c 	.word	0x08015c5c
 800ce50:	08015654 	.word	0x08015654

0800ce54 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b084      	sub	sp, #16
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ce5e:	683b      	ldr	r3, [r7, #0]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d106      	bne.n	800ce72 <tcp_pcb_remove+0x1e>
 800ce64:	4b3e      	ldr	r3, [pc, #248]	@ (800cf60 <tcp_pcb_remove+0x10c>)
 800ce66:	f640 0283 	movw	r2, #2179	@ 0x883
 800ce6a:	493e      	ldr	r1, [pc, #248]	@ (800cf64 <tcp_pcb_remove+0x110>)
 800ce6c:	483e      	ldr	r0, [pc, #248]	@ (800cf68 <tcp_pcb_remove+0x114>)
 800ce6e:	f006 ff55 	bl	8013d1c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d106      	bne.n	800ce86 <tcp_pcb_remove+0x32>
 800ce78:	4b39      	ldr	r3, [pc, #228]	@ (800cf60 <tcp_pcb_remove+0x10c>)
 800ce7a:	f640 0284 	movw	r2, #2180	@ 0x884
 800ce7e:	493b      	ldr	r1, [pc, #236]	@ (800cf6c <tcp_pcb_remove+0x118>)
 800ce80:	4839      	ldr	r0, [pc, #228]	@ (800cf68 <tcp_pcb_remove+0x114>)
 800ce82:	f006 ff4b 	bl	8013d1c <iprintf>

  TCP_RMV(pcblist, pcb);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	683a      	ldr	r2, [r7, #0]
 800ce8c:	429a      	cmp	r2, r3
 800ce8e:	d105      	bne.n	800ce9c <tcp_pcb_remove+0x48>
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	68da      	ldr	r2, [r3, #12]
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	601a      	str	r2, [r3, #0]
 800ce9a:	e013      	b.n	800cec4 <tcp_pcb_remove+0x70>
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	60fb      	str	r3, [r7, #12]
 800cea2:	e00c      	b.n	800cebe <tcp_pcb_remove+0x6a>
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	68db      	ldr	r3, [r3, #12]
 800cea8:	683a      	ldr	r2, [r7, #0]
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	d104      	bne.n	800ceb8 <tcp_pcb_remove+0x64>
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	68da      	ldr	r2, [r3, #12]
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	60da      	str	r2, [r3, #12]
 800ceb6:	e005      	b.n	800cec4 <tcp_pcb_remove+0x70>
 800ceb8:	68fb      	ldr	r3, [r7, #12]
 800ceba:	68db      	ldr	r3, [r3, #12]
 800cebc:	60fb      	str	r3, [r7, #12]
 800cebe:	68fb      	ldr	r3, [r7, #12]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d1ef      	bne.n	800cea4 <tcp_pcb_remove+0x50>
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	2200      	movs	r2, #0
 800cec8:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ceca:	6838      	ldr	r0, [r7, #0]
 800cecc:	f7ff ff72 	bl	800cdb4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	7d1b      	ldrb	r3, [r3, #20]
 800ced4:	2b0a      	cmp	r3, #10
 800ced6:	d013      	beq.n	800cf00 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800ced8:	683b      	ldr	r3, [r7, #0]
 800ceda:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d00f      	beq.n	800cf00 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	8b5b      	ldrh	r3, [r3, #26]
 800cee4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d009      	beq.n	800cf00 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	8b5b      	ldrh	r3, [r3, #26]
 800cef0:	f043 0302 	orr.w	r3, r3, #2
 800cef4:	b29a      	uxth	r2, r3
 800cef6:	683b      	ldr	r3, [r7, #0]
 800cef8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cefa:	6838      	ldr	r0, [r7, #0]
 800cefc:	f002 ff68 	bl	800fdd0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	7d1b      	ldrb	r3, [r3, #20]
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	d020      	beq.n	800cf4a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800cf08:	683b      	ldr	r3, [r7, #0]
 800cf0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d006      	beq.n	800cf1e <tcp_pcb_remove+0xca>
 800cf10:	4b13      	ldr	r3, [pc, #76]	@ (800cf60 <tcp_pcb_remove+0x10c>)
 800cf12:	f640 0293 	movw	r2, #2195	@ 0x893
 800cf16:	4916      	ldr	r1, [pc, #88]	@ (800cf70 <tcp_pcb_remove+0x11c>)
 800cf18:	4813      	ldr	r0, [pc, #76]	@ (800cf68 <tcp_pcb_remove+0x114>)
 800cf1a:	f006 feff 	bl	8013d1c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800cf1e:	683b      	ldr	r3, [r7, #0]
 800cf20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d006      	beq.n	800cf34 <tcp_pcb_remove+0xe0>
 800cf26:	4b0e      	ldr	r3, [pc, #56]	@ (800cf60 <tcp_pcb_remove+0x10c>)
 800cf28:	f640 0294 	movw	r2, #2196	@ 0x894
 800cf2c:	4911      	ldr	r1, [pc, #68]	@ (800cf74 <tcp_pcb_remove+0x120>)
 800cf2e:	480e      	ldr	r0, [pc, #56]	@ (800cf68 <tcp_pcb_remove+0x114>)
 800cf30:	f006 fef4 	bl	8013d1c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d006      	beq.n	800cf4a <tcp_pcb_remove+0xf6>
 800cf3c:	4b08      	ldr	r3, [pc, #32]	@ (800cf60 <tcp_pcb_remove+0x10c>)
 800cf3e:	f640 0296 	movw	r2, #2198	@ 0x896
 800cf42:	490d      	ldr	r1, [pc, #52]	@ (800cf78 <tcp_pcb_remove+0x124>)
 800cf44:	4808      	ldr	r0, [pc, #32]	@ (800cf68 <tcp_pcb_remove+0x114>)
 800cf46:	f006 fee9 	bl	8013d1c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	2200      	movs	r2, #0
 800cf54:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800cf56:	bf00      	nop
 800cf58:	3710      	adds	r7, #16
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bd80      	pop	{r7, pc}
 800cf5e:	bf00      	nop
 800cf60:	08015610 	.word	0x08015610
 800cf64:	08015c78 	.word	0x08015c78
 800cf68:	08015654 	.word	0x08015654
 800cf6c:	08015c94 	.word	0x08015c94
 800cf70:	08015cb4 	.word	0x08015cb4
 800cf74:	08015ccc 	.word	0x08015ccc
 800cf78:	08015ce8 	.word	0x08015ce8

0800cf7c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800cf7c:	b580      	push	{r7, lr}
 800cf7e:	b082      	sub	sp, #8
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d106      	bne.n	800cf98 <tcp_next_iss+0x1c>
 800cf8a:	4b0a      	ldr	r3, [pc, #40]	@ (800cfb4 <tcp_next_iss+0x38>)
 800cf8c:	f640 02af 	movw	r2, #2223	@ 0x8af
 800cf90:	4909      	ldr	r1, [pc, #36]	@ (800cfb8 <tcp_next_iss+0x3c>)
 800cf92:	480a      	ldr	r0, [pc, #40]	@ (800cfbc <tcp_next_iss+0x40>)
 800cf94:	f006 fec2 	bl	8013d1c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800cf98:	4b09      	ldr	r3, [pc, #36]	@ (800cfc0 <tcp_next_iss+0x44>)
 800cf9a:	681a      	ldr	r2, [r3, #0]
 800cf9c:	4b09      	ldr	r3, [pc, #36]	@ (800cfc4 <tcp_next_iss+0x48>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	4413      	add	r3, r2
 800cfa2:	4a07      	ldr	r2, [pc, #28]	@ (800cfc0 <tcp_next_iss+0x44>)
 800cfa4:	6013      	str	r3, [r2, #0]
  return iss;
 800cfa6:	4b06      	ldr	r3, [pc, #24]	@ (800cfc0 <tcp_next_iss+0x44>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3708      	adds	r7, #8
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}
 800cfb2:	bf00      	nop
 800cfb4:	08015610 	.word	0x08015610
 800cfb8:	08015d00 	.word	0x08015d00
 800cfbc:	08015654 	.word	0x08015654
 800cfc0:	20000084 	.word	0x20000084
 800cfc4:	2000b1a4 	.word	0x2000b1a4

0800cfc8 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b086      	sub	sp, #24
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	4603      	mov	r3, r0
 800cfd0:	60b9      	str	r1, [r7, #8]
 800cfd2:	607a      	str	r2, [r7, #4]
 800cfd4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d106      	bne.n	800cfea <tcp_eff_send_mss_netif+0x22>
 800cfdc:	4b14      	ldr	r3, [pc, #80]	@ (800d030 <tcp_eff_send_mss_netif+0x68>)
 800cfde:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 800cfe2:	4914      	ldr	r1, [pc, #80]	@ (800d034 <tcp_eff_send_mss_netif+0x6c>)
 800cfe4:	4814      	ldr	r0, [pc, #80]	@ (800d038 <tcp_eff_send_mss_netif+0x70>)
 800cfe6:	f006 fe99 	bl	8013d1c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d101      	bne.n	800cff4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800cff0:	89fb      	ldrh	r3, [r7, #14]
 800cff2:	e019      	b.n	800d028 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800cff8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800cffa:	8afb      	ldrh	r3, [r7, #22]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d012      	beq.n	800d026 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d000:	2328      	movs	r3, #40	@ 0x28
 800d002:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d004:	8afa      	ldrh	r2, [r7, #22]
 800d006:	8abb      	ldrh	r3, [r7, #20]
 800d008:	429a      	cmp	r2, r3
 800d00a:	d904      	bls.n	800d016 <tcp_eff_send_mss_netif+0x4e>
 800d00c:	8afa      	ldrh	r2, [r7, #22]
 800d00e:	8abb      	ldrh	r3, [r7, #20]
 800d010:	1ad3      	subs	r3, r2, r3
 800d012:	b29b      	uxth	r3, r3
 800d014:	e000      	b.n	800d018 <tcp_eff_send_mss_netif+0x50>
 800d016:	2300      	movs	r3, #0
 800d018:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d01a:	8a7a      	ldrh	r2, [r7, #18]
 800d01c:	89fb      	ldrh	r3, [r7, #14]
 800d01e:	4293      	cmp	r3, r2
 800d020:	bf28      	it	cs
 800d022:	4613      	movcs	r3, r2
 800d024:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d026:	89fb      	ldrh	r3, [r7, #14]
}
 800d028:	4618      	mov	r0, r3
 800d02a:	3718      	adds	r7, #24
 800d02c:	46bd      	mov	sp, r7
 800d02e:	bd80      	pop	{r7, pc}
 800d030:	08015610 	.word	0x08015610
 800d034:	08015d1c 	.word	0x08015d1c
 800d038:	08015654 	.word	0x08015654

0800d03c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b084      	sub	sp, #16
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
 800d044:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d119      	bne.n	800d084 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d050:	4b10      	ldr	r3, [pc, #64]	@ (800d094 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d052:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 800d056:	4910      	ldr	r1, [pc, #64]	@ (800d098 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d058:	4810      	ldr	r0, [pc, #64]	@ (800d09c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d05a:	f006 fe5f 	bl	8013d1c <iprintf>

  while (pcb != NULL) {
 800d05e:	e011      	b.n	800d084 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	681a      	ldr	r2, [r3, #0]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	429a      	cmp	r2, r3
 800d06a:	d108      	bne.n	800d07e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	68db      	ldr	r3, [r3, #12]
 800d070:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d072:	68f8      	ldr	r0, [r7, #12]
 800d074:	f7fe ffc4 	bl	800c000 <tcp_abort>
      pcb = next;
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	60fb      	str	r3, [r7, #12]
 800d07c:	e002      	b.n	800d084 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	68db      	ldr	r3, [r3, #12]
 800d082:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d1ea      	bne.n	800d060 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d08a:	bf00      	nop
 800d08c:	bf00      	nop
 800d08e:	3710      	adds	r7, #16
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}
 800d094:	08015610 	.word	0x08015610
 800d098:	08015d44 	.word	0x08015d44
 800d09c:	08015654 	.word	0x08015654

0800d0a0 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b084      	sub	sp, #16
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
 800d0a8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d02a      	beq.n	800d106 <tcp_netif_ip_addr_changed+0x66>
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d026      	beq.n	800d106 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d0b8:	4b15      	ldr	r3, [pc, #84]	@ (800d110 <tcp_netif_ip_addr_changed+0x70>)
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	4619      	mov	r1, r3
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f7ff ffbc 	bl	800d03c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d0c4:	4b13      	ldr	r3, [pc, #76]	@ (800d114 <tcp_netif_ip_addr_changed+0x74>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4619      	mov	r1, r3
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f7ff ffb6 	bl	800d03c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d017      	beq.n	800d106 <tcp_netif_ip_addr_changed+0x66>
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	d013      	beq.n	800d106 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d0de:	4b0e      	ldr	r3, [pc, #56]	@ (800d118 <tcp_netif_ip_addr_changed+0x78>)
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	60fb      	str	r3, [r7, #12]
 800d0e4:	e00c      	b.n	800d100 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	681a      	ldr	r2, [r3, #0]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d103      	bne.n	800d0fa <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	681a      	ldr	r2, [r3, #0]
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	68db      	ldr	r3, [r3, #12]
 800d0fe:	60fb      	str	r3, [r7, #12]
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d1ef      	bne.n	800d0e6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d106:	bf00      	nop
 800d108:	3710      	adds	r7, #16
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	2000b1b0 	.word	0x2000b1b0
 800d114:	2000b1a8 	.word	0x2000b1a8
 800d118:	2000b1ac 	.word	0x2000b1ac

0800d11c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b082      	sub	sp, #8
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d007      	beq.n	800d13c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d130:	4618      	mov	r0, r3
 800d132:	f7ff fc3d 	bl	800c9b0 <tcp_segs_free>
    pcb->ooseq = NULL;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2200      	movs	r2, #0
 800d13a:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d13c:	bf00      	nop
 800d13e:	3708      	adds	r7, #8
 800d140:	46bd      	mov	sp, r7
 800d142:	bd80      	pop	{r7, pc}

0800d144 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d144:	b590      	push	{r4, r7, lr}
 800d146:	b08d      	sub	sp, #52	@ 0x34
 800d148:	af04      	add	r7, sp, #16
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d105      	bne.n	800d160 <tcp_input+0x1c>
 800d154:	4b9b      	ldr	r3, [pc, #620]	@ (800d3c4 <tcp_input+0x280>)
 800d156:	2283      	movs	r2, #131	@ 0x83
 800d158:	499b      	ldr	r1, [pc, #620]	@ (800d3c8 <tcp_input+0x284>)
 800d15a:	489c      	ldr	r0, [pc, #624]	@ (800d3cc <tcp_input+0x288>)
 800d15c:	f006 fdde 	bl	8013d1c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	685b      	ldr	r3, [r3, #4]
 800d164:	4a9a      	ldr	r2, [pc, #616]	@ (800d3d0 <tcp_input+0x28c>)
 800d166:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	895b      	ldrh	r3, [r3, #10]
 800d16c:	2b13      	cmp	r3, #19
 800d16e:	f240 83d1 	bls.w	800d914 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d172:	4b98      	ldr	r3, [pc, #608]	@ (800d3d4 <tcp_input+0x290>)
 800d174:	695b      	ldr	r3, [r3, #20]
 800d176:	4a97      	ldr	r2, [pc, #604]	@ (800d3d4 <tcp_input+0x290>)
 800d178:	6812      	ldr	r2, [r2, #0]
 800d17a:	4611      	mov	r1, r2
 800d17c:	4618      	mov	r0, r3
 800d17e:	f005 fd77 	bl	8012c70 <ip4_addr_isbroadcast_u32>
 800d182:	4603      	mov	r3, r0
 800d184:	2b00      	cmp	r3, #0
 800d186:	f040 83c7 	bne.w	800d918 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d18a:	4b92      	ldr	r3, [pc, #584]	@ (800d3d4 <tcp_input+0x290>)
 800d18c:	695b      	ldr	r3, [r3, #20]
 800d18e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d192:	2be0      	cmp	r3, #224	@ 0xe0
 800d194:	f000 83c0 	beq.w	800d918 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d198:	4b8d      	ldr	r3, [pc, #564]	@ (800d3d0 <tcp_input+0x28c>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	899b      	ldrh	r3, [r3, #12]
 800d19e:	b29b      	uxth	r3, r3
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f7fc fe47 	bl	8009e34 <lwip_htons>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	0b1b      	lsrs	r3, r3, #12
 800d1aa:	b29b      	uxth	r3, r3
 800d1ac:	b2db      	uxtb	r3, r3
 800d1ae:	009b      	lsls	r3, r3, #2
 800d1b0:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d1b2:	7cbb      	ldrb	r3, [r7, #18]
 800d1b4:	2b13      	cmp	r3, #19
 800d1b6:	f240 83b1 	bls.w	800d91c <tcp_input+0x7d8>
 800d1ba:	7cbb      	ldrb	r3, [r7, #18]
 800d1bc:	b29a      	uxth	r2, r3
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	891b      	ldrh	r3, [r3, #8]
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	f200 83aa 	bhi.w	800d91c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d1c8:	7cbb      	ldrb	r3, [r7, #18]
 800d1ca:	b29b      	uxth	r3, r3
 800d1cc:	3b14      	subs	r3, #20
 800d1ce:	b29a      	uxth	r2, r3
 800d1d0:	4b81      	ldr	r3, [pc, #516]	@ (800d3d8 <tcp_input+0x294>)
 800d1d2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d1d4:	4b81      	ldr	r3, [pc, #516]	@ (800d3dc <tcp_input+0x298>)
 800d1d6:	2200      	movs	r2, #0
 800d1d8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	895a      	ldrh	r2, [r3, #10]
 800d1de:	7cbb      	ldrb	r3, [r7, #18]
 800d1e0:	b29b      	uxth	r3, r3
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d309      	bcc.n	800d1fa <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d1e6:	4b7c      	ldr	r3, [pc, #496]	@ (800d3d8 <tcp_input+0x294>)
 800d1e8:	881a      	ldrh	r2, [r3, #0]
 800d1ea:	4b7d      	ldr	r3, [pc, #500]	@ (800d3e0 <tcp_input+0x29c>)
 800d1ec:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d1ee:	7cbb      	ldrb	r3, [r7, #18]
 800d1f0:	4619      	mov	r1, r3
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f7fe f8f6 	bl	800b3e4 <pbuf_remove_header>
 800d1f8:	e04e      	b.n	800d298 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d105      	bne.n	800d20e <tcp_input+0xca>
 800d202:	4b70      	ldr	r3, [pc, #448]	@ (800d3c4 <tcp_input+0x280>)
 800d204:	22c2      	movs	r2, #194	@ 0xc2
 800d206:	4977      	ldr	r1, [pc, #476]	@ (800d3e4 <tcp_input+0x2a0>)
 800d208:	4870      	ldr	r0, [pc, #448]	@ (800d3cc <tcp_input+0x288>)
 800d20a:	f006 fd87 	bl	8013d1c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d20e:	2114      	movs	r1, #20
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f7fe f8e7 	bl	800b3e4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	895a      	ldrh	r2, [r3, #10]
 800d21a:	4b71      	ldr	r3, [pc, #452]	@ (800d3e0 <tcp_input+0x29c>)
 800d21c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d21e:	4b6e      	ldr	r3, [pc, #440]	@ (800d3d8 <tcp_input+0x294>)
 800d220:	881a      	ldrh	r2, [r3, #0]
 800d222:	4b6f      	ldr	r3, [pc, #444]	@ (800d3e0 <tcp_input+0x29c>)
 800d224:	881b      	ldrh	r3, [r3, #0]
 800d226:	1ad3      	subs	r3, r2, r3
 800d228:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d22a:	4b6d      	ldr	r3, [pc, #436]	@ (800d3e0 <tcp_input+0x29c>)
 800d22c:	881b      	ldrh	r3, [r3, #0]
 800d22e:	4619      	mov	r1, r3
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f7fe f8d7 	bl	800b3e4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	895b      	ldrh	r3, [r3, #10]
 800d23c:	8a3a      	ldrh	r2, [r7, #16]
 800d23e:	429a      	cmp	r2, r3
 800d240:	f200 836e 	bhi.w	800d920 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	685b      	ldr	r3, [r3, #4]
 800d24a:	4a64      	ldr	r2, [pc, #400]	@ (800d3dc <tcp_input+0x298>)
 800d24c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	8a3a      	ldrh	r2, [r7, #16]
 800d254:	4611      	mov	r1, r2
 800d256:	4618      	mov	r0, r3
 800d258:	f7fe f8c4 	bl	800b3e4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	891a      	ldrh	r2, [r3, #8]
 800d260:	8a3b      	ldrh	r3, [r7, #16]
 800d262:	1ad3      	subs	r3, r2, r3
 800d264:	b29a      	uxth	r2, r3
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	895b      	ldrh	r3, [r3, #10]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d005      	beq.n	800d27e <tcp_input+0x13a>
 800d272:	4b54      	ldr	r3, [pc, #336]	@ (800d3c4 <tcp_input+0x280>)
 800d274:	22df      	movs	r2, #223	@ 0xdf
 800d276:	495c      	ldr	r1, [pc, #368]	@ (800d3e8 <tcp_input+0x2a4>)
 800d278:	4854      	ldr	r0, [pc, #336]	@ (800d3cc <tcp_input+0x288>)
 800d27a:	f006 fd4f 	bl	8013d1c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	891a      	ldrh	r2, [r3, #8]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	891b      	ldrh	r3, [r3, #8]
 800d288:	429a      	cmp	r2, r3
 800d28a:	d005      	beq.n	800d298 <tcp_input+0x154>
 800d28c:	4b4d      	ldr	r3, [pc, #308]	@ (800d3c4 <tcp_input+0x280>)
 800d28e:	22e0      	movs	r2, #224	@ 0xe0
 800d290:	4956      	ldr	r1, [pc, #344]	@ (800d3ec <tcp_input+0x2a8>)
 800d292:	484e      	ldr	r0, [pc, #312]	@ (800d3cc <tcp_input+0x288>)
 800d294:	f006 fd42 	bl	8013d1c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d298:	4b4d      	ldr	r3, [pc, #308]	@ (800d3d0 <tcp_input+0x28c>)
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	881b      	ldrh	r3, [r3, #0]
 800d29e:	b29b      	uxth	r3, r3
 800d2a0:	4a4b      	ldr	r2, [pc, #300]	@ (800d3d0 <tcp_input+0x28c>)
 800d2a2:	6814      	ldr	r4, [r2, #0]
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	f7fc fdc5 	bl	8009e34 <lwip_htons>
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d2ae:	4b48      	ldr	r3, [pc, #288]	@ (800d3d0 <tcp_input+0x28c>)
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	885b      	ldrh	r3, [r3, #2]
 800d2b4:	b29b      	uxth	r3, r3
 800d2b6:	4a46      	ldr	r2, [pc, #280]	@ (800d3d0 <tcp_input+0x28c>)
 800d2b8:	6814      	ldr	r4, [r2, #0]
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7fc fdba 	bl	8009e34 <lwip_htons>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d2c4:	4b42      	ldr	r3, [pc, #264]	@ (800d3d0 <tcp_input+0x28c>)
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	685b      	ldr	r3, [r3, #4]
 800d2ca:	4a41      	ldr	r2, [pc, #260]	@ (800d3d0 <tcp_input+0x28c>)
 800d2cc:	6814      	ldr	r4, [r2, #0]
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	f7fc fdc6 	bl	8009e60 <lwip_htonl>
 800d2d4:	4603      	mov	r3, r0
 800d2d6:	6063      	str	r3, [r4, #4]
 800d2d8:	6863      	ldr	r3, [r4, #4]
 800d2da:	4a45      	ldr	r2, [pc, #276]	@ (800d3f0 <tcp_input+0x2ac>)
 800d2dc:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d2de:	4b3c      	ldr	r3, [pc, #240]	@ (800d3d0 <tcp_input+0x28c>)
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	689b      	ldr	r3, [r3, #8]
 800d2e4:	4a3a      	ldr	r2, [pc, #232]	@ (800d3d0 <tcp_input+0x28c>)
 800d2e6:	6814      	ldr	r4, [r2, #0]
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	f7fc fdb9 	bl	8009e60 <lwip_htonl>
 800d2ee:	4603      	mov	r3, r0
 800d2f0:	60a3      	str	r3, [r4, #8]
 800d2f2:	68a3      	ldr	r3, [r4, #8]
 800d2f4:	4a3f      	ldr	r2, [pc, #252]	@ (800d3f4 <tcp_input+0x2b0>)
 800d2f6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d2f8:	4b35      	ldr	r3, [pc, #212]	@ (800d3d0 <tcp_input+0x28c>)
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	89db      	ldrh	r3, [r3, #14]
 800d2fe:	b29b      	uxth	r3, r3
 800d300:	4a33      	ldr	r2, [pc, #204]	@ (800d3d0 <tcp_input+0x28c>)
 800d302:	6814      	ldr	r4, [r2, #0]
 800d304:	4618      	mov	r0, r3
 800d306:	f7fc fd95 	bl	8009e34 <lwip_htons>
 800d30a:	4603      	mov	r3, r0
 800d30c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d30e:	4b30      	ldr	r3, [pc, #192]	@ (800d3d0 <tcp_input+0x28c>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	899b      	ldrh	r3, [r3, #12]
 800d314:	b29b      	uxth	r3, r3
 800d316:	4618      	mov	r0, r3
 800d318:	f7fc fd8c 	bl	8009e34 <lwip_htons>
 800d31c:	4603      	mov	r3, r0
 800d31e:	b2db      	uxtb	r3, r3
 800d320:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d324:	b2da      	uxtb	r2, r3
 800d326:	4b34      	ldr	r3, [pc, #208]	@ (800d3f8 <tcp_input+0x2b4>)
 800d328:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	891a      	ldrh	r2, [r3, #8]
 800d32e:	4b33      	ldr	r3, [pc, #204]	@ (800d3fc <tcp_input+0x2b8>)
 800d330:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d332:	4b31      	ldr	r3, [pc, #196]	@ (800d3f8 <tcp_input+0x2b4>)
 800d334:	781b      	ldrb	r3, [r3, #0]
 800d336:	f003 0303 	and.w	r3, r3, #3
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d00c      	beq.n	800d358 <tcp_input+0x214>
    tcplen++;
 800d33e:	4b2f      	ldr	r3, [pc, #188]	@ (800d3fc <tcp_input+0x2b8>)
 800d340:	881b      	ldrh	r3, [r3, #0]
 800d342:	3301      	adds	r3, #1
 800d344:	b29a      	uxth	r2, r3
 800d346:	4b2d      	ldr	r3, [pc, #180]	@ (800d3fc <tcp_input+0x2b8>)
 800d348:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	891a      	ldrh	r2, [r3, #8]
 800d34e:	4b2b      	ldr	r3, [pc, #172]	@ (800d3fc <tcp_input+0x2b8>)
 800d350:	881b      	ldrh	r3, [r3, #0]
 800d352:	429a      	cmp	r2, r3
 800d354:	f200 82e6 	bhi.w	800d924 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d358:	2300      	movs	r3, #0
 800d35a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d35c:	4b28      	ldr	r3, [pc, #160]	@ (800d400 <tcp_input+0x2bc>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	61fb      	str	r3, [r7, #28]
 800d362:	e09d      	b.n	800d4a0 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d364:	69fb      	ldr	r3, [r7, #28]
 800d366:	7d1b      	ldrb	r3, [r3, #20]
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d105      	bne.n	800d378 <tcp_input+0x234>
 800d36c:	4b15      	ldr	r3, [pc, #84]	@ (800d3c4 <tcp_input+0x280>)
 800d36e:	22fb      	movs	r2, #251	@ 0xfb
 800d370:	4924      	ldr	r1, [pc, #144]	@ (800d404 <tcp_input+0x2c0>)
 800d372:	4816      	ldr	r0, [pc, #88]	@ (800d3cc <tcp_input+0x288>)
 800d374:	f006 fcd2 	bl	8013d1c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d378:	69fb      	ldr	r3, [r7, #28]
 800d37a:	7d1b      	ldrb	r3, [r3, #20]
 800d37c:	2b0a      	cmp	r3, #10
 800d37e:	d105      	bne.n	800d38c <tcp_input+0x248>
 800d380:	4b10      	ldr	r3, [pc, #64]	@ (800d3c4 <tcp_input+0x280>)
 800d382:	22fc      	movs	r2, #252	@ 0xfc
 800d384:	4920      	ldr	r1, [pc, #128]	@ (800d408 <tcp_input+0x2c4>)
 800d386:	4811      	ldr	r0, [pc, #68]	@ (800d3cc <tcp_input+0x288>)
 800d388:	f006 fcc8 	bl	8013d1c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d38c:	69fb      	ldr	r3, [r7, #28]
 800d38e:	7d1b      	ldrb	r3, [r3, #20]
 800d390:	2b01      	cmp	r3, #1
 800d392:	d105      	bne.n	800d3a0 <tcp_input+0x25c>
 800d394:	4b0b      	ldr	r3, [pc, #44]	@ (800d3c4 <tcp_input+0x280>)
 800d396:	22fd      	movs	r2, #253	@ 0xfd
 800d398:	491c      	ldr	r1, [pc, #112]	@ (800d40c <tcp_input+0x2c8>)
 800d39a:	480c      	ldr	r0, [pc, #48]	@ (800d3cc <tcp_input+0x288>)
 800d39c:	f006 fcbe 	bl	8013d1c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d3a0:	69fb      	ldr	r3, [r7, #28]
 800d3a2:	7a1b      	ldrb	r3, [r3, #8]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d033      	beq.n	800d410 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d3a8:	69fb      	ldr	r3, [r7, #28]
 800d3aa:	7a1a      	ldrb	r2, [r3, #8]
 800d3ac:	4b09      	ldr	r3, [pc, #36]	@ (800d3d4 <tcp_input+0x290>)
 800d3ae:	685b      	ldr	r3, [r3, #4]
 800d3b0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d3b4:	3301      	adds	r3, #1
 800d3b6:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	d029      	beq.n	800d410 <tcp_input+0x2cc>
      prev = pcb;
 800d3bc:	69fb      	ldr	r3, [r7, #28]
 800d3be:	61bb      	str	r3, [r7, #24]
      continue;
 800d3c0:	e06b      	b.n	800d49a <tcp_input+0x356>
 800d3c2:	bf00      	nop
 800d3c4:	08015d78 	.word	0x08015d78
 800d3c8:	08015dac 	.word	0x08015dac
 800d3cc:	08015dc4 	.word	0x08015dc4
 800d3d0:	2000b1cc 	.word	0x2000b1cc
 800d3d4:	20005a74 	.word	0x20005a74
 800d3d8:	2000b1d0 	.word	0x2000b1d0
 800d3dc:	2000b1d4 	.word	0x2000b1d4
 800d3e0:	2000b1d2 	.word	0x2000b1d2
 800d3e4:	08015dec 	.word	0x08015dec
 800d3e8:	08015dfc 	.word	0x08015dfc
 800d3ec:	08015e08 	.word	0x08015e08
 800d3f0:	2000b1dc 	.word	0x2000b1dc
 800d3f4:	2000b1e0 	.word	0x2000b1e0
 800d3f8:	2000b1e8 	.word	0x2000b1e8
 800d3fc:	2000b1e6 	.word	0x2000b1e6
 800d400:	2000b1b0 	.word	0x2000b1b0
 800d404:	08015e28 	.word	0x08015e28
 800d408:	08015e50 	.word	0x08015e50
 800d40c:	08015e7c 	.word	0x08015e7c
    }

    if (pcb->remote_port == tcphdr->src &&
 800d410:	69fb      	ldr	r3, [r7, #28]
 800d412:	8b1a      	ldrh	r2, [r3, #24]
 800d414:	4b72      	ldr	r3, [pc, #456]	@ (800d5e0 <tcp_input+0x49c>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	881b      	ldrh	r3, [r3, #0]
 800d41a:	b29b      	uxth	r3, r3
 800d41c:	429a      	cmp	r2, r3
 800d41e:	d13a      	bne.n	800d496 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d420:	69fb      	ldr	r3, [r7, #28]
 800d422:	8ada      	ldrh	r2, [r3, #22]
 800d424:	4b6e      	ldr	r3, [pc, #440]	@ (800d5e0 <tcp_input+0x49c>)
 800d426:	681b      	ldr	r3, [r3, #0]
 800d428:	885b      	ldrh	r3, [r3, #2]
 800d42a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d42c:	429a      	cmp	r2, r3
 800d42e:	d132      	bne.n	800d496 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d430:	69fb      	ldr	r3, [r7, #28]
 800d432:	685a      	ldr	r2, [r3, #4]
 800d434:	4b6b      	ldr	r3, [pc, #428]	@ (800d5e4 <tcp_input+0x4a0>)
 800d436:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d438:	429a      	cmp	r2, r3
 800d43a:	d12c      	bne.n	800d496 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d43c:	69fb      	ldr	r3, [r7, #28]
 800d43e:	681a      	ldr	r2, [r3, #0]
 800d440:	4b68      	ldr	r3, [pc, #416]	@ (800d5e4 <tcp_input+0x4a0>)
 800d442:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d444:	429a      	cmp	r2, r3
 800d446:	d126      	bne.n	800d496 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d448:	69fb      	ldr	r3, [r7, #28]
 800d44a:	68db      	ldr	r3, [r3, #12]
 800d44c:	69fa      	ldr	r2, [r7, #28]
 800d44e:	429a      	cmp	r2, r3
 800d450:	d106      	bne.n	800d460 <tcp_input+0x31c>
 800d452:	4b65      	ldr	r3, [pc, #404]	@ (800d5e8 <tcp_input+0x4a4>)
 800d454:	f240 120d 	movw	r2, #269	@ 0x10d
 800d458:	4964      	ldr	r1, [pc, #400]	@ (800d5ec <tcp_input+0x4a8>)
 800d45a:	4865      	ldr	r0, [pc, #404]	@ (800d5f0 <tcp_input+0x4ac>)
 800d45c:	f006 fc5e 	bl	8013d1c <iprintf>
      if (prev != NULL) {
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	2b00      	cmp	r3, #0
 800d464:	d00a      	beq.n	800d47c <tcp_input+0x338>
        prev->next = pcb->next;
 800d466:	69fb      	ldr	r3, [r7, #28]
 800d468:	68da      	ldr	r2, [r3, #12]
 800d46a:	69bb      	ldr	r3, [r7, #24]
 800d46c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d46e:	4b61      	ldr	r3, [pc, #388]	@ (800d5f4 <tcp_input+0x4b0>)
 800d470:	681a      	ldr	r2, [r3, #0]
 800d472:	69fb      	ldr	r3, [r7, #28]
 800d474:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d476:	4a5f      	ldr	r2, [pc, #380]	@ (800d5f4 <tcp_input+0x4b0>)
 800d478:	69fb      	ldr	r3, [r7, #28]
 800d47a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d47c:	69fb      	ldr	r3, [r7, #28]
 800d47e:	68db      	ldr	r3, [r3, #12]
 800d480:	69fa      	ldr	r2, [r7, #28]
 800d482:	429a      	cmp	r2, r3
 800d484:	d111      	bne.n	800d4aa <tcp_input+0x366>
 800d486:	4b58      	ldr	r3, [pc, #352]	@ (800d5e8 <tcp_input+0x4a4>)
 800d488:	f240 1215 	movw	r2, #277	@ 0x115
 800d48c:	495a      	ldr	r1, [pc, #360]	@ (800d5f8 <tcp_input+0x4b4>)
 800d48e:	4858      	ldr	r0, [pc, #352]	@ (800d5f0 <tcp_input+0x4ac>)
 800d490:	f006 fc44 	bl	8013d1c <iprintf>
      break;
 800d494:	e009      	b.n	800d4aa <tcp_input+0x366>
    }
    prev = pcb;
 800d496:	69fb      	ldr	r3, [r7, #28]
 800d498:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d49a:	69fb      	ldr	r3, [r7, #28]
 800d49c:	68db      	ldr	r3, [r3, #12]
 800d49e:	61fb      	str	r3, [r7, #28]
 800d4a0:	69fb      	ldr	r3, [r7, #28]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	f47f af5e 	bne.w	800d364 <tcp_input+0x220>
 800d4a8:	e000      	b.n	800d4ac <tcp_input+0x368>
      break;
 800d4aa:	bf00      	nop
  }

  if (pcb == NULL) {
 800d4ac:	69fb      	ldr	r3, [r7, #28]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	f040 80aa 	bne.w	800d608 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d4b4:	4b51      	ldr	r3, [pc, #324]	@ (800d5fc <tcp_input+0x4b8>)
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	61fb      	str	r3, [r7, #28]
 800d4ba:	e03f      	b.n	800d53c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d4bc:	69fb      	ldr	r3, [r7, #28]
 800d4be:	7d1b      	ldrb	r3, [r3, #20]
 800d4c0:	2b0a      	cmp	r3, #10
 800d4c2:	d006      	beq.n	800d4d2 <tcp_input+0x38e>
 800d4c4:	4b48      	ldr	r3, [pc, #288]	@ (800d5e8 <tcp_input+0x4a4>)
 800d4c6:	f240 121f 	movw	r2, #287	@ 0x11f
 800d4ca:	494d      	ldr	r1, [pc, #308]	@ (800d600 <tcp_input+0x4bc>)
 800d4cc:	4848      	ldr	r0, [pc, #288]	@ (800d5f0 <tcp_input+0x4ac>)
 800d4ce:	f006 fc25 	bl	8013d1c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d4d2:	69fb      	ldr	r3, [r7, #28]
 800d4d4:	7a1b      	ldrb	r3, [r3, #8]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d009      	beq.n	800d4ee <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d4da:	69fb      	ldr	r3, [r7, #28]
 800d4dc:	7a1a      	ldrb	r2, [r3, #8]
 800d4de:	4b41      	ldr	r3, [pc, #260]	@ (800d5e4 <tcp_input+0x4a0>)
 800d4e0:	685b      	ldr	r3, [r3, #4]
 800d4e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d122      	bne.n	800d534 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d4ee:	69fb      	ldr	r3, [r7, #28]
 800d4f0:	8b1a      	ldrh	r2, [r3, #24]
 800d4f2:	4b3b      	ldr	r3, [pc, #236]	@ (800d5e0 <tcp_input+0x49c>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	881b      	ldrh	r3, [r3, #0]
 800d4f8:	b29b      	uxth	r3, r3
 800d4fa:	429a      	cmp	r2, r3
 800d4fc:	d11b      	bne.n	800d536 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d4fe:	69fb      	ldr	r3, [r7, #28]
 800d500:	8ada      	ldrh	r2, [r3, #22]
 800d502:	4b37      	ldr	r3, [pc, #220]	@ (800d5e0 <tcp_input+0x49c>)
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	885b      	ldrh	r3, [r3, #2]
 800d508:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d113      	bne.n	800d536 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d50e:	69fb      	ldr	r3, [r7, #28]
 800d510:	685a      	ldr	r2, [r3, #4]
 800d512:	4b34      	ldr	r3, [pc, #208]	@ (800d5e4 <tcp_input+0x4a0>)
 800d514:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d516:	429a      	cmp	r2, r3
 800d518:	d10d      	bne.n	800d536 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d51a:	69fb      	ldr	r3, [r7, #28]
 800d51c:	681a      	ldr	r2, [r3, #0]
 800d51e:	4b31      	ldr	r3, [pc, #196]	@ (800d5e4 <tcp_input+0x4a0>)
 800d520:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d522:	429a      	cmp	r2, r3
 800d524:	d107      	bne.n	800d536 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d526:	69f8      	ldr	r0, [r7, #28]
 800d528:	f000 fb56 	bl	800dbd8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f7fd ffdf 	bl	800b4f0 <pbuf_free>
        return;
 800d532:	e1fd      	b.n	800d930 <tcp_input+0x7ec>
        continue;
 800d534:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d536:	69fb      	ldr	r3, [r7, #28]
 800d538:	68db      	ldr	r3, [r3, #12]
 800d53a:	61fb      	str	r3, [r7, #28]
 800d53c:	69fb      	ldr	r3, [r7, #28]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d1bc      	bne.n	800d4bc <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d542:	2300      	movs	r3, #0
 800d544:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d546:	4b2f      	ldr	r3, [pc, #188]	@ (800d604 <tcp_input+0x4c0>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	617b      	str	r3, [r7, #20]
 800d54c:	e02a      	b.n	800d5a4 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	7a1b      	ldrb	r3, [r3, #8]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d00c      	beq.n	800d570 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	7a1a      	ldrb	r2, [r3, #8]
 800d55a:	4b22      	ldr	r3, [pc, #136]	@ (800d5e4 <tcp_input+0x4a0>)
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d562:	3301      	adds	r3, #1
 800d564:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d566:	429a      	cmp	r2, r3
 800d568:	d002      	beq.n	800d570 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	61bb      	str	r3, [r7, #24]
        continue;
 800d56e:	e016      	b.n	800d59e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	8ada      	ldrh	r2, [r3, #22]
 800d574:	4b1a      	ldr	r3, [pc, #104]	@ (800d5e0 <tcp_input+0x49c>)
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	885b      	ldrh	r3, [r3, #2]
 800d57a:	b29b      	uxth	r3, r3
 800d57c:	429a      	cmp	r2, r3
 800d57e:	d10c      	bne.n	800d59a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d580:	697b      	ldr	r3, [r7, #20]
 800d582:	681a      	ldr	r2, [r3, #0]
 800d584:	4b17      	ldr	r3, [pc, #92]	@ (800d5e4 <tcp_input+0x4a0>)
 800d586:	695b      	ldr	r3, [r3, #20]
 800d588:	429a      	cmp	r2, r3
 800d58a:	d00f      	beq.n	800d5ac <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d00d      	beq.n	800d5ae <tcp_input+0x46a>
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d009      	beq.n	800d5ae <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	68db      	ldr	r3, [r3, #12]
 800d5a2:	617b      	str	r3, [r7, #20]
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d1d1      	bne.n	800d54e <tcp_input+0x40a>
 800d5aa:	e000      	b.n	800d5ae <tcp_input+0x46a>
            break;
 800d5ac:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d029      	beq.n	800d608 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d5b4:	69bb      	ldr	r3, [r7, #24]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d00a      	beq.n	800d5d0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d5ba:	697b      	ldr	r3, [r7, #20]
 800d5bc:	68da      	ldr	r2, [r3, #12]
 800d5be:	69bb      	ldr	r3, [r7, #24]
 800d5c0:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d5c2:	4b10      	ldr	r3, [pc, #64]	@ (800d604 <tcp_input+0x4c0>)
 800d5c4:	681a      	ldr	r2, [r3, #0]
 800d5c6:	697b      	ldr	r3, [r7, #20]
 800d5c8:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d5ca:	4a0e      	ldr	r2, [pc, #56]	@ (800d604 <tcp_input+0x4c0>)
 800d5cc:	697b      	ldr	r3, [r7, #20]
 800d5ce:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d5d0:	6978      	ldr	r0, [r7, #20]
 800d5d2:	f000 fa03 	bl	800d9dc <tcp_listen_input>
      }
      pbuf_free(p);
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f7fd ff8a 	bl	800b4f0 <pbuf_free>
      return;
 800d5dc:	e1a8      	b.n	800d930 <tcp_input+0x7ec>
 800d5de:	bf00      	nop
 800d5e0:	2000b1cc 	.word	0x2000b1cc
 800d5e4:	20005a74 	.word	0x20005a74
 800d5e8:	08015d78 	.word	0x08015d78
 800d5ec:	08015ea4 	.word	0x08015ea4
 800d5f0:	08015dc4 	.word	0x08015dc4
 800d5f4:	2000b1b0 	.word	0x2000b1b0
 800d5f8:	08015ed0 	.word	0x08015ed0
 800d5fc:	2000b1b4 	.word	0x2000b1b4
 800d600:	08015efc 	.word	0x08015efc
 800d604:	2000b1ac 	.word	0x2000b1ac
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d608:	69fb      	ldr	r3, [r7, #28]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	f000 8158 	beq.w	800d8c0 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d610:	4b95      	ldr	r3, [pc, #596]	@ (800d868 <tcp_input+0x724>)
 800d612:	2200      	movs	r2, #0
 800d614:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	891a      	ldrh	r2, [r3, #8]
 800d61a:	4b93      	ldr	r3, [pc, #588]	@ (800d868 <tcp_input+0x724>)
 800d61c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d61e:	4a92      	ldr	r2, [pc, #584]	@ (800d868 <tcp_input+0x724>)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d624:	4b91      	ldr	r3, [pc, #580]	@ (800d86c <tcp_input+0x728>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	4a8f      	ldr	r2, [pc, #572]	@ (800d868 <tcp_input+0x724>)
 800d62a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d62c:	4b90      	ldr	r3, [pc, #576]	@ (800d870 <tcp_input+0x72c>)
 800d62e:	2200      	movs	r2, #0
 800d630:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d632:	4b90      	ldr	r3, [pc, #576]	@ (800d874 <tcp_input+0x730>)
 800d634:	2200      	movs	r2, #0
 800d636:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d638:	4b8f      	ldr	r3, [pc, #572]	@ (800d878 <tcp_input+0x734>)
 800d63a:	2200      	movs	r2, #0
 800d63c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d63e:	4b8f      	ldr	r3, [pc, #572]	@ (800d87c <tcp_input+0x738>)
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	f003 0308 	and.w	r3, r3, #8
 800d646:	2b00      	cmp	r3, #0
 800d648:	d006      	beq.n	800d658 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	7b5b      	ldrb	r3, [r3, #13]
 800d64e:	f043 0301 	orr.w	r3, r3, #1
 800d652:	b2da      	uxtb	r2, r3
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d658:	69fb      	ldr	r3, [r7, #28]
 800d65a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d017      	beq.n	800d690 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d660:	69f8      	ldr	r0, [r7, #28]
 800d662:	f7ff f929 	bl	800c8b8 <tcp_process_refused_data>
 800d666:	4603      	mov	r3, r0
 800d668:	f113 0f0d 	cmn.w	r3, #13
 800d66c:	d007      	beq.n	800d67e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d66e:	69fb      	ldr	r3, [r7, #28]
 800d670:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d672:	2b00      	cmp	r3, #0
 800d674:	d00c      	beq.n	800d690 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d676:	4b82      	ldr	r3, [pc, #520]	@ (800d880 <tcp_input+0x73c>)
 800d678:	881b      	ldrh	r3, [r3, #0]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d008      	beq.n	800d690 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d67e:	69fb      	ldr	r3, [r7, #28]
 800d680:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d682:	2b00      	cmp	r3, #0
 800d684:	f040 80e3 	bne.w	800d84e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d688:	69f8      	ldr	r0, [r7, #28]
 800d68a:	f003 f9a7 	bl	80109dc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d68e:	e0de      	b.n	800d84e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800d690:	4a7c      	ldr	r2, [pc, #496]	@ (800d884 <tcp_input+0x740>)
 800d692:	69fb      	ldr	r3, [r7, #28]
 800d694:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d696:	69f8      	ldr	r0, [r7, #28]
 800d698:	f000 fb18 	bl	800dccc <tcp_process>
 800d69c:	4603      	mov	r3, r0
 800d69e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d6a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d6a4:	f113 0f0d 	cmn.w	r3, #13
 800d6a8:	f000 80d3 	beq.w	800d852 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800d6ac:	4b71      	ldr	r3, [pc, #452]	@ (800d874 <tcp_input+0x730>)
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	f003 0308 	and.w	r3, r3, #8
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d015      	beq.n	800d6e4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d6b8:	69fb      	ldr	r3, [r7, #28]
 800d6ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d008      	beq.n	800d6d4 <tcp_input+0x590>
 800d6c2:	69fb      	ldr	r3, [r7, #28]
 800d6c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d6c8:	69fa      	ldr	r2, [r7, #28]
 800d6ca:	6912      	ldr	r2, [r2, #16]
 800d6cc:	f06f 010d 	mvn.w	r1, #13
 800d6d0:	4610      	mov	r0, r2
 800d6d2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d6d4:	69f9      	ldr	r1, [r7, #28]
 800d6d6:	486c      	ldr	r0, [pc, #432]	@ (800d888 <tcp_input+0x744>)
 800d6d8:	f7ff fbbc 	bl	800ce54 <tcp_pcb_remove>
        tcp_free(pcb);
 800d6dc:	69f8      	ldr	r0, [r7, #28]
 800d6de:	f7fe f9a7 	bl	800ba30 <tcp_free>
 800d6e2:	e0da      	b.n	800d89a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d6e8:	4b63      	ldr	r3, [pc, #396]	@ (800d878 <tcp_input+0x734>)
 800d6ea:	881b      	ldrh	r3, [r3, #0]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d01d      	beq.n	800d72c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d6f0:	4b61      	ldr	r3, [pc, #388]	@ (800d878 <tcp_input+0x734>)
 800d6f2:	881b      	ldrh	r3, [r3, #0]
 800d6f4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d6f6:	69fb      	ldr	r3, [r7, #28]
 800d6f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d00a      	beq.n	800d716 <tcp_input+0x5d2>
 800d700:	69fb      	ldr	r3, [r7, #28]
 800d702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d706:	69fa      	ldr	r2, [r7, #28]
 800d708:	6910      	ldr	r0, [r2, #16]
 800d70a:	89fa      	ldrh	r2, [r7, #14]
 800d70c:	69f9      	ldr	r1, [r7, #28]
 800d70e:	4798      	blx	r3
 800d710:	4603      	mov	r3, r0
 800d712:	74fb      	strb	r3, [r7, #19]
 800d714:	e001      	b.n	800d71a <tcp_input+0x5d6>
 800d716:	2300      	movs	r3, #0
 800d718:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d71a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d71e:	f113 0f0d 	cmn.w	r3, #13
 800d722:	f000 8098 	beq.w	800d856 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d726:	4b54      	ldr	r3, [pc, #336]	@ (800d878 <tcp_input+0x734>)
 800d728:	2200      	movs	r2, #0
 800d72a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d72c:	69f8      	ldr	r0, [r7, #28]
 800d72e:	f000 f915 	bl	800d95c <tcp_input_delayed_close>
 800d732:	4603      	mov	r3, r0
 800d734:	2b00      	cmp	r3, #0
 800d736:	f040 8090 	bne.w	800d85a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d73a:	4b4d      	ldr	r3, [pc, #308]	@ (800d870 <tcp_input+0x72c>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d041      	beq.n	800d7c6 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d742:	69fb      	ldr	r3, [r7, #28]
 800d744:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d746:	2b00      	cmp	r3, #0
 800d748:	d006      	beq.n	800d758 <tcp_input+0x614>
 800d74a:	4b50      	ldr	r3, [pc, #320]	@ (800d88c <tcp_input+0x748>)
 800d74c:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800d750:	494f      	ldr	r1, [pc, #316]	@ (800d890 <tcp_input+0x74c>)
 800d752:	4850      	ldr	r0, [pc, #320]	@ (800d894 <tcp_input+0x750>)
 800d754:	f006 fae2 	bl	8013d1c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d758:	69fb      	ldr	r3, [r7, #28]
 800d75a:	8b5b      	ldrh	r3, [r3, #26]
 800d75c:	f003 0310 	and.w	r3, r3, #16
 800d760:	2b00      	cmp	r3, #0
 800d762:	d008      	beq.n	800d776 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d764:	4b42      	ldr	r3, [pc, #264]	@ (800d870 <tcp_input+0x72c>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	4618      	mov	r0, r3
 800d76a:	f7fd fec1 	bl	800b4f0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d76e:	69f8      	ldr	r0, [r7, #28]
 800d770:	f7fe fc46 	bl	800c000 <tcp_abort>
            goto aborted;
 800d774:	e091      	b.n	800d89a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d776:	69fb      	ldr	r3, [r7, #28]
 800d778:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d00c      	beq.n	800d79a <tcp_input+0x656>
 800d780:	69fb      	ldr	r3, [r7, #28]
 800d782:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d786:	69fb      	ldr	r3, [r7, #28]
 800d788:	6918      	ldr	r0, [r3, #16]
 800d78a:	4b39      	ldr	r3, [pc, #228]	@ (800d870 <tcp_input+0x72c>)
 800d78c:	681a      	ldr	r2, [r3, #0]
 800d78e:	2300      	movs	r3, #0
 800d790:	69f9      	ldr	r1, [r7, #28]
 800d792:	47a0      	blx	r4
 800d794:	4603      	mov	r3, r0
 800d796:	74fb      	strb	r3, [r7, #19]
 800d798:	e008      	b.n	800d7ac <tcp_input+0x668>
 800d79a:	4b35      	ldr	r3, [pc, #212]	@ (800d870 <tcp_input+0x72c>)
 800d79c:	681a      	ldr	r2, [r3, #0]
 800d79e:	2300      	movs	r3, #0
 800d7a0:	69f9      	ldr	r1, [r7, #28]
 800d7a2:	2000      	movs	r0, #0
 800d7a4:	f7ff f95e 	bl	800ca64 <tcp_recv_null>
 800d7a8:	4603      	mov	r3, r0
 800d7aa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d7ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d7b0:	f113 0f0d 	cmn.w	r3, #13
 800d7b4:	d053      	beq.n	800d85e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d7b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d003      	beq.n	800d7c6 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d7be:	4b2c      	ldr	r3, [pc, #176]	@ (800d870 <tcp_input+0x72c>)
 800d7c0:	681a      	ldr	r2, [r3, #0]
 800d7c2:	69fb      	ldr	r3, [r7, #28]
 800d7c4:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d7c6:	4b2b      	ldr	r3, [pc, #172]	@ (800d874 <tcp_input+0x730>)
 800d7c8:	781b      	ldrb	r3, [r3, #0]
 800d7ca:	f003 0320 	and.w	r3, r3, #32
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d030      	beq.n	800d834 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800d7d2:	69fb      	ldr	r3, [r7, #28]
 800d7d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d009      	beq.n	800d7ee <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d7da:	69fb      	ldr	r3, [r7, #28]
 800d7dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d7de:	7b5a      	ldrb	r2, [r3, #13]
 800d7e0:	69fb      	ldr	r3, [r7, #28]
 800d7e2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800d7e4:	f042 0220 	orr.w	r2, r2, #32
 800d7e8:	b2d2      	uxtb	r2, r2
 800d7ea:	735a      	strb	r2, [r3, #13]
 800d7ec:	e022      	b.n	800d834 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d7ee:	69fb      	ldr	r3, [r7, #28]
 800d7f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7f2:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 800d7f6:	d005      	beq.n	800d804 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800d7f8:	69fb      	ldr	r3, [r7, #28]
 800d7fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	b29a      	uxth	r2, r3
 800d800:	69fb      	ldr	r3, [r7, #28]
 800d802:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	d00b      	beq.n	800d826 <tcp_input+0x6e2>
 800d80e:	69fb      	ldr	r3, [r7, #28]
 800d810:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 800d814:	69fb      	ldr	r3, [r7, #28]
 800d816:	6918      	ldr	r0, [r3, #16]
 800d818:	2300      	movs	r3, #0
 800d81a:	2200      	movs	r2, #0
 800d81c:	69f9      	ldr	r1, [r7, #28]
 800d81e:	47a0      	blx	r4
 800d820:	4603      	mov	r3, r0
 800d822:	74fb      	strb	r3, [r7, #19]
 800d824:	e001      	b.n	800d82a <tcp_input+0x6e6>
 800d826:	2300      	movs	r3, #0
 800d828:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d82a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d82e:	f113 0f0d 	cmn.w	r3, #13
 800d832:	d016      	beq.n	800d862 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d834:	4b13      	ldr	r3, [pc, #76]	@ (800d884 <tcp_input+0x740>)
 800d836:	2200      	movs	r2, #0
 800d838:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d83a:	69f8      	ldr	r0, [r7, #28]
 800d83c:	f000 f88e 	bl	800d95c <tcp_input_delayed_close>
 800d840:	4603      	mov	r3, r0
 800d842:	2b00      	cmp	r3, #0
 800d844:	d128      	bne.n	800d898 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d846:	69f8      	ldr	r0, [r7, #28]
 800d848:	f002 fac2 	bl	800fdd0 <tcp_output>
 800d84c:	e025      	b.n	800d89a <tcp_input+0x756>
        goto aborted;
 800d84e:	bf00      	nop
 800d850:	e023      	b.n	800d89a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d852:	bf00      	nop
 800d854:	e021      	b.n	800d89a <tcp_input+0x756>
              goto aborted;
 800d856:	bf00      	nop
 800d858:	e01f      	b.n	800d89a <tcp_input+0x756>
          goto aborted;
 800d85a:	bf00      	nop
 800d85c:	e01d      	b.n	800d89a <tcp_input+0x756>
            goto aborted;
 800d85e:	bf00      	nop
 800d860:	e01b      	b.n	800d89a <tcp_input+0x756>
              goto aborted;
 800d862:	bf00      	nop
 800d864:	e019      	b.n	800d89a <tcp_input+0x756>
 800d866:	bf00      	nop
 800d868:	2000b1bc 	.word	0x2000b1bc
 800d86c:	2000b1cc 	.word	0x2000b1cc
 800d870:	2000b1ec 	.word	0x2000b1ec
 800d874:	2000b1e9 	.word	0x2000b1e9
 800d878:	2000b1e4 	.word	0x2000b1e4
 800d87c:	2000b1e8 	.word	0x2000b1e8
 800d880:	2000b1e6 	.word	0x2000b1e6
 800d884:	2000b1f0 	.word	0x2000b1f0
 800d888:	2000b1b0 	.word	0x2000b1b0
 800d88c:	08015d78 	.word	0x08015d78
 800d890:	08015f2c 	.word	0x08015f2c
 800d894:	08015dc4 	.word	0x08015dc4
          goto aborted;
 800d898:	bf00      	nop
    tcp_input_pcb = NULL;
 800d89a:	4b27      	ldr	r3, [pc, #156]	@ (800d938 <tcp_input+0x7f4>)
 800d89c:	2200      	movs	r2, #0
 800d89e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d8a0:	4b26      	ldr	r3, [pc, #152]	@ (800d93c <tcp_input+0x7f8>)
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d8a6:	4b26      	ldr	r3, [pc, #152]	@ (800d940 <tcp_input+0x7fc>)
 800d8a8:	685b      	ldr	r3, [r3, #4]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d03f      	beq.n	800d92e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800d8ae:	4b24      	ldr	r3, [pc, #144]	@ (800d940 <tcp_input+0x7fc>)
 800d8b0:	685b      	ldr	r3, [r3, #4]
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	f7fd fe1c 	bl	800b4f0 <pbuf_free>
      inseg.p = NULL;
 800d8b8:	4b21      	ldr	r3, [pc, #132]	@ (800d940 <tcp_input+0x7fc>)
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d8be:	e036      	b.n	800d92e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d8c0:	4b20      	ldr	r3, [pc, #128]	@ (800d944 <tcp_input+0x800>)
 800d8c2:	681b      	ldr	r3, [r3, #0]
 800d8c4:	899b      	ldrh	r3, [r3, #12]
 800d8c6:	b29b      	uxth	r3, r3
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	f7fc fab3 	bl	8009e34 <lwip_htons>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	b2db      	uxtb	r3, r3
 800d8d2:	f003 0304 	and.w	r3, r3, #4
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d118      	bne.n	800d90c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d8da:	4b1b      	ldr	r3, [pc, #108]	@ (800d948 <tcp_input+0x804>)
 800d8dc:	6819      	ldr	r1, [r3, #0]
 800d8de:	4b1b      	ldr	r3, [pc, #108]	@ (800d94c <tcp_input+0x808>)
 800d8e0:	881b      	ldrh	r3, [r3, #0]
 800d8e2:	461a      	mov	r2, r3
 800d8e4:	4b1a      	ldr	r3, [pc, #104]	@ (800d950 <tcp_input+0x80c>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d8ea:	4b16      	ldr	r3, [pc, #88]	@ (800d944 <tcp_input+0x800>)
 800d8ec:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d8ee:	885b      	ldrh	r3, [r3, #2]
 800d8f0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d8f2:	4a14      	ldr	r2, [pc, #80]	@ (800d944 <tcp_input+0x800>)
 800d8f4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d8f6:	8812      	ldrh	r2, [r2, #0]
 800d8f8:	b292      	uxth	r2, r2
 800d8fa:	9202      	str	r2, [sp, #8]
 800d8fc:	9301      	str	r3, [sp, #4]
 800d8fe:	4b15      	ldr	r3, [pc, #84]	@ (800d954 <tcp_input+0x810>)
 800d900:	9300      	str	r3, [sp, #0]
 800d902:	4b15      	ldr	r3, [pc, #84]	@ (800d958 <tcp_input+0x814>)
 800d904:	4602      	mov	r2, r0
 800d906:	2000      	movs	r0, #0
 800d908:	f003 f816 	bl	8010938 <tcp_rst>
    pbuf_free(p);
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f7fd fdef 	bl	800b4f0 <pbuf_free>
  return;
 800d912:	e00c      	b.n	800d92e <tcp_input+0x7ea>
    goto dropped;
 800d914:	bf00      	nop
 800d916:	e006      	b.n	800d926 <tcp_input+0x7e2>
    goto dropped;
 800d918:	bf00      	nop
 800d91a:	e004      	b.n	800d926 <tcp_input+0x7e2>
    goto dropped;
 800d91c:	bf00      	nop
 800d91e:	e002      	b.n	800d926 <tcp_input+0x7e2>
      goto dropped;
 800d920:	bf00      	nop
 800d922:	e000      	b.n	800d926 <tcp_input+0x7e2>
      goto dropped;
 800d924:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f7fd fde2 	bl	800b4f0 <pbuf_free>
 800d92c:	e000      	b.n	800d930 <tcp_input+0x7ec>
  return;
 800d92e:	bf00      	nop
}
 800d930:	3724      	adds	r7, #36	@ 0x24
 800d932:	46bd      	mov	sp, r7
 800d934:	bd90      	pop	{r4, r7, pc}
 800d936:	bf00      	nop
 800d938:	2000b1f0 	.word	0x2000b1f0
 800d93c:	2000b1ec 	.word	0x2000b1ec
 800d940:	2000b1bc 	.word	0x2000b1bc
 800d944:	2000b1cc 	.word	0x2000b1cc
 800d948:	2000b1e0 	.word	0x2000b1e0
 800d94c:	2000b1e6 	.word	0x2000b1e6
 800d950:	2000b1dc 	.word	0x2000b1dc
 800d954:	20005a84 	.word	0x20005a84
 800d958:	20005a88 	.word	0x20005a88

0800d95c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d95c:	b580      	push	{r7, lr}
 800d95e:	b082      	sub	sp, #8
 800d960:	af00      	add	r7, sp, #0
 800d962:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d106      	bne.n	800d978 <tcp_input_delayed_close+0x1c>
 800d96a:	4b17      	ldr	r3, [pc, #92]	@ (800d9c8 <tcp_input_delayed_close+0x6c>)
 800d96c:	f240 225a 	movw	r2, #602	@ 0x25a
 800d970:	4916      	ldr	r1, [pc, #88]	@ (800d9cc <tcp_input_delayed_close+0x70>)
 800d972:	4817      	ldr	r0, [pc, #92]	@ (800d9d0 <tcp_input_delayed_close+0x74>)
 800d974:	f006 f9d2 	bl	8013d1c <iprintf>

  if (recv_flags & TF_CLOSED) {
 800d978:	4b16      	ldr	r3, [pc, #88]	@ (800d9d4 <tcp_input_delayed_close+0x78>)
 800d97a:	781b      	ldrb	r3, [r3, #0]
 800d97c:	f003 0310 	and.w	r3, r3, #16
 800d980:	2b00      	cmp	r3, #0
 800d982:	d01c      	beq.n	800d9be <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	8b5b      	ldrh	r3, [r3, #26]
 800d988:	f003 0310 	and.w	r3, r3, #16
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d10d      	bne.n	800d9ac <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d996:	2b00      	cmp	r3, #0
 800d998:	d008      	beq.n	800d9ac <tcp_input_delayed_close+0x50>
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800d9a0:	687a      	ldr	r2, [r7, #4]
 800d9a2:	6912      	ldr	r2, [r2, #16]
 800d9a4:	f06f 010e 	mvn.w	r1, #14
 800d9a8:	4610      	mov	r0, r2
 800d9aa:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d9ac:	6879      	ldr	r1, [r7, #4]
 800d9ae:	480a      	ldr	r0, [pc, #40]	@ (800d9d8 <tcp_input_delayed_close+0x7c>)
 800d9b0:	f7ff fa50 	bl	800ce54 <tcp_pcb_remove>
    tcp_free(pcb);
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f7fe f83b 	bl	800ba30 <tcp_free>
    return 1;
 800d9ba:	2301      	movs	r3, #1
 800d9bc:	e000      	b.n	800d9c0 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800d9be:	2300      	movs	r3, #0
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3708      	adds	r7, #8
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}
 800d9c8:	08015d78 	.word	0x08015d78
 800d9cc:	08015f48 	.word	0x08015f48
 800d9d0:	08015dc4 	.word	0x08015dc4
 800d9d4:	2000b1e9 	.word	0x2000b1e9
 800d9d8:	2000b1b0 	.word	0x2000b1b0

0800d9dc <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d9dc:	b590      	push	{r4, r7, lr}
 800d9de:	b08b      	sub	sp, #44	@ 0x2c
 800d9e0:	af04      	add	r7, sp, #16
 800d9e2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d9e4:	4b6f      	ldr	r3, [pc, #444]	@ (800dba4 <tcp_listen_input+0x1c8>)
 800d9e6:	781b      	ldrb	r3, [r3, #0]
 800d9e8:	f003 0304 	and.w	r3, r3, #4
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	f040 80d2 	bne.w	800db96 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d106      	bne.n	800da06 <tcp_listen_input+0x2a>
 800d9f8:	4b6b      	ldr	r3, [pc, #428]	@ (800dba8 <tcp_listen_input+0x1cc>)
 800d9fa:	f240 2281 	movw	r2, #641	@ 0x281
 800d9fe:	496b      	ldr	r1, [pc, #428]	@ (800dbac <tcp_listen_input+0x1d0>)
 800da00:	486b      	ldr	r0, [pc, #428]	@ (800dbb0 <tcp_listen_input+0x1d4>)
 800da02:	f006 f98b 	bl	8013d1c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800da06:	4b67      	ldr	r3, [pc, #412]	@ (800dba4 <tcp_listen_input+0x1c8>)
 800da08:	781b      	ldrb	r3, [r3, #0]
 800da0a:	f003 0310 	and.w	r3, r3, #16
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d019      	beq.n	800da46 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da12:	4b68      	ldr	r3, [pc, #416]	@ (800dbb4 <tcp_listen_input+0x1d8>)
 800da14:	6819      	ldr	r1, [r3, #0]
 800da16:	4b68      	ldr	r3, [pc, #416]	@ (800dbb8 <tcp_listen_input+0x1dc>)
 800da18:	881b      	ldrh	r3, [r3, #0]
 800da1a:	461a      	mov	r2, r3
 800da1c:	4b67      	ldr	r3, [pc, #412]	@ (800dbbc <tcp_listen_input+0x1e0>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800da22:	4b67      	ldr	r3, [pc, #412]	@ (800dbc0 <tcp_listen_input+0x1e4>)
 800da24:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da26:	885b      	ldrh	r3, [r3, #2]
 800da28:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800da2a:	4a65      	ldr	r2, [pc, #404]	@ (800dbc0 <tcp_listen_input+0x1e4>)
 800da2c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da2e:	8812      	ldrh	r2, [r2, #0]
 800da30:	b292      	uxth	r2, r2
 800da32:	9202      	str	r2, [sp, #8]
 800da34:	9301      	str	r3, [sp, #4]
 800da36:	4b63      	ldr	r3, [pc, #396]	@ (800dbc4 <tcp_listen_input+0x1e8>)
 800da38:	9300      	str	r3, [sp, #0]
 800da3a:	4b63      	ldr	r3, [pc, #396]	@ (800dbc8 <tcp_listen_input+0x1ec>)
 800da3c:	4602      	mov	r2, r0
 800da3e:	6878      	ldr	r0, [r7, #4]
 800da40:	f002 ff7a 	bl	8010938 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800da44:	e0a9      	b.n	800db9a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800da46:	4b57      	ldr	r3, [pc, #348]	@ (800dba4 <tcp_listen_input+0x1c8>)
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	f003 0302 	and.w	r3, r3, #2
 800da4e:	2b00      	cmp	r3, #0
 800da50:	f000 80a3 	beq.w	800db9a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	7d5b      	ldrb	r3, [r3, #21]
 800da58:	4618      	mov	r0, r3
 800da5a:	f7ff f927 	bl	800ccac <tcp_alloc>
 800da5e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d111      	bne.n	800da8a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	699b      	ldr	r3, [r3, #24]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d00a      	beq.n	800da84 <tcp_listen_input+0xa8>
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	699b      	ldr	r3, [r3, #24]
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	6910      	ldr	r0, [r2, #16]
 800da76:	f04f 32ff 	mov.w	r2, #4294967295
 800da7a:	2100      	movs	r1, #0
 800da7c:	4798      	blx	r3
 800da7e:	4603      	mov	r3, r0
 800da80:	73bb      	strb	r3, [r7, #14]
      return;
 800da82:	e08b      	b.n	800db9c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800da84:	23f0      	movs	r3, #240	@ 0xf0
 800da86:	73bb      	strb	r3, [r7, #14]
      return;
 800da88:	e088      	b.n	800db9c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800da8a:	4b50      	ldr	r3, [pc, #320]	@ (800dbcc <tcp_listen_input+0x1f0>)
 800da8c:	695a      	ldr	r2, [r3, #20]
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800da92:	4b4e      	ldr	r3, [pc, #312]	@ (800dbcc <tcp_listen_input+0x1f0>)
 800da94:	691a      	ldr	r2, [r3, #16]
 800da96:	697b      	ldr	r3, [r7, #20]
 800da98:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	8ada      	ldrh	r2, [r3, #22]
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800daa2:	4b47      	ldr	r3, [pc, #284]	@ (800dbc0 <tcp_listen_input+0x1e4>)
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	881b      	ldrh	r3, [r3, #0]
 800daa8:	b29a      	uxth	r2, r3
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800daae:	697b      	ldr	r3, [r7, #20]
 800dab0:	2203      	movs	r2, #3
 800dab2:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800dab4:	4b41      	ldr	r3, [pc, #260]	@ (800dbbc <tcp_listen_input+0x1e0>)
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	1c5a      	adds	r2, r3, #1
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800dabe:	697b      	ldr	r3, [r7, #20]
 800dac0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 800dac6:	6978      	ldr	r0, [r7, #20]
 800dac8:	f7ff fa58 	bl	800cf7c <tcp_next_iss>
 800dacc:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	693a      	ldr	r2, [r7, #16]
 800dad2:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	693a      	ldr	r2, [r7, #16]
 800dad8:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	693a      	ldr	r2, [r7, #16]
 800dade:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 800dae0:	697b      	ldr	r3, [r7, #20]
 800dae2:	693a      	ldr	r2, [r7, #16]
 800dae4:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800dae6:	4b35      	ldr	r3, [pc, #212]	@ (800dbbc <tcp_listen_input+0x1e0>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	1e5a      	subs	r2, r3, #1
 800daec:	697b      	ldr	r3, [r7, #20]
 800daee:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	691a      	ldr	r2, [r3, #16]
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800daf8:	697b      	ldr	r3, [r7, #20]
 800dafa:	687a      	ldr	r2, [r7, #4]
 800dafc:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	7a5b      	ldrb	r3, [r3, #9]
 800db02:	f003 030c 	and.w	r3, r3, #12
 800db06:	b2da      	uxtb	r2, r3
 800db08:	697b      	ldr	r3, [r7, #20]
 800db0a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	7a1a      	ldrb	r2, [r3, #8]
 800db10:	697b      	ldr	r3, [r7, #20]
 800db12:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800db14:	4b2e      	ldr	r3, [pc, #184]	@ (800dbd0 <tcp_listen_input+0x1f4>)
 800db16:	681a      	ldr	r2, [r3, #0]
 800db18:	697b      	ldr	r3, [r7, #20]
 800db1a:	60da      	str	r2, [r3, #12]
 800db1c:	4a2c      	ldr	r2, [pc, #176]	@ (800dbd0 <tcp_listen_input+0x1f4>)
 800db1e:	697b      	ldr	r3, [r7, #20]
 800db20:	6013      	str	r3, [r2, #0]
 800db22:	f003 f8cb 	bl	8010cbc <tcp_timer_needed>
 800db26:	4b2b      	ldr	r3, [pc, #172]	@ (800dbd4 <tcp_listen_input+0x1f8>)
 800db28:	2201      	movs	r2, #1
 800db2a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800db2c:	6978      	ldr	r0, [r7, #20]
 800db2e:	f001 fd8b 	bl	800f648 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800db32:	4b23      	ldr	r3, [pc, #140]	@ (800dbc0 <tcp_listen_input+0x1e4>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	89db      	ldrh	r3, [r3, #14]
 800db38:	b29a      	uxth	r2, r3
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800db40:	697b      	ldr	r3, [r7, #20]
 800db42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800db50:	697b      	ldr	r3, [r7, #20]
 800db52:	3304      	adds	r3, #4
 800db54:	4618      	mov	r0, r3
 800db56:	f004 fdf5 	bl	8012744 <ip4_route>
 800db5a:	4601      	mov	r1, r0
 800db5c:	697b      	ldr	r3, [r7, #20]
 800db5e:	3304      	adds	r3, #4
 800db60:	461a      	mov	r2, r3
 800db62:	4620      	mov	r0, r4
 800db64:	f7ff fa30 	bl	800cfc8 <tcp_eff_send_mss_netif>
 800db68:	4603      	mov	r3, r0
 800db6a:	461a      	mov	r2, r3
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800db70:	2112      	movs	r1, #18
 800db72:	6978      	ldr	r0, [r7, #20]
 800db74:	f002 f83e 	bl	800fbf4 <tcp_enqueue_flags>
 800db78:	4603      	mov	r3, r0
 800db7a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800db7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d004      	beq.n	800db8e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800db84:	2100      	movs	r1, #0
 800db86:	6978      	ldr	r0, [r7, #20]
 800db88:	f7fe f97c 	bl	800be84 <tcp_abandon>
      return;
 800db8c:	e006      	b.n	800db9c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800db8e:	6978      	ldr	r0, [r7, #20]
 800db90:	f002 f91e 	bl	800fdd0 <tcp_output>
  return;
 800db94:	e001      	b.n	800db9a <tcp_listen_input+0x1be>
    return;
 800db96:	bf00      	nop
 800db98:	e000      	b.n	800db9c <tcp_listen_input+0x1c0>
  return;
 800db9a:	bf00      	nop
}
 800db9c:	371c      	adds	r7, #28
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd90      	pop	{r4, r7, pc}
 800dba2:	bf00      	nop
 800dba4:	2000b1e8 	.word	0x2000b1e8
 800dba8:	08015d78 	.word	0x08015d78
 800dbac:	08015f70 	.word	0x08015f70
 800dbb0:	08015dc4 	.word	0x08015dc4
 800dbb4:	2000b1e0 	.word	0x2000b1e0
 800dbb8:	2000b1e6 	.word	0x2000b1e6
 800dbbc:	2000b1dc 	.word	0x2000b1dc
 800dbc0:	2000b1cc 	.word	0x2000b1cc
 800dbc4:	20005a84 	.word	0x20005a84
 800dbc8:	20005a88 	.word	0x20005a88
 800dbcc:	20005a74 	.word	0x20005a74
 800dbd0:	2000b1b0 	.word	0x2000b1b0
 800dbd4:	2000b1b8 	.word	0x2000b1b8

0800dbd8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b086      	sub	sp, #24
 800dbdc:	af04      	add	r7, sp, #16
 800dbde:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800dbe0:	4b2f      	ldr	r3, [pc, #188]	@ (800dca0 <tcp_timewait_input+0xc8>)
 800dbe2:	781b      	ldrb	r3, [r3, #0]
 800dbe4:	f003 0304 	and.w	r3, r3, #4
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d153      	bne.n	800dc94 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d106      	bne.n	800dc00 <tcp_timewait_input+0x28>
 800dbf2:	4b2c      	ldr	r3, [pc, #176]	@ (800dca4 <tcp_timewait_input+0xcc>)
 800dbf4:	f240 22ee 	movw	r2, #750	@ 0x2ee
 800dbf8:	492b      	ldr	r1, [pc, #172]	@ (800dca8 <tcp_timewait_input+0xd0>)
 800dbfa:	482c      	ldr	r0, [pc, #176]	@ (800dcac <tcp_timewait_input+0xd4>)
 800dbfc:	f006 f88e 	bl	8013d1c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800dc00:	4b27      	ldr	r3, [pc, #156]	@ (800dca0 <tcp_timewait_input+0xc8>)
 800dc02:	781b      	ldrb	r3, [r3, #0]
 800dc04:	f003 0302 	and.w	r3, r3, #2
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d02a      	beq.n	800dc62 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800dc0c:	4b28      	ldr	r3, [pc, #160]	@ (800dcb0 <tcp_timewait_input+0xd8>)
 800dc0e:	681a      	ldr	r2, [r3, #0]
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc14:	1ad3      	subs	r3, r2, r3
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	db2d      	blt.n	800dc76 <tcp_timewait_input+0x9e>
 800dc1a:	4b25      	ldr	r3, [pc, #148]	@ (800dcb0 <tcp_timewait_input+0xd8>)
 800dc1c:	681a      	ldr	r2, [r3, #0]
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc22:	6879      	ldr	r1, [r7, #4]
 800dc24:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800dc26:	440b      	add	r3, r1
 800dc28:	1ad3      	subs	r3, r2, r3
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	dc23      	bgt.n	800dc76 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dc2e:	4b21      	ldr	r3, [pc, #132]	@ (800dcb4 <tcp_timewait_input+0xdc>)
 800dc30:	6819      	ldr	r1, [r3, #0]
 800dc32:	4b21      	ldr	r3, [pc, #132]	@ (800dcb8 <tcp_timewait_input+0xe0>)
 800dc34:	881b      	ldrh	r3, [r3, #0]
 800dc36:	461a      	mov	r2, r3
 800dc38:	4b1d      	ldr	r3, [pc, #116]	@ (800dcb0 <tcp_timewait_input+0xd8>)
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dc3e:	4b1f      	ldr	r3, [pc, #124]	@ (800dcbc <tcp_timewait_input+0xe4>)
 800dc40:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dc42:	885b      	ldrh	r3, [r3, #2]
 800dc44:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dc46:	4a1d      	ldr	r2, [pc, #116]	@ (800dcbc <tcp_timewait_input+0xe4>)
 800dc48:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dc4a:	8812      	ldrh	r2, [r2, #0]
 800dc4c:	b292      	uxth	r2, r2
 800dc4e:	9202      	str	r2, [sp, #8]
 800dc50:	9301      	str	r3, [sp, #4]
 800dc52:	4b1b      	ldr	r3, [pc, #108]	@ (800dcc0 <tcp_timewait_input+0xe8>)
 800dc54:	9300      	str	r3, [sp, #0]
 800dc56:	4b1b      	ldr	r3, [pc, #108]	@ (800dcc4 <tcp_timewait_input+0xec>)
 800dc58:	4602      	mov	r2, r0
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f002 fe6c 	bl	8010938 <tcp_rst>
      return;
 800dc60:	e01b      	b.n	800dc9a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800dc62:	4b0f      	ldr	r3, [pc, #60]	@ (800dca0 <tcp_timewait_input+0xc8>)
 800dc64:	781b      	ldrb	r3, [r3, #0]
 800dc66:	f003 0301 	and.w	r3, r3, #1
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d003      	beq.n	800dc76 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800dc6e:	4b16      	ldr	r3, [pc, #88]	@ (800dcc8 <tcp_timewait_input+0xf0>)
 800dc70:	681a      	ldr	r2, [r3, #0]
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800dc76:	4b10      	ldr	r3, [pc, #64]	@ (800dcb8 <tcp_timewait_input+0xe0>)
 800dc78:	881b      	ldrh	r3, [r3, #0]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d00c      	beq.n	800dc98 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	8b5b      	ldrh	r3, [r3, #26]
 800dc82:	f043 0302 	orr.w	r3, r3, #2
 800dc86:	b29a      	uxth	r2, r3
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f002 f89f 	bl	800fdd0 <tcp_output>
  }
  return;
 800dc92:	e001      	b.n	800dc98 <tcp_timewait_input+0xc0>
    return;
 800dc94:	bf00      	nop
 800dc96:	e000      	b.n	800dc9a <tcp_timewait_input+0xc2>
  return;
 800dc98:	bf00      	nop
}
 800dc9a:	3708      	adds	r7, #8
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	bd80      	pop	{r7, pc}
 800dca0:	2000b1e8 	.word	0x2000b1e8
 800dca4:	08015d78 	.word	0x08015d78
 800dca8:	08015f90 	.word	0x08015f90
 800dcac:	08015dc4 	.word	0x08015dc4
 800dcb0:	2000b1dc 	.word	0x2000b1dc
 800dcb4:	2000b1e0 	.word	0x2000b1e0
 800dcb8:	2000b1e6 	.word	0x2000b1e6
 800dcbc:	2000b1cc 	.word	0x2000b1cc
 800dcc0:	20005a84 	.word	0x20005a84
 800dcc4:	20005a88 	.word	0x20005a88
 800dcc8:	2000b1a4 	.word	0x2000b1a4

0800dccc <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800dccc:	b590      	push	{r4, r7, lr}
 800dcce:	b08d      	sub	sp, #52	@ 0x34
 800dcd0:	af04      	add	r7, sp, #16
 800dcd2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800dcd8:	2300      	movs	r3, #0
 800dcda:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d106      	bne.n	800dcf0 <tcp_process+0x24>
 800dce2:	4b9d      	ldr	r3, [pc, #628]	@ (800df58 <tcp_process+0x28c>)
 800dce4:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800dce8:	499c      	ldr	r1, [pc, #624]	@ (800df5c <tcp_process+0x290>)
 800dcea:	489d      	ldr	r0, [pc, #628]	@ (800df60 <tcp_process+0x294>)
 800dcec:	f006 f816 	bl	8013d1c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800dcf0:	4b9c      	ldr	r3, [pc, #624]	@ (800df64 <tcp_process+0x298>)
 800dcf2:	781b      	ldrb	r3, [r3, #0]
 800dcf4:	f003 0304 	and.w	r3, r3, #4
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d04e      	beq.n	800dd9a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	7d1b      	ldrb	r3, [r3, #20]
 800dd00:	2b02      	cmp	r3, #2
 800dd02:	d108      	bne.n	800dd16 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800dd08:	4b97      	ldr	r3, [pc, #604]	@ (800df68 <tcp_process+0x29c>)
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	429a      	cmp	r2, r3
 800dd0e:	d123      	bne.n	800dd58 <tcp_process+0x8c>
        acceptable = 1;
 800dd10:	2301      	movs	r3, #1
 800dd12:	76fb      	strb	r3, [r7, #27]
 800dd14:	e020      	b.n	800dd58 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dd1a:	4b94      	ldr	r3, [pc, #592]	@ (800df6c <tcp_process+0x2a0>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d102      	bne.n	800dd28 <tcp_process+0x5c>
        acceptable = 1;
 800dd22:	2301      	movs	r3, #1
 800dd24:	76fb      	strb	r3, [r7, #27]
 800dd26:	e017      	b.n	800dd58 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dd28:	4b90      	ldr	r3, [pc, #576]	@ (800df6c <tcp_process+0x2a0>)
 800dd2a:	681a      	ldr	r2, [r3, #0]
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd30:	1ad3      	subs	r3, r2, r3
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	db10      	blt.n	800dd58 <tcp_process+0x8c>
 800dd36:	4b8d      	ldr	r3, [pc, #564]	@ (800df6c <tcp_process+0x2a0>)
 800dd38:	681a      	ldr	r2, [r3, #0]
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd3e:	6879      	ldr	r1, [r7, #4]
 800dd40:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800dd42:	440b      	add	r3, r1
 800dd44:	1ad3      	subs	r3, r2, r3
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	dc06      	bgt.n	800dd58 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	8b5b      	ldrh	r3, [r3, #26]
 800dd4e:	f043 0302 	orr.w	r3, r3, #2
 800dd52:	b29a      	uxth	r2, r3
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800dd58:	7efb      	ldrb	r3, [r7, #27]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d01b      	beq.n	800dd96 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	7d1b      	ldrb	r3, [r3, #20]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d106      	bne.n	800dd74 <tcp_process+0xa8>
 800dd66:	4b7c      	ldr	r3, [pc, #496]	@ (800df58 <tcp_process+0x28c>)
 800dd68:	f44f 724e 	mov.w	r2, #824	@ 0x338
 800dd6c:	4980      	ldr	r1, [pc, #512]	@ (800df70 <tcp_process+0x2a4>)
 800dd6e:	487c      	ldr	r0, [pc, #496]	@ (800df60 <tcp_process+0x294>)
 800dd70:	f005 ffd4 	bl	8013d1c <iprintf>
      recv_flags |= TF_RESET;
 800dd74:	4b7f      	ldr	r3, [pc, #508]	@ (800df74 <tcp_process+0x2a8>)
 800dd76:	781b      	ldrb	r3, [r3, #0]
 800dd78:	f043 0308 	orr.w	r3, r3, #8
 800dd7c:	b2da      	uxtb	r2, r3
 800dd7e:	4b7d      	ldr	r3, [pc, #500]	@ (800df74 <tcp_process+0x2a8>)
 800dd80:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	8b5b      	ldrh	r3, [r3, #26]
 800dd86:	f023 0301 	bic.w	r3, r3, #1
 800dd8a:	b29a      	uxth	r2, r3
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800dd90:	f06f 030d 	mvn.w	r3, #13
 800dd94:	e37a      	b.n	800e48c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800dd96:	2300      	movs	r3, #0
 800dd98:	e378      	b.n	800e48c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800dd9a:	4b72      	ldr	r3, [pc, #456]	@ (800df64 <tcp_process+0x298>)
 800dd9c:	781b      	ldrb	r3, [r3, #0]
 800dd9e:	f003 0302 	and.w	r3, r3, #2
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d010      	beq.n	800ddc8 <tcp_process+0xfc>
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	7d1b      	ldrb	r3, [r3, #20]
 800ddaa:	2b02      	cmp	r3, #2
 800ddac:	d00c      	beq.n	800ddc8 <tcp_process+0xfc>
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	7d1b      	ldrb	r3, [r3, #20]
 800ddb2:	2b03      	cmp	r3, #3
 800ddb4:	d008      	beq.n	800ddc8 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	8b5b      	ldrh	r3, [r3, #26]
 800ddba:	f043 0302 	orr.w	r3, r3, #2
 800ddbe:	b29a      	uxth	r2, r3
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	e361      	b.n	800e48c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	8b5b      	ldrh	r3, [r3, #26]
 800ddcc:	f003 0310 	and.w	r3, r3, #16
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d103      	bne.n	800dddc <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ddd4:	4b68      	ldr	r3, [pc, #416]	@ (800df78 <tcp_process+0x2ac>)
 800ddd6:	681a      	ldr	r2, [r3, #0]
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2200      	movs	r2, #0
 800dde0:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2200      	movs	r2, #0
 800dde8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f001 fc2b 	bl	800f648 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	7d1b      	ldrb	r3, [r3, #20]
 800ddf6:	3b02      	subs	r3, #2
 800ddf8:	2b07      	cmp	r3, #7
 800ddfa:	f200 8337 	bhi.w	800e46c <tcp_process+0x7a0>
 800ddfe:	a201      	add	r2, pc, #4	@ (adr r2, 800de04 <tcp_process+0x138>)
 800de00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de04:	0800de25 	.word	0x0800de25
 800de08:	0800e055 	.word	0x0800e055
 800de0c:	0800e1cd 	.word	0x0800e1cd
 800de10:	0800e1f7 	.word	0x0800e1f7
 800de14:	0800e31b 	.word	0x0800e31b
 800de18:	0800e1cd 	.word	0x0800e1cd
 800de1c:	0800e3a7 	.word	0x0800e3a7
 800de20:	0800e437 	.word	0x0800e437
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800de24:	4b4f      	ldr	r3, [pc, #316]	@ (800df64 <tcp_process+0x298>)
 800de26:	781b      	ldrb	r3, [r3, #0]
 800de28:	f003 0310 	and.w	r3, r3, #16
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	f000 80e4 	beq.w	800dffa <tcp_process+0x32e>
 800de32:	4b4c      	ldr	r3, [pc, #304]	@ (800df64 <tcp_process+0x298>)
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	f003 0302 	and.w	r3, r3, #2
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	f000 80dd 	beq.w	800dffa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800de44:	1c5a      	adds	r2, r3, #1
 800de46:	4b48      	ldr	r3, [pc, #288]	@ (800df68 <tcp_process+0x29c>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	429a      	cmp	r2, r3
 800de4c:	f040 80d5 	bne.w	800dffa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800de50:	4b46      	ldr	r3, [pc, #280]	@ (800df6c <tcp_process+0x2a0>)
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	1c5a      	adds	r2, r3, #1
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 800de62:	4b41      	ldr	r3, [pc, #260]	@ (800df68 <tcp_process+0x29c>)
 800de64:	681a      	ldr	r2, [r3, #0]
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800de6a:	4b44      	ldr	r3, [pc, #272]	@ (800df7c <tcp_process+0x2b0>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	89db      	ldrh	r3, [r3, #14]
 800de70:	b29a      	uxth	r2, r3
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800de84:	4b39      	ldr	r3, [pc, #228]	@ (800df6c <tcp_process+0x2a0>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	1e5a      	subs	r2, r3, #1
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2204      	movs	r2, #4
 800de92:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	3304      	adds	r3, #4
 800de9c:	4618      	mov	r0, r3
 800de9e:	f004 fc51 	bl	8012744 <ip4_route>
 800dea2:	4601      	mov	r1, r0
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	3304      	adds	r3, #4
 800dea8:	461a      	mov	r2, r3
 800deaa:	4620      	mov	r0, r4
 800deac:	f7ff f88c 	bl	800cfc8 <tcp_eff_send_mss_netif>
 800deb0:	4603      	mov	r3, r0
 800deb2:	461a      	mov	r2, r3
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800debc:	009a      	lsls	r2, r3, #2
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dec2:	005b      	lsls	r3, r3, #1
 800dec4:	f241 111c 	movw	r1, #4380	@ 0x111c
 800dec8:	428b      	cmp	r3, r1
 800deca:	bf38      	it	cc
 800decc:	460b      	movcc	r3, r1
 800dece:	429a      	cmp	r2, r3
 800ded0:	d204      	bcs.n	800dedc <tcp_process+0x210>
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ded6:	009b      	lsls	r3, r3, #2
 800ded8:	b29b      	uxth	r3, r3
 800deda:	e00d      	b.n	800def8 <tcp_process+0x22c>
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800dee0:	005b      	lsls	r3, r3, #1
 800dee2:	f241 121c 	movw	r2, #4380	@ 0x111c
 800dee6:	4293      	cmp	r3, r2
 800dee8:	d904      	bls.n	800def4 <tcp_process+0x228>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800deee:	005b      	lsls	r3, r3, #1
 800def0:	b29b      	uxth	r3, r3
 800def2:	e001      	b.n	800def8 <tcp_process+0x22c>
 800def4:	f241 131c 	movw	r3, #4380	@ 0x111c
 800def8:	687a      	ldr	r2, [r7, #4]
 800defa:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800df04:	2b00      	cmp	r3, #0
 800df06:	d106      	bne.n	800df16 <tcp_process+0x24a>
 800df08:	4b13      	ldr	r3, [pc, #76]	@ (800df58 <tcp_process+0x28c>)
 800df0a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 800df0e:	491c      	ldr	r1, [pc, #112]	@ (800df80 <tcp_process+0x2b4>)
 800df10:	4813      	ldr	r0, [pc, #76]	@ (800df60 <tcp_process+0x294>)
 800df12:	f005 ff03 	bl	8013d1c <iprintf>
        --pcb->snd_queuelen;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800df1c:	3b01      	subs	r3, #1
 800df1e:	b29a      	uxth	r2, r3
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df2a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800df2c:	69fb      	ldr	r3, [r7, #28]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d12a      	bne.n	800df88 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800df36:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800df38:	69fb      	ldr	r3, [r7, #28]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d106      	bne.n	800df4c <tcp_process+0x280>
 800df3e:	4b06      	ldr	r3, [pc, #24]	@ (800df58 <tcp_process+0x28c>)
 800df40:	f44f 725d 	mov.w	r2, #884	@ 0x374
 800df44:	490f      	ldr	r1, [pc, #60]	@ (800df84 <tcp_process+0x2b8>)
 800df46:	4806      	ldr	r0, [pc, #24]	@ (800df60 <tcp_process+0x294>)
 800df48:	f005 fee8 	bl	8013d1c <iprintf>
          pcb->unsent = rseg->next;
 800df4c:	69fb      	ldr	r3, [r7, #28]
 800df4e:	681a      	ldr	r2, [r3, #0]
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	66da      	str	r2, [r3, #108]	@ 0x6c
 800df54:	e01c      	b.n	800df90 <tcp_process+0x2c4>
 800df56:	bf00      	nop
 800df58:	08015d78 	.word	0x08015d78
 800df5c:	08015fb0 	.word	0x08015fb0
 800df60:	08015dc4 	.word	0x08015dc4
 800df64:	2000b1e8 	.word	0x2000b1e8
 800df68:	2000b1e0 	.word	0x2000b1e0
 800df6c:	2000b1dc 	.word	0x2000b1dc
 800df70:	08015fcc 	.word	0x08015fcc
 800df74:	2000b1e9 	.word	0x2000b1e9
 800df78:	2000b1a4 	.word	0x2000b1a4
 800df7c:	2000b1cc 	.word	0x2000b1cc
 800df80:	08015fec 	.word	0x08015fec
 800df84:	08016004 	.word	0x08016004
        } else {
          pcb->unacked = rseg->next;
 800df88:	69fb      	ldr	r3, [r7, #28]
 800df8a:	681a      	ldr	r2, [r3, #0]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 800df90:	69f8      	ldr	r0, [r7, #28]
 800df92:	f7fe fd22 	bl	800c9da <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d104      	bne.n	800dfa8 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800dfa4:	861a      	strh	r2, [r3, #48]	@ 0x30
 800dfa6:	e006      	b.n	800dfb6 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	2200      	movs	r2, #0
 800dfac:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d00a      	beq.n	800dfd6 <tcp_process+0x30a>
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dfc6:	687a      	ldr	r2, [r7, #4]
 800dfc8:	6910      	ldr	r0, [r2, #16]
 800dfca:	2200      	movs	r2, #0
 800dfcc:	6879      	ldr	r1, [r7, #4]
 800dfce:	4798      	blx	r3
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	76bb      	strb	r3, [r7, #26]
 800dfd4:	e001      	b.n	800dfda <tcp_process+0x30e>
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800dfda:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800dfde:	f113 0f0d 	cmn.w	r3, #13
 800dfe2:	d102      	bne.n	800dfea <tcp_process+0x31e>
          return ERR_ABRT;
 800dfe4:	f06f 030c 	mvn.w	r3, #12
 800dfe8:	e250      	b.n	800e48c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	8b5b      	ldrh	r3, [r3, #26]
 800dfee:	f043 0302 	orr.w	r3, r3, #2
 800dff2:	b29a      	uxth	r2, r3
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800dff8:	e23a      	b.n	800e470 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800dffa:	4b98      	ldr	r3, [pc, #608]	@ (800e25c <tcp_process+0x590>)
 800dffc:	781b      	ldrb	r3, [r3, #0]
 800dffe:	f003 0310 	and.w	r3, r3, #16
 800e002:	2b00      	cmp	r3, #0
 800e004:	f000 8234 	beq.w	800e470 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e008:	4b95      	ldr	r3, [pc, #596]	@ (800e260 <tcp_process+0x594>)
 800e00a:	6819      	ldr	r1, [r3, #0]
 800e00c:	4b95      	ldr	r3, [pc, #596]	@ (800e264 <tcp_process+0x598>)
 800e00e:	881b      	ldrh	r3, [r3, #0]
 800e010:	461a      	mov	r2, r3
 800e012:	4b95      	ldr	r3, [pc, #596]	@ (800e268 <tcp_process+0x59c>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e018:	4b94      	ldr	r3, [pc, #592]	@ (800e26c <tcp_process+0x5a0>)
 800e01a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e01c:	885b      	ldrh	r3, [r3, #2]
 800e01e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e020:	4a92      	ldr	r2, [pc, #584]	@ (800e26c <tcp_process+0x5a0>)
 800e022:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e024:	8812      	ldrh	r2, [r2, #0]
 800e026:	b292      	uxth	r2, r2
 800e028:	9202      	str	r2, [sp, #8]
 800e02a:	9301      	str	r3, [sp, #4]
 800e02c:	4b90      	ldr	r3, [pc, #576]	@ (800e270 <tcp_process+0x5a4>)
 800e02e:	9300      	str	r3, [sp, #0]
 800e030:	4b90      	ldr	r3, [pc, #576]	@ (800e274 <tcp_process+0x5a8>)
 800e032:	4602      	mov	r2, r0
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f002 fc7f 	bl	8010938 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e040:	2b05      	cmp	r3, #5
 800e042:	f200 8215 	bhi.w	800e470 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	2200      	movs	r2, #0
 800e04a:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f002 fa4b 	bl	80104e8 <tcp_rexmit_rto>
      break;
 800e052:	e20d      	b.n	800e470 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e054:	4b81      	ldr	r3, [pc, #516]	@ (800e25c <tcp_process+0x590>)
 800e056:	781b      	ldrb	r3, [r3, #0]
 800e058:	f003 0310 	and.w	r3, r3, #16
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	f000 80a1 	beq.w	800e1a4 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e062:	4b7f      	ldr	r3, [pc, #508]	@ (800e260 <tcp_process+0x594>)
 800e064:	681a      	ldr	r2, [r3, #0]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e06a:	1ad3      	subs	r3, r2, r3
 800e06c:	3b01      	subs	r3, #1
 800e06e:	2b00      	cmp	r3, #0
 800e070:	db7e      	blt.n	800e170 <tcp_process+0x4a4>
 800e072:	4b7b      	ldr	r3, [pc, #492]	@ (800e260 <tcp_process+0x594>)
 800e074:	681a      	ldr	r2, [r3, #0]
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e07a:	1ad3      	subs	r3, r2, r3
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	dc77      	bgt.n	800e170 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2204      	movs	r2, #4
 800e084:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d102      	bne.n	800e094 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e08e:	23fa      	movs	r3, #250	@ 0xfa
 800e090:	76bb      	strb	r3, [r7, #26]
 800e092:	e01d      	b.n	800e0d0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e098:	699b      	ldr	r3, [r3, #24]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d106      	bne.n	800e0ac <tcp_process+0x3e0>
 800e09e:	4b76      	ldr	r3, [pc, #472]	@ (800e278 <tcp_process+0x5ac>)
 800e0a0:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 800e0a4:	4975      	ldr	r1, [pc, #468]	@ (800e27c <tcp_process+0x5b0>)
 800e0a6:	4876      	ldr	r0, [pc, #472]	@ (800e280 <tcp_process+0x5b4>)
 800e0a8:	f005 fe38 	bl	8013d1c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e0b0:	699b      	ldr	r3, [r3, #24]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d00a      	beq.n	800e0cc <tcp_process+0x400>
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e0ba:	699b      	ldr	r3, [r3, #24]
 800e0bc:	687a      	ldr	r2, [r7, #4]
 800e0be:	6910      	ldr	r0, [r2, #16]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	6879      	ldr	r1, [r7, #4]
 800e0c4:	4798      	blx	r3
 800e0c6:	4603      	mov	r3, r0
 800e0c8:	76bb      	strb	r3, [r7, #26]
 800e0ca:	e001      	b.n	800e0d0 <tcp_process+0x404>
 800e0cc:	23f0      	movs	r3, #240	@ 0xf0
 800e0ce:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e0d0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d00a      	beq.n	800e0ee <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e0d8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e0dc:	f113 0f0d 	cmn.w	r3, #13
 800e0e0:	d002      	beq.n	800e0e8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f7fd ff8c 	bl	800c000 <tcp_abort>
            }
            return ERR_ABRT;
 800e0e8:	f06f 030c 	mvn.w	r3, #12
 800e0ec:	e1ce      	b.n	800e48c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e0ee:	6878      	ldr	r0, [r7, #4]
 800e0f0:	f000 fae0 	bl	800e6b4 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e0f4:	4b63      	ldr	r3, [pc, #396]	@ (800e284 <tcp_process+0x5b8>)
 800e0f6:	881b      	ldrh	r3, [r3, #0]
 800e0f8:	2b00      	cmp	r3, #0
 800e0fa:	d005      	beq.n	800e108 <tcp_process+0x43c>
            recv_acked--;
 800e0fc:	4b61      	ldr	r3, [pc, #388]	@ (800e284 <tcp_process+0x5b8>)
 800e0fe:	881b      	ldrh	r3, [r3, #0]
 800e100:	3b01      	subs	r3, #1
 800e102:	b29a      	uxth	r2, r3
 800e104:	4b5f      	ldr	r3, [pc, #380]	@ (800e284 <tcp_process+0x5b8>)
 800e106:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e10c:	009a      	lsls	r2, r3, #2
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e112:	005b      	lsls	r3, r3, #1
 800e114:	f241 111c 	movw	r1, #4380	@ 0x111c
 800e118:	428b      	cmp	r3, r1
 800e11a:	bf38      	it	cc
 800e11c:	460b      	movcc	r3, r1
 800e11e:	429a      	cmp	r2, r3
 800e120:	d204      	bcs.n	800e12c <tcp_process+0x460>
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e126:	009b      	lsls	r3, r3, #2
 800e128:	b29b      	uxth	r3, r3
 800e12a:	e00d      	b.n	800e148 <tcp_process+0x47c>
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e130:	005b      	lsls	r3, r3, #1
 800e132:	f241 121c 	movw	r2, #4380	@ 0x111c
 800e136:	4293      	cmp	r3, r2
 800e138:	d904      	bls.n	800e144 <tcp_process+0x478>
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e13e:	005b      	lsls	r3, r3, #1
 800e140:	b29b      	uxth	r3, r3
 800e142:	e001      	b.n	800e148 <tcp_process+0x47c>
 800e144:	f241 131c 	movw	r3, #4380	@ 0x111c
 800e148:	687a      	ldr	r2, [r7, #4]
 800e14a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e14e:	4b4e      	ldr	r3, [pc, #312]	@ (800e288 <tcp_process+0x5bc>)
 800e150:	781b      	ldrb	r3, [r3, #0]
 800e152:	f003 0320 	and.w	r3, r3, #32
 800e156:	2b00      	cmp	r3, #0
 800e158:	d037      	beq.n	800e1ca <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	8b5b      	ldrh	r3, [r3, #26]
 800e15e:	f043 0302 	orr.w	r3, r3, #2
 800e162:	b29a      	uxth	r2, r3
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	2207      	movs	r2, #7
 800e16c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e16e:	e02c      	b.n	800e1ca <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e170:	4b3b      	ldr	r3, [pc, #236]	@ (800e260 <tcp_process+0x594>)
 800e172:	6819      	ldr	r1, [r3, #0]
 800e174:	4b3b      	ldr	r3, [pc, #236]	@ (800e264 <tcp_process+0x598>)
 800e176:	881b      	ldrh	r3, [r3, #0]
 800e178:	461a      	mov	r2, r3
 800e17a:	4b3b      	ldr	r3, [pc, #236]	@ (800e268 <tcp_process+0x59c>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e180:	4b3a      	ldr	r3, [pc, #232]	@ (800e26c <tcp_process+0x5a0>)
 800e182:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e184:	885b      	ldrh	r3, [r3, #2]
 800e186:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e188:	4a38      	ldr	r2, [pc, #224]	@ (800e26c <tcp_process+0x5a0>)
 800e18a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e18c:	8812      	ldrh	r2, [r2, #0]
 800e18e:	b292      	uxth	r2, r2
 800e190:	9202      	str	r2, [sp, #8]
 800e192:	9301      	str	r3, [sp, #4]
 800e194:	4b36      	ldr	r3, [pc, #216]	@ (800e270 <tcp_process+0x5a4>)
 800e196:	9300      	str	r3, [sp, #0]
 800e198:	4b36      	ldr	r3, [pc, #216]	@ (800e274 <tcp_process+0x5a8>)
 800e19a:	4602      	mov	r2, r0
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	f002 fbcb 	bl	8010938 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e1a2:	e167      	b.n	800e474 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e1a4:	4b2d      	ldr	r3, [pc, #180]	@ (800e25c <tcp_process+0x590>)
 800e1a6:	781b      	ldrb	r3, [r3, #0]
 800e1a8:	f003 0302 	and.w	r3, r3, #2
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	f000 8161 	beq.w	800e474 <tcp_process+0x7a8>
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1b6:	1e5a      	subs	r2, r3, #1
 800e1b8:	4b2b      	ldr	r3, [pc, #172]	@ (800e268 <tcp_process+0x59c>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	429a      	cmp	r2, r3
 800e1be:	f040 8159 	bne.w	800e474 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e1c2:	6878      	ldr	r0, [r7, #4]
 800e1c4:	f002 f9b2 	bl	801052c <tcp_rexmit>
      break;
 800e1c8:	e154      	b.n	800e474 <tcp_process+0x7a8>
 800e1ca:	e153      	b.n	800e474 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e1cc:	6878      	ldr	r0, [r7, #4]
 800e1ce:	f000 fa71 	bl	800e6b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e1d2:	4b2d      	ldr	r3, [pc, #180]	@ (800e288 <tcp_process+0x5bc>)
 800e1d4:	781b      	ldrb	r3, [r3, #0]
 800e1d6:	f003 0320 	and.w	r3, r3, #32
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	f000 814c 	beq.w	800e478 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	8b5b      	ldrh	r3, [r3, #26]
 800e1e4:	f043 0302 	orr.w	r3, r3, #2
 800e1e8:	b29a      	uxth	r2, r3
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2207      	movs	r2, #7
 800e1f2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e1f4:	e140      	b.n	800e478 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e1f6:	6878      	ldr	r0, [r7, #4]
 800e1f8:	f000 fa5c 	bl	800e6b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e1fc:	4b22      	ldr	r3, [pc, #136]	@ (800e288 <tcp_process+0x5bc>)
 800e1fe:	781b      	ldrb	r3, [r3, #0]
 800e200:	f003 0320 	and.w	r3, r3, #32
 800e204:	2b00      	cmp	r3, #0
 800e206:	d071      	beq.n	800e2ec <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e208:	4b14      	ldr	r3, [pc, #80]	@ (800e25c <tcp_process+0x590>)
 800e20a:	781b      	ldrb	r3, [r3, #0]
 800e20c:	f003 0310 	and.w	r3, r3, #16
 800e210:	2b00      	cmp	r3, #0
 800e212:	d060      	beq.n	800e2d6 <tcp_process+0x60a>
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e218:	4b11      	ldr	r3, [pc, #68]	@ (800e260 <tcp_process+0x594>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	429a      	cmp	r2, r3
 800e21e:	d15a      	bne.n	800e2d6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e224:	2b00      	cmp	r3, #0
 800e226:	d156      	bne.n	800e2d6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	8b5b      	ldrh	r3, [r3, #26]
 800e22c:	f043 0302 	orr.w	r3, r3, #2
 800e230:	b29a      	uxth	r2, r3
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e236:	6878      	ldr	r0, [r7, #4]
 800e238:	f7fe fdbc 	bl	800cdb4 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e23c:	4b13      	ldr	r3, [pc, #76]	@ (800e28c <tcp_process+0x5c0>)
 800e23e:	681b      	ldr	r3, [r3, #0]
 800e240:	687a      	ldr	r2, [r7, #4]
 800e242:	429a      	cmp	r2, r3
 800e244:	d105      	bne.n	800e252 <tcp_process+0x586>
 800e246:	4b11      	ldr	r3, [pc, #68]	@ (800e28c <tcp_process+0x5c0>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	68db      	ldr	r3, [r3, #12]
 800e24c:	4a0f      	ldr	r2, [pc, #60]	@ (800e28c <tcp_process+0x5c0>)
 800e24e:	6013      	str	r3, [r2, #0]
 800e250:	e02e      	b.n	800e2b0 <tcp_process+0x5e4>
 800e252:	4b0e      	ldr	r3, [pc, #56]	@ (800e28c <tcp_process+0x5c0>)
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	617b      	str	r3, [r7, #20]
 800e258:	e027      	b.n	800e2aa <tcp_process+0x5de>
 800e25a:	bf00      	nop
 800e25c:	2000b1e8 	.word	0x2000b1e8
 800e260:	2000b1e0 	.word	0x2000b1e0
 800e264:	2000b1e6 	.word	0x2000b1e6
 800e268:	2000b1dc 	.word	0x2000b1dc
 800e26c:	2000b1cc 	.word	0x2000b1cc
 800e270:	20005a84 	.word	0x20005a84
 800e274:	20005a88 	.word	0x20005a88
 800e278:	08015d78 	.word	0x08015d78
 800e27c:	08016018 	.word	0x08016018
 800e280:	08015dc4 	.word	0x08015dc4
 800e284:	2000b1e4 	.word	0x2000b1e4
 800e288:	2000b1e9 	.word	0x2000b1e9
 800e28c:	2000b1b0 	.word	0x2000b1b0
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	68db      	ldr	r3, [r3, #12]
 800e294:	687a      	ldr	r2, [r7, #4]
 800e296:	429a      	cmp	r2, r3
 800e298:	d104      	bne.n	800e2a4 <tcp_process+0x5d8>
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	68da      	ldr	r2, [r3, #12]
 800e29e:	697b      	ldr	r3, [r7, #20]
 800e2a0:	60da      	str	r2, [r3, #12]
 800e2a2:	e005      	b.n	800e2b0 <tcp_process+0x5e4>
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	68db      	ldr	r3, [r3, #12]
 800e2a8:	617b      	str	r3, [r7, #20]
 800e2aa:	697b      	ldr	r3, [r7, #20]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d1ef      	bne.n	800e290 <tcp_process+0x5c4>
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	60da      	str	r2, [r3, #12]
 800e2b6:	4b77      	ldr	r3, [pc, #476]	@ (800e494 <tcp_process+0x7c8>)
 800e2b8:	2201      	movs	r2, #1
 800e2ba:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	220a      	movs	r2, #10
 800e2c0:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e2c2:	4b75      	ldr	r3, [pc, #468]	@ (800e498 <tcp_process+0x7cc>)
 800e2c4:	681a      	ldr	r2, [r3, #0]
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	60da      	str	r2, [r3, #12]
 800e2ca:	4a73      	ldr	r2, [pc, #460]	@ (800e498 <tcp_process+0x7cc>)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	6013      	str	r3, [r2, #0]
 800e2d0:	f002 fcf4 	bl	8010cbc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e2d4:	e0d2      	b.n	800e47c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	8b5b      	ldrh	r3, [r3, #26]
 800e2da:	f043 0302 	orr.w	r3, r3, #2
 800e2de:	b29a      	uxth	r2, r3
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2208      	movs	r2, #8
 800e2e8:	751a      	strb	r2, [r3, #20]
      break;
 800e2ea:	e0c7      	b.n	800e47c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e2ec:	4b6b      	ldr	r3, [pc, #428]	@ (800e49c <tcp_process+0x7d0>)
 800e2ee:	781b      	ldrb	r3, [r3, #0]
 800e2f0:	f003 0310 	and.w	r3, r3, #16
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	f000 80c1 	beq.w	800e47c <tcp_process+0x7b0>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e2fe:	4b68      	ldr	r3, [pc, #416]	@ (800e4a0 <tcp_process+0x7d4>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	429a      	cmp	r2, r3
 800e304:	f040 80ba 	bne.w	800e47c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	f040 80b5 	bne.w	800e47c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2206      	movs	r2, #6
 800e316:	751a      	strb	r2, [r3, #20]
      break;
 800e318:	e0b0      	b.n	800e47c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e31a:	6878      	ldr	r0, [r7, #4]
 800e31c:	f000 f9ca 	bl	800e6b4 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e320:	4b60      	ldr	r3, [pc, #384]	@ (800e4a4 <tcp_process+0x7d8>)
 800e322:	781b      	ldrb	r3, [r3, #0]
 800e324:	f003 0320 	and.w	r3, r3, #32
 800e328:	2b00      	cmp	r3, #0
 800e32a:	f000 80a9 	beq.w	800e480 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	8b5b      	ldrh	r3, [r3, #26]
 800e332:	f043 0302 	orr.w	r3, r3, #2
 800e336:	b29a      	uxth	r2, r3
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e33c:	6878      	ldr	r0, [r7, #4]
 800e33e:	f7fe fd39 	bl	800cdb4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e342:	4b59      	ldr	r3, [pc, #356]	@ (800e4a8 <tcp_process+0x7dc>)
 800e344:	681b      	ldr	r3, [r3, #0]
 800e346:	687a      	ldr	r2, [r7, #4]
 800e348:	429a      	cmp	r2, r3
 800e34a:	d105      	bne.n	800e358 <tcp_process+0x68c>
 800e34c:	4b56      	ldr	r3, [pc, #344]	@ (800e4a8 <tcp_process+0x7dc>)
 800e34e:	681b      	ldr	r3, [r3, #0]
 800e350:	68db      	ldr	r3, [r3, #12]
 800e352:	4a55      	ldr	r2, [pc, #340]	@ (800e4a8 <tcp_process+0x7dc>)
 800e354:	6013      	str	r3, [r2, #0]
 800e356:	e013      	b.n	800e380 <tcp_process+0x6b4>
 800e358:	4b53      	ldr	r3, [pc, #332]	@ (800e4a8 <tcp_process+0x7dc>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	613b      	str	r3, [r7, #16]
 800e35e:	e00c      	b.n	800e37a <tcp_process+0x6ae>
 800e360:	693b      	ldr	r3, [r7, #16]
 800e362:	68db      	ldr	r3, [r3, #12]
 800e364:	687a      	ldr	r2, [r7, #4]
 800e366:	429a      	cmp	r2, r3
 800e368:	d104      	bne.n	800e374 <tcp_process+0x6a8>
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	68da      	ldr	r2, [r3, #12]
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	60da      	str	r2, [r3, #12]
 800e372:	e005      	b.n	800e380 <tcp_process+0x6b4>
 800e374:	693b      	ldr	r3, [r7, #16]
 800e376:	68db      	ldr	r3, [r3, #12]
 800e378:	613b      	str	r3, [r7, #16]
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d1ef      	bne.n	800e360 <tcp_process+0x694>
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2200      	movs	r2, #0
 800e384:	60da      	str	r2, [r3, #12]
 800e386:	4b43      	ldr	r3, [pc, #268]	@ (800e494 <tcp_process+0x7c8>)
 800e388:	2201      	movs	r2, #1
 800e38a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	220a      	movs	r2, #10
 800e390:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e392:	4b41      	ldr	r3, [pc, #260]	@ (800e498 <tcp_process+0x7cc>)
 800e394:	681a      	ldr	r2, [r3, #0]
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	60da      	str	r2, [r3, #12]
 800e39a:	4a3f      	ldr	r2, [pc, #252]	@ (800e498 <tcp_process+0x7cc>)
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6013      	str	r3, [r2, #0]
 800e3a0:	f002 fc8c 	bl	8010cbc <tcp_timer_needed>
      }
      break;
 800e3a4:	e06c      	b.n	800e480 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f000 f984 	bl	800e6b4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e3ac:	4b3b      	ldr	r3, [pc, #236]	@ (800e49c <tcp_process+0x7d0>)
 800e3ae:	781b      	ldrb	r3, [r3, #0]
 800e3b0:	f003 0310 	and.w	r3, r3, #16
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d065      	beq.n	800e484 <tcp_process+0x7b8>
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e3bc:	4b38      	ldr	r3, [pc, #224]	@ (800e4a0 <tcp_process+0x7d4>)
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d15f      	bne.n	800e484 <tcp_process+0x7b8>
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d15b      	bne.n	800e484 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f7fe fcf1 	bl	800cdb4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e3d2:	4b35      	ldr	r3, [pc, #212]	@ (800e4a8 <tcp_process+0x7dc>)
 800e3d4:	681b      	ldr	r3, [r3, #0]
 800e3d6:	687a      	ldr	r2, [r7, #4]
 800e3d8:	429a      	cmp	r2, r3
 800e3da:	d105      	bne.n	800e3e8 <tcp_process+0x71c>
 800e3dc:	4b32      	ldr	r3, [pc, #200]	@ (800e4a8 <tcp_process+0x7dc>)
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	68db      	ldr	r3, [r3, #12]
 800e3e2:	4a31      	ldr	r2, [pc, #196]	@ (800e4a8 <tcp_process+0x7dc>)
 800e3e4:	6013      	str	r3, [r2, #0]
 800e3e6:	e013      	b.n	800e410 <tcp_process+0x744>
 800e3e8:	4b2f      	ldr	r3, [pc, #188]	@ (800e4a8 <tcp_process+0x7dc>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	60fb      	str	r3, [r7, #12]
 800e3ee:	e00c      	b.n	800e40a <tcp_process+0x73e>
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	68db      	ldr	r3, [r3, #12]
 800e3f4:	687a      	ldr	r2, [r7, #4]
 800e3f6:	429a      	cmp	r2, r3
 800e3f8:	d104      	bne.n	800e404 <tcp_process+0x738>
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	68da      	ldr	r2, [r3, #12]
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	60da      	str	r2, [r3, #12]
 800e402:	e005      	b.n	800e410 <tcp_process+0x744>
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	68db      	ldr	r3, [r3, #12]
 800e408:	60fb      	str	r3, [r7, #12]
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d1ef      	bne.n	800e3f0 <tcp_process+0x724>
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	2200      	movs	r2, #0
 800e414:	60da      	str	r2, [r3, #12]
 800e416:	4b1f      	ldr	r3, [pc, #124]	@ (800e494 <tcp_process+0x7c8>)
 800e418:	2201      	movs	r2, #1
 800e41a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	220a      	movs	r2, #10
 800e420:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e422:	4b1d      	ldr	r3, [pc, #116]	@ (800e498 <tcp_process+0x7cc>)
 800e424:	681a      	ldr	r2, [r3, #0]
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	60da      	str	r2, [r3, #12]
 800e42a:	4a1b      	ldr	r2, [pc, #108]	@ (800e498 <tcp_process+0x7cc>)
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	6013      	str	r3, [r2, #0]
 800e430:	f002 fc44 	bl	8010cbc <tcp_timer_needed>
      }
      break;
 800e434:	e026      	b.n	800e484 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e436:	6878      	ldr	r0, [r7, #4]
 800e438:	f000 f93c 	bl	800e6b4 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e43c:	4b17      	ldr	r3, [pc, #92]	@ (800e49c <tcp_process+0x7d0>)
 800e43e:	781b      	ldrb	r3, [r3, #0]
 800e440:	f003 0310 	and.w	r3, r3, #16
 800e444:	2b00      	cmp	r3, #0
 800e446:	d01f      	beq.n	800e488 <tcp_process+0x7bc>
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800e44c:	4b14      	ldr	r3, [pc, #80]	@ (800e4a0 <tcp_process+0x7d4>)
 800e44e:	681b      	ldr	r3, [r3, #0]
 800e450:	429a      	cmp	r2, r3
 800e452:	d119      	bne.n	800e488 <tcp_process+0x7bc>
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d115      	bne.n	800e488 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e45c:	4b11      	ldr	r3, [pc, #68]	@ (800e4a4 <tcp_process+0x7d8>)
 800e45e:	781b      	ldrb	r3, [r3, #0]
 800e460:	f043 0310 	orr.w	r3, r3, #16
 800e464:	b2da      	uxtb	r2, r3
 800e466:	4b0f      	ldr	r3, [pc, #60]	@ (800e4a4 <tcp_process+0x7d8>)
 800e468:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e46a:	e00d      	b.n	800e488 <tcp_process+0x7bc>
    default:
      break;
 800e46c:	bf00      	nop
 800e46e:	e00c      	b.n	800e48a <tcp_process+0x7be>
      break;
 800e470:	bf00      	nop
 800e472:	e00a      	b.n	800e48a <tcp_process+0x7be>
      break;
 800e474:	bf00      	nop
 800e476:	e008      	b.n	800e48a <tcp_process+0x7be>
      break;
 800e478:	bf00      	nop
 800e47a:	e006      	b.n	800e48a <tcp_process+0x7be>
      break;
 800e47c:	bf00      	nop
 800e47e:	e004      	b.n	800e48a <tcp_process+0x7be>
      break;
 800e480:	bf00      	nop
 800e482:	e002      	b.n	800e48a <tcp_process+0x7be>
      break;
 800e484:	bf00      	nop
 800e486:	e000      	b.n	800e48a <tcp_process+0x7be>
      break;
 800e488:	bf00      	nop
  }
  return ERR_OK;
 800e48a:	2300      	movs	r3, #0
}
 800e48c:	4618      	mov	r0, r3
 800e48e:	3724      	adds	r7, #36	@ 0x24
 800e490:	46bd      	mov	sp, r7
 800e492:	bd90      	pop	{r4, r7, pc}
 800e494:	2000b1b8 	.word	0x2000b1b8
 800e498:	2000b1b4 	.word	0x2000b1b4
 800e49c:	2000b1e8 	.word	0x2000b1e8
 800e4a0:	2000b1e0 	.word	0x2000b1e0
 800e4a4:	2000b1e9 	.word	0x2000b1e9
 800e4a8:	2000b1b0 	.word	0x2000b1b0

0800e4ac <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e4ac:	b590      	push	{r4, r7, lr}
 800e4ae:	b085      	sub	sp, #20
 800e4b0:	af00      	add	r7, sp, #0
 800e4b2:	6078      	str	r0, [r7, #4]
 800e4b4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d106      	bne.n	800e4ca <tcp_oos_insert_segment+0x1e>
 800e4bc:	4b3b      	ldr	r3, [pc, #236]	@ (800e5ac <tcp_oos_insert_segment+0x100>)
 800e4be:	f240 421f 	movw	r2, #1055	@ 0x41f
 800e4c2:	493b      	ldr	r1, [pc, #236]	@ (800e5b0 <tcp_oos_insert_segment+0x104>)
 800e4c4:	483b      	ldr	r0, [pc, #236]	@ (800e5b4 <tcp_oos_insert_segment+0x108>)
 800e4c6:	f005 fc29 	bl	8013d1c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	68db      	ldr	r3, [r3, #12]
 800e4ce:	899b      	ldrh	r3, [r3, #12]
 800e4d0:	b29b      	uxth	r3, r3
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f7fb fcae 	bl	8009e34 <lwip_htons>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	b2db      	uxtb	r3, r3
 800e4dc:	f003 0301 	and.w	r3, r3, #1
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d028      	beq.n	800e536 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e4e4:	6838      	ldr	r0, [r7, #0]
 800e4e6:	f7fe fa63 	bl	800c9b0 <tcp_segs_free>
    next = NULL;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	603b      	str	r3, [r7, #0]
 800e4ee:	e056      	b.n	800e59e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e4f0:	683b      	ldr	r3, [r7, #0]
 800e4f2:	68db      	ldr	r3, [r3, #12]
 800e4f4:	899b      	ldrh	r3, [r3, #12]
 800e4f6:	b29b      	uxth	r3, r3
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f7fb fc9b 	bl	8009e34 <lwip_htons>
 800e4fe:	4603      	mov	r3, r0
 800e500:	b2db      	uxtb	r3, r3
 800e502:	f003 0301 	and.w	r3, r3, #1
 800e506:	2b00      	cmp	r3, #0
 800e508:	d00d      	beq.n	800e526 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	68db      	ldr	r3, [r3, #12]
 800e50e:	899b      	ldrh	r3, [r3, #12]
 800e510:	b29c      	uxth	r4, r3
 800e512:	2001      	movs	r0, #1
 800e514:	f7fb fc8e 	bl	8009e34 <lwip_htons>
 800e518:	4603      	mov	r3, r0
 800e51a:	461a      	mov	r2, r3
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	68db      	ldr	r3, [r3, #12]
 800e520:	4322      	orrs	r2, r4
 800e522:	b292      	uxth	r2, r2
 800e524:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e526:	683b      	ldr	r3, [r7, #0]
 800e528:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e530:	68f8      	ldr	r0, [r7, #12]
 800e532:	f7fe fa52 	bl	800c9da <tcp_seg_free>
    while (next &&
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d00e      	beq.n	800e55a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	891b      	ldrh	r3, [r3, #8]
 800e540:	461a      	mov	r2, r3
 800e542:	4b1d      	ldr	r3, [pc, #116]	@ (800e5b8 <tcp_oos_insert_segment+0x10c>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	441a      	add	r2, r3
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	68db      	ldr	r3, [r3, #12]
 800e54c:	685b      	ldr	r3, [r3, #4]
 800e54e:	6839      	ldr	r1, [r7, #0]
 800e550:	8909      	ldrh	r1, [r1, #8]
 800e552:	440b      	add	r3, r1
 800e554:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e556:	2b00      	cmp	r3, #0
 800e558:	daca      	bge.n	800e4f0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d01e      	beq.n	800e59e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	891b      	ldrh	r3, [r3, #8]
 800e564:	461a      	mov	r2, r3
 800e566:	4b14      	ldr	r3, [pc, #80]	@ (800e5b8 <tcp_oos_insert_segment+0x10c>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	441a      	add	r2, r3
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	68db      	ldr	r3, [r3, #12]
 800e570:	685b      	ldr	r3, [r3, #4]
 800e572:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e574:	2b00      	cmp	r3, #0
 800e576:	dd12      	ble.n	800e59e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e578:	683b      	ldr	r3, [r7, #0]
 800e57a:	68db      	ldr	r3, [r3, #12]
 800e57c:	685b      	ldr	r3, [r3, #4]
 800e57e:	b29a      	uxth	r2, r3
 800e580:	4b0d      	ldr	r3, [pc, #52]	@ (800e5b8 <tcp_oos_insert_segment+0x10c>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	b29b      	uxth	r3, r3
 800e586:	1ad3      	subs	r3, r2, r3
 800e588:	b29a      	uxth	r2, r3
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	685a      	ldr	r2, [r3, #4]
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	891b      	ldrh	r3, [r3, #8]
 800e596:	4619      	mov	r1, r3
 800e598:	4610      	mov	r0, r2
 800e59a:	f7fc fe23 	bl	800b1e4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	683a      	ldr	r2, [r7, #0]
 800e5a2:	601a      	str	r2, [r3, #0]
}
 800e5a4:	bf00      	nop
 800e5a6:	3714      	adds	r7, #20
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	bd90      	pop	{r4, r7, pc}
 800e5ac:	08015d78 	.word	0x08015d78
 800e5b0:	08016038 	.word	0x08016038
 800e5b4:	08015dc4 	.word	0x08015dc4
 800e5b8:	2000b1dc 	.word	0x2000b1dc

0800e5bc <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e5bc:	b5b0      	push	{r4, r5, r7, lr}
 800e5be:	b086      	sub	sp, #24
 800e5c0:	af00      	add	r7, sp, #0
 800e5c2:	60f8      	str	r0, [r7, #12]
 800e5c4:	60b9      	str	r1, [r7, #8]
 800e5c6:	607a      	str	r2, [r7, #4]
 800e5c8:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e5ca:	e03e      	b.n	800e64a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e5d6:	697b      	ldr	r3, [r7, #20]
 800e5d8:	685b      	ldr	r3, [r3, #4]
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f7fd f810 	bl	800b600 <pbuf_clen>
 800e5e0:	4603      	mov	r3, r0
 800e5e2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e5ea:	8a7a      	ldrh	r2, [r7, #18]
 800e5ec:	429a      	cmp	r2, r3
 800e5ee:	d906      	bls.n	800e5fe <tcp_free_acked_segments+0x42>
 800e5f0:	4b2a      	ldr	r3, [pc, #168]	@ (800e69c <tcp_free_acked_segments+0xe0>)
 800e5f2:	f240 4257 	movw	r2, #1111	@ 0x457
 800e5f6:	492a      	ldr	r1, [pc, #168]	@ (800e6a0 <tcp_free_acked_segments+0xe4>)
 800e5f8:	482a      	ldr	r0, [pc, #168]	@ (800e6a4 <tcp_free_acked_segments+0xe8>)
 800e5fa:	f005 fb8f 	bl	8013d1c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 800e604:	8a7b      	ldrh	r3, [r7, #18]
 800e606:	1ad3      	subs	r3, r2, r3
 800e608:	b29a      	uxth	r2, r3
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e610:	697b      	ldr	r3, [r7, #20]
 800e612:	891a      	ldrh	r2, [r3, #8]
 800e614:	4b24      	ldr	r3, [pc, #144]	@ (800e6a8 <tcp_free_acked_segments+0xec>)
 800e616:	881b      	ldrh	r3, [r3, #0]
 800e618:	4413      	add	r3, r2
 800e61a:	b29a      	uxth	r2, r3
 800e61c:	4b22      	ldr	r3, [pc, #136]	@ (800e6a8 <tcp_free_acked_segments+0xec>)
 800e61e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e620:	6978      	ldr	r0, [r7, #20]
 800e622:	f7fe f9da 	bl	800c9da <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d00c      	beq.n	800e64a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d109      	bne.n	800e64a <tcp_free_acked_segments+0x8e>
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d106      	bne.n	800e64a <tcp_free_acked_segments+0x8e>
 800e63c:	4b17      	ldr	r3, [pc, #92]	@ (800e69c <tcp_free_acked_segments+0xe0>)
 800e63e:	f240 4261 	movw	r2, #1121	@ 0x461
 800e642:	491a      	ldr	r1, [pc, #104]	@ (800e6ac <tcp_free_acked_segments+0xf0>)
 800e644:	4817      	ldr	r0, [pc, #92]	@ (800e6a4 <tcp_free_acked_segments+0xe8>)
 800e646:	f005 fb69 	bl	8013d1c <iprintf>
  while (seg_list != NULL &&
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d020      	beq.n	800e692 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e650:	68bb      	ldr	r3, [r7, #8]
 800e652:	68db      	ldr	r3, [r3, #12]
 800e654:	685b      	ldr	r3, [r3, #4]
 800e656:	4618      	mov	r0, r3
 800e658:	f7fb fc02 	bl	8009e60 <lwip_htonl>
 800e65c:	4604      	mov	r4, r0
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	891b      	ldrh	r3, [r3, #8]
 800e662:	461d      	mov	r5, r3
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	68db      	ldr	r3, [r3, #12]
 800e668:	899b      	ldrh	r3, [r3, #12]
 800e66a:	b29b      	uxth	r3, r3
 800e66c:	4618      	mov	r0, r3
 800e66e:	f7fb fbe1 	bl	8009e34 <lwip_htons>
 800e672:	4603      	mov	r3, r0
 800e674:	b2db      	uxtb	r3, r3
 800e676:	f003 0303 	and.w	r3, r3, #3
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d001      	beq.n	800e682 <tcp_free_acked_segments+0xc6>
 800e67e:	2301      	movs	r3, #1
 800e680:	e000      	b.n	800e684 <tcp_free_acked_segments+0xc8>
 800e682:	2300      	movs	r3, #0
 800e684:	442b      	add	r3, r5
 800e686:	18e2      	adds	r2, r4, r3
 800e688:	4b09      	ldr	r3, [pc, #36]	@ (800e6b0 <tcp_free_acked_segments+0xf4>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e68e:	2b00      	cmp	r3, #0
 800e690:	dd9c      	ble.n	800e5cc <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e692:	68bb      	ldr	r3, [r7, #8]
}
 800e694:	4618      	mov	r0, r3
 800e696:	3718      	adds	r7, #24
 800e698:	46bd      	mov	sp, r7
 800e69a:	bdb0      	pop	{r4, r5, r7, pc}
 800e69c:	08015d78 	.word	0x08015d78
 800e6a0:	08016060 	.word	0x08016060
 800e6a4:	08015dc4 	.word	0x08015dc4
 800e6a8:	2000b1e4 	.word	0x2000b1e4
 800e6ac:	08016088 	.word	0x08016088
 800e6b0:	2000b1e0 	.word	0x2000b1e0

0800e6b4 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e6b4:	b5b0      	push	{r4, r5, r7, lr}
 800e6b6:	b094      	sub	sp, #80	@ 0x50
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e6bc:	2300      	movs	r3, #0
 800e6be:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d106      	bne.n	800e6d4 <tcp_receive+0x20>
 800e6c6:	4b91      	ldr	r3, [pc, #580]	@ (800e90c <tcp_receive+0x258>)
 800e6c8:	f240 427b 	movw	r2, #1147	@ 0x47b
 800e6cc:	4990      	ldr	r1, [pc, #576]	@ (800e910 <tcp_receive+0x25c>)
 800e6ce:	4891      	ldr	r0, [pc, #580]	@ (800e914 <tcp_receive+0x260>)
 800e6d0:	f005 fb24 	bl	8013d1c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	7d1b      	ldrb	r3, [r3, #20]
 800e6d8:	2b03      	cmp	r3, #3
 800e6da:	d806      	bhi.n	800e6ea <tcp_receive+0x36>
 800e6dc:	4b8b      	ldr	r3, [pc, #556]	@ (800e90c <tcp_receive+0x258>)
 800e6de:	f240 427c 	movw	r2, #1148	@ 0x47c
 800e6e2:	498d      	ldr	r1, [pc, #564]	@ (800e918 <tcp_receive+0x264>)
 800e6e4:	488b      	ldr	r0, [pc, #556]	@ (800e914 <tcp_receive+0x260>)
 800e6e6:	f005 fb19 	bl	8013d1c <iprintf>

  if (flags & TCP_ACK) {
 800e6ea:	4b8c      	ldr	r3, [pc, #560]	@ (800e91c <tcp_receive+0x268>)
 800e6ec:	781b      	ldrb	r3, [r3, #0]
 800e6ee:	f003 0310 	and.w	r3, r3, #16
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	f000 8264 	beq.w	800ebc0 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e6fe:	461a      	mov	r2, r3
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e704:	4413      	add	r3, r2
 800e706:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e70c:	4b84      	ldr	r3, [pc, #528]	@ (800e920 <tcp_receive+0x26c>)
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	1ad3      	subs	r3, r2, r3
 800e712:	2b00      	cmp	r3, #0
 800e714:	db1b      	blt.n	800e74e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800e71a:	4b81      	ldr	r3, [pc, #516]	@ (800e920 <tcp_receive+0x26c>)
 800e71c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e71e:	429a      	cmp	r2, r3
 800e720:	d106      	bne.n	800e730 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e726:	4b7f      	ldr	r3, [pc, #508]	@ (800e924 <tcp_receive+0x270>)
 800e728:	681b      	ldr	r3, [r3, #0]
 800e72a:	1ad3      	subs	r3, r2, r3
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	db0e      	blt.n	800e74e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800e734:	4b7b      	ldr	r3, [pc, #492]	@ (800e924 <tcp_receive+0x270>)
 800e736:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e738:	429a      	cmp	r2, r3
 800e73a:	d125      	bne.n	800e788 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e73c:	4b7a      	ldr	r3, [pc, #488]	@ (800e928 <tcp_receive+0x274>)
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	89db      	ldrh	r3, [r3, #14]
 800e742:	b29a      	uxth	r2, r3
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d91c      	bls.n	800e788 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e74e:	4b76      	ldr	r3, [pc, #472]	@ (800e928 <tcp_receive+0x274>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	89db      	ldrh	r3, [r3, #14]
 800e754:	b29a      	uxth	r2, r3
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800e768:	429a      	cmp	r2, r3
 800e76a:	d205      	bcs.n	800e778 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 800e778:	4b69      	ldr	r3, [pc, #420]	@ (800e920 <tcp_receive+0x26c>)
 800e77a:	681a      	ldr	r2, [r3, #0]
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 800e780:	4b68      	ldr	r3, [pc, #416]	@ (800e924 <tcp_receive+0x270>)
 800e782:	681a      	ldr	r2, [r3, #0]
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e788:	4b66      	ldr	r3, [pc, #408]	@ (800e924 <tcp_receive+0x270>)
 800e78a:	681a      	ldr	r2, [r3, #0]
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e790:	1ad3      	subs	r3, r2, r3
 800e792:	2b00      	cmp	r3, #0
 800e794:	dc58      	bgt.n	800e848 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e796:	4b65      	ldr	r3, [pc, #404]	@ (800e92c <tcp_receive+0x278>)
 800e798:	881b      	ldrh	r3, [r3, #0]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d14b      	bne.n	800e836 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e7a2:	687a      	ldr	r2, [r7, #4]
 800e7a4:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 800e7a8:	4413      	add	r3, r2
 800e7aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e7ac:	429a      	cmp	r2, r3
 800e7ae:	d142      	bne.n	800e836 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	db3d      	blt.n	800e836 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e7be:	4b59      	ldr	r3, [pc, #356]	@ (800e924 <tcp_receive+0x270>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d137      	bne.n	800e836 <tcp_receive+0x182>
              found_dupack = 1;
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e7d0:	2bff      	cmp	r3, #255	@ 0xff
 800e7d2:	d007      	beq.n	800e7e4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e7da:	3301      	adds	r3, #1
 800e7dc:	b2da      	uxtb	r2, r3
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e7ea:	2b03      	cmp	r3, #3
 800e7ec:	d91b      	bls.n	800e826 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e7f8:	4413      	add	r3, r2
 800e7fa:	b29a      	uxth	r2, r3
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e802:	429a      	cmp	r2, r3
 800e804:	d30a      	bcc.n	800e81c <tcp_receive+0x168>
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e810:	4413      	add	r3, r2
 800e812:	b29a      	uxth	r2, r3
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800e81a:	e004      	b.n	800e826 <tcp_receive+0x172>
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e822:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800e82c:	2b02      	cmp	r3, #2
 800e82e:	d902      	bls.n	800e836 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	f001 fee7 	bl	8010604 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e836:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e838:	2b00      	cmp	r3, #0
 800e83a:	f040 8161 	bne.w	800eb00 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2200      	movs	r2, #0
 800e842:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e846:	e15b      	b.n	800eb00 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e848:	4b36      	ldr	r3, [pc, #216]	@ (800e924 <tcp_receive+0x270>)
 800e84a:	681a      	ldr	r2, [r3, #0]
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e850:	1ad3      	subs	r3, r2, r3
 800e852:	3b01      	subs	r3, #1
 800e854:	2b00      	cmp	r3, #0
 800e856:	f2c0 814e 	blt.w	800eaf6 <tcp_receive+0x442>
 800e85a:	4b32      	ldr	r3, [pc, #200]	@ (800e924 <tcp_receive+0x270>)
 800e85c:	681a      	ldr	r2, [r3, #0]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e862:	1ad3      	subs	r3, r2, r3
 800e864:	2b00      	cmp	r3, #0
 800e866:	f300 8146 	bgt.w	800eaf6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	8b5b      	ldrh	r3, [r3, #26]
 800e86e:	f003 0304 	and.w	r3, r3, #4
 800e872:	2b00      	cmp	r3, #0
 800e874:	d010      	beq.n	800e898 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	8b5b      	ldrh	r3, [r3, #26]
 800e87a:	f023 0304 	bic.w	r3, r3, #4
 800e87e:	b29a      	uxth	r2, r3
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2200      	movs	r2, #0
 800e894:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2200      	movs	r2, #0
 800e89c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800e8a6:	10db      	asrs	r3, r3, #3
 800e8a8:	b21b      	sxth	r3, r3
 800e8aa:	b29a      	uxth	r2, r3
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800e8b2:	b29b      	uxth	r3, r3
 800e8b4:	4413      	add	r3, r2
 800e8b6:	b29b      	uxth	r3, r3
 800e8b8:	b21a      	sxth	r2, r3
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e8c0:	4b18      	ldr	r3, [pc, #96]	@ (800e924 <tcp_receive+0x270>)
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	b29a      	uxth	r2, r3
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e8ca:	b29b      	uxth	r3, r3
 800e8cc:	1ad3      	subs	r3, r2, r3
 800e8ce:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 800e8d8:	4b12      	ldr	r3, [pc, #72]	@ (800e924 <tcp_receive+0x270>)
 800e8da:	681a      	ldr	r2, [r3, #0]
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	7d1b      	ldrb	r3, [r3, #20]
 800e8e4:	2b03      	cmp	r3, #3
 800e8e6:	f240 8097 	bls.w	800ea18 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	d245      	bcs.n	800e986 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	8b5b      	ldrh	r3, [r3, #26]
 800e8fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e902:	2b00      	cmp	r3, #0
 800e904:	d014      	beq.n	800e930 <tcp_receive+0x27c>
 800e906:	2301      	movs	r3, #1
 800e908:	e013      	b.n	800e932 <tcp_receive+0x27e>
 800e90a:	bf00      	nop
 800e90c:	08015d78 	.word	0x08015d78
 800e910:	080160a8 	.word	0x080160a8
 800e914:	08015dc4 	.word	0x08015dc4
 800e918:	080160c4 	.word	0x080160c4
 800e91c:	2000b1e8 	.word	0x2000b1e8
 800e920:	2000b1dc 	.word	0x2000b1dc
 800e924:	2000b1e0 	.word	0x2000b1e0
 800e928:	2000b1cc 	.word	0x2000b1cc
 800e92c:	2000b1e6 	.word	0x2000b1e6
 800e930:	2302      	movs	r3, #2
 800e932:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e936:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800e93a:	b29a      	uxth	r2, r3
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e940:	fb12 f303 	smulbb	r3, r2, r3
 800e944:	b29b      	uxth	r3, r3
 800e946:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e948:	4293      	cmp	r3, r2
 800e94a:	bf28      	it	cs
 800e94c:	4613      	movcs	r3, r2
 800e94e:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e956:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e958:	4413      	add	r3, r2
 800e95a:	b29a      	uxth	r2, r3
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e962:	429a      	cmp	r2, r3
 800e964:	d309      	bcc.n	800e97a <tcp_receive+0x2c6>
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e96c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800e96e:	4413      	add	r3, r2
 800e970:	b29a      	uxth	r2, r3
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800e978:	e04e      	b.n	800ea18 <tcp_receive+0x364>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e980:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800e984:	e048      	b.n	800ea18 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800e98c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e98e:	4413      	add	r3, r2
 800e990:	b29a      	uxth	r2, r3
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 800e998:	429a      	cmp	r2, r3
 800e99a:	d309      	bcc.n	800e9b0 <tcp_receive+0x2fc>
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800e9a2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e9a4:	4413      	add	r3, r2
 800e9a6:	b29a      	uxth	r2, r3
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 800e9ae:	e004      	b.n	800e9ba <tcp_receive+0x306>
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e9b6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e9c6:	429a      	cmp	r2, r3
 800e9c8:	d326      	bcc.n	800ea18 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e9d6:	1ad3      	subs	r3, r2, r3
 800e9d8:	b29a      	uxth	r2, r3
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800e9ea:	4413      	add	r3, r2
 800e9ec:	b29a      	uxth	r2, r3
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 800e9f4:	429a      	cmp	r2, r3
 800e9f6:	d30a      	bcc.n	800ea0e <tcp_receive+0x35a>
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800e9fe:	687b      	ldr	r3, [r7, #4]
 800ea00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ea02:	4413      	add	r3, r2
 800ea04:	b29a      	uxth	r2, r3
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 800ea0c:	e004      	b.n	800ea18 <tcp_receive+0x364>
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ea14:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea20:	4a98      	ldr	r2, [pc, #608]	@ (800ec84 <tcp_receive+0x5d0>)
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f7ff fdca 	bl	800e5bc <tcp_free_acked_segments>
 800ea28:	4602      	mov	r2, r0
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea36:	4a94      	ldr	r2, [pc, #592]	@ (800ec88 <tcp_receive+0x5d4>)
 800ea38:	6878      	ldr	r0, [r7, #4]
 800ea3a:	f7ff fdbf 	bl	800e5bc <tcp_free_acked_segments>
 800ea3e:	4602      	mov	r2, r0
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d104      	bne.n	800ea56 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ea52:	861a      	strh	r2, [r3, #48]	@ 0x30
 800ea54:	e002      	b.n	800ea5c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2200      	movs	r2, #0
 800ea5a:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2200      	movs	r2, #0
 800ea60:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d103      	bne.n	800ea72 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800ea78:	4b84      	ldr	r3, [pc, #528]	@ (800ec8c <tcp_receive+0x5d8>)
 800ea7a:	881b      	ldrh	r3, [r3, #0]
 800ea7c:	4413      	add	r3, r2
 800ea7e:	b29a      	uxth	r2, r3
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	8b5b      	ldrh	r3, [r3, #26]
 800ea8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	d035      	beq.n	800eafe <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d118      	bne.n	800eacc <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ea9e:	2b00      	cmp	r3, #0
 800eaa0:	d00c      	beq.n	800eabc <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800eaaa:	68db      	ldr	r3, [r3, #12]
 800eaac:	685b      	ldr	r3, [r3, #4]
 800eaae:	4618      	mov	r0, r3
 800eab0:	f7fb f9d6 	bl	8009e60 <lwip_htonl>
 800eab4:	4603      	mov	r3, r0
 800eab6:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	dc20      	bgt.n	800eafe <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	8b5b      	ldrh	r3, [r3, #26]
 800eac0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eac4:	b29a      	uxth	r2, r3
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800eaca:	e018      	b.n	800eafe <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ead4:	68db      	ldr	r3, [r3, #12]
 800ead6:	685b      	ldr	r3, [r3, #4]
 800ead8:	4618      	mov	r0, r3
 800eada:	f7fb f9c1 	bl	8009e60 <lwip_htonl>
 800eade:	4603      	mov	r3, r0
 800eae0:	1ae3      	subs	r3, r4, r3
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	dc0b      	bgt.n	800eafe <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	8b5b      	ldrh	r3, [r3, #26]
 800eaea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800eaee:	b29a      	uxth	r2, r3
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800eaf4:	e003      	b.n	800eafe <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f001 ff70 	bl	80109dc <tcp_send_empty_ack>
 800eafc:	e000      	b.n	800eb00 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800eafe:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d05b      	beq.n	800ebc0 <tcp_receive+0x50c>
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eb0c:	4b60      	ldr	r3, [pc, #384]	@ (800ec90 <tcp_receive+0x5dc>)
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	1ad3      	subs	r3, r2, r3
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	da54      	bge.n	800ebc0 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800eb16:	4b5f      	ldr	r3, [pc, #380]	@ (800ec94 <tcp_receive+0x5e0>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	b29a      	uxth	r2, r3
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eb20:	b29b      	uxth	r3, r3
 800eb22:	1ad3      	subs	r3, r2, r3
 800eb24:	b29b      	uxth	r3, r3
 800eb26:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800eb2a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800eb34:	10db      	asrs	r3, r3, #3
 800eb36:	b21b      	sxth	r3, r3
 800eb38:	b29b      	uxth	r3, r3
 800eb3a:	1ad3      	subs	r3, r2, r3
 800eb3c:	b29b      	uxth	r3, r3
 800eb3e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800eb48:	b29a      	uxth	r2, r3
 800eb4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800eb4e:	4413      	add	r3, r2
 800eb50:	b29b      	uxth	r3, r3
 800eb52:	b21a      	sxth	r2, r3
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 800eb58:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	da05      	bge.n	800eb6c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800eb60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800eb64:	425b      	negs	r3, r3
 800eb66:	b29b      	uxth	r3, r3
 800eb68:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800eb6c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800eb76:	109b      	asrs	r3, r3, #2
 800eb78:	b21b      	sxth	r3, r3
 800eb7a:	b29b      	uxth	r3, r3
 800eb7c:	1ad3      	subs	r3, r2, r3
 800eb7e:	b29b      	uxth	r3, r3
 800eb80:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800eb8a:	b29a      	uxth	r2, r3
 800eb8c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800eb90:	4413      	add	r3, r2
 800eb92:	b29b      	uxth	r3, r3
 800eb94:	b21a      	sxth	r2, r3
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 800eba0:	10db      	asrs	r3, r3, #3
 800eba2:	b21b      	sxth	r3, r3
 800eba4:	b29a      	uxth	r2, r3
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 800ebac:	b29b      	uxth	r3, r3
 800ebae:	4413      	add	r3, r2
 800ebb0:	b29b      	uxth	r3, r3
 800ebb2:	b21a      	sxth	r2, r3
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ebc0:	4b35      	ldr	r3, [pc, #212]	@ (800ec98 <tcp_receive+0x5e4>)
 800ebc2:	881b      	ldrh	r3, [r3, #0]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	f000 84df 	beq.w	800f588 <tcp_receive+0xed4>
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	7d1b      	ldrb	r3, [r3, #20]
 800ebce:	2b06      	cmp	r3, #6
 800ebd0:	f200 84da 	bhi.w	800f588 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ebd8:	4b30      	ldr	r3, [pc, #192]	@ (800ec9c <tcp_receive+0x5e8>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	1ad3      	subs	r3, r2, r3
 800ebde:	3b01      	subs	r3, #1
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	f2c0 808f 	blt.w	800ed04 <tcp_receive+0x650>
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ebea:	4b2b      	ldr	r3, [pc, #172]	@ (800ec98 <tcp_receive+0x5e4>)
 800ebec:	881b      	ldrh	r3, [r3, #0]
 800ebee:	4619      	mov	r1, r3
 800ebf0:	4b2a      	ldr	r3, [pc, #168]	@ (800ec9c <tcp_receive+0x5e8>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	440b      	add	r3, r1
 800ebf6:	1ad3      	subs	r3, r2, r3
 800ebf8:	3301      	adds	r3, #1
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	f300 8082 	bgt.w	800ed04 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800ec00:	4b27      	ldr	r3, [pc, #156]	@ (800eca0 <tcp_receive+0x5ec>)
 800ec02:	685b      	ldr	r3, [r3, #4]
 800ec04:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ec0a:	4b24      	ldr	r3, [pc, #144]	@ (800ec9c <tcp_receive+0x5e8>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	1ad3      	subs	r3, r2, r3
 800ec10:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ec12:	4b23      	ldr	r3, [pc, #140]	@ (800eca0 <tcp_receive+0x5ec>)
 800ec14:	685b      	ldr	r3, [r3, #4]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d106      	bne.n	800ec28 <tcp_receive+0x574>
 800ec1a:	4b22      	ldr	r3, [pc, #136]	@ (800eca4 <tcp_receive+0x5f0>)
 800ec1c:	f240 5294 	movw	r2, #1428	@ 0x594
 800ec20:	4921      	ldr	r1, [pc, #132]	@ (800eca8 <tcp_receive+0x5f4>)
 800ec22:	4822      	ldr	r0, [pc, #136]	@ (800ecac <tcp_receive+0x5f8>)
 800ec24:	f005 f87a 	bl	8013d1c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800ec28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec2a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800ec2e:	4293      	cmp	r3, r2
 800ec30:	d906      	bls.n	800ec40 <tcp_receive+0x58c>
 800ec32:	4b1c      	ldr	r3, [pc, #112]	@ (800eca4 <tcp_receive+0x5f0>)
 800ec34:	f240 5295 	movw	r2, #1429	@ 0x595
 800ec38:	491d      	ldr	r1, [pc, #116]	@ (800ecb0 <tcp_receive+0x5fc>)
 800ec3a:	481c      	ldr	r0, [pc, #112]	@ (800ecac <tcp_receive+0x5f8>)
 800ec3c:	f005 f86e 	bl	8013d1c <iprintf>
      off = (u16_t)off32;
 800ec40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec42:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ec46:	4b16      	ldr	r3, [pc, #88]	@ (800eca0 <tcp_receive+0x5ec>)
 800ec48:	685b      	ldr	r3, [r3, #4]
 800ec4a:	891b      	ldrh	r3, [r3, #8]
 800ec4c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ec50:	429a      	cmp	r2, r3
 800ec52:	d906      	bls.n	800ec62 <tcp_receive+0x5ae>
 800ec54:	4b13      	ldr	r3, [pc, #76]	@ (800eca4 <tcp_receive+0x5f0>)
 800ec56:	f240 5297 	movw	r2, #1431	@ 0x597
 800ec5a:	4916      	ldr	r1, [pc, #88]	@ (800ecb4 <tcp_receive+0x600>)
 800ec5c:	4813      	ldr	r0, [pc, #76]	@ (800ecac <tcp_receive+0x5f8>)
 800ec5e:	f005 f85d 	bl	8013d1c <iprintf>
      inseg.len -= off;
 800ec62:	4b0f      	ldr	r3, [pc, #60]	@ (800eca0 <tcp_receive+0x5ec>)
 800ec64:	891a      	ldrh	r2, [r3, #8]
 800ec66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ec6a:	1ad3      	subs	r3, r2, r3
 800ec6c:	b29a      	uxth	r2, r3
 800ec6e:	4b0c      	ldr	r3, [pc, #48]	@ (800eca0 <tcp_receive+0x5ec>)
 800ec70:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ec72:	4b0b      	ldr	r3, [pc, #44]	@ (800eca0 <tcp_receive+0x5ec>)
 800ec74:	685b      	ldr	r3, [r3, #4]
 800ec76:	891a      	ldrh	r2, [r3, #8]
 800ec78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ec7c:	1ad3      	subs	r3, r2, r3
 800ec7e:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 800ec80:	e02a      	b.n	800ecd8 <tcp_receive+0x624>
 800ec82:	bf00      	nop
 800ec84:	080160e0 	.word	0x080160e0
 800ec88:	080160e8 	.word	0x080160e8
 800ec8c:	2000b1e4 	.word	0x2000b1e4
 800ec90:	2000b1e0 	.word	0x2000b1e0
 800ec94:	2000b1a4 	.word	0x2000b1a4
 800ec98:	2000b1e6 	.word	0x2000b1e6
 800ec9c:	2000b1dc 	.word	0x2000b1dc
 800eca0:	2000b1bc 	.word	0x2000b1bc
 800eca4:	08015d78 	.word	0x08015d78
 800eca8:	080160f0 	.word	0x080160f0
 800ecac:	08015dc4 	.word	0x08015dc4
 800ecb0:	08016100 	.word	0x08016100
 800ecb4:	08016110 	.word	0x08016110
        off -= p->len;
 800ecb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecba:	895b      	ldrh	r3, [r3, #10]
 800ecbc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ecc0:	1ad3      	subs	r3, r2, r3
 800ecc2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ecc6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecc8:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800ecca:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800eccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecce:	2200      	movs	r2, #0
 800ecd0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ecd2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 800ecd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecda:	895b      	ldrh	r3, [r3, #10]
 800ecdc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 800ece0:	429a      	cmp	r2, r3
 800ece2:	d8e9      	bhi.n	800ecb8 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ece4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800ece8:	4619      	mov	r1, r3
 800ecea:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800ecec:	f7fc fb7a 	bl	800b3e4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ecf4:	4a90      	ldr	r2, [pc, #576]	@ (800ef38 <tcp_receive+0x884>)
 800ecf6:	6013      	str	r3, [r2, #0]
 800ecf8:	4b90      	ldr	r3, [pc, #576]	@ (800ef3c <tcp_receive+0x888>)
 800ecfa:	68db      	ldr	r3, [r3, #12]
 800ecfc:	4a8e      	ldr	r2, [pc, #568]	@ (800ef38 <tcp_receive+0x884>)
 800ecfe:	6812      	ldr	r2, [r2, #0]
 800ed00:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ed02:	e00d      	b.n	800ed20 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ed04:	4b8c      	ldr	r3, [pc, #560]	@ (800ef38 <tcp_receive+0x884>)
 800ed06:	681a      	ldr	r2, [r3, #0]
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed0c:	1ad3      	subs	r3, r2, r3
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	da06      	bge.n	800ed20 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	8b5b      	ldrh	r3, [r3, #26]
 800ed16:	f043 0302 	orr.w	r3, r3, #2
 800ed1a:	b29a      	uxth	r2, r3
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ed20:	4b85      	ldr	r3, [pc, #532]	@ (800ef38 <tcp_receive+0x884>)
 800ed22:	681a      	ldr	r2, [r3, #0]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed28:	1ad3      	subs	r3, r2, r3
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	f2c0 8427 	blt.w	800f57e <tcp_receive+0xeca>
 800ed30:	4b81      	ldr	r3, [pc, #516]	@ (800ef38 <tcp_receive+0x884>)
 800ed32:	681a      	ldr	r2, [r3, #0]
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ed38:	6879      	ldr	r1, [r7, #4]
 800ed3a:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ed3c:	440b      	add	r3, r1
 800ed3e:	1ad3      	subs	r3, r2, r3
 800ed40:	3301      	adds	r3, #1
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	f300 841b 	bgt.w	800f57e <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ed4c:	4b7a      	ldr	r3, [pc, #488]	@ (800ef38 <tcp_receive+0x884>)
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	429a      	cmp	r2, r3
 800ed52:	f040 8298 	bne.w	800f286 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800ed56:	4b79      	ldr	r3, [pc, #484]	@ (800ef3c <tcp_receive+0x888>)
 800ed58:	891c      	ldrh	r4, [r3, #8]
 800ed5a:	4b78      	ldr	r3, [pc, #480]	@ (800ef3c <tcp_receive+0x888>)
 800ed5c:	68db      	ldr	r3, [r3, #12]
 800ed5e:	899b      	ldrh	r3, [r3, #12]
 800ed60:	b29b      	uxth	r3, r3
 800ed62:	4618      	mov	r0, r3
 800ed64:	f7fb f866 	bl	8009e34 <lwip_htons>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	b2db      	uxtb	r3, r3
 800ed6c:	f003 0303 	and.w	r3, r3, #3
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	d001      	beq.n	800ed78 <tcp_receive+0x6c4>
 800ed74:	2301      	movs	r3, #1
 800ed76:	e000      	b.n	800ed7a <tcp_receive+0x6c6>
 800ed78:	2300      	movs	r3, #0
 800ed7a:	4423      	add	r3, r4
 800ed7c:	b29a      	uxth	r2, r3
 800ed7e:	4b70      	ldr	r3, [pc, #448]	@ (800ef40 <tcp_receive+0x88c>)
 800ed80:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800ed86:	4b6e      	ldr	r3, [pc, #440]	@ (800ef40 <tcp_receive+0x88c>)
 800ed88:	881b      	ldrh	r3, [r3, #0]
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d274      	bcs.n	800ee78 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ed8e:	4b6b      	ldr	r3, [pc, #428]	@ (800ef3c <tcp_receive+0x888>)
 800ed90:	68db      	ldr	r3, [r3, #12]
 800ed92:	899b      	ldrh	r3, [r3, #12]
 800ed94:	b29b      	uxth	r3, r3
 800ed96:	4618      	mov	r0, r3
 800ed98:	f7fb f84c 	bl	8009e34 <lwip_htons>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	b2db      	uxtb	r3, r3
 800eda0:	f003 0301 	and.w	r3, r3, #1
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d01e      	beq.n	800ede6 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800eda8:	4b64      	ldr	r3, [pc, #400]	@ (800ef3c <tcp_receive+0x888>)
 800edaa:	68db      	ldr	r3, [r3, #12]
 800edac:	899b      	ldrh	r3, [r3, #12]
 800edae:	b29b      	uxth	r3, r3
 800edb0:	b21b      	sxth	r3, r3
 800edb2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800edb6:	b21c      	sxth	r4, r3
 800edb8:	4b60      	ldr	r3, [pc, #384]	@ (800ef3c <tcp_receive+0x888>)
 800edba:	68db      	ldr	r3, [r3, #12]
 800edbc:	899b      	ldrh	r3, [r3, #12]
 800edbe:	b29b      	uxth	r3, r3
 800edc0:	4618      	mov	r0, r3
 800edc2:	f7fb f837 	bl	8009e34 <lwip_htons>
 800edc6:	4603      	mov	r3, r0
 800edc8:	b2db      	uxtb	r3, r3
 800edca:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800edce:	b29b      	uxth	r3, r3
 800edd0:	4618      	mov	r0, r3
 800edd2:	f7fb f82f 	bl	8009e34 <lwip_htons>
 800edd6:	4603      	mov	r3, r0
 800edd8:	b21b      	sxth	r3, r3
 800edda:	4323      	orrs	r3, r4
 800eddc:	b21a      	sxth	r2, r3
 800edde:	4b57      	ldr	r3, [pc, #348]	@ (800ef3c <tcp_receive+0x888>)
 800ede0:	68db      	ldr	r3, [r3, #12]
 800ede2:	b292      	uxth	r2, r2
 800ede4:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800edea:	4b54      	ldr	r3, [pc, #336]	@ (800ef3c <tcp_receive+0x888>)
 800edec:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800edee:	4b53      	ldr	r3, [pc, #332]	@ (800ef3c <tcp_receive+0x888>)
 800edf0:	68db      	ldr	r3, [r3, #12]
 800edf2:	899b      	ldrh	r3, [r3, #12]
 800edf4:	b29b      	uxth	r3, r3
 800edf6:	4618      	mov	r0, r3
 800edf8:	f7fb f81c 	bl	8009e34 <lwip_htons>
 800edfc:	4603      	mov	r3, r0
 800edfe:	b2db      	uxtb	r3, r3
 800ee00:	f003 0302 	and.w	r3, r3, #2
 800ee04:	2b00      	cmp	r3, #0
 800ee06:	d005      	beq.n	800ee14 <tcp_receive+0x760>
            inseg.len -= 1;
 800ee08:	4b4c      	ldr	r3, [pc, #304]	@ (800ef3c <tcp_receive+0x888>)
 800ee0a:	891b      	ldrh	r3, [r3, #8]
 800ee0c:	3b01      	subs	r3, #1
 800ee0e:	b29a      	uxth	r2, r3
 800ee10:	4b4a      	ldr	r3, [pc, #296]	@ (800ef3c <tcp_receive+0x888>)
 800ee12:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ee14:	4b49      	ldr	r3, [pc, #292]	@ (800ef3c <tcp_receive+0x888>)
 800ee16:	685b      	ldr	r3, [r3, #4]
 800ee18:	4a48      	ldr	r2, [pc, #288]	@ (800ef3c <tcp_receive+0x888>)
 800ee1a:	8912      	ldrh	r2, [r2, #8]
 800ee1c:	4611      	mov	r1, r2
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f7fc f9e0 	bl	800b1e4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ee24:	4b45      	ldr	r3, [pc, #276]	@ (800ef3c <tcp_receive+0x888>)
 800ee26:	891c      	ldrh	r4, [r3, #8]
 800ee28:	4b44      	ldr	r3, [pc, #272]	@ (800ef3c <tcp_receive+0x888>)
 800ee2a:	68db      	ldr	r3, [r3, #12]
 800ee2c:	899b      	ldrh	r3, [r3, #12]
 800ee2e:	b29b      	uxth	r3, r3
 800ee30:	4618      	mov	r0, r3
 800ee32:	f7fa ffff 	bl	8009e34 <lwip_htons>
 800ee36:	4603      	mov	r3, r0
 800ee38:	b2db      	uxtb	r3, r3
 800ee3a:	f003 0303 	and.w	r3, r3, #3
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d001      	beq.n	800ee46 <tcp_receive+0x792>
 800ee42:	2301      	movs	r3, #1
 800ee44:	e000      	b.n	800ee48 <tcp_receive+0x794>
 800ee46:	2300      	movs	r3, #0
 800ee48:	4423      	add	r3, r4
 800ee4a:	b29a      	uxth	r2, r3
 800ee4c:	4b3c      	ldr	r3, [pc, #240]	@ (800ef40 <tcp_receive+0x88c>)
 800ee4e:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ee50:	4b3b      	ldr	r3, [pc, #236]	@ (800ef40 <tcp_receive+0x88c>)
 800ee52:	881b      	ldrh	r3, [r3, #0]
 800ee54:	461a      	mov	r2, r3
 800ee56:	4b38      	ldr	r3, [pc, #224]	@ (800ef38 <tcp_receive+0x884>)
 800ee58:	681b      	ldr	r3, [r3, #0]
 800ee5a:	441a      	add	r2, r3
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee60:	6879      	ldr	r1, [r7, #4]
 800ee62:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800ee64:	440b      	add	r3, r1
 800ee66:	429a      	cmp	r2, r3
 800ee68:	d006      	beq.n	800ee78 <tcp_receive+0x7c4>
 800ee6a:	4b36      	ldr	r3, [pc, #216]	@ (800ef44 <tcp_receive+0x890>)
 800ee6c:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 800ee70:	4935      	ldr	r1, [pc, #212]	@ (800ef48 <tcp_receive+0x894>)
 800ee72:	4836      	ldr	r0, [pc, #216]	@ (800ef4c <tcp_receive+0x898>)
 800ee74:	f004 ff52 	bl	8013d1c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	f000 80e6 	beq.w	800f04e <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ee82:	4b2e      	ldr	r3, [pc, #184]	@ (800ef3c <tcp_receive+0x888>)
 800ee84:	68db      	ldr	r3, [r3, #12]
 800ee86:	899b      	ldrh	r3, [r3, #12]
 800ee88:	b29b      	uxth	r3, r3
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	f7fa ffd2 	bl	8009e34 <lwip_htons>
 800ee90:	4603      	mov	r3, r0
 800ee92:	b2db      	uxtb	r3, r3
 800ee94:	f003 0301 	and.w	r3, r3, #1
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d010      	beq.n	800eebe <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ee9c:	e00a      	b.n	800eeb4 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eea2:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eea8:	681a      	ldr	r2, [r3, #0]
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 800eeae:	68f8      	ldr	r0, [r7, #12]
 800eeb0:	f7fd fd93 	bl	800c9da <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d1f0      	bne.n	800ee9e <tcp_receive+0x7ea>
 800eebc:	e0c7      	b.n	800f04e <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800eec2:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800eec4:	e051      	b.n	800ef6a <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800eec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800eec8:	68db      	ldr	r3, [r3, #12]
 800eeca:	899b      	ldrh	r3, [r3, #12]
 800eecc:	b29b      	uxth	r3, r3
 800eece:	4618      	mov	r0, r3
 800eed0:	f7fa ffb0 	bl	8009e34 <lwip_htons>
 800eed4:	4603      	mov	r3, r0
 800eed6:	b2db      	uxtb	r3, r3
 800eed8:	f003 0301 	and.w	r3, r3, #1
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d03c      	beq.n	800ef5a <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800eee0:	4b16      	ldr	r3, [pc, #88]	@ (800ef3c <tcp_receive+0x888>)
 800eee2:	68db      	ldr	r3, [r3, #12]
 800eee4:	899b      	ldrh	r3, [r3, #12]
 800eee6:	b29b      	uxth	r3, r3
 800eee8:	4618      	mov	r0, r3
 800eeea:	f7fa ffa3 	bl	8009e34 <lwip_htons>
 800eeee:	4603      	mov	r3, r0
 800eef0:	b2db      	uxtb	r3, r3
 800eef2:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d12f      	bne.n	800ef5a <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800eefa:	4b10      	ldr	r3, [pc, #64]	@ (800ef3c <tcp_receive+0x888>)
 800eefc:	68db      	ldr	r3, [r3, #12]
 800eefe:	899b      	ldrh	r3, [r3, #12]
 800ef00:	b29c      	uxth	r4, r3
 800ef02:	2001      	movs	r0, #1
 800ef04:	f7fa ff96 	bl	8009e34 <lwip_htons>
 800ef08:	4603      	mov	r3, r0
 800ef0a:	461a      	mov	r2, r3
 800ef0c:	4b0b      	ldr	r3, [pc, #44]	@ (800ef3c <tcp_receive+0x888>)
 800ef0e:	68db      	ldr	r3, [r3, #12]
 800ef10:	4322      	orrs	r2, r4
 800ef12:	b292      	uxth	r2, r2
 800ef14:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ef16:	4b09      	ldr	r3, [pc, #36]	@ (800ef3c <tcp_receive+0x888>)
 800ef18:	891c      	ldrh	r4, [r3, #8]
 800ef1a:	4b08      	ldr	r3, [pc, #32]	@ (800ef3c <tcp_receive+0x888>)
 800ef1c:	68db      	ldr	r3, [r3, #12]
 800ef1e:	899b      	ldrh	r3, [r3, #12]
 800ef20:	b29b      	uxth	r3, r3
 800ef22:	4618      	mov	r0, r3
 800ef24:	f7fa ff86 	bl	8009e34 <lwip_htons>
 800ef28:	4603      	mov	r3, r0
 800ef2a:	b2db      	uxtb	r3, r3
 800ef2c:	f003 0303 	and.w	r3, r3, #3
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d00d      	beq.n	800ef50 <tcp_receive+0x89c>
 800ef34:	2301      	movs	r3, #1
 800ef36:	e00c      	b.n	800ef52 <tcp_receive+0x89e>
 800ef38:	2000b1dc 	.word	0x2000b1dc
 800ef3c:	2000b1bc 	.word	0x2000b1bc
 800ef40:	2000b1e6 	.word	0x2000b1e6
 800ef44:	08015d78 	.word	0x08015d78
 800ef48:	08016120 	.word	0x08016120
 800ef4c:	08015dc4 	.word	0x08015dc4
 800ef50:	2300      	movs	r3, #0
 800ef52:	4423      	add	r3, r4
 800ef54:	b29a      	uxth	r2, r3
 800ef56:	4b98      	ldr	r3, [pc, #608]	@ (800f1b8 <tcp_receive+0xb04>)
 800ef58:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ef5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef5c:	613b      	str	r3, [r7, #16]
              next = next->next;
 800ef5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 800ef64:	6938      	ldr	r0, [r7, #16]
 800ef66:	f7fd fd38 	bl	800c9da <tcp_seg_free>
            while (next &&
 800ef6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d00e      	beq.n	800ef8e <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800ef70:	4b91      	ldr	r3, [pc, #580]	@ (800f1b8 <tcp_receive+0xb04>)
 800ef72:	881b      	ldrh	r3, [r3, #0]
 800ef74:	461a      	mov	r2, r3
 800ef76:	4b91      	ldr	r3, [pc, #580]	@ (800f1bc <tcp_receive+0xb08>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	441a      	add	r2, r3
 800ef7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef7e:	68db      	ldr	r3, [r3, #12]
 800ef80:	685b      	ldr	r3, [r3, #4]
 800ef82:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ef84:	8909      	ldrh	r1, [r1, #8]
 800ef86:	440b      	add	r3, r1
 800ef88:	1ad3      	subs	r3, r2, r3
            while (next &&
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	da9b      	bge.n	800eec6 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800ef8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d059      	beq.n	800f048 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800ef94:	4b88      	ldr	r3, [pc, #544]	@ (800f1b8 <tcp_receive+0xb04>)
 800ef96:	881b      	ldrh	r3, [r3, #0]
 800ef98:	461a      	mov	r2, r3
 800ef9a:	4b88      	ldr	r3, [pc, #544]	@ (800f1bc <tcp_receive+0xb08>)
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	441a      	add	r2, r3
 800efa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efa2:	68db      	ldr	r3, [r3, #12]
 800efa4:	685b      	ldr	r3, [r3, #4]
 800efa6:	1ad3      	subs	r3, r2, r3
            if (next &&
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	dd4d      	ble.n	800f048 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800efac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800efae:	68db      	ldr	r3, [r3, #12]
 800efb0:	685b      	ldr	r3, [r3, #4]
 800efb2:	b29a      	uxth	r2, r3
 800efb4:	4b81      	ldr	r3, [pc, #516]	@ (800f1bc <tcp_receive+0xb08>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	b29b      	uxth	r3, r3
 800efba:	1ad3      	subs	r3, r2, r3
 800efbc:	b29a      	uxth	r2, r3
 800efbe:	4b80      	ldr	r3, [pc, #512]	@ (800f1c0 <tcp_receive+0xb0c>)
 800efc0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800efc2:	4b7f      	ldr	r3, [pc, #508]	@ (800f1c0 <tcp_receive+0xb0c>)
 800efc4:	68db      	ldr	r3, [r3, #12]
 800efc6:	899b      	ldrh	r3, [r3, #12]
 800efc8:	b29b      	uxth	r3, r3
 800efca:	4618      	mov	r0, r3
 800efcc:	f7fa ff32 	bl	8009e34 <lwip_htons>
 800efd0:	4603      	mov	r3, r0
 800efd2:	b2db      	uxtb	r3, r3
 800efd4:	f003 0302 	and.w	r3, r3, #2
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d005      	beq.n	800efe8 <tcp_receive+0x934>
                inseg.len -= 1;
 800efdc:	4b78      	ldr	r3, [pc, #480]	@ (800f1c0 <tcp_receive+0xb0c>)
 800efde:	891b      	ldrh	r3, [r3, #8]
 800efe0:	3b01      	subs	r3, #1
 800efe2:	b29a      	uxth	r2, r3
 800efe4:	4b76      	ldr	r3, [pc, #472]	@ (800f1c0 <tcp_receive+0xb0c>)
 800efe6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800efe8:	4b75      	ldr	r3, [pc, #468]	@ (800f1c0 <tcp_receive+0xb0c>)
 800efea:	685b      	ldr	r3, [r3, #4]
 800efec:	4a74      	ldr	r2, [pc, #464]	@ (800f1c0 <tcp_receive+0xb0c>)
 800efee:	8912      	ldrh	r2, [r2, #8]
 800eff0:	4611      	mov	r1, r2
 800eff2:	4618      	mov	r0, r3
 800eff4:	f7fc f8f6 	bl	800b1e4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800eff8:	4b71      	ldr	r3, [pc, #452]	@ (800f1c0 <tcp_receive+0xb0c>)
 800effa:	891c      	ldrh	r4, [r3, #8]
 800effc:	4b70      	ldr	r3, [pc, #448]	@ (800f1c0 <tcp_receive+0xb0c>)
 800effe:	68db      	ldr	r3, [r3, #12]
 800f000:	899b      	ldrh	r3, [r3, #12]
 800f002:	b29b      	uxth	r3, r3
 800f004:	4618      	mov	r0, r3
 800f006:	f7fa ff15 	bl	8009e34 <lwip_htons>
 800f00a:	4603      	mov	r3, r0
 800f00c:	b2db      	uxtb	r3, r3
 800f00e:	f003 0303 	and.w	r3, r3, #3
 800f012:	2b00      	cmp	r3, #0
 800f014:	d001      	beq.n	800f01a <tcp_receive+0x966>
 800f016:	2301      	movs	r3, #1
 800f018:	e000      	b.n	800f01c <tcp_receive+0x968>
 800f01a:	2300      	movs	r3, #0
 800f01c:	4423      	add	r3, r4
 800f01e:	b29a      	uxth	r2, r3
 800f020:	4b65      	ldr	r3, [pc, #404]	@ (800f1b8 <tcp_receive+0xb04>)
 800f022:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f024:	4b64      	ldr	r3, [pc, #400]	@ (800f1b8 <tcp_receive+0xb04>)
 800f026:	881b      	ldrh	r3, [r3, #0]
 800f028:	461a      	mov	r2, r3
 800f02a:	4b64      	ldr	r3, [pc, #400]	@ (800f1bc <tcp_receive+0xb08>)
 800f02c:	681b      	ldr	r3, [r3, #0]
 800f02e:	441a      	add	r2, r3
 800f030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f032:	68db      	ldr	r3, [r3, #12]
 800f034:	685b      	ldr	r3, [r3, #4]
 800f036:	429a      	cmp	r2, r3
 800f038:	d006      	beq.n	800f048 <tcp_receive+0x994>
 800f03a:	4b62      	ldr	r3, [pc, #392]	@ (800f1c4 <tcp_receive+0xb10>)
 800f03c:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 800f040:	4961      	ldr	r1, [pc, #388]	@ (800f1c8 <tcp_receive+0xb14>)
 800f042:	4862      	ldr	r0, [pc, #392]	@ (800f1cc <tcp_receive+0xb18>)
 800f044:	f004 fe6a 	bl	8013d1c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800f04c:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f04e:	4b5a      	ldr	r3, [pc, #360]	@ (800f1b8 <tcp_receive+0xb04>)
 800f050:	881b      	ldrh	r3, [r3, #0]
 800f052:	461a      	mov	r2, r3
 800f054:	4b59      	ldr	r3, [pc, #356]	@ (800f1bc <tcp_receive+0xb08>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	441a      	add	r2, r3
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f062:	4b55      	ldr	r3, [pc, #340]	@ (800f1b8 <tcp_receive+0xb04>)
 800f064:	881b      	ldrh	r3, [r3, #0]
 800f066:	429a      	cmp	r2, r3
 800f068:	d206      	bcs.n	800f078 <tcp_receive+0x9c4>
 800f06a:	4b56      	ldr	r3, [pc, #344]	@ (800f1c4 <tcp_receive+0xb10>)
 800f06c:	f240 6207 	movw	r2, #1543	@ 0x607
 800f070:	4957      	ldr	r1, [pc, #348]	@ (800f1d0 <tcp_receive+0xb1c>)
 800f072:	4856      	ldr	r0, [pc, #344]	@ (800f1cc <tcp_receive+0xb18>)
 800f074:	f004 fe52 	bl	8013d1c <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f07c:	4b4e      	ldr	r3, [pc, #312]	@ (800f1b8 <tcp_receive+0xb04>)
 800f07e:	881b      	ldrh	r3, [r3, #0]
 800f080:	1ad3      	subs	r3, r2, r3
 800f082:	b29a      	uxth	r2, r3
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f088:	6878      	ldr	r0, [r7, #4]
 800f08a:	f7fc ffc5 	bl	800c018 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f08e:	4b4c      	ldr	r3, [pc, #304]	@ (800f1c0 <tcp_receive+0xb0c>)
 800f090:	685b      	ldr	r3, [r3, #4]
 800f092:	891b      	ldrh	r3, [r3, #8]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d006      	beq.n	800f0a6 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f098:	4b49      	ldr	r3, [pc, #292]	@ (800f1c0 <tcp_receive+0xb0c>)
 800f09a:	685b      	ldr	r3, [r3, #4]
 800f09c:	4a4d      	ldr	r2, [pc, #308]	@ (800f1d4 <tcp_receive+0xb20>)
 800f09e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f0a0:	4b47      	ldr	r3, [pc, #284]	@ (800f1c0 <tcp_receive+0xb0c>)
 800f0a2:	2200      	movs	r2, #0
 800f0a4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f0a6:	4b46      	ldr	r3, [pc, #280]	@ (800f1c0 <tcp_receive+0xb0c>)
 800f0a8:	68db      	ldr	r3, [r3, #12]
 800f0aa:	899b      	ldrh	r3, [r3, #12]
 800f0ac:	b29b      	uxth	r3, r3
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	f7fa fec0 	bl	8009e34 <lwip_htons>
 800f0b4:	4603      	mov	r3, r0
 800f0b6:	b2db      	uxtb	r3, r3
 800f0b8:	f003 0301 	and.w	r3, r3, #1
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	f000 80b8 	beq.w	800f232 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f0c2:	4b45      	ldr	r3, [pc, #276]	@ (800f1d8 <tcp_receive+0xb24>)
 800f0c4:	781b      	ldrb	r3, [r3, #0]
 800f0c6:	f043 0320 	orr.w	r3, r3, #32
 800f0ca:	b2da      	uxtb	r2, r3
 800f0cc:	4b42      	ldr	r3, [pc, #264]	@ (800f1d8 <tcp_receive+0xb24>)
 800f0ce:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f0d0:	e0af      	b.n	800f232 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f0d6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f0dc:	68db      	ldr	r3, [r3, #12]
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	4a36      	ldr	r2, [pc, #216]	@ (800f1bc <tcp_receive+0xb08>)
 800f0e2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f0e4:	68bb      	ldr	r3, [r7, #8]
 800f0e6:	891b      	ldrh	r3, [r3, #8]
 800f0e8:	461c      	mov	r4, r3
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	68db      	ldr	r3, [r3, #12]
 800f0ee:	899b      	ldrh	r3, [r3, #12]
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f7fa fe9e 	bl	8009e34 <lwip_htons>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	b2db      	uxtb	r3, r3
 800f0fc:	f003 0303 	and.w	r3, r3, #3
 800f100:	2b00      	cmp	r3, #0
 800f102:	d001      	beq.n	800f108 <tcp_receive+0xa54>
 800f104:	2301      	movs	r3, #1
 800f106:	e000      	b.n	800f10a <tcp_receive+0xa56>
 800f108:	2300      	movs	r3, #0
 800f10a:	191a      	adds	r2, r3, r4
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f110:	441a      	add	r2, r3
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f11a:	461c      	mov	r4, r3
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	891b      	ldrh	r3, [r3, #8]
 800f120:	461d      	mov	r5, r3
 800f122:	68bb      	ldr	r3, [r7, #8]
 800f124:	68db      	ldr	r3, [r3, #12]
 800f126:	899b      	ldrh	r3, [r3, #12]
 800f128:	b29b      	uxth	r3, r3
 800f12a:	4618      	mov	r0, r3
 800f12c:	f7fa fe82 	bl	8009e34 <lwip_htons>
 800f130:	4603      	mov	r3, r0
 800f132:	b2db      	uxtb	r3, r3
 800f134:	f003 0303 	and.w	r3, r3, #3
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d001      	beq.n	800f140 <tcp_receive+0xa8c>
 800f13c:	2301      	movs	r3, #1
 800f13e:	e000      	b.n	800f142 <tcp_receive+0xa8e>
 800f140:	2300      	movs	r3, #0
 800f142:	442b      	add	r3, r5
 800f144:	429c      	cmp	r4, r3
 800f146:	d206      	bcs.n	800f156 <tcp_receive+0xaa2>
 800f148:	4b1e      	ldr	r3, [pc, #120]	@ (800f1c4 <tcp_receive+0xb10>)
 800f14a:	f240 622b 	movw	r2, #1579	@ 0x62b
 800f14e:	4923      	ldr	r1, [pc, #140]	@ (800f1dc <tcp_receive+0xb28>)
 800f150:	481e      	ldr	r0, [pc, #120]	@ (800f1cc <tcp_receive+0xb18>)
 800f152:	f004 fde3 	bl	8013d1c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f156:	68bb      	ldr	r3, [r7, #8]
 800f158:	891b      	ldrh	r3, [r3, #8]
 800f15a:	461c      	mov	r4, r3
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	68db      	ldr	r3, [r3, #12]
 800f160:	899b      	ldrh	r3, [r3, #12]
 800f162:	b29b      	uxth	r3, r3
 800f164:	4618      	mov	r0, r3
 800f166:	f7fa fe65 	bl	8009e34 <lwip_htons>
 800f16a:	4603      	mov	r3, r0
 800f16c:	b2db      	uxtb	r3, r3
 800f16e:	f003 0303 	and.w	r3, r3, #3
 800f172:	2b00      	cmp	r3, #0
 800f174:	d001      	beq.n	800f17a <tcp_receive+0xac6>
 800f176:	2301      	movs	r3, #1
 800f178:	e000      	b.n	800f17c <tcp_receive+0xac8>
 800f17a:	2300      	movs	r3, #0
 800f17c:	1919      	adds	r1, r3, r4
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 800f182:	b28b      	uxth	r3, r1
 800f184:	1ad3      	subs	r3, r2, r3
 800f186:	b29a      	uxth	r2, r3
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f18c:	6878      	ldr	r0, [r7, #4]
 800f18e:	f7fc ff43 	bl	800c018 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f192:	68bb      	ldr	r3, [r7, #8]
 800f194:	685b      	ldr	r3, [r3, #4]
 800f196:	891b      	ldrh	r3, [r3, #8]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d028      	beq.n	800f1ee <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f19c:	4b0d      	ldr	r3, [pc, #52]	@ (800f1d4 <tcp_receive+0xb20>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d01d      	beq.n	800f1e0 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f1a4:	4b0b      	ldr	r3, [pc, #44]	@ (800f1d4 <tcp_receive+0xb20>)
 800f1a6:	681a      	ldr	r2, [r3, #0]
 800f1a8:	68bb      	ldr	r3, [r7, #8]
 800f1aa:	685b      	ldr	r3, [r3, #4]
 800f1ac:	4619      	mov	r1, r3
 800f1ae:	4610      	mov	r0, r2
 800f1b0:	f7fc fa60 	bl	800b674 <pbuf_cat>
 800f1b4:	e018      	b.n	800f1e8 <tcp_receive+0xb34>
 800f1b6:	bf00      	nop
 800f1b8:	2000b1e6 	.word	0x2000b1e6
 800f1bc:	2000b1dc 	.word	0x2000b1dc
 800f1c0:	2000b1bc 	.word	0x2000b1bc
 800f1c4:	08015d78 	.word	0x08015d78
 800f1c8:	08016158 	.word	0x08016158
 800f1cc:	08015dc4 	.word	0x08015dc4
 800f1d0:	08016194 	.word	0x08016194
 800f1d4:	2000b1ec 	.word	0x2000b1ec
 800f1d8:	2000b1e9 	.word	0x2000b1e9
 800f1dc:	080161b4 	.word	0x080161b4
            } else {
              recv_data = cseg->p;
 800f1e0:	68bb      	ldr	r3, [r7, #8]
 800f1e2:	685b      	ldr	r3, [r3, #4]
 800f1e4:	4a70      	ldr	r2, [pc, #448]	@ (800f3a8 <tcp_receive+0xcf4>)
 800f1e6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f1e8:	68bb      	ldr	r3, [r7, #8]
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f1ee:	68bb      	ldr	r3, [r7, #8]
 800f1f0:	68db      	ldr	r3, [r3, #12]
 800f1f2:	899b      	ldrh	r3, [r3, #12]
 800f1f4:	b29b      	uxth	r3, r3
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f7fa fe1c 	bl	8009e34 <lwip_htons>
 800f1fc:	4603      	mov	r3, r0
 800f1fe:	b2db      	uxtb	r3, r3
 800f200:	f003 0301 	and.w	r3, r3, #1
 800f204:	2b00      	cmp	r3, #0
 800f206:	d00d      	beq.n	800f224 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f208:	4b68      	ldr	r3, [pc, #416]	@ (800f3ac <tcp_receive+0xcf8>)
 800f20a:	781b      	ldrb	r3, [r3, #0]
 800f20c:	f043 0320 	orr.w	r3, r3, #32
 800f210:	b2da      	uxtb	r2, r3
 800f212:	4b66      	ldr	r3, [pc, #408]	@ (800f3ac <tcp_receive+0xcf8>)
 800f214:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	7d1b      	ldrb	r3, [r3, #20]
 800f21a:	2b04      	cmp	r3, #4
 800f21c:	d102      	bne.n	800f224 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	2207      	movs	r2, #7
 800f222:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f224:	68bb      	ldr	r3, [r7, #8]
 800f226:	681a      	ldr	r2, [r3, #0]
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 800f22c:	68b8      	ldr	r0, [r7, #8]
 800f22e:	f7fd fbd4 	bl	800c9da <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f236:	2b00      	cmp	r3, #0
 800f238:	d008      	beq.n	800f24c <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f23e:	68db      	ldr	r3, [r3, #12]
 800f240:	685a      	ldr	r2, [r3, #4]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 800f246:	429a      	cmp	r2, r3
 800f248:	f43f af43 	beq.w	800f0d2 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	8b5b      	ldrh	r3, [r3, #26]
 800f250:	f003 0301 	and.w	r3, r3, #1
 800f254:	2b00      	cmp	r3, #0
 800f256:	d00e      	beq.n	800f276 <tcp_receive+0xbc2>
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	8b5b      	ldrh	r3, [r3, #26]
 800f25c:	f023 0301 	bic.w	r3, r3, #1
 800f260:	b29a      	uxth	r2, r3
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	835a      	strh	r2, [r3, #26]
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	8b5b      	ldrh	r3, [r3, #26]
 800f26a:	f043 0302 	orr.w	r3, r3, #2
 800f26e:	b29a      	uxth	r2, r3
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f274:	e187      	b.n	800f586 <tcp_receive+0xed2>
        tcp_ack(pcb);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	8b5b      	ldrh	r3, [r3, #26]
 800f27a:	f043 0301 	orr.w	r3, r3, #1
 800f27e:	b29a      	uxth	r2, r3
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f284:	e17f      	b.n	800f586 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d106      	bne.n	800f29c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f28e:	4848      	ldr	r0, [pc, #288]	@ (800f3b0 <tcp_receive+0xcfc>)
 800f290:	f7fd fbbc 	bl	800ca0c <tcp_seg_copy>
 800f294:	4602      	mov	r2, r0
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	675a      	str	r2, [r3, #116]	@ 0x74
 800f29a:	e16c      	b.n	800f576 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f29c:	2300      	movs	r3, #0
 800f29e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f2a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f2a6:	e156      	b.n	800f556 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 800f2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2aa:	68db      	ldr	r3, [r3, #12]
 800f2ac:	685a      	ldr	r2, [r3, #4]
 800f2ae:	4b41      	ldr	r3, [pc, #260]	@ (800f3b4 <tcp_receive+0xd00>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	429a      	cmp	r2, r3
 800f2b4:	d11d      	bne.n	800f2f2 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f2b6:	4b3e      	ldr	r3, [pc, #248]	@ (800f3b0 <tcp_receive+0xcfc>)
 800f2b8:	891a      	ldrh	r2, [r3, #8]
 800f2ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2bc:	891b      	ldrh	r3, [r3, #8]
 800f2be:	429a      	cmp	r2, r3
 800f2c0:	f240 814e 	bls.w	800f560 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f2c4:	483a      	ldr	r0, [pc, #232]	@ (800f3b0 <tcp_receive+0xcfc>)
 800f2c6:	f7fd fba1 	bl	800ca0c <tcp_seg_copy>
 800f2ca:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	f000 8148 	beq.w	800f564 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 800f2d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d003      	beq.n	800f2e2 <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f2da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2dc:	697a      	ldr	r2, [r7, #20]
 800f2de:	601a      	str	r2, [r3, #0]
 800f2e0:	e002      	b.n	800f2e8 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	697a      	ldr	r2, [r7, #20]
 800f2e6:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f2e8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f2ea:	6978      	ldr	r0, [r7, #20]
 800f2ec:	f7ff f8de 	bl	800e4ac <tcp_oos_insert_segment>
                }
                break;
 800f2f0:	e138      	b.n	800f564 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f2f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d117      	bne.n	800f328 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f2f8:	4b2e      	ldr	r3, [pc, #184]	@ (800f3b4 <tcp_receive+0xd00>)
 800f2fa:	681a      	ldr	r2, [r3, #0]
 800f2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f2fe:	68db      	ldr	r3, [r3, #12]
 800f300:	685b      	ldr	r3, [r3, #4]
 800f302:	1ad3      	subs	r3, r2, r3
 800f304:	2b00      	cmp	r3, #0
 800f306:	da57      	bge.n	800f3b8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f308:	4829      	ldr	r0, [pc, #164]	@ (800f3b0 <tcp_receive+0xcfc>)
 800f30a:	f7fd fb7f 	bl	800ca0c <tcp_seg_copy>
 800f30e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f310:	69bb      	ldr	r3, [r7, #24]
 800f312:	2b00      	cmp	r3, #0
 800f314:	f000 8128 	beq.w	800f568 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	69ba      	ldr	r2, [r7, #24]
 800f31c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f31e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f320:	69b8      	ldr	r0, [r7, #24]
 800f322:	f7ff f8c3 	bl	800e4ac <tcp_oos_insert_segment>
                  }
                  break;
 800f326:	e11f      	b.n	800f568 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f328:	4b22      	ldr	r3, [pc, #136]	@ (800f3b4 <tcp_receive+0xd00>)
 800f32a:	681a      	ldr	r2, [r3, #0]
 800f32c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f32e:	68db      	ldr	r3, [r3, #12]
 800f330:	685b      	ldr	r3, [r3, #4]
 800f332:	1ad3      	subs	r3, r2, r3
 800f334:	3b01      	subs	r3, #1
 800f336:	2b00      	cmp	r3, #0
 800f338:	db3e      	blt.n	800f3b8 <tcp_receive+0xd04>
 800f33a:	4b1e      	ldr	r3, [pc, #120]	@ (800f3b4 <tcp_receive+0xd00>)
 800f33c:	681a      	ldr	r2, [r3, #0]
 800f33e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f340:	68db      	ldr	r3, [r3, #12]
 800f342:	685b      	ldr	r3, [r3, #4]
 800f344:	1ad3      	subs	r3, r2, r3
 800f346:	3301      	adds	r3, #1
 800f348:	2b00      	cmp	r3, #0
 800f34a:	dc35      	bgt.n	800f3b8 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f34c:	4818      	ldr	r0, [pc, #96]	@ (800f3b0 <tcp_receive+0xcfc>)
 800f34e:	f7fd fb5d 	bl	800ca0c <tcp_seg_copy>
 800f352:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f354:	69fb      	ldr	r3, [r7, #28]
 800f356:	2b00      	cmp	r3, #0
 800f358:	f000 8108 	beq.w	800f56c <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f35c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f35e:	68db      	ldr	r3, [r3, #12]
 800f360:	685b      	ldr	r3, [r3, #4]
 800f362:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f364:	8912      	ldrh	r2, [r2, #8]
 800f366:	441a      	add	r2, r3
 800f368:	4b12      	ldr	r3, [pc, #72]	@ (800f3b4 <tcp_receive+0xd00>)
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	1ad3      	subs	r3, r2, r3
 800f36e:	2b00      	cmp	r3, #0
 800f370:	dd12      	ble.n	800f398 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f372:	4b10      	ldr	r3, [pc, #64]	@ (800f3b4 <tcp_receive+0xd00>)
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	b29a      	uxth	r2, r3
 800f378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f37a:	68db      	ldr	r3, [r3, #12]
 800f37c:	685b      	ldr	r3, [r3, #4]
 800f37e:	b29b      	uxth	r3, r3
 800f380:	1ad3      	subs	r3, r2, r3
 800f382:	b29a      	uxth	r2, r3
 800f384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f386:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f38a:	685a      	ldr	r2, [r3, #4]
 800f38c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f38e:	891b      	ldrh	r3, [r3, #8]
 800f390:	4619      	mov	r1, r3
 800f392:	4610      	mov	r0, r2
 800f394:	f7fb ff26 	bl	800b1e4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f39a:	69fa      	ldr	r2, [r7, #28]
 800f39c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f39e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800f3a0:	69f8      	ldr	r0, [r7, #28]
 800f3a2:	f7ff f883 	bl	800e4ac <tcp_oos_insert_segment>
                  }
                  break;
 800f3a6:	e0e1      	b.n	800f56c <tcp_receive+0xeb8>
 800f3a8:	2000b1ec 	.word	0x2000b1ec
 800f3ac:	2000b1e9 	.word	0x2000b1e9
 800f3b0:	2000b1bc 	.word	0x2000b1bc
 800f3b4:	2000b1dc 	.word	0x2000b1dc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3ba:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f3bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	f040 80c5 	bne.w	800f550 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f3c6:	4b7f      	ldr	r3, [pc, #508]	@ (800f5c4 <tcp_receive+0xf10>)
 800f3c8:	681a      	ldr	r2, [r3, #0]
 800f3ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3cc:	68db      	ldr	r3, [r3, #12]
 800f3ce:	685b      	ldr	r3, [r3, #4]
 800f3d0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	f340 80bc 	ble.w	800f550 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3da:	68db      	ldr	r3, [r3, #12]
 800f3dc:	899b      	ldrh	r3, [r3, #12]
 800f3de:	b29b      	uxth	r3, r3
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7fa fd27 	bl	8009e34 <lwip_htons>
 800f3e6:	4603      	mov	r3, r0
 800f3e8:	b2db      	uxtb	r3, r3
 800f3ea:	f003 0301 	and.w	r3, r3, #1
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	f040 80be 	bne.w	800f570 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f3f4:	4874      	ldr	r0, [pc, #464]	@ (800f5c8 <tcp_receive+0xf14>)
 800f3f6:	f7fd fb09 	bl	800ca0c <tcp_seg_copy>
 800f3fa:	4602      	mov	r2, r0
 800f3fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f3fe:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	2b00      	cmp	r3, #0
 800f406:	f000 80b5 	beq.w	800f574 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f40a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f40c:	68db      	ldr	r3, [r3, #12]
 800f40e:	685b      	ldr	r3, [r3, #4]
 800f410:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f412:	8912      	ldrh	r2, [r2, #8]
 800f414:	441a      	add	r2, r3
 800f416:	4b6b      	ldr	r3, [pc, #428]	@ (800f5c4 <tcp_receive+0xf10>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	1ad3      	subs	r3, r2, r3
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	dd12      	ble.n	800f446 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f420:	4b68      	ldr	r3, [pc, #416]	@ (800f5c4 <tcp_receive+0xf10>)
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	b29a      	uxth	r2, r3
 800f426:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f428:	68db      	ldr	r3, [r3, #12]
 800f42a:	685b      	ldr	r3, [r3, #4]
 800f42c:	b29b      	uxth	r3, r3
 800f42e:	1ad3      	subs	r3, r2, r3
 800f430:	b29a      	uxth	r2, r3
 800f432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f434:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f438:	685a      	ldr	r2, [r3, #4]
 800f43a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f43c:	891b      	ldrh	r3, [r3, #8]
 800f43e:	4619      	mov	r1, r3
 800f440:	4610      	mov	r0, r2
 800f442:	f7fb fecf 	bl	800b1e4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f446:	4b61      	ldr	r3, [pc, #388]	@ (800f5cc <tcp_receive+0xf18>)
 800f448:	881b      	ldrh	r3, [r3, #0]
 800f44a:	461a      	mov	r2, r3
 800f44c:	4b5d      	ldr	r3, [pc, #372]	@ (800f5c4 <tcp_receive+0xf10>)
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	441a      	add	r2, r3
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f456:	6879      	ldr	r1, [r7, #4]
 800f458:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f45a:	440b      	add	r3, r1
 800f45c:	1ad3      	subs	r3, r2, r3
 800f45e:	2b00      	cmp	r3, #0
 800f460:	f340 8088 	ble.w	800f574 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	68db      	ldr	r3, [r3, #12]
 800f46a:	899b      	ldrh	r3, [r3, #12]
 800f46c:	b29b      	uxth	r3, r3
 800f46e:	4618      	mov	r0, r3
 800f470:	f7fa fce0 	bl	8009e34 <lwip_htons>
 800f474:	4603      	mov	r3, r0
 800f476:	b2db      	uxtb	r3, r3
 800f478:	f003 0301 	and.w	r3, r3, #1
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	d021      	beq.n	800f4c4 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f480:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f482:	681b      	ldr	r3, [r3, #0]
 800f484:	68db      	ldr	r3, [r3, #12]
 800f486:	899b      	ldrh	r3, [r3, #12]
 800f488:	b29b      	uxth	r3, r3
 800f48a:	b21b      	sxth	r3, r3
 800f48c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800f490:	b21c      	sxth	r4, r3
 800f492:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	68db      	ldr	r3, [r3, #12]
 800f498:	899b      	ldrh	r3, [r3, #12]
 800f49a:	b29b      	uxth	r3, r3
 800f49c:	4618      	mov	r0, r3
 800f49e:	f7fa fcc9 	bl	8009e34 <lwip_htons>
 800f4a2:	4603      	mov	r3, r0
 800f4a4:	b2db      	uxtb	r3, r3
 800f4a6:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 800f4aa:	b29b      	uxth	r3, r3
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f7fa fcc1 	bl	8009e34 <lwip_htons>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	b21b      	sxth	r3, r3
 800f4b6:	4323      	orrs	r3, r4
 800f4b8:	b21a      	sxth	r2, r3
 800f4ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	68db      	ldr	r3, [r3, #12]
 800f4c0:	b292      	uxth	r2, r2
 800f4c2:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f4c8:	b29a      	uxth	r2, r3
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f4ce:	4413      	add	r3, r2
 800f4d0:	b299      	uxth	r1, r3
 800f4d2:	4b3c      	ldr	r3, [pc, #240]	@ (800f5c4 <tcp_receive+0xf10>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	b29a      	uxth	r2, r3
 800f4d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	1a8a      	subs	r2, r1, r2
 800f4de:	b292      	uxth	r2, r2
 800f4e0:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	685a      	ldr	r2, [r3, #4]
 800f4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4ea:	681b      	ldr	r3, [r3, #0]
 800f4ec:	891b      	ldrh	r3, [r3, #8]
 800f4ee:	4619      	mov	r1, r3
 800f4f0:	4610      	mov	r0, r2
 800f4f2:	f7fb fe77 	bl	800b1e4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f4f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	891c      	ldrh	r4, [r3, #8]
 800f4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f4fe:	681b      	ldr	r3, [r3, #0]
 800f500:	68db      	ldr	r3, [r3, #12]
 800f502:	899b      	ldrh	r3, [r3, #12]
 800f504:	b29b      	uxth	r3, r3
 800f506:	4618      	mov	r0, r3
 800f508:	f7fa fc94 	bl	8009e34 <lwip_htons>
 800f50c:	4603      	mov	r3, r0
 800f50e:	b2db      	uxtb	r3, r3
 800f510:	f003 0303 	and.w	r3, r3, #3
 800f514:	2b00      	cmp	r3, #0
 800f516:	d001      	beq.n	800f51c <tcp_receive+0xe68>
 800f518:	2301      	movs	r3, #1
 800f51a:	e000      	b.n	800f51e <tcp_receive+0xe6a>
 800f51c:	2300      	movs	r3, #0
 800f51e:	4423      	add	r3, r4
 800f520:	b29a      	uxth	r2, r3
 800f522:	4b2a      	ldr	r3, [pc, #168]	@ (800f5cc <tcp_receive+0xf18>)
 800f524:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f526:	4b29      	ldr	r3, [pc, #164]	@ (800f5cc <tcp_receive+0xf18>)
 800f528:	881b      	ldrh	r3, [r3, #0]
 800f52a:	461a      	mov	r2, r3
 800f52c:	4b25      	ldr	r3, [pc, #148]	@ (800f5c4 <tcp_receive+0xf10>)
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	441a      	add	r2, r3
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f536:	6879      	ldr	r1, [r7, #4]
 800f538:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f53a:	440b      	add	r3, r1
 800f53c:	429a      	cmp	r2, r3
 800f53e:	d019      	beq.n	800f574 <tcp_receive+0xec0>
 800f540:	4b23      	ldr	r3, [pc, #140]	@ (800f5d0 <tcp_receive+0xf1c>)
 800f542:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 800f546:	4923      	ldr	r1, [pc, #140]	@ (800f5d4 <tcp_receive+0xf20>)
 800f548:	4823      	ldr	r0, [pc, #140]	@ (800f5d8 <tcp_receive+0xf24>)
 800f54a:	f004 fbe7 	bl	8013d1c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f54e:	e011      	b.n	800f574 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f550:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f558:	2b00      	cmp	r3, #0
 800f55a:	f47f aea5 	bne.w	800f2a8 <tcp_receive+0xbf4>
 800f55e:	e00a      	b.n	800f576 <tcp_receive+0xec2>
                break;
 800f560:	bf00      	nop
 800f562:	e008      	b.n	800f576 <tcp_receive+0xec2>
                break;
 800f564:	bf00      	nop
 800f566:	e006      	b.n	800f576 <tcp_receive+0xec2>
                  break;
 800f568:	bf00      	nop
 800f56a:	e004      	b.n	800f576 <tcp_receive+0xec2>
                  break;
 800f56c:	bf00      	nop
 800f56e:	e002      	b.n	800f576 <tcp_receive+0xec2>
                  break;
 800f570:	bf00      	nop
 800f572:	e000      	b.n	800f576 <tcp_receive+0xec2>
                break;
 800f574:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	f001 fa30 	bl	80109dc <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f57c:	e003      	b.n	800f586 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	f001 fa2c 	bl	80109dc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f584:	e01a      	b.n	800f5bc <tcp_receive+0xf08>
 800f586:	e019      	b.n	800f5bc <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f588:	4b0e      	ldr	r3, [pc, #56]	@ (800f5c4 <tcp_receive+0xf10>)
 800f58a:	681a      	ldr	r2, [r3, #0]
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f590:	1ad3      	subs	r3, r2, r3
 800f592:	2b00      	cmp	r3, #0
 800f594:	db0a      	blt.n	800f5ac <tcp_receive+0xef8>
 800f596:	4b0b      	ldr	r3, [pc, #44]	@ (800f5c4 <tcp_receive+0xf10>)
 800f598:	681a      	ldr	r2, [r3, #0]
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f59e:	6879      	ldr	r1, [r7, #4]
 800f5a0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 800f5a2:	440b      	add	r3, r1
 800f5a4:	1ad3      	subs	r3, r2, r3
 800f5a6:	3301      	adds	r3, #1
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	dd07      	ble.n	800f5bc <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	8b5b      	ldrh	r3, [r3, #26]
 800f5b0:	f043 0302 	orr.w	r3, r3, #2
 800f5b4:	b29a      	uxth	r2, r3
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f5ba:	e7ff      	b.n	800f5bc <tcp_receive+0xf08>
 800f5bc:	bf00      	nop
 800f5be:	3750      	adds	r7, #80	@ 0x50
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bdb0      	pop	{r4, r5, r7, pc}
 800f5c4:	2000b1dc 	.word	0x2000b1dc
 800f5c8:	2000b1bc 	.word	0x2000b1bc
 800f5cc:	2000b1e6 	.word	0x2000b1e6
 800f5d0:	08015d78 	.word	0x08015d78
 800f5d4:	08016120 	.word	0x08016120
 800f5d8:	08015dc4 	.word	0x08015dc4

0800f5dc <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f5dc:	b480      	push	{r7}
 800f5de:	b083      	sub	sp, #12
 800f5e0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f5e2:	4b15      	ldr	r3, [pc, #84]	@ (800f638 <tcp_get_next_optbyte+0x5c>)
 800f5e4:	881b      	ldrh	r3, [r3, #0]
 800f5e6:	1c5a      	adds	r2, r3, #1
 800f5e8:	b291      	uxth	r1, r2
 800f5ea:	4a13      	ldr	r2, [pc, #76]	@ (800f638 <tcp_get_next_optbyte+0x5c>)
 800f5ec:	8011      	strh	r1, [r2, #0]
 800f5ee:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f5f0:	4b12      	ldr	r3, [pc, #72]	@ (800f63c <tcp_get_next_optbyte+0x60>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d004      	beq.n	800f602 <tcp_get_next_optbyte+0x26>
 800f5f8:	4b11      	ldr	r3, [pc, #68]	@ (800f640 <tcp_get_next_optbyte+0x64>)
 800f5fa:	881b      	ldrh	r3, [r3, #0]
 800f5fc:	88fa      	ldrh	r2, [r7, #6]
 800f5fe:	429a      	cmp	r2, r3
 800f600:	d208      	bcs.n	800f614 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f602:	4b10      	ldr	r3, [pc, #64]	@ (800f644 <tcp_get_next_optbyte+0x68>)
 800f604:	681b      	ldr	r3, [r3, #0]
 800f606:	3314      	adds	r3, #20
 800f608:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f60a:	88fb      	ldrh	r3, [r7, #6]
 800f60c:	683a      	ldr	r2, [r7, #0]
 800f60e:	4413      	add	r3, r2
 800f610:	781b      	ldrb	r3, [r3, #0]
 800f612:	e00b      	b.n	800f62c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f614:	88fb      	ldrh	r3, [r7, #6]
 800f616:	b2da      	uxtb	r2, r3
 800f618:	4b09      	ldr	r3, [pc, #36]	@ (800f640 <tcp_get_next_optbyte+0x64>)
 800f61a:	881b      	ldrh	r3, [r3, #0]
 800f61c:	b2db      	uxtb	r3, r3
 800f61e:	1ad3      	subs	r3, r2, r3
 800f620:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f622:	4b06      	ldr	r3, [pc, #24]	@ (800f63c <tcp_get_next_optbyte+0x60>)
 800f624:	681a      	ldr	r2, [r3, #0]
 800f626:	797b      	ldrb	r3, [r7, #5]
 800f628:	4413      	add	r3, r2
 800f62a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f62c:	4618      	mov	r0, r3
 800f62e:	370c      	adds	r7, #12
 800f630:	46bd      	mov	sp, r7
 800f632:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f636:	4770      	bx	lr
 800f638:	2000b1d8 	.word	0x2000b1d8
 800f63c:	2000b1d4 	.word	0x2000b1d4
 800f640:	2000b1d2 	.word	0x2000b1d2
 800f644:	2000b1cc 	.word	0x2000b1cc

0800f648 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f648:	b580      	push	{r7, lr}
 800f64a:	b084      	sub	sp, #16
 800f64c:	af00      	add	r7, sp, #0
 800f64e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d106      	bne.n	800f664 <tcp_parseopt+0x1c>
 800f656:	4b32      	ldr	r3, [pc, #200]	@ (800f720 <tcp_parseopt+0xd8>)
 800f658:	f240 727d 	movw	r2, #1917	@ 0x77d
 800f65c:	4931      	ldr	r1, [pc, #196]	@ (800f724 <tcp_parseopt+0xdc>)
 800f65e:	4832      	ldr	r0, [pc, #200]	@ (800f728 <tcp_parseopt+0xe0>)
 800f660:	f004 fb5c 	bl	8013d1c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f664:	4b31      	ldr	r3, [pc, #196]	@ (800f72c <tcp_parseopt+0xe4>)
 800f666:	881b      	ldrh	r3, [r3, #0]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d056      	beq.n	800f71a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f66c:	4b30      	ldr	r3, [pc, #192]	@ (800f730 <tcp_parseopt+0xe8>)
 800f66e:	2200      	movs	r2, #0
 800f670:	801a      	strh	r2, [r3, #0]
 800f672:	e046      	b.n	800f702 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 800f674:	f7ff ffb2 	bl	800f5dc <tcp_get_next_optbyte>
 800f678:	4603      	mov	r3, r0
 800f67a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f67c:	7bfb      	ldrb	r3, [r7, #15]
 800f67e:	2b02      	cmp	r3, #2
 800f680:	d006      	beq.n	800f690 <tcp_parseopt+0x48>
 800f682:	2b02      	cmp	r3, #2
 800f684:	dc2a      	bgt.n	800f6dc <tcp_parseopt+0x94>
 800f686:	2b00      	cmp	r3, #0
 800f688:	d042      	beq.n	800f710 <tcp_parseopt+0xc8>
 800f68a:	2b01      	cmp	r3, #1
 800f68c:	d038      	beq.n	800f700 <tcp_parseopt+0xb8>
 800f68e:	e025      	b.n	800f6dc <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f690:	f7ff ffa4 	bl	800f5dc <tcp_get_next_optbyte>
 800f694:	4603      	mov	r3, r0
 800f696:	2b04      	cmp	r3, #4
 800f698:	d13c      	bne.n	800f714 <tcp_parseopt+0xcc>
 800f69a:	4b25      	ldr	r3, [pc, #148]	@ (800f730 <tcp_parseopt+0xe8>)
 800f69c:	881b      	ldrh	r3, [r3, #0]
 800f69e:	3301      	adds	r3, #1
 800f6a0:	4a22      	ldr	r2, [pc, #136]	@ (800f72c <tcp_parseopt+0xe4>)
 800f6a2:	8812      	ldrh	r2, [r2, #0]
 800f6a4:	4293      	cmp	r3, r2
 800f6a6:	da35      	bge.n	800f714 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f6a8:	f7ff ff98 	bl	800f5dc <tcp_get_next_optbyte>
 800f6ac:	4603      	mov	r3, r0
 800f6ae:	021b      	lsls	r3, r3, #8
 800f6b0:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f6b2:	f7ff ff93 	bl	800f5dc <tcp_get_next_optbyte>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	461a      	mov	r2, r3
 800f6ba:	89bb      	ldrh	r3, [r7, #12]
 800f6bc:	4313      	orrs	r3, r2
 800f6be:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f6c0:	89bb      	ldrh	r3, [r7, #12]
 800f6c2:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 800f6c6:	d804      	bhi.n	800f6d2 <tcp_parseopt+0x8a>
 800f6c8:	89bb      	ldrh	r3, [r7, #12]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	d001      	beq.n	800f6d2 <tcp_parseopt+0x8a>
 800f6ce:	89ba      	ldrh	r2, [r7, #12]
 800f6d0:	e001      	b.n	800f6d6 <tcp_parseopt+0x8e>
 800f6d2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 800f6da:	e012      	b.n	800f702 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f6dc:	f7ff ff7e 	bl	800f5dc <tcp_get_next_optbyte>
 800f6e0:	4603      	mov	r3, r0
 800f6e2:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f6e4:	7afb      	ldrb	r3, [r7, #11]
 800f6e6:	2b01      	cmp	r3, #1
 800f6e8:	d916      	bls.n	800f718 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f6ea:	7afb      	ldrb	r3, [r7, #11]
 800f6ec:	b29a      	uxth	r2, r3
 800f6ee:	4b10      	ldr	r3, [pc, #64]	@ (800f730 <tcp_parseopt+0xe8>)
 800f6f0:	881b      	ldrh	r3, [r3, #0]
 800f6f2:	4413      	add	r3, r2
 800f6f4:	b29b      	uxth	r3, r3
 800f6f6:	3b02      	subs	r3, #2
 800f6f8:	b29a      	uxth	r2, r3
 800f6fa:	4b0d      	ldr	r3, [pc, #52]	@ (800f730 <tcp_parseopt+0xe8>)
 800f6fc:	801a      	strh	r2, [r3, #0]
 800f6fe:	e000      	b.n	800f702 <tcp_parseopt+0xba>
          break;
 800f700:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f702:	4b0b      	ldr	r3, [pc, #44]	@ (800f730 <tcp_parseopt+0xe8>)
 800f704:	881a      	ldrh	r2, [r3, #0]
 800f706:	4b09      	ldr	r3, [pc, #36]	@ (800f72c <tcp_parseopt+0xe4>)
 800f708:	881b      	ldrh	r3, [r3, #0]
 800f70a:	429a      	cmp	r2, r3
 800f70c:	d3b2      	bcc.n	800f674 <tcp_parseopt+0x2c>
 800f70e:	e004      	b.n	800f71a <tcp_parseopt+0xd2>
          return;
 800f710:	bf00      	nop
 800f712:	e002      	b.n	800f71a <tcp_parseopt+0xd2>
            return;
 800f714:	bf00      	nop
 800f716:	e000      	b.n	800f71a <tcp_parseopt+0xd2>
            return;
 800f718:	bf00      	nop
      }
    }
  }
}
 800f71a:	3710      	adds	r7, #16
 800f71c:	46bd      	mov	sp, r7
 800f71e:	bd80      	pop	{r7, pc}
 800f720:	08015d78 	.word	0x08015d78
 800f724:	080161dc 	.word	0x080161dc
 800f728:	08015dc4 	.word	0x08015dc4
 800f72c:	2000b1d0 	.word	0x2000b1d0
 800f730:	2000b1d8 	.word	0x2000b1d8

0800f734 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f734:	b480      	push	{r7}
 800f736:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f738:	4b05      	ldr	r3, [pc, #20]	@ (800f750 <tcp_trigger_input_pcb_close+0x1c>)
 800f73a:	781b      	ldrb	r3, [r3, #0]
 800f73c:	f043 0310 	orr.w	r3, r3, #16
 800f740:	b2da      	uxtb	r2, r3
 800f742:	4b03      	ldr	r3, [pc, #12]	@ (800f750 <tcp_trigger_input_pcb_close+0x1c>)
 800f744:	701a      	strb	r2, [r3, #0]
}
 800f746:	bf00      	nop
 800f748:	46bd      	mov	sp, r7
 800f74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74e:	4770      	bx	lr
 800f750:	2000b1e9 	.word	0x2000b1e9

0800f754 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f754:	b580      	push	{r7, lr}
 800f756:	b084      	sub	sp, #16
 800f758:	af00      	add	r7, sp, #0
 800f75a:	60f8      	str	r0, [r7, #12]
 800f75c:	60b9      	str	r1, [r7, #8]
 800f75e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	2b00      	cmp	r3, #0
 800f764:	d00a      	beq.n	800f77c <tcp_route+0x28>
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	7a1b      	ldrb	r3, [r3, #8]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d006      	beq.n	800f77c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	7a1b      	ldrb	r3, [r3, #8]
 800f772:	4618      	mov	r0, r3
 800f774:	f7fb fb5c 	bl	800ae30 <netif_get_by_index>
 800f778:	4603      	mov	r3, r0
 800f77a:	e003      	b.n	800f784 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f77c:	6878      	ldr	r0, [r7, #4]
 800f77e:	f002 ffe1 	bl	8012744 <ip4_route>
 800f782:	4603      	mov	r3, r0
  }
}
 800f784:	4618      	mov	r0, r3
 800f786:	3710      	adds	r7, #16
 800f788:	46bd      	mov	sp, r7
 800f78a:	bd80      	pop	{r7, pc}

0800f78c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f78c:	b590      	push	{r4, r7, lr}
 800f78e:	b087      	sub	sp, #28
 800f790:	af00      	add	r7, sp, #0
 800f792:	60f8      	str	r0, [r7, #12]
 800f794:	60b9      	str	r1, [r7, #8]
 800f796:	603b      	str	r3, [r7, #0]
 800f798:	4613      	mov	r3, r2
 800f79a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d105      	bne.n	800f7ae <tcp_create_segment+0x22>
 800f7a2:	4b43      	ldr	r3, [pc, #268]	@ (800f8b0 <tcp_create_segment+0x124>)
 800f7a4:	22a3      	movs	r2, #163	@ 0xa3
 800f7a6:	4943      	ldr	r1, [pc, #268]	@ (800f8b4 <tcp_create_segment+0x128>)
 800f7a8:	4843      	ldr	r0, [pc, #268]	@ (800f8b8 <tcp_create_segment+0x12c>)
 800f7aa:	f004 fab7 	bl	8013d1c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f7ae:	68bb      	ldr	r3, [r7, #8]
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d105      	bne.n	800f7c0 <tcp_create_segment+0x34>
 800f7b4:	4b3e      	ldr	r3, [pc, #248]	@ (800f8b0 <tcp_create_segment+0x124>)
 800f7b6:	22a4      	movs	r2, #164	@ 0xa4
 800f7b8:	4940      	ldr	r1, [pc, #256]	@ (800f8bc <tcp_create_segment+0x130>)
 800f7ba:	483f      	ldr	r0, [pc, #252]	@ (800f8b8 <tcp_create_segment+0x12c>)
 800f7bc:	f004 faae 	bl	8013d1c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f7c0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f7c4:	009b      	lsls	r3, r3, #2
 800f7c6:	b2db      	uxtb	r3, r3
 800f7c8:	f003 0304 	and.w	r3, r3, #4
 800f7cc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f7ce:	2003      	movs	r0, #3
 800f7d0:	f7fa ffa8 	bl	800a724 <memp_malloc>
 800f7d4:	6138      	str	r0, [r7, #16]
 800f7d6:	693b      	ldr	r3, [r7, #16]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d104      	bne.n	800f7e6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f7dc:	68b8      	ldr	r0, [r7, #8]
 800f7de:	f7fb fe87 	bl	800b4f0 <pbuf_free>
    return NULL;
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	e060      	b.n	800f8a8 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 800f7e6:	693b      	ldr	r3, [r7, #16]
 800f7e8:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800f7ec:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f7ee:	693b      	ldr	r3, [r7, #16]
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f7f4:	693b      	ldr	r3, [r7, #16]
 800f7f6:	68ba      	ldr	r2, [r7, #8]
 800f7f8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f7fa:	68bb      	ldr	r3, [r7, #8]
 800f7fc:	891a      	ldrh	r2, [r3, #8]
 800f7fe:	7dfb      	ldrb	r3, [r7, #23]
 800f800:	b29b      	uxth	r3, r3
 800f802:	429a      	cmp	r2, r3
 800f804:	d205      	bcs.n	800f812 <tcp_create_segment+0x86>
 800f806:	4b2a      	ldr	r3, [pc, #168]	@ (800f8b0 <tcp_create_segment+0x124>)
 800f808:	22b0      	movs	r2, #176	@ 0xb0
 800f80a:	492d      	ldr	r1, [pc, #180]	@ (800f8c0 <tcp_create_segment+0x134>)
 800f80c:	482a      	ldr	r0, [pc, #168]	@ (800f8b8 <tcp_create_segment+0x12c>)
 800f80e:	f004 fa85 	bl	8013d1c <iprintf>
  seg->len = p->tot_len - optlen;
 800f812:	68bb      	ldr	r3, [r7, #8]
 800f814:	891a      	ldrh	r2, [r3, #8]
 800f816:	7dfb      	ldrb	r3, [r7, #23]
 800f818:	b29b      	uxth	r3, r3
 800f81a:	1ad3      	subs	r3, r2, r3
 800f81c:	b29a      	uxth	r2, r3
 800f81e:	693b      	ldr	r3, [r7, #16]
 800f820:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f822:	2114      	movs	r1, #20
 800f824:	68b8      	ldr	r0, [r7, #8]
 800f826:	f7fb fdcd 	bl	800b3c4 <pbuf_add_header>
 800f82a:	4603      	mov	r3, r0
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d004      	beq.n	800f83a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f830:	6938      	ldr	r0, [r7, #16]
 800f832:	f7fd f8d2 	bl	800c9da <tcp_seg_free>
    return NULL;
 800f836:	2300      	movs	r3, #0
 800f838:	e036      	b.n	800f8a8 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f83a:	693b      	ldr	r3, [r7, #16]
 800f83c:	685b      	ldr	r3, [r3, #4]
 800f83e:	685a      	ldr	r2, [r3, #4]
 800f840:	693b      	ldr	r3, [r7, #16]
 800f842:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	8ada      	ldrh	r2, [r3, #22]
 800f848:	693b      	ldr	r3, [r7, #16]
 800f84a:	68dc      	ldr	r4, [r3, #12]
 800f84c:	4610      	mov	r0, r2
 800f84e:	f7fa faf1 	bl	8009e34 <lwip_htons>
 800f852:	4603      	mov	r3, r0
 800f854:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	8b1a      	ldrh	r2, [r3, #24]
 800f85a:	693b      	ldr	r3, [r7, #16]
 800f85c:	68dc      	ldr	r4, [r3, #12]
 800f85e:	4610      	mov	r0, r2
 800f860:	f7fa fae8 	bl	8009e34 <lwip_htons>
 800f864:	4603      	mov	r3, r0
 800f866:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f868:	693b      	ldr	r3, [r7, #16]
 800f86a:	68dc      	ldr	r4, [r3, #12]
 800f86c:	6838      	ldr	r0, [r7, #0]
 800f86e:	f7fa faf7 	bl	8009e60 <lwip_htonl>
 800f872:	4603      	mov	r3, r0
 800f874:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f876:	7dfb      	ldrb	r3, [r7, #23]
 800f878:	089b      	lsrs	r3, r3, #2
 800f87a:	b2db      	uxtb	r3, r3
 800f87c:	3305      	adds	r3, #5
 800f87e:	b29b      	uxth	r3, r3
 800f880:	031b      	lsls	r3, r3, #12
 800f882:	b29a      	uxth	r2, r3
 800f884:	79fb      	ldrb	r3, [r7, #7]
 800f886:	b29b      	uxth	r3, r3
 800f888:	4313      	orrs	r3, r2
 800f88a:	b29a      	uxth	r2, r3
 800f88c:	693b      	ldr	r3, [r7, #16]
 800f88e:	68dc      	ldr	r4, [r3, #12]
 800f890:	4610      	mov	r0, r2
 800f892:	f7fa facf 	bl	8009e34 <lwip_htons>
 800f896:	4603      	mov	r3, r0
 800f898:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f89a:	693b      	ldr	r3, [r7, #16]
 800f89c:	68db      	ldr	r3, [r3, #12]
 800f89e:	2200      	movs	r2, #0
 800f8a0:	749a      	strb	r2, [r3, #18]
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	74da      	strb	r2, [r3, #19]
  return seg;
 800f8a6:	693b      	ldr	r3, [r7, #16]
}
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	371c      	adds	r7, #28
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bd90      	pop	{r4, r7, pc}
 800f8b0:	080161f8 	.word	0x080161f8
 800f8b4:	0801622c 	.word	0x0801622c
 800f8b8:	0801624c 	.word	0x0801624c
 800f8bc:	08016274 	.word	0x08016274
 800f8c0:	08016298 	.word	0x08016298

0800f8c4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800f8c4:	b590      	push	{r4, r7, lr}
 800f8c6:	b08b      	sub	sp, #44	@ 0x2c
 800f8c8:	af02      	add	r7, sp, #8
 800f8ca:	6078      	str	r0, [r7, #4]
 800f8cc:	460b      	mov	r3, r1
 800f8ce:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800f8d0:	2300      	movs	r3, #0
 800f8d2:	61fb      	str	r3, [r7, #28]
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800f8d8:	2300      	movs	r3, #0
 800f8da:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d106      	bne.n	800f8f0 <tcp_split_unsent_seg+0x2c>
 800f8e2:	4b95      	ldr	r3, [pc, #596]	@ (800fb38 <tcp_split_unsent_seg+0x274>)
 800f8e4:	f240 324b 	movw	r2, #843	@ 0x34b
 800f8e8:	4994      	ldr	r1, [pc, #592]	@ (800fb3c <tcp_split_unsent_seg+0x278>)
 800f8ea:	4895      	ldr	r0, [pc, #596]	@ (800fb40 <tcp_split_unsent_seg+0x27c>)
 800f8ec:	f004 fa16 	bl	8013d1c <iprintf>

  useg = pcb->unsent;
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f8f4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800f8f6:	697b      	ldr	r3, [r7, #20]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d102      	bne.n	800f902 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800f8fc:	f04f 33ff 	mov.w	r3, #4294967295
 800f900:	e116      	b.n	800fb30 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800f902:	887b      	ldrh	r3, [r7, #2]
 800f904:	2b00      	cmp	r3, #0
 800f906:	d109      	bne.n	800f91c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800f908:	4b8b      	ldr	r3, [pc, #556]	@ (800fb38 <tcp_split_unsent_seg+0x274>)
 800f90a:	f240 3253 	movw	r2, #851	@ 0x353
 800f90e:	498d      	ldr	r1, [pc, #564]	@ (800fb44 <tcp_split_unsent_seg+0x280>)
 800f910:	488b      	ldr	r0, [pc, #556]	@ (800fb40 <tcp_split_unsent_seg+0x27c>)
 800f912:	f004 fa03 	bl	8013d1c <iprintf>
    return ERR_VAL;
 800f916:	f06f 0305 	mvn.w	r3, #5
 800f91a:	e109      	b.n	800fb30 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800f91c:	697b      	ldr	r3, [r7, #20]
 800f91e:	891b      	ldrh	r3, [r3, #8]
 800f920:	887a      	ldrh	r2, [r7, #2]
 800f922:	429a      	cmp	r2, r3
 800f924:	d301      	bcc.n	800f92a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800f926:	2300      	movs	r3, #0
 800f928:	e102      	b.n	800fb30 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800f92e:	887a      	ldrh	r2, [r7, #2]
 800f930:	429a      	cmp	r2, r3
 800f932:	d906      	bls.n	800f942 <tcp_split_unsent_seg+0x7e>
 800f934:	4b80      	ldr	r3, [pc, #512]	@ (800fb38 <tcp_split_unsent_seg+0x274>)
 800f936:	f240 325b 	movw	r2, #859	@ 0x35b
 800f93a:	4983      	ldr	r1, [pc, #524]	@ (800fb48 <tcp_split_unsent_seg+0x284>)
 800f93c:	4880      	ldr	r0, [pc, #512]	@ (800fb40 <tcp_split_unsent_seg+0x27c>)
 800f93e:	f004 f9ed 	bl	8013d1c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f942:	697b      	ldr	r3, [r7, #20]
 800f944:	891b      	ldrh	r3, [r3, #8]
 800f946:	2b00      	cmp	r3, #0
 800f948:	d106      	bne.n	800f958 <tcp_split_unsent_seg+0x94>
 800f94a:	4b7b      	ldr	r3, [pc, #492]	@ (800fb38 <tcp_split_unsent_seg+0x274>)
 800f94c:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 800f950:	497e      	ldr	r1, [pc, #504]	@ (800fb4c <tcp_split_unsent_seg+0x288>)
 800f952:	487b      	ldr	r0, [pc, #492]	@ (800fb40 <tcp_split_unsent_seg+0x27c>)
 800f954:	f004 f9e2 	bl	8013d1c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800f958:	697b      	ldr	r3, [r7, #20]
 800f95a:	7a9b      	ldrb	r3, [r3, #10]
 800f95c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f95e:	7bfb      	ldrb	r3, [r7, #15]
 800f960:	009b      	lsls	r3, r3, #2
 800f962:	b2db      	uxtb	r3, r3
 800f964:	f003 0304 	and.w	r3, r3, #4
 800f968:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	891a      	ldrh	r2, [r3, #8]
 800f96e:	887b      	ldrh	r3, [r7, #2]
 800f970:	1ad3      	subs	r3, r2, r3
 800f972:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f974:	7bbb      	ldrb	r3, [r7, #14]
 800f976:	b29a      	uxth	r2, r3
 800f978:	89bb      	ldrh	r3, [r7, #12]
 800f97a:	4413      	add	r3, r2
 800f97c:	b29b      	uxth	r3, r3
 800f97e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f982:	4619      	mov	r1, r3
 800f984:	2036      	movs	r0, #54	@ 0x36
 800f986:	f7fb facf 	bl	800af28 <pbuf_alloc>
 800f98a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f98c:	693b      	ldr	r3, [r7, #16]
 800f98e:	2b00      	cmp	r3, #0
 800f990:	f000 80b7 	beq.w	800fb02 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800f994:	697b      	ldr	r3, [r7, #20]
 800f996:	685b      	ldr	r3, [r3, #4]
 800f998:	891a      	ldrh	r2, [r3, #8]
 800f99a:	697b      	ldr	r3, [r7, #20]
 800f99c:	891b      	ldrh	r3, [r3, #8]
 800f99e:	1ad3      	subs	r3, r2, r3
 800f9a0:	b29a      	uxth	r2, r3
 800f9a2:	887b      	ldrh	r3, [r7, #2]
 800f9a4:	4413      	add	r3, r2
 800f9a6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f9a8:	697b      	ldr	r3, [r7, #20]
 800f9aa:	6858      	ldr	r0, [r3, #4]
 800f9ac:	693b      	ldr	r3, [r7, #16]
 800f9ae:	685a      	ldr	r2, [r3, #4]
 800f9b0:	7bbb      	ldrb	r3, [r7, #14]
 800f9b2:	18d1      	adds	r1, r2, r3
 800f9b4:	897b      	ldrh	r3, [r7, #10]
 800f9b6:	89ba      	ldrh	r2, [r7, #12]
 800f9b8:	f7fb ff84 	bl	800b8c4 <pbuf_copy_partial>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	461a      	mov	r2, r3
 800f9c0:	89bb      	ldrh	r3, [r7, #12]
 800f9c2:	4293      	cmp	r3, r2
 800f9c4:	f040 809f 	bne.w	800fb06 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f9c8:	697b      	ldr	r3, [r7, #20]
 800f9ca:	68db      	ldr	r3, [r3, #12]
 800f9cc:	899b      	ldrh	r3, [r3, #12]
 800f9ce:	b29b      	uxth	r3, r3
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f7fa fa2f 	bl	8009e34 <lwip_htons>
 800f9d6:	4603      	mov	r3, r0
 800f9d8:	b2db      	uxtb	r3, r3
 800f9da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f9de:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800f9e4:	7efb      	ldrb	r3, [r7, #27]
 800f9e6:	f003 0308 	and.w	r3, r3, #8
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d007      	beq.n	800f9fe <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800f9ee:	7efb      	ldrb	r3, [r7, #27]
 800f9f0:	f023 0308 	bic.w	r3, r3, #8
 800f9f4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800f9f6:	7ebb      	ldrb	r3, [r7, #26]
 800f9f8:	f043 0308 	orr.w	r3, r3, #8
 800f9fc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800f9fe:	7efb      	ldrb	r3, [r7, #27]
 800fa00:	f003 0301 	and.w	r3, r3, #1
 800fa04:	2b00      	cmp	r3, #0
 800fa06:	d007      	beq.n	800fa18 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800fa08:	7efb      	ldrb	r3, [r7, #27]
 800fa0a:	f023 0301 	bic.w	r3, r3, #1
 800fa0e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800fa10:	7ebb      	ldrb	r3, [r7, #26]
 800fa12:	f043 0301 	orr.w	r3, r3, #1
 800fa16:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800fa18:	697b      	ldr	r3, [r7, #20]
 800fa1a:	68db      	ldr	r3, [r3, #12]
 800fa1c:	685b      	ldr	r3, [r3, #4]
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f7fa fa1e 	bl	8009e60 <lwip_htonl>
 800fa24:	4602      	mov	r2, r0
 800fa26:	887b      	ldrh	r3, [r7, #2]
 800fa28:	18d1      	adds	r1, r2, r3
 800fa2a:	7eba      	ldrb	r2, [r7, #26]
 800fa2c:	7bfb      	ldrb	r3, [r7, #15]
 800fa2e:	9300      	str	r3, [sp, #0]
 800fa30:	460b      	mov	r3, r1
 800fa32:	6939      	ldr	r1, [r7, #16]
 800fa34:	6878      	ldr	r0, [r7, #4]
 800fa36:	f7ff fea9 	bl	800f78c <tcp_create_segment>
 800fa3a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800fa3c:	69fb      	ldr	r3, [r7, #28]
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d063      	beq.n	800fb0a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	685b      	ldr	r3, [r3, #4]
 800fa46:	4618      	mov	r0, r3
 800fa48:	f7fb fdda 	bl	800b600 <pbuf_clen>
 800fa4c:	4603      	mov	r3, r0
 800fa4e:	461a      	mov	r2, r3
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fa56:	1a9b      	subs	r3, r3, r2
 800fa58:	b29a      	uxth	r2, r3
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	6858      	ldr	r0, [r3, #4]
 800fa64:	697b      	ldr	r3, [r7, #20]
 800fa66:	685b      	ldr	r3, [r3, #4]
 800fa68:	891a      	ldrh	r2, [r3, #8]
 800fa6a:	89bb      	ldrh	r3, [r7, #12]
 800fa6c:	1ad3      	subs	r3, r2, r3
 800fa6e:	b29b      	uxth	r3, r3
 800fa70:	4619      	mov	r1, r3
 800fa72:	f7fb fbb7 	bl	800b1e4 <pbuf_realloc>
  useg->len -= remainder;
 800fa76:	697b      	ldr	r3, [r7, #20]
 800fa78:	891a      	ldrh	r2, [r3, #8]
 800fa7a:	89bb      	ldrh	r3, [r7, #12]
 800fa7c:	1ad3      	subs	r3, r2, r3
 800fa7e:	b29a      	uxth	r2, r3
 800fa80:	697b      	ldr	r3, [r7, #20]
 800fa82:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800fa84:	697b      	ldr	r3, [r7, #20]
 800fa86:	68db      	ldr	r3, [r3, #12]
 800fa88:	899b      	ldrh	r3, [r3, #12]
 800fa8a:	b29c      	uxth	r4, r3
 800fa8c:	7efb      	ldrb	r3, [r7, #27]
 800fa8e:	b29b      	uxth	r3, r3
 800fa90:	4618      	mov	r0, r3
 800fa92:	f7fa f9cf 	bl	8009e34 <lwip_htons>
 800fa96:	4603      	mov	r3, r0
 800fa98:	461a      	mov	r2, r3
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	68db      	ldr	r3, [r3, #12]
 800fa9e:	4322      	orrs	r2, r4
 800faa0:	b292      	uxth	r2, r2
 800faa2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800faa4:	697b      	ldr	r3, [r7, #20]
 800faa6:	685b      	ldr	r3, [r3, #4]
 800faa8:	4618      	mov	r0, r3
 800faaa:	f7fb fda9 	bl	800b600 <pbuf_clen>
 800faae:	4603      	mov	r3, r0
 800fab0:	461a      	mov	r2, r3
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fab8:	4413      	add	r3, r2
 800faba:	b29a      	uxth	r2, r3
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fac2:	69fb      	ldr	r3, [r7, #28]
 800fac4:	685b      	ldr	r3, [r3, #4]
 800fac6:	4618      	mov	r0, r3
 800fac8:	f7fb fd9a 	bl	800b600 <pbuf_clen>
 800facc:	4603      	mov	r3, r0
 800face:	461a      	mov	r2, r3
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fad6:	4413      	add	r3, r2
 800fad8:	b29a      	uxth	r2, r3
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	681a      	ldr	r2, [r3, #0]
 800fae4:	69fb      	ldr	r3, [r7, #28]
 800fae6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	69fa      	ldr	r2, [r7, #28]
 800faec:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800faee:	69fb      	ldr	r3, [r7, #28]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d103      	bne.n	800fafe <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2200      	movs	r2, #0
 800fafa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800fafe:	2300      	movs	r3, #0
 800fb00:	e016      	b.n	800fb30 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800fb02:	bf00      	nop
 800fb04:	e002      	b.n	800fb0c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800fb06:	bf00      	nop
 800fb08:	e000      	b.n	800fb0c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800fb0a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800fb0c:	69fb      	ldr	r3, [r7, #28]
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d006      	beq.n	800fb20 <tcp_split_unsent_seg+0x25c>
 800fb12:	4b09      	ldr	r3, [pc, #36]	@ (800fb38 <tcp_split_unsent_seg+0x274>)
 800fb14:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 800fb18:	490d      	ldr	r1, [pc, #52]	@ (800fb50 <tcp_split_unsent_seg+0x28c>)
 800fb1a:	4809      	ldr	r0, [pc, #36]	@ (800fb40 <tcp_split_unsent_seg+0x27c>)
 800fb1c:	f004 f8fe 	bl	8013d1c <iprintf>
  if (p != NULL) {
 800fb20:	693b      	ldr	r3, [r7, #16]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d002      	beq.n	800fb2c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800fb26:	6938      	ldr	r0, [r7, #16]
 800fb28:	f7fb fce2 	bl	800b4f0 <pbuf_free>
  }

  return ERR_MEM;
 800fb2c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fb30:	4618      	mov	r0, r3
 800fb32:	3724      	adds	r7, #36	@ 0x24
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd90      	pop	{r4, r7, pc}
 800fb38:	080161f8 	.word	0x080161f8
 800fb3c:	0801658c 	.word	0x0801658c
 800fb40:	0801624c 	.word	0x0801624c
 800fb44:	080165b0 	.word	0x080165b0
 800fb48:	080165d4 	.word	0x080165d4
 800fb4c:	080165e4 	.word	0x080165e4
 800fb50:	080165f4 	.word	0x080165f4

0800fb54 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800fb54:	b590      	push	{r4, r7, lr}
 800fb56:	b085      	sub	sp, #20
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d106      	bne.n	800fb70 <tcp_send_fin+0x1c>
 800fb62:	4b21      	ldr	r3, [pc, #132]	@ (800fbe8 <tcp_send_fin+0x94>)
 800fb64:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 800fb68:	4920      	ldr	r1, [pc, #128]	@ (800fbec <tcp_send_fin+0x98>)
 800fb6a:	4821      	ldr	r0, [pc, #132]	@ (800fbf0 <tcp_send_fin+0x9c>)
 800fb6c:	f004 f8d6 	bl	8013d1c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d02e      	beq.n	800fbd6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fb7c:	60fb      	str	r3, [r7, #12]
 800fb7e:	e002      	b.n	800fb86 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	681b      	ldr	r3, [r3, #0]
 800fb84:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d1f8      	bne.n	800fb80 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	68db      	ldr	r3, [r3, #12]
 800fb92:	899b      	ldrh	r3, [r3, #12]
 800fb94:	b29b      	uxth	r3, r3
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7fa f94c 	bl	8009e34 <lwip_htons>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	b2db      	uxtb	r3, r3
 800fba0:	f003 0307 	and.w	r3, r3, #7
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d116      	bne.n	800fbd6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	68db      	ldr	r3, [r3, #12]
 800fbac:	899b      	ldrh	r3, [r3, #12]
 800fbae:	b29c      	uxth	r4, r3
 800fbb0:	2001      	movs	r0, #1
 800fbb2:	f7fa f93f 	bl	8009e34 <lwip_htons>
 800fbb6:	4603      	mov	r3, r0
 800fbb8:	461a      	mov	r2, r3
 800fbba:	68fb      	ldr	r3, [r7, #12]
 800fbbc:	68db      	ldr	r3, [r3, #12]
 800fbbe:	4322      	orrs	r2, r4
 800fbc0:	b292      	uxth	r2, r2
 800fbc2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	8b5b      	ldrh	r3, [r3, #26]
 800fbc8:	f043 0320 	orr.w	r3, r3, #32
 800fbcc:	b29a      	uxth	r2, r3
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800fbd2:	2300      	movs	r3, #0
 800fbd4:	e004      	b.n	800fbe0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800fbd6:	2101      	movs	r1, #1
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f000 f80b 	bl	800fbf4 <tcp_enqueue_flags>
 800fbde:	4603      	mov	r3, r0
}
 800fbe0:	4618      	mov	r0, r3
 800fbe2:	3714      	adds	r7, #20
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd90      	pop	{r4, r7, pc}
 800fbe8:	080161f8 	.word	0x080161f8
 800fbec:	08016600 	.word	0x08016600
 800fbf0:	0801624c 	.word	0x0801624c

0800fbf4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b08a      	sub	sp, #40	@ 0x28
 800fbf8:	af02      	add	r7, sp, #8
 800fbfa:	6078      	str	r0, [r7, #4]
 800fbfc:	460b      	mov	r3, r1
 800fbfe:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800fc00:	2300      	movs	r3, #0
 800fc02:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800fc04:	2300      	movs	r3, #0
 800fc06:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800fc08:	78fb      	ldrb	r3, [r7, #3]
 800fc0a:	f003 0303 	and.w	r3, r3, #3
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d106      	bne.n	800fc20 <tcp_enqueue_flags+0x2c>
 800fc12:	4b67      	ldr	r3, [pc, #412]	@ (800fdb0 <tcp_enqueue_flags+0x1bc>)
 800fc14:	f240 4211 	movw	r2, #1041	@ 0x411
 800fc18:	4966      	ldr	r1, [pc, #408]	@ (800fdb4 <tcp_enqueue_flags+0x1c0>)
 800fc1a:	4867      	ldr	r0, [pc, #412]	@ (800fdb8 <tcp_enqueue_flags+0x1c4>)
 800fc1c:	f004 f87e 	bl	8013d1c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d106      	bne.n	800fc34 <tcp_enqueue_flags+0x40>
 800fc26:	4b62      	ldr	r3, [pc, #392]	@ (800fdb0 <tcp_enqueue_flags+0x1bc>)
 800fc28:	f240 4213 	movw	r2, #1043	@ 0x413
 800fc2c:	4963      	ldr	r1, [pc, #396]	@ (800fdbc <tcp_enqueue_flags+0x1c8>)
 800fc2e:	4862      	ldr	r0, [pc, #392]	@ (800fdb8 <tcp_enqueue_flags+0x1c4>)
 800fc30:	f004 f874 	bl	8013d1c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800fc34:	78fb      	ldrb	r3, [r7, #3]
 800fc36:	f003 0302 	and.w	r3, r3, #2
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d001      	beq.n	800fc42 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800fc3e:	2301      	movs	r3, #1
 800fc40:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fc42:	7ffb      	ldrb	r3, [r7, #31]
 800fc44:	009b      	lsls	r3, r3, #2
 800fc46:	b2db      	uxtb	r3, r3
 800fc48:	f003 0304 	and.w	r3, r3, #4
 800fc4c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800fc4e:	7dfb      	ldrb	r3, [r7, #23]
 800fc50:	b29b      	uxth	r3, r3
 800fc52:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800fc56:	4619      	mov	r1, r3
 800fc58:	2036      	movs	r0, #54	@ 0x36
 800fc5a:	f7fb f965 	bl	800af28 <pbuf_alloc>
 800fc5e:	6138      	str	r0, [r7, #16]
 800fc60:	693b      	ldr	r3, [r7, #16]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d109      	bne.n	800fc7a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	8b5b      	ldrh	r3, [r3, #26]
 800fc6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc6e:	b29a      	uxth	r2, r3
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800fc74:	f04f 33ff 	mov.w	r3, #4294967295
 800fc78:	e095      	b.n	800fda6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800fc7a:	693b      	ldr	r3, [r7, #16]
 800fc7c:	895a      	ldrh	r2, [r3, #10]
 800fc7e:	7dfb      	ldrb	r3, [r7, #23]
 800fc80:	b29b      	uxth	r3, r3
 800fc82:	429a      	cmp	r2, r3
 800fc84:	d206      	bcs.n	800fc94 <tcp_enqueue_flags+0xa0>
 800fc86:	4b4a      	ldr	r3, [pc, #296]	@ (800fdb0 <tcp_enqueue_flags+0x1bc>)
 800fc88:	f240 4239 	movw	r2, #1081	@ 0x439
 800fc8c:	494c      	ldr	r1, [pc, #304]	@ (800fdc0 <tcp_enqueue_flags+0x1cc>)
 800fc8e:	484a      	ldr	r0, [pc, #296]	@ (800fdb8 <tcp_enqueue_flags+0x1c4>)
 800fc90:	f004 f844 	bl	8013d1c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800fc98:	78fa      	ldrb	r2, [r7, #3]
 800fc9a:	7ffb      	ldrb	r3, [r7, #31]
 800fc9c:	9300      	str	r3, [sp, #0]
 800fc9e:	460b      	mov	r3, r1
 800fca0:	6939      	ldr	r1, [r7, #16]
 800fca2:	6878      	ldr	r0, [r7, #4]
 800fca4:	f7ff fd72 	bl	800f78c <tcp_create_segment>
 800fca8:	60f8      	str	r0, [r7, #12]
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d109      	bne.n	800fcc4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	8b5b      	ldrh	r3, [r3, #26]
 800fcb4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fcb8:	b29a      	uxth	r2, r3
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800fcbe:	f04f 33ff 	mov.w	r3, #4294967295
 800fcc2:	e070      	b.n	800fda6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	68db      	ldr	r3, [r3, #12]
 800fcc8:	f003 0303 	and.w	r3, r3, #3
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d006      	beq.n	800fcde <tcp_enqueue_flags+0xea>
 800fcd0:	4b37      	ldr	r3, [pc, #220]	@ (800fdb0 <tcp_enqueue_flags+0x1bc>)
 800fcd2:	f240 4242 	movw	r2, #1090	@ 0x442
 800fcd6:	493b      	ldr	r1, [pc, #236]	@ (800fdc4 <tcp_enqueue_flags+0x1d0>)
 800fcd8:	4837      	ldr	r0, [pc, #220]	@ (800fdb8 <tcp_enqueue_flags+0x1c4>)
 800fcda:	f004 f81f 	bl	8013d1c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	891b      	ldrh	r3, [r3, #8]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d006      	beq.n	800fcf4 <tcp_enqueue_flags+0x100>
 800fce6:	4b32      	ldr	r3, [pc, #200]	@ (800fdb0 <tcp_enqueue_flags+0x1bc>)
 800fce8:	f240 4243 	movw	r2, #1091	@ 0x443
 800fcec:	4936      	ldr	r1, [pc, #216]	@ (800fdc8 <tcp_enqueue_flags+0x1d4>)
 800fcee:	4832      	ldr	r0, [pc, #200]	@ (800fdb8 <tcp_enqueue_flags+0x1c4>)
 800fcf0:	f004 f814 	bl	8013d1c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d103      	bne.n	800fd04 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	68fa      	ldr	r2, [r7, #12]
 800fd00:	66da      	str	r2, [r3, #108]	@ 0x6c
 800fd02:	e00d      	b.n	800fd20 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd08:	61bb      	str	r3, [r7, #24]
 800fd0a:	e002      	b.n	800fd12 <tcp_enqueue_flags+0x11e>
 800fd0c:	69bb      	ldr	r3, [r7, #24]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	61bb      	str	r3, [r7, #24]
 800fd12:	69bb      	ldr	r3, [r7, #24]
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d1f8      	bne.n	800fd0c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800fd1a:	69bb      	ldr	r3, [r7, #24]
 800fd1c:	68fa      	ldr	r2, [r7, #12]
 800fd1e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2200      	movs	r2, #0
 800fd24:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800fd28:	78fb      	ldrb	r3, [r7, #3]
 800fd2a:	f003 0302 	and.w	r3, r3, #2
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d104      	bne.n	800fd3c <tcp_enqueue_flags+0x148>
 800fd32:	78fb      	ldrb	r3, [r7, #3]
 800fd34:	f003 0301 	and.w	r3, r3, #1
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d004      	beq.n	800fd46 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800fd40:	1c5a      	adds	r2, r3, #1
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800fd46:	78fb      	ldrb	r3, [r7, #3]
 800fd48:	f003 0301 	and.w	r3, r3, #1
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d006      	beq.n	800fd5e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	8b5b      	ldrh	r3, [r3, #26]
 800fd54:	f043 0320 	orr.w	r3, r3, #32
 800fd58:	b29a      	uxth	r2, r3
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	685b      	ldr	r3, [r3, #4]
 800fd62:	4618      	mov	r0, r3
 800fd64:	f7fb fc4c 	bl	800b600 <pbuf_clen>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	461a      	mov	r2, r3
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fd72:	4413      	add	r3, r2
 800fd74:	b29a      	uxth	r2, r3
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d00e      	beq.n	800fda4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d10a      	bne.n	800fda4 <tcp_enqueue_flags+0x1b0>
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d106      	bne.n	800fda4 <tcp_enqueue_flags+0x1b0>
 800fd96:	4b06      	ldr	r3, [pc, #24]	@ (800fdb0 <tcp_enqueue_flags+0x1bc>)
 800fd98:	f240 4265 	movw	r2, #1125	@ 0x465
 800fd9c:	490b      	ldr	r1, [pc, #44]	@ (800fdcc <tcp_enqueue_flags+0x1d8>)
 800fd9e:	4806      	ldr	r0, [pc, #24]	@ (800fdb8 <tcp_enqueue_flags+0x1c4>)
 800fda0:	f003 ffbc 	bl	8013d1c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800fda4:	2300      	movs	r3, #0
}
 800fda6:	4618      	mov	r0, r3
 800fda8:	3720      	adds	r7, #32
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	bd80      	pop	{r7, pc}
 800fdae:	bf00      	nop
 800fdb0:	080161f8 	.word	0x080161f8
 800fdb4:	0801661c 	.word	0x0801661c
 800fdb8:	0801624c 	.word	0x0801624c
 800fdbc:	08016674 	.word	0x08016674
 800fdc0:	08016694 	.word	0x08016694
 800fdc4:	080166d0 	.word	0x080166d0
 800fdc8:	080166e8 	.word	0x080166e8
 800fdcc:	08016714 	.word	0x08016714

0800fdd0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800fdd0:	b5b0      	push	{r4, r5, r7, lr}
 800fdd2:	b08a      	sub	sp, #40	@ 0x28
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d106      	bne.n	800fdec <tcp_output+0x1c>
 800fdde:	4b8a      	ldr	r3, [pc, #552]	@ (8010008 <tcp_output+0x238>)
 800fde0:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 800fde4:	4989      	ldr	r1, [pc, #548]	@ (801000c <tcp_output+0x23c>)
 800fde6:	488a      	ldr	r0, [pc, #552]	@ (8010010 <tcp_output+0x240>)
 800fde8:	f003 ff98 	bl	8013d1c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	7d1b      	ldrb	r3, [r3, #20]
 800fdf0:	2b01      	cmp	r3, #1
 800fdf2:	d106      	bne.n	800fe02 <tcp_output+0x32>
 800fdf4:	4b84      	ldr	r3, [pc, #528]	@ (8010008 <tcp_output+0x238>)
 800fdf6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 800fdfa:	4986      	ldr	r1, [pc, #536]	@ (8010014 <tcp_output+0x244>)
 800fdfc:	4884      	ldr	r0, [pc, #528]	@ (8010010 <tcp_output+0x240>)
 800fdfe:	f003 ff8d 	bl	8013d1c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800fe02:	4b85      	ldr	r3, [pc, #532]	@ (8010018 <tcp_output+0x248>)
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	687a      	ldr	r2, [r7, #4]
 800fe08:	429a      	cmp	r2, r3
 800fe0a:	d101      	bne.n	800fe10 <tcp_output+0x40>
    return ERR_OK;
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	e1ce      	b.n	80101ae <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800fe1c:	4293      	cmp	r3, r2
 800fe1e:	bf28      	it	cs
 800fe20:	4613      	movcs	r3, r2
 800fe22:	b29b      	uxth	r3, r3
 800fe24:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe2a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 800fe2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d10b      	bne.n	800fe4a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	8b5b      	ldrh	r3, [r3, #26]
 800fe36:	f003 0302 	and.w	r3, r3, #2
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	f000 81aa 	beq.w	8010194 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f000 fdcb 	bl	80109dc <tcp_send_empty_ack>
 800fe46:	4603      	mov	r3, r0
 800fe48:	e1b1      	b.n	80101ae <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800fe4a:	6879      	ldr	r1, [r7, #4]
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	3304      	adds	r3, #4
 800fe50:	461a      	mov	r2, r3
 800fe52:	6878      	ldr	r0, [r7, #4]
 800fe54:	f7ff fc7e 	bl	800f754 <tcp_route>
 800fe58:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800fe5a:	697b      	ldr	r3, [r7, #20]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d102      	bne.n	800fe66 <tcp_output+0x96>
    return ERR_RTE;
 800fe60:	f06f 0303 	mvn.w	r3, #3
 800fe64:	e1a3      	b.n	80101ae <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d003      	beq.n	800fe74 <tcp_output+0xa4>
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d111      	bne.n	800fe98 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800fe74:	697b      	ldr	r3, [r7, #20]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d002      	beq.n	800fe80 <tcp_output+0xb0>
 800fe7a:	697b      	ldr	r3, [r7, #20]
 800fe7c:	3304      	adds	r3, #4
 800fe7e:	e000      	b.n	800fe82 <tcp_output+0xb2>
 800fe80:	2300      	movs	r3, #0
 800fe82:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800fe84:	693b      	ldr	r3, [r7, #16]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d102      	bne.n	800fe90 <tcp_output+0xc0>
      return ERR_RTE;
 800fe8a:	f06f 0303 	mvn.w	r3, #3
 800fe8e:	e18e      	b.n	80101ae <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800fe90:	693b      	ldr	r3, [r7, #16]
 800fe92:	681a      	ldr	r2, [r3, #0]
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800fe98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe9a:	68db      	ldr	r3, [r3, #12]
 800fe9c:	685b      	ldr	r3, [r3, #4]
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f7f9 ffde 	bl	8009e60 <lwip_htonl>
 800fea4:	4602      	mov	r2, r0
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800feaa:	1ad3      	subs	r3, r2, r3
 800feac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800feae:	8912      	ldrh	r2, [r2, #8]
 800feb0:	4413      	add	r3, r2
 800feb2:	69ba      	ldr	r2, [r7, #24]
 800feb4:	429a      	cmp	r2, r3
 800feb6:	d227      	bcs.n	800ff08 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800febe:	461a      	mov	r2, r3
 800fec0:	69bb      	ldr	r3, [r7, #24]
 800fec2:	4293      	cmp	r3, r2
 800fec4:	d114      	bne.n	800fef0 <tcp_output+0x120>
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d110      	bne.n	800fef0 <tcp_output+0x120>
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d10b      	bne.n	800fef0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	2200      	movs	r2, #0
 800fedc:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	2201      	movs	r2, #1
 800fee4:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	2200      	movs	r2, #0
 800feec:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	8b5b      	ldrh	r3, [r3, #26]
 800fef4:	f003 0302 	and.w	r3, r3, #2
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	f000 814d 	beq.w	8010198 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	f000 fd6c 	bl	80109dc <tcp_send_empty_ack>
 800ff04:	4603      	mov	r3, r0
 800ff06:	e152      	b.n	80101ae <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ff14:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ff16:	6a3b      	ldr	r3, [r7, #32]
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	f000 811c 	beq.w	8010156 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800ff1e:	e002      	b.n	800ff26 <tcp_output+0x156>
 800ff20:	6a3b      	ldr	r3, [r7, #32]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	623b      	str	r3, [r7, #32]
 800ff26:	6a3b      	ldr	r3, [r7, #32]
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d1f8      	bne.n	800ff20 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ff2e:	e112      	b.n	8010156 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ff30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ff32:	68db      	ldr	r3, [r3, #12]
 800ff34:	899b      	ldrh	r3, [r3, #12]
 800ff36:	b29b      	uxth	r3, r3
 800ff38:	4618      	mov	r0, r3
 800ff3a:	f7f9 ff7b 	bl	8009e34 <lwip_htons>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	b2db      	uxtb	r3, r3
 800ff42:	f003 0304 	and.w	r3, r3, #4
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d006      	beq.n	800ff58 <tcp_output+0x188>
 800ff4a:	4b2f      	ldr	r3, [pc, #188]	@ (8010008 <tcp_output+0x238>)
 800ff4c:	f240 5236 	movw	r2, #1334	@ 0x536
 800ff50:	4932      	ldr	r1, [pc, #200]	@ (801001c <tcp_output+0x24c>)
 800ff52:	482f      	ldr	r0, [pc, #188]	@ (8010010 <tcp_output+0x240>)
 800ff54:	f003 fee2 	bl	8013d1c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d01f      	beq.n	800ffa0 <tcp_output+0x1d0>
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	8b5b      	ldrh	r3, [r3, #26]
 800ff64:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d119      	bne.n	800ffa0 <tcp_output+0x1d0>
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	d00b      	beq.n	800ff8c <tcp_output+0x1bc>
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff78:	681b      	ldr	r3, [r3, #0]
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d110      	bne.n	800ffa0 <tcp_output+0x1d0>
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ff82:	891a      	ldrh	r2, [r3, #8]
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ff88:	429a      	cmp	r2, r3
 800ff8a:	d209      	bcs.n	800ffa0 <tcp_output+0x1d0>
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d004      	beq.n	800ffa0 <tcp_output+0x1d0>
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 800ff9c:	2b08      	cmp	r3, #8
 800ff9e:	d901      	bls.n	800ffa4 <tcp_output+0x1d4>
 800ffa0:	2301      	movs	r3, #1
 800ffa2:	e000      	b.n	800ffa6 <tcp_output+0x1d6>
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d106      	bne.n	800ffb8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	8b5b      	ldrh	r3, [r3, #26]
 800ffae:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	f000 80e4 	beq.w	8010180 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	7d1b      	ldrb	r3, [r3, #20]
 800ffbc:	2b02      	cmp	r3, #2
 800ffbe:	d00d      	beq.n	800ffdc <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800ffc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffc2:	68db      	ldr	r3, [r3, #12]
 800ffc4:	899b      	ldrh	r3, [r3, #12]
 800ffc6:	b29c      	uxth	r4, r3
 800ffc8:	2010      	movs	r0, #16
 800ffca:	f7f9 ff33 	bl	8009e34 <lwip_htons>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	461a      	mov	r2, r3
 800ffd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ffd4:	68db      	ldr	r3, [r3, #12]
 800ffd6:	4322      	orrs	r2, r4
 800ffd8:	b292      	uxth	r2, r2
 800ffda:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800ffdc:	697a      	ldr	r2, [r7, #20]
 800ffde:	6879      	ldr	r1, [r7, #4]
 800ffe0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ffe2:	f000 f909 	bl	80101f8 <tcp_output_segment>
 800ffe6:	4603      	mov	r3, r0
 800ffe8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800ffea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d016      	beq.n	8010020 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	8b5b      	ldrh	r3, [r3, #26]
 800fff6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fffa:	b29a      	uxth	r2, r3
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	835a      	strh	r2, [r3, #26]
      return err;
 8010000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010004:	e0d3      	b.n	80101ae <tcp_output+0x3de>
 8010006:	bf00      	nop
 8010008:	080161f8 	.word	0x080161f8
 801000c:	0801673c 	.word	0x0801673c
 8010010:	0801624c 	.word	0x0801624c
 8010014:	08016754 	.word	0x08016754
 8010018:	2000b1f0 	.word	0x2000b1f0
 801001c:	0801677c 	.word	0x0801677c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010022:	681a      	ldr	r2, [r3, #0]
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	7d1b      	ldrb	r3, [r3, #20]
 801002c:	2b02      	cmp	r3, #2
 801002e:	d006      	beq.n	801003e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	8b5b      	ldrh	r3, [r3, #26]
 8010034:	f023 0303 	bic.w	r3, r3, #3
 8010038:	b29a      	uxth	r2, r3
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801003e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010040:	68db      	ldr	r3, [r3, #12]
 8010042:	685b      	ldr	r3, [r3, #4]
 8010044:	4618      	mov	r0, r3
 8010046:	f7f9 ff0b 	bl	8009e60 <lwip_htonl>
 801004a:	4604      	mov	r4, r0
 801004c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801004e:	891b      	ldrh	r3, [r3, #8]
 8010050:	461d      	mov	r5, r3
 8010052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010054:	68db      	ldr	r3, [r3, #12]
 8010056:	899b      	ldrh	r3, [r3, #12]
 8010058:	b29b      	uxth	r3, r3
 801005a:	4618      	mov	r0, r3
 801005c:	f7f9 feea 	bl	8009e34 <lwip_htons>
 8010060:	4603      	mov	r3, r0
 8010062:	b2db      	uxtb	r3, r3
 8010064:	f003 0303 	and.w	r3, r3, #3
 8010068:	2b00      	cmp	r3, #0
 801006a:	d001      	beq.n	8010070 <tcp_output+0x2a0>
 801006c:	2301      	movs	r3, #1
 801006e:	e000      	b.n	8010072 <tcp_output+0x2a2>
 8010070:	2300      	movs	r3, #0
 8010072:	442b      	add	r3, r5
 8010074:	4423      	add	r3, r4
 8010076:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	1ad3      	subs	r3, r2, r3
 8010080:	2b00      	cmp	r3, #0
 8010082:	da02      	bge.n	801008a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	68ba      	ldr	r2, [r7, #8]
 8010088:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801008a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801008c:	891b      	ldrh	r3, [r3, #8]
 801008e:	461c      	mov	r4, r3
 8010090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010092:	68db      	ldr	r3, [r3, #12]
 8010094:	899b      	ldrh	r3, [r3, #12]
 8010096:	b29b      	uxth	r3, r3
 8010098:	4618      	mov	r0, r3
 801009a:	f7f9 fecb 	bl	8009e34 <lwip_htons>
 801009e:	4603      	mov	r3, r0
 80100a0:	b2db      	uxtb	r3, r3
 80100a2:	f003 0303 	and.w	r3, r3, #3
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d001      	beq.n	80100ae <tcp_output+0x2de>
 80100aa:	2301      	movs	r3, #1
 80100ac:	e000      	b.n	80100b0 <tcp_output+0x2e0>
 80100ae:	2300      	movs	r3, #0
 80100b0:	4423      	add	r3, r4
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d049      	beq.n	801014a <tcp_output+0x37a>
      seg->next = NULL;
 80100b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100b8:	2200      	movs	r2, #0
 80100ba:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d105      	bne.n	80100d0 <tcp_output+0x300>
        pcb->unacked = seg;
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80100c8:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 80100ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100cc:	623b      	str	r3, [r7, #32]
 80100ce:	e03f      	b.n	8010150 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80100d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100d2:	68db      	ldr	r3, [r3, #12]
 80100d4:	685b      	ldr	r3, [r3, #4]
 80100d6:	4618      	mov	r0, r3
 80100d8:	f7f9 fec2 	bl	8009e60 <lwip_htonl>
 80100dc:	4604      	mov	r4, r0
 80100de:	6a3b      	ldr	r3, [r7, #32]
 80100e0:	68db      	ldr	r3, [r3, #12]
 80100e2:	685b      	ldr	r3, [r3, #4]
 80100e4:	4618      	mov	r0, r3
 80100e6:	f7f9 febb 	bl	8009e60 <lwip_htonl>
 80100ea:	4603      	mov	r3, r0
 80100ec:	1ae3      	subs	r3, r4, r3
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	da24      	bge.n	801013c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	3370      	adds	r3, #112	@ 0x70
 80100f6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80100f8:	e002      	b.n	8010100 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80100fa:	69fb      	ldr	r3, [r7, #28]
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010100:	69fb      	ldr	r3, [r7, #28]
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d011      	beq.n	801012c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010108:	69fb      	ldr	r3, [r7, #28]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	68db      	ldr	r3, [r3, #12]
 801010e:	685b      	ldr	r3, [r3, #4]
 8010110:	4618      	mov	r0, r3
 8010112:	f7f9 fea5 	bl	8009e60 <lwip_htonl>
 8010116:	4604      	mov	r4, r0
 8010118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801011a:	68db      	ldr	r3, [r3, #12]
 801011c:	685b      	ldr	r3, [r3, #4]
 801011e:	4618      	mov	r0, r3
 8010120:	f7f9 fe9e 	bl	8009e60 <lwip_htonl>
 8010124:	4603      	mov	r3, r0
 8010126:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010128:	2b00      	cmp	r3, #0
 801012a:	dbe6      	blt.n	80100fa <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801012c:	69fb      	ldr	r3, [r7, #28]
 801012e:	681a      	ldr	r2, [r3, #0]
 8010130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010132:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010134:	69fb      	ldr	r3, [r7, #28]
 8010136:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010138:	601a      	str	r2, [r3, #0]
 801013a:	e009      	b.n	8010150 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801013c:	6a3b      	ldr	r3, [r7, #32]
 801013e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010140:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010142:	6a3b      	ldr	r3, [r7, #32]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	623b      	str	r3, [r7, #32]
 8010148:	e002      	b.n	8010150 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801014a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801014c:	f7fc fc45 	bl	800c9da <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010154:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8010156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010158:	2b00      	cmp	r3, #0
 801015a:	d012      	beq.n	8010182 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801015c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801015e:	68db      	ldr	r3, [r3, #12]
 8010160:	685b      	ldr	r3, [r3, #4]
 8010162:	4618      	mov	r0, r3
 8010164:	f7f9 fe7c 	bl	8009e60 <lwip_htonl>
 8010168:	4602      	mov	r2, r0
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801016e:	1ad3      	subs	r3, r2, r3
 8010170:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010172:	8912      	ldrh	r2, [r2, #8]
 8010174:	4413      	add	r3, r2
  while (seg != NULL &&
 8010176:	69ba      	ldr	r2, [r7, #24]
 8010178:	429a      	cmp	r2, r3
 801017a:	f4bf aed9 	bcs.w	800ff30 <tcp_output+0x160>
 801017e:	e000      	b.n	8010182 <tcp_output+0x3b2>
      break;
 8010180:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010186:	2b00      	cmp	r3, #0
 8010188:	d108      	bne.n	801019c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	2200      	movs	r2, #0
 801018e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8010192:	e004      	b.n	801019e <tcp_output+0x3ce>
    goto output_done;
 8010194:	bf00      	nop
 8010196:	e002      	b.n	801019e <tcp_output+0x3ce>
    goto output_done;
 8010198:	bf00      	nop
 801019a:	e000      	b.n	801019e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801019c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	8b5b      	ldrh	r3, [r3, #26]
 80101a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80101a6:	b29a      	uxth	r2, r3
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80101ac:	2300      	movs	r3, #0
}
 80101ae:	4618      	mov	r0, r3
 80101b0:	3728      	adds	r7, #40	@ 0x28
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bdb0      	pop	{r4, r5, r7, pc}
 80101b6:	bf00      	nop

080101b8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80101b8:	b580      	push	{r7, lr}
 80101ba:	b082      	sub	sp, #8
 80101bc:	af00      	add	r7, sp, #0
 80101be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d106      	bne.n	80101d4 <tcp_output_segment_busy+0x1c>
 80101c6:	4b09      	ldr	r3, [pc, #36]	@ (80101ec <tcp_output_segment_busy+0x34>)
 80101c8:	f240 529a 	movw	r2, #1434	@ 0x59a
 80101cc:	4908      	ldr	r1, [pc, #32]	@ (80101f0 <tcp_output_segment_busy+0x38>)
 80101ce:	4809      	ldr	r0, [pc, #36]	@ (80101f4 <tcp_output_segment_busy+0x3c>)
 80101d0:	f003 fda4 	bl	8013d1c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	685b      	ldr	r3, [r3, #4]
 80101d8:	7b9b      	ldrb	r3, [r3, #14]
 80101da:	2b01      	cmp	r3, #1
 80101dc:	d001      	beq.n	80101e2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80101de:	2301      	movs	r3, #1
 80101e0:	e000      	b.n	80101e4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80101e2:	2300      	movs	r3, #0
}
 80101e4:	4618      	mov	r0, r3
 80101e6:	3708      	adds	r7, #8
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}
 80101ec:	080161f8 	.word	0x080161f8
 80101f0:	08016794 	.word	0x08016794
 80101f4:	0801624c 	.word	0x0801624c

080101f8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80101f8:	b5b0      	push	{r4, r5, r7, lr}
 80101fa:	b08c      	sub	sp, #48	@ 0x30
 80101fc:	af04      	add	r7, sp, #16
 80101fe:	60f8      	str	r0, [r7, #12]
 8010200:	60b9      	str	r1, [r7, #8]
 8010202:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	2b00      	cmp	r3, #0
 8010208:	d106      	bne.n	8010218 <tcp_output_segment+0x20>
 801020a:	4b64      	ldr	r3, [pc, #400]	@ (801039c <tcp_output_segment+0x1a4>)
 801020c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8010210:	4963      	ldr	r1, [pc, #396]	@ (80103a0 <tcp_output_segment+0x1a8>)
 8010212:	4864      	ldr	r0, [pc, #400]	@ (80103a4 <tcp_output_segment+0x1ac>)
 8010214:	f003 fd82 	bl	8013d1c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d106      	bne.n	801022c <tcp_output_segment+0x34>
 801021e:	4b5f      	ldr	r3, [pc, #380]	@ (801039c <tcp_output_segment+0x1a4>)
 8010220:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8010224:	4960      	ldr	r1, [pc, #384]	@ (80103a8 <tcp_output_segment+0x1b0>)
 8010226:	485f      	ldr	r0, [pc, #380]	@ (80103a4 <tcp_output_segment+0x1ac>)
 8010228:	f003 fd78 	bl	8013d1c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d106      	bne.n	8010240 <tcp_output_segment+0x48>
 8010232:	4b5a      	ldr	r3, [pc, #360]	@ (801039c <tcp_output_segment+0x1a4>)
 8010234:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8010238:	495c      	ldr	r1, [pc, #368]	@ (80103ac <tcp_output_segment+0x1b4>)
 801023a:	485a      	ldr	r0, [pc, #360]	@ (80103a4 <tcp_output_segment+0x1ac>)
 801023c:	f003 fd6e 	bl	8013d1c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010240:	68f8      	ldr	r0, [r7, #12]
 8010242:	f7ff ffb9 	bl	80101b8 <tcp_output_segment_busy>
 8010246:	4603      	mov	r3, r0
 8010248:	2b00      	cmp	r3, #0
 801024a:	d001      	beq.n	8010250 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801024c:	2300      	movs	r3, #0
 801024e:	e0a1      	b.n	8010394 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010250:	68bb      	ldr	r3, [r7, #8]
 8010252:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010254:	68fb      	ldr	r3, [r7, #12]
 8010256:	68dc      	ldr	r4, [r3, #12]
 8010258:	4610      	mov	r0, r2
 801025a:	f7f9 fe01 	bl	8009e60 <lwip_htonl>
 801025e:	4603      	mov	r3, r0
 8010260:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010262:	68bb      	ldr	r3, [r7, #8]
 8010264:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	68dc      	ldr	r4, [r3, #12]
 801026a:	4610      	mov	r0, r2
 801026c:	f7f9 fde2 	bl	8009e34 <lwip_htons>
 8010270:	4603      	mov	r3, r0
 8010272:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010274:	68bb      	ldr	r3, [r7, #8]
 8010276:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010278:	68ba      	ldr	r2, [r7, #8]
 801027a:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801027c:	441a      	add	r2, r3
 801027e:	68bb      	ldr	r3, [r7, #8]
 8010280:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	68db      	ldr	r3, [r3, #12]
 8010286:	3314      	adds	r3, #20
 8010288:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	7a9b      	ldrb	r3, [r3, #10]
 801028e:	f003 0301 	and.w	r3, r3, #1
 8010292:	2b00      	cmp	r3, #0
 8010294:	d015      	beq.n	80102c2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010296:	68bb      	ldr	r3, [r7, #8]
 8010298:	3304      	adds	r3, #4
 801029a:	461a      	mov	r2, r3
 801029c:	6879      	ldr	r1, [r7, #4]
 801029e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 80102a2:	f7fc fe91 	bl	800cfc8 <tcp_eff_send_mss_netif>
 80102a6:	4603      	mov	r3, r0
 80102a8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80102aa:	8b7b      	ldrh	r3, [r7, #26]
 80102ac:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 80102b0:	4618      	mov	r0, r3
 80102b2:	f7f9 fdd5 	bl	8009e60 <lwip_htonl>
 80102b6:	4602      	mov	r2, r0
 80102b8:	69fb      	ldr	r3, [r7, #28]
 80102ba:	601a      	str	r2, [r3, #0]
    opts += 1;
 80102bc:	69fb      	ldr	r3, [r7, #28]
 80102be:	3304      	adds	r3, #4
 80102c0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80102c2:	68bb      	ldr	r3, [r7, #8]
 80102c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	da02      	bge.n	80102d2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	2200      	movs	r2, #0
 80102d0:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 80102d2:	68bb      	ldr	r3, [r7, #8]
 80102d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d10c      	bne.n	80102f4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80102da:	4b35      	ldr	r3, [pc, #212]	@ (80103b0 <tcp_output_segment+0x1b8>)
 80102dc:	681a      	ldr	r2, [r3, #0]
 80102de:	68bb      	ldr	r3, [r7, #8]
 80102e0:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	68db      	ldr	r3, [r3, #12]
 80102e6:	685b      	ldr	r3, [r3, #4]
 80102e8:	4618      	mov	r0, r3
 80102ea:	f7f9 fdb9 	bl	8009e60 <lwip_htonl>
 80102ee:	4602      	mov	r2, r0
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	68da      	ldr	r2, [r3, #12]
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	685b      	ldr	r3, [r3, #4]
 80102fc:	685b      	ldr	r3, [r3, #4]
 80102fe:	1ad3      	subs	r3, r2, r3
 8010300:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	685b      	ldr	r3, [r3, #4]
 8010306:	8959      	ldrh	r1, [r3, #10]
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	685b      	ldr	r3, [r3, #4]
 801030c:	8b3a      	ldrh	r2, [r7, #24]
 801030e:	1a8a      	subs	r2, r1, r2
 8010310:	b292      	uxth	r2, r2
 8010312:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	685b      	ldr	r3, [r3, #4]
 8010318:	8919      	ldrh	r1, [r3, #8]
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	685b      	ldr	r3, [r3, #4]
 801031e:	8b3a      	ldrh	r2, [r7, #24]
 8010320:	1a8a      	subs	r2, r1, r2
 8010322:	b292      	uxth	r2, r2
 8010324:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	685b      	ldr	r3, [r3, #4]
 801032a:	68fa      	ldr	r2, [r7, #12]
 801032c:	68d2      	ldr	r2, [r2, #12]
 801032e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	68db      	ldr	r3, [r3, #12]
 8010334:	2200      	movs	r2, #0
 8010336:	741a      	strb	r2, [r3, #16]
 8010338:	2200      	movs	r2, #0
 801033a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	68da      	ldr	r2, [r3, #12]
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	7a9b      	ldrb	r3, [r3, #10]
 8010344:	f003 0301 	and.w	r3, r3, #1
 8010348:	2b00      	cmp	r3, #0
 801034a:	d001      	beq.n	8010350 <tcp_output_segment+0x158>
 801034c:	2318      	movs	r3, #24
 801034e:	e000      	b.n	8010352 <tcp_output_segment+0x15a>
 8010350:	2314      	movs	r3, #20
 8010352:	4413      	add	r3, r2
 8010354:	69fa      	ldr	r2, [r7, #28]
 8010356:	429a      	cmp	r2, r3
 8010358:	d006      	beq.n	8010368 <tcp_output_segment+0x170>
 801035a:	4b10      	ldr	r3, [pc, #64]	@ (801039c <tcp_output_segment+0x1a4>)
 801035c:	f240 621c 	movw	r2, #1564	@ 0x61c
 8010360:	4914      	ldr	r1, [pc, #80]	@ (80103b4 <tcp_output_segment+0x1bc>)
 8010362:	4810      	ldr	r0, [pc, #64]	@ (80103a4 <tcp_output_segment+0x1ac>)
 8010364:	f003 fcda 	bl	8013d1c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	6858      	ldr	r0, [r3, #4]
 801036c:	68b9      	ldr	r1, [r7, #8]
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	1d1c      	adds	r4, r3, #4
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	7add      	ldrb	r5, [r3, #11]
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	7a9b      	ldrb	r3, [r3, #10]
 801037a:	687a      	ldr	r2, [r7, #4]
 801037c:	9202      	str	r2, [sp, #8]
 801037e:	2206      	movs	r2, #6
 8010380:	9201      	str	r2, [sp, #4]
 8010382:	9300      	str	r3, [sp, #0]
 8010384:	462b      	mov	r3, r5
 8010386:	4622      	mov	r2, r4
 8010388:	f002 fb9a 	bl	8012ac0 <ip4_output_if>
 801038c:	4603      	mov	r3, r0
 801038e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010390:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010394:	4618      	mov	r0, r3
 8010396:	3720      	adds	r7, #32
 8010398:	46bd      	mov	sp, r7
 801039a:	bdb0      	pop	{r4, r5, r7, pc}
 801039c:	080161f8 	.word	0x080161f8
 80103a0:	080167bc 	.word	0x080167bc
 80103a4:	0801624c 	.word	0x0801624c
 80103a8:	080167dc 	.word	0x080167dc
 80103ac:	080167fc 	.word	0x080167fc
 80103b0:	2000b1a4 	.word	0x2000b1a4
 80103b4:	08016820 	.word	0x08016820

080103b8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80103b8:	b5b0      	push	{r4, r5, r7, lr}
 80103ba:	b084      	sub	sp, #16
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d106      	bne.n	80103d4 <tcp_rexmit_rto_prepare+0x1c>
 80103c6:	4b31      	ldr	r3, [pc, #196]	@ (801048c <tcp_rexmit_rto_prepare+0xd4>)
 80103c8:	f240 6263 	movw	r2, #1635	@ 0x663
 80103cc:	4930      	ldr	r1, [pc, #192]	@ (8010490 <tcp_rexmit_rto_prepare+0xd8>)
 80103ce:	4831      	ldr	r0, [pc, #196]	@ (8010494 <tcp_rexmit_rto_prepare+0xdc>)
 80103d0:	f003 fca4 	bl	8013d1c <iprintf>

  if (pcb->unacked == NULL) {
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d102      	bne.n	80103e2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80103dc:	f06f 0305 	mvn.w	r3, #5
 80103e0:	e050      	b.n	8010484 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80103e6:	60fb      	str	r3, [r7, #12]
 80103e8:	e00b      	b.n	8010402 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80103ea:	68f8      	ldr	r0, [r7, #12]
 80103ec:	f7ff fee4 	bl	80101b8 <tcp_output_segment_busy>
 80103f0:	4603      	mov	r3, r0
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d002      	beq.n	80103fc <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80103f6:	f06f 0305 	mvn.w	r3, #5
 80103fa:	e043      	b.n	8010484 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	60fb      	str	r3, [r7, #12]
 8010402:	68fb      	ldr	r3, [r7, #12]
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	2b00      	cmp	r3, #0
 8010408:	d1ef      	bne.n	80103ea <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801040a:	68f8      	ldr	r0, [r7, #12]
 801040c:	f7ff fed4 	bl	80101b8 <tcp_output_segment_busy>
 8010410:	4603      	mov	r3, r0
 8010412:	2b00      	cmp	r3, #0
 8010414:	d002      	beq.n	801041c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010416:	f06f 0305 	mvn.w	r3, #5
 801041a:	e033      	b.n	8010484 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8010420:	68fb      	ldr	r3, [r7, #12]
 8010422:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	2200      	movs	r2, #0
 8010430:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	8b5b      	ldrh	r3, [r3, #26]
 8010436:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801043a:	b29a      	uxth	r2, r3
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	68db      	ldr	r3, [r3, #12]
 8010444:	685b      	ldr	r3, [r3, #4]
 8010446:	4618      	mov	r0, r3
 8010448:	f7f9 fd0a 	bl	8009e60 <lwip_htonl>
 801044c:	4604      	mov	r4, r0
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	891b      	ldrh	r3, [r3, #8]
 8010452:	461d      	mov	r5, r3
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	68db      	ldr	r3, [r3, #12]
 8010458:	899b      	ldrh	r3, [r3, #12]
 801045a:	b29b      	uxth	r3, r3
 801045c:	4618      	mov	r0, r3
 801045e:	f7f9 fce9 	bl	8009e34 <lwip_htons>
 8010462:	4603      	mov	r3, r0
 8010464:	b2db      	uxtb	r3, r3
 8010466:	f003 0303 	and.w	r3, r3, #3
 801046a:	2b00      	cmp	r3, #0
 801046c:	d001      	beq.n	8010472 <tcp_rexmit_rto_prepare+0xba>
 801046e:	2301      	movs	r3, #1
 8010470:	e000      	b.n	8010474 <tcp_rexmit_rto_prepare+0xbc>
 8010472:	2300      	movs	r3, #0
 8010474:	442b      	add	r3, r5
 8010476:	18e2      	adds	r2, r4, r3
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	2200      	movs	r2, #0
 8010480:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8010482:	2300      	movs	r3, #0
}
 8010484:	4618      	mov	r0, r3
 8010486:	3710      	adds	r7, #16
 8010488:	46bd      	mov	sp, r7
 801048a:	bdb0      	pop	{r4, r5, r7, pc}
 801048c:	080161f8 	.word	0x080161f8
 8010490:	08016834 	.word	0x08016834
 8010494:	0801624c 	.word	0x0801624c

08010498 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b082      	sub	sp, #8
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d106      	bne.n	80104b4 <tcp_rexmit_rto_commit+0x1c>
 80104a6:	4b0d      	ldr	r3, [pc, #52]	@ (80104dc <tcp_rexmit_rto_commit+0x44>)
 80104a8:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80104ac:	490c      	ldr	r1, [pc, #48]	@ (80104e0 <tcp_rexmit_rto_commit+0x48>)
 80104ae:	480d      	ldr	r0, [pc, #52]	@ (80104e4 <tcp_rexmit_rto_commit+0x4c>)
 80104b0:	f003 fc34 	bl	8013d1c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80104ba:	2bff      	cmp	r3, #255	@ 0xff
 80104bc:	d007      	beq.n	80104ce <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80104c4:	3301      	adds	r3, #1
 80104c6:	b2da      	uxtb	r2, r3
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80104ce:	6878      	ldr	r0, [r7, #4]
 80104d0:	f7ff fc7e 	bl	800fdd0 <tcp_output>
}
 80104d4:	bf00      	nop
 80104d6:	3708      	adds	r7, #8
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}
 80104dc:	080161f8 	.word	0x080161f8
 80104e0:	08016858 	.word	0x08016858
 80104e4:	0801624c 	.word	0x0801624c

080104e8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b082      	sub	sp, #8
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d106      	bne.n	8010504 <tcp_rexmit_rto+0x1c>
 80104f6:	4b0a      	ldr	r3, [pc, #40]	@ (8010520 <tcp_rexmit_rto+0x38>)
 80104f8:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 80104fc:	4909      	ldr	r1, [pc, #36]	@ (8010524 <tcp_rexmit_rto+0x3c>)
 80104fe:	480a      	ldr	r0, [pc, #40]	@ (8010528 <tcp_rexmit_rto+0x40>)
 8010500:	f003 fc0c 	bl	8013d1c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f7ff ff57 	bl	80103b8 <tcp_rexmit_rto_prepare>
 801050a:	4603      	mov	r3, r0
 801050c:	2b00      	cmp	r3, #0
 801050e:	d102      	bne.n	8010516 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	f7ff ffc1 	bl	8010498 <tcp_rexmit_rto_commit>
  }
}
 8010516:	bf00      	nop
 8010518:	3708      	adds	r7, #8
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}
 801051e:	bf00      	nop
 8010520:	080161f8 	.word	0x080161f8
 8010524:	0801687c 	.word	0x0801687c
 8010528:	0801624c 	.word	0x0801624c

0801052c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801052c:	b590      	push	{r4, r7, lr}
 801052e:	b085      	sub	sp, #20
 8010530:	af00      	add	r7, sp, #0
 8010532:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d106      	bne.n	8010548 <tcp_rexmit+0x1c>
 801053a:	4b2f      	ldr	r3, [pc, #188]	@ (80105f8 <tcp_rexmit+0xcc>)
 801053c:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8010540:	492e      	ldr	r1, [pc, #184]	@ (80105fc <tcp_rexmit+0xd0>)
 8010542:	482f      	ldr	r0, [pc, #188]	@ (8010600 <tcp_rexmit+0xd4>)
 8010544:	f003 fbea 	bl	8013d1c <iprintf>

  if (pcb->unacked == NULL) {
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801054c:	2b00      	cmp	r3, #0
 801054e:	d102      	bne.n	8010556 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010550:	f06f 0305 	mvn.w	r3, #5
 8010554:	e04c      	b.n	80105f0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801055a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801055c:	68b8      	ldr	r0, [r7, #8]
 801055e:	f7ff fe2b 	bl	80101b8 <tcp_output_segment_busy>
 8010562:	4603      	mov	r3, r0
 8010564:	2b00      	cmp	r3, #0
 8010566:	d002      	beq.n	801056e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010568:	f06f 0305 	mvn.w	r3, #5
 801056c:	e040      	b.n	80105f0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801056e:	68bb      	ldr	r3, [r7, #8]
 8010570:	681a      	ldr	r2, [r3, #0]
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	336c      	adds	r3, #108	@ 0x6c
 801057a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801057c:	e002      	b.n	8010584 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	2b00      	cmp	r3, #0
 801058a:	d011      	beq.n	80105b0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	68db      	ldr	r3, [r3, #12]
 8010592:	685b      	ldr	r3, [r3, #4]
 8010594:	4618      	mov	r0, r3
 8010596:	f7f9 fc63 	bl	8009e60 <lwip_htonl>
 801059a:	4604      	mov	r4, r0
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	68db      	ldr	r3, [r3, #12]
 80105a0:	685b      	ldr	r3, [r3, #4]
 80105a2:	4618      	mov	r0, r3
 80105a4:	f7f9 fc5c 	bl	8009e60 <lwip_htonl>
 80105a8:	4603      	mov	r3, r0
 80105aa:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	dbe6      	blt.n	801057e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	681a      	ldr	r2, [r3, #0]
 80105b4:	68bb      	ldr	r3, [r7, #8]
 80105b6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	68ba      	ldr	r2, [r7, #8]
 80105bc:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d103      	bne.n	80105ce <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	2200      	movs	r2, #0
 80105ca:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80105d4:	2bff      	cmp	r3, #255	@ 0xff
 80105d6:	d007      	beq.n	80105e8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80105de:	3301      	adds	r3, #1
 80105e0:	b2da      	uxtb	r2, r3
 80105e2:	687b      	ldr	r3, [r7, #4]
 80105e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2200      	movs	r2, #0
 80105ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80105ee:	2300      	movs	r3, #0
}
 80105f0:	4618      	mov	r0, r3
 80105f2:	3714      	adds	r7, #20
 80105f4:	46bd      	mov	sp, r7
 80105f6:	bd90      	pop	{r4, r7, pc}
 80105f8:	080161f8 	.word	0x080161f8
 80105fc:	08016898 	.word	0x08016898
 8010600:	0801624c 	.word	0x0801624c

08010604 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	b082      	sub	sp, #8
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d106      	bne.n	8010620 <tcp_rexmit_fast+0x1c>
 8010612:	4b2a      	ldr	r3, [pc, #168]	@ (80106bc <tcp_rexmit_fast+0xb8>)
 8010614:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8010618:	4929      	ldr	r1, [pc, #164]	@ (80106c0 <tcp_rexmit_fast+0xbc>)
 801061a:	482a      	ldr	r0, [pc, #168]	@ (80106c4 <tcp_rexmit_fast+0xc0>)
 801061c:	f003 fb7e 	bl	8013d1c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010624:	2b00      	cmp	r3, #0
 8010626:	d044      	beq.n	80106b2 <tcp_rexmit_fast+0xae>
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	8b5b      	ldrh	r3, [r3, #26]
 801062c:	f003 0304 	and.w	r3, r3, #4
 8010630:	2b00      	cmp	r3, #0
 8010632:	d13e      	bne.n	80106b2 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010634:	6878      	ldr	r0, [r7, #4]
 8010636:	f7ff ff79 	bl	801052c <tcp_rexmit>
 801063a:	4603      	mov	r3, r0
 801063c:	2b00      	cmp	r3, #0
 801063e:	d138      	bne.n	80106b2 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801064c:	4293      	cmp	r3, r2
 801064e:	bf28      	it	cs
 8010650:	4613      	movcs	r3, r2
 8010652:	b29b      	uxth	r3, r3
 8010654:	0fda      	lsrs	r2, r3, #31
 8010656:	4413      	add	r3, r2
 8010658:	105b      	asrs	r3, r3, #1
 801065a:	b29a      	uxth	r2, r3
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8010668:	461a      	mov	r2, r3
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801066e:	005b      	lsls	r3, r3, #1
 8010670:	429a      	cmp	r2, r3
 8010672:	d206      	bcs.n	8010682 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8010678:	005b      	lsls	r3, r3, #1
 801067a:	b29a      	uxth	r2, r3
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010682:	687b      	ldr	r3, [r7, #4]
 8010684:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801068c:	4619      	mov	r1, r3
 801068e:	0049      	lsls	r1, r1, #1
 8010690:	440b      	add	r3, r1
 8010692:	b29b      	uxth	r3, r3
 8010694:	4413      	add	r3, r2
 8010696:	b29a      	uxth	r2, r3
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	8b5b      	ldrh	r3, [r3, #26]
 80106a2:	f043 0304 	orr.w	r3, r3, #4
 80106a6:	b29a      	uxth	r2, r3
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	2200      	movs	r2, #0
 80106b0:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 80106b2:	bf00      	nop
 80106b4:	3708      	adds	r7, #8
 80106b6:	46bd      	mov	sp, r7
 80106b8:	bd80      	pop	{r7, pc}
 80106ba:	bf00      	nop
 80106bc:	080161f8 	.word	0x080161f8
 80106c0:	080168b0 	.word	0x080168b0
 80106c4:	0801624c 	.word	0x0801624c

080106c8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b086      	sub	sp, #24
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	60f8      	str	r0, [r7, #12]
 80106d0:	607b      	str	r3, [r7, #4]
 80106d2:	460b      	mov	r3, r1
 80106d4:	817b      	strh	r3, [r7, #10]
 80106d6:	4613      	mov	r3, r2
 80106d8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80106da:	897a      	ldrh	r2, [r7, #10]
 80106dc:	893b      	ldrh	r3, [r7, #8]
 80106de:	4413      	add	r3, r2
 80106e0:	b29b      	uxth	r3, r3
 80106e2:	3314      	adds	r3, #20
 80106e4:	b29b      	uxth	r3, r3
 80106e6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80106ea:	4619      	mov	r1, r3
 80106ec:	2022      	movs	r0, #34	@ 0x22
 80106ee:	f7fa fc1b 	bl	800af28 <pbuf_alloc>
 80106f2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80106f4:	697b      	ldr	r3, [r7, #20]
 80106f6:	2b00      	cmp	r3, #0
 80106f8:	d04d      	beq.n	8010796 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80106fa:	897b      	ldrh	r3, [r7, #10]
 80106fc:	3313      	adds	r3, #19
 80106fe:	697a      	ldr	r2, [r7, #20]
 8010700:	8952      	ldrh	r2, [r2, #10]
 8010702:	4293      	cmp	r3, r2
 8010704:	db06      	blt.n	8010714 <tcp_output_alloc_header_common+0x4c>
 8010706:	4b26      	ldr	r3, [pc, #152]	@ (80107a0 <tcp_output_alloc_header_common+0xd8>)
 8010708:	f240 7223 	movw	r2, #1827	@ 0x723
 801070c:	4925      	ldr	r1, [pc, #148]	@ (80107a4 <tcp_output_alloc_header_common+0xdc>)
 801070e:	4826      	ldr	r0, [pc, #152]	@ (80107a8 <tcp_output_alloc_header_common+0xe0>)
 8010710:	f003 fb04 	bl	8013d1c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010714:	697b      	ldr	r3, [r7, #20]
 8010716:	685b      	ldr	r3, [r3, #4]
 8010718:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801071a:	8c3b      	ldrh	r3, [r7, #32]
 801071c:	4618      	mov	r0, r3
 801071e:	f7f9 fb89 	bl	8009e34 <lwip_htons>
 8010722:	4603      	mov	r3, r0
 8010724:	461a      	mov	r2, r3
 8010726:	693b      	ldr	r3, [r7, #16]
 8010728:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801072a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801072c:	4618      	mov	r0, r3
 801072e:	f7f9 fb81 	bl	8009e34 <lwip_htons>
 8010732:	4603      	mov	r3, r0
 8010734:	461a      	mov	r2, r3
 8010736:	693b      	ldr	r3, [r7, #16]
 8010738:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801073a:	693b      	ldr	r3, [r7, #16]
 801073c:	687a      	ldr	r2, [r7, #4]
 801073e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010740:	68f8      	ldr	r0, [r7, #12]
 8010742:	f7f9 fb8d 	bl	8009e60 <lwip_htonl>
 8010746:	4602      	mov	r2, r0
 8010748:	693b      	ldr	r3, [r7, #16]
 801074a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801074c:	897b      	ldrh	r3, [r7, #10]
 801074e:	089b      	lsrs	r3, r3, #2
 8010750:	b29b      	uxth	r3, r3
 8010752:	3305      	adds	r3, #5
 8010754:	b29b      	uxth	r3, r3
 8010756:	031b      	lsls	r3, r3, #12
 8010758:	b29a      	uxth	r2, r3
 801075a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801075e:	b29b      	uxth	r3, r3
 8010760:	4313      	orrs	r3, r2
 8010762:	b29b      	uxth	r3, r3
 8010764:	4618      	mov	r0, r3
 8010766:	f7f9 fb65 	bl	8009e34 <lwip_htons>
 801076a:	4603      	mov	r3, r0
 801076c:	461a      	mov	r2, r3
 801076e:	693b      	ldr	r3, [r7, #16]
 8010770:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010772:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010774:	4618      	mov	r0, r3
 8010776:	f7f9 fb5d 	bl	8009e34 <lwip_htons>
 801077a:	4603      	mov	r3, r0
 801077c:	461a      	mov	r2, r3
 801077e:	693b      	ldr	r3, [r7, #16]
 8010780:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010782:	693b      	ldr	r3, [r7, #16]
 8010784:	2200      	movs	r2, #0
 8010786:	741a      	strb	r2, [r3, #16]
 8010788:	2200      	movs	r2, #0
 801078a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801078c:	693b      	ldr	r3, [r7, #16]
 801078e:	2200      	movs	r2, #0
 8010790:	749a      	strb	r2, [r3, #18]
 8010792:	2200      	movs	r2, #0
 8010794:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010796:	697b      	ldr	r3, [r7, #20]
}
 8010798:	4618      	mov	r0, r3
 801079a:	3718      	adds	r7, #24
 801079c:	46bd      	mov	sp, r7
 801079e:	bd80      	pop	{r7, pc}
 80107a0:	080161f8 	.word	0x080161f8
 80107a4:	080168d0 	.word	0x080168d0
 80107a8:	0801624c 	.word	0x0801624c

080107ac <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80107ac:	b5b0      	push	{r4, r5, r7, lr}
 80107ae:	b08a      	sub	sp, #40	@ 0x28
 80107b0:	af04      	add	r7, sp, #16
 80107b2:	60f8      	str	r0, [r7, #12]
 80107b4:	607b      	str	r3, [r7, #4]
 80107b6:	460b      	mov	r3, r1
 80107b8:	817b      	strh	r3, [r7, #10]
 80107ba:	4613      	mov	r3, r2
 80107bc:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d106      	bne.n	80107d2 <tcp_output_alloc_header+0x26>
 80107c4:	4b15      	ldr	r3, [pc, #84]	@ (801081c <tcp_output_alloc_header+0x70>)
 80107c6:	f240 7242 	movw	r2, #1858	@ 0x742
 80107ca:	4915      	ldr	r1, [pc, #84]	@ (8010820 <tcp_output_alloc_header+0x74>)
 80107cc:	4815      	ldr	r0, [pc, #84]	@ (8010824 <tcp_output_alloc_header+0x78>)
 80107ce:	f003 faa5 	bl	8013d1c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	8adb      	ldrh	r3, [r3, #22]
 80107da:	68fa      	ldr	r2, [r7, #12]
 80107dc:	8b12      	ldrh	r2, [r2, #24]
 80107de:	68f9      	ldr	r1, [r7, #12]
 80107e0:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80107e2:	893d      	ldrh	r5, [r7, #8]
 80107e4:	897c      	ldrh	r4, [r7, #10]
 80107e6:	9103      	str	r1, [sp, #12]
 80107e8:	2110      	movs	r1, #16
 80107ea:	9102      	str	r1, [sp, #8]
 80107ec:	9201      	str	r2, [sp, #4]
 80107ee:	9300      	str	r3, [sp, #0]
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	462a      	mov	r2, r5
 80107f4:	4621      	mov	r1, r4
 80107f6:	f7ff ff67 	bl	80106c8 <tcp_output_alloc_header_common>
 80107fa:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80107fc:	697b      	ldr	r3, [r7, #20]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d006      	beq.n	8010810 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010802:	68fb      	ldr	r3, [r7, #12]
 8010804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010806:	68fa      	ldr	r2, [r7, #12]
 8010808:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801080a:	441a      	add	r2, r3
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8010810:	697b      	ldr	r3, [r7, #20]
}
 8010812:	4618      	mov	r0, r3
 8010814:	3718      	adds	r7, #24
 8010816:	46bd      	mov	sp, r7
 8010818:	bdb0      	pop	{r4, r5, r7, pc}
 801081a:	bf00      	nop
 801081c:	080161f8 	.word	0x080161f8
 8010820:	08016900 	.word	0x08016900
 8010824:	0801624c 	.word	0x0801624c

08010828 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010828:	b580      	push	{r7, lr}
 801082a:	b088      	sub	sp, #32
 801082c:	af00      	add	r7, sp, #0
 801082e:	60f8      	str	r0, [r7, #12]
 8010830:	60b9      	str	r1, [r7, #8]
 8010832:	4611      	mov	r1, r2
 8010834:	461a      	mov	r2, r3
 8010836:	460b      	mov	r3, r1
 8010838:	71fb      	strb	r3, [r7, #7]
 801083a:	4613      	mov	r3, r2
 801083c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801083e:	2300      	movs	r3, #0
 8010840:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010842:	68bb      	ldr	r3, [r7, #8]
 8010844:	2b00      	cmp	r3, #0
 8010846:	d106      	bne.n	8010856 <tcp_output_fill_options+0x2e>
 8010848:	4b12      	ldr	r3, [pc, #72]	@ (8010894 <tcp_output_fill_options+0x6c>)
 801084a:	f240 7256 	movw	r2, #1878	@ 0x756
 801084e:	4912      	ldr	r1, [pc, #72]	@ (8010898 <tcp_output_fill_options+0x70>)
 8010850:	4812      	ldr	r0, [pc, #72]	@ (801089c <tcp_output_fill_options+0x74>)
 8010852:	f003 fa63 	bl	8013d1c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	685b      	ldr	r3, [r3, #4]
 801085a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801085c:	69bb      	ldr	r3, [r7, #24]
 801085e:	3314      	adds	r3, #20
 8010860:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010862:	8bfb      	ldrh	r3, [r7, #30]
 8010864:	009b      	lsls	r3, r3, #2
 8010866:	461a      	mov	r2, r3
 8010868:	79fb      	ldrb	r3, [r7, #7]
 801086a:	009b      	lsls	r3, r3, #2
 801086c:	f003 0304 	and.w	r3, r3, #4
 8010870:	4413      	add	r3, r2
 8010872:	3314      	adds	r3, #20
 8010874:	69ba      	ldr	r2, [r7, #24]
 8010876:	4413      	add	r3, r2
 8010878:	697a      	ldr	r2, [r7, #20]
 801087a:	429a      	cmp	r2, r3
 801087c:	d006      	beq.n	801088c <tcp_output_fill_options+0x64>
 801087e:	4b05      	ldr	r3, [pc, #20]	@ (8010894 <tcp_output_fill_options+0x6c>)
 8010880:	f240 7275 	movw	r2, #1909	@ 0x775
 8010884:	4906      	ldr	r1, [pc, #24]	@ (80108a0 <tcp_output_fill_options+0x78>)
 8010886:	4805      	ldr	r0, [pc, #20]	@ (801089c <tcp_output_fill_options+0x74>)
 8010888:	f003 fa48 	bl	8013d1c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801088c:	bf00      	nop
 801088e:	3720      	adds	r7, #32
 8010890:	46bd      	mov	sp, r7
 8010892:	bd80      	pop	{r7, pc}
 8010894:	080161f8 	.word	0x080161f8
 8010898:	08016928 	.word	0x08016928
 801089c:	0801624c 	.word	0x0801624c
 80108a0:	08016820 	.word	0x08016820

080108a4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b08a      	sub	sp, #40	@ 0x28
 80108a8:	af04      	add	r7, sp, #16
 80108aa:	60f8      	str	r0, [r7, #12]
 80108ac:	60b9      	str	r1, [r7, #8]
 80108ae:	607a      	str	r2, [r7, #4]
 80108b0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80108b2:	68bb      	ldr	r3, [r7, #8]
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d106      	bne.n	80108c6 <tcp_output_control_segment+0x22>
 80108b8:	4b1c      	ldr	r3, [pc, #112]	@ (801092c <tcp_output_control_segment+0x88>)
 80108ba:	f240 7287 	movw	r2, #1927	@ 0x787
 80108be:	491c      	ldr	r1, [pc, #112]	@ (8010930 <tcp_output_control_segment+0x8c>)
 80108c0:	481c      	ldr	r0, [pc, #112]	@ (8010934 <tcp_output_control_segment+0x90>)
 80108c2:	f003 fa2b 	bl	8013d1c <iprintf>

  netif = tcp_route(pcb, src, dst);
 80108c6:	683a      	ldr	r2, [r7, #0]
 80108c8:	6879      	ldr	r1, [r7, #4]
 80108ca:	68f8      	ldr	r0, [r7, #12]
 80108cc:	f7fe ff42 	bl	800f754 <tcp_route>
 80108d0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80108d2:	693b      	ldr	r3, [r7, #16]
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d102      	bne.n	80108de <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80108d8:	23fc      	movs	r3, #252	@ 0xfc
 80108da:	75fb      	strb	r3, [r7, #23]
 80108dc:	e01c      	b.n	8010918 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d006      	beq.n	80108f2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80108e4:	68fb      	ldr	r3, [r7, #12]
 80108e6:	7adb      	ldrb	r3, [r3, #11]
 80108e8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	7a9b      	ldrb	r3, [r3, #10]
 80108ee:	757b      	strb	r3, [r7, #21]
 80108f0:	e003      	b.n	80108fa <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80108f2:	23ff      	movs	r3, #255	@ 0xff
 80108f4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80108f6:	2300      	movs	r3, #0
 80108f8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80108fa:	7dba      	ldrb	r2, [r7, #22]
 80108fc:	693b      	ldr	r3, [r7, #16]
 80108fe:	9302      	str	r3, [sp, #8]
 8010900:	2306      	movs	r3, #6
 8010902:	9301      	str	r3, [sp, #4]
 8010904:	7d7b      	ldrb	r3, [r7, #21]
 8010906:	9300      	str	r3, [sp, #0]
 8010908:	4613      	mov	r3, r2
 801090a:	683a      	ldr	r2, [r7, #0]
 801090c:	6879      	ldr	r1, [r7, #4]
 801090e:	68b8      	ldr	r0, [r7, #8]
 8010910:	f002 f8d6 	bl	8012ac0 <ip4_output_if>
 8010914:	4603      	mov	r3, r0
 8010916:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010918:	68b8      	ldr	r0, [r7, #8]
 801091a:	f7fa fde9 	bl	800b4f0 <pbuf_free>
  return err;
 801091e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010922:	4618      	mov	r0, r3
 8010924:	3718      	adds	r7, #24
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}
 801092a:	bf00      	nop
 801092c:	080161f8 	.word	0x080161f8
 8010930:	08016950 	.word	0x08016950
 8010934:	0801624c 	.word	0x0801624c

08010938 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010938:	b590      	push	{r4, r7, lr}
 801093a:	b08b      	sub	sp, #44	@ 0x2c
 801093c:	af04      	add	r7, sp, #16
 801093e:	60f8      	str	r0, [r7, #12]
 8010940:	60b9      	str	r1, [r7, #8]
 8010942:	607a      	str	r2, [r7, #4]
 8010944:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010946:	683b      	ldr	r3, [r7, #0]
 8010948:	2b00      	cmp	r3, #0
 801094a:	d106      	bne.n	801095a <tcp_rst+0x22>
 801094c:	4b1f      	ldr	r3, [pc, #124]	@ (80109cc <tcp_rst+0x94>)
 801094e:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8010952:	491f      	ldr	r1, [pc, #124]	@ (80109d0 <tcp_rst+0x98>)
 8010954:	481f      	ldr	r0, [pc, #124]	@ (80109d4 <tcp_rst+0x9c>)
 8010956:	f003 f9e1 	bl	8013d1c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801095a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801095c:	2b00      	cmp	r3, #0
 801095e:	d106      	bne.n	801096e <tcp_rst+0x36>
 8010960:	4b1a      	ldr	r3, [pc, #104]	@ (80109cc <tcp_rst+0x94>)
 8010962:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8010966:	491c      	ldr	r1, [pc, #112]	@ (80109d8 <tcp_rst+0xa0>)
 8010968:	481a      	ldr	r0, [pc, #104]	@ (80109d4 <tcp_rst+0x9c>)
 801096a:	f003 f9d7 	bl	8013d1c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801096e:	2300      	movs	r3, #0
 8010970:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010972:	f246 0308 	movw	r3, #24584	@ 0x6008
 8010976:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8010978:	7dfb      	ldrb	r3, [r7, #23]
 801097a:	b29c      	uxth	r4, r3
 801097c:	68b8      	ldr	r0, [r7, #8]
 801097e:	f7f9 fa6f 	bl	8009e60 <lwip_htonl>
 8010982:	4602      	mov	r2, r0
 8010984:	8abb      	ldrh	r3, [r7, #20]
 8010986:	9303      	str	r3, [sp, #12]
 8010988:	2314      	movs	r3, #20
 801098a:	9302      	str	r3, [sp, #8]
 801098c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 801098e:	9301      	str	r3, [sp, #4]
 8010990:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8010992:	9300      	str	r3, [sp, #0]
 8010994:	4613      	mov	r3, r2
 8010996:	2200      	movs	r2, #0
 8010998:	4621      	mov	r1, r4
 801099a:	6878      	ldr	r0, [r7, #4]
 801099c:	f7ff fe94 	bl	80106c8 <tcp_output_alloc_header_common>
 80109a0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80109a2:	693b      	ldr	r3, [r7, #16]
 80109a4:	2b00      	cmp	r3, #0
 80109a6:	d00c      	beq.n	80109c2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80109a8:	7dfb      	ldrb	r3, [r7, #23]
 80109aa:	2200      	movs	r2, #0
 80109ac:	6939      	ldr	r1, [r7, #16]
 80109ae:	68f8      	ldr	r0, [r7, #12]
 80109b0:	f7ff ff3a 	bl	8010828 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80109b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80109b6:	683a      	ldr	r2, [r7, #0]
 80109b8:	6939      	ldr	r1, [r7, #16]
 80109ba:	68f8      	ldr	r0, [r7, #12]
 80109bc:	f7ff ff72 	bl	80108a4 <tcp_output_control_segment>
 80109c0:	e000      	b.n	80109c4 <tcp_rst+0x8c>
    return;
 80109c2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80109c4:	371c      	adds	r7, #28
 80109c6:	46bd      	mov	sp, r7
 80109c8:	bd90      	pop	{r4, r7, pc}
 80109ca:	bf00      	nop
 80109cc:	080161f8 	.word	0x080161f8
 80109d0:	0801697c 	.word	0x0801697c
 80109d4:	0801624c 	.word	0x0801624c
 80109d8:	08016998 	.word	0x08016998

080109dc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80109dc:	b590      	push	{r4, r7, lr}
 80109de:	b087      	sub	sp, #28
 80109e0:	af00      	add	r7, sp, #0
 80109e2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80109e4:	2300      	movs	r3, #0
 80109e6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80109e8:	2300      	movs	r3, #0
 80109ea:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d106      	bne.n	8010a00 <tcp_send_empty_ack+0x24>
 80109f2:	4b28      	ldr	r3, [pc, #160]	@ (8010a94 <tcp_send_empty_ack+0xb8>)
 80109f4:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80109f8:	4927      	ldr	r1, [pc, #156]	@ (8010a98 <tcp_send_empty_ack+0xbc>)
 80109fa:	4828      	ldr	r0, [pc, #160]	@ (8010a9c <tcp_send_empty_ack+0xc0>)
 80109fc:	f003 f98e 	bl	8013d1c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010a00:	7dfb      	ldrb	r3, [r7, #23]
 8010a02:	009b      	lsls	r3, r3, #2
 8010a04:	b2db      	uxtb	r3, r3
 8010a06:	f003 0304 	and.w	r3, r3, #4
 8010a0a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010a0c:	7d7b      	ldrb	r3, [r7, #21]
 8010a0e:	b29c      	uxth	r4, r3
 8010a10:	687b      	ldr	r3, [r7, #4]
 8010a12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010a14:	4618      	mov	r0, r3
 8010a16:	f7f9 fa23 	bl	8009e60 <lwip_htonl>
 8010a1a:	4603      	mov	r3, r0
 8010a1c:	2200      	movs	r2, #0
 8010a1e:	4621      	mov	r1, r4
 8010a20:	6878      	ldr	r0, [r7, #4]
 8010a22:	f7ff fec3 	bl	80107ac <tcp_output_alloc_header>
 8010a26:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010a28:	693b      	ldr	r3, [r7, #16]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d109      	bne.n	8010a42 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	8b5b      	ldrh	r3, [r3, #26]
 8010a32:	f043 0303 	orr.w	r3, r3, #3
 8010a36:	b29a      	uxth	r2, r3
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010a3c:	f06f 0301 	mvn.w	r3, #1
 8010a40:	e023      	b.n	8010a8a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010a42:	7dbb      	ldrb	r3, [r7, #22]
 8010a44:	7dfa      	ldrb	r2, [r7, #23]
 8010a46:	6939      	ldr	r1, [r7, #16]
 8010a48:	6878      	ldr	r0, [r7, #4]
 8010a4a:	f7ff feed 	bl	8010828 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010a4e:	687a      	ldr	r2, [r7, #4]
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	3304      	adds	r3, #4
 8010a54:	6939      	ldr	r1, [r7, #16]
 8010a56:	6878      	ldr	r0, [r7, #4]
 8010a58:	f7ff ff24 	bl	80108a4 <tcp_output_control_segment>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010a60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d007      	beq.n	8010a78 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	8b5b      	ldrh	r3, [r3, #26]
 8010a6c:	f043 0303 	orr.w	r3, r3, #3
 8010a70:	b29a      	uxth	r2, r3
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	835a      	strh	r2, [r3, #26]
 8010a76:	e006      	b.n	8010a86 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	8b5b      	ldrh	r3, [r3, #26]
 8010a7c:	f023 0303 	bic.w	r3, r3, #3
 8010a80:	b29a      	uxth	r2, r3
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8010a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	371c      	adds	r7, #28
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd90      	pop	{r4, r7, pc}
 8010a92:	bf00      	nop
 8010a94:	080161f8 	.word	0x080161f8
 8010a98:	080169b4 	.word	0x080169b4
 8010a9c:	0801624c 	.word	0x0801624c

08010aa0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010aa0:	b590      	push	{r4, r7, lr}
 8010aa2:	b087      	sub	sp, #28
 8010aa4:	af00      	add	r7, sp, #0
 8010aa6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010aa8:	2300      	movs	r3, #0
 8010aaa:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	2b00      	cmp	r3, #0
 8010ab0:	d106      	bne.n	8010ac0 <tcp_keepalive+0x20>
 8010ab2:	4b18      	ldr	r3, [pc, #96]	@ (8010b14 <tcp_keepalive+0x74>)
 8010ab4:	f640 0224 	movw	r2, #2084	@ 0x824
 8010ab8:	4917      	ldr	r1, [pc, #92]	@ (8010b18 <tcp_keepalive+0x78>)
 8010aba:	4818      	ldr	r0, [pc, #96]	@ (8010b1c <tcp_keepalive+0x7c>)
 8010abc:	f003 f92e 	bl	8013d1c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010ac0:	7dfb      	ldrb	r3, [r7, #23]
 8010ac2:	b29c      	uxth	r4, r3
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010ac8:	3b01      	subs	r3, #1
 8010aca:	4618      	mov	r0, r3
 8010acc:	f7f9 f9c8 	bl	8009e60 <lwip_htonl>
 8010ad0:	4603      	mov	r3, r0
 8010ad2:	2200      	movs	r2, #0
 8010ad4:	4621      	mov	r1, r4
 8010ad6:	6878      	ldr	r0, [r7, #4]
 8010ad8:	f7ff fe68 	bl	80107ac <tcp_output_alloc_header>
 8010adc:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010ade:	693b      	ldr	r3, [r7, #16]
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d102      	bne.n	8010aea <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010ae4:	f04f 33ff 	mov.w	r3, #4294967295
 8010ae8:	e010      	b.n	8010b0c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010aea:	7dfb      	ldrb	r3, [r7, #23]
 8010aec:	2200      	movs	r2, #0
 8010aee:	6939      	ldr	r1, [r7, #16]
 8010af0:	6878      	ldr	r0, [r7, #4]
 8010af2:	f7ff fe99 	bl	8010828 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010af6:	687a      	ldr	r2, [r7, #4]
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	3304      	adds	r3, #4
 8010afc:	6939      	ldr	r1, [r7, #16]
 8010afe:	6878      	ldr	r0, [r7, #4]
 8010b00:	f7ff fed0 	bl	80108a4 <tcp_output_control_segment>
 8010b04:	4603      	mov	r3, r0
 8010b06:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010b08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	371c      	adds	r7, #28
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd90      	pop	{r4, r7, pc}
 8010b14:	080161f8 	.word	0x080161f8
 8010b18:	080169d4 	.word	0x080169d4
 8010b1c:	0801624c 	.word	0x0801624c

08010b20 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010b20:	b590      	push	{r4, r7, lr}
 8010b22:	b08b      	sub	sp, #44	@ 0x2c
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010b28:	2300      	movs	r3, #0
 8010b2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d106      	bne.n	8010b42 <tcp_zero_window_probe+0x22>
 8010b34:	4b4c      	ldr	r3, [pc, #304]	@ (8010c68 <tcp_zero_window_probe+0x148>)
 8010b36:	f640 024f 	movw	r2, #2127	@ 0x84f
 8010b3a:	494c      	ldr	r1, [pc, #304]	@ (8010c6c <tcp_zero_window_probe+0x14c>)
 8010b3c:	484c      	ldr	r0, [pc, #304]	@ (8010c70 <tcp_zero_window_probe+0x150>)
 8010b3e:	f003 f8ed 	bl	8013d1c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010b42:	687b      	ldr	r3, [r7, #4]
 8010b44:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010b46:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8010b48:	6a3b      	ldr	r3, [r7, #32]
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d101      	bne.n	8010b52 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8010b4e:	2300      	movs	r3, #0
 8010b50:	e086      	b.n	8010c60 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8010b58:	2bff      	cmp	r3, #255	@ 0xff
 8010b5a:	d007      	beq.n	8010b6c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8010b62:	3301      	adds	r3, #1
 8010b64:	b2da      	uxtb	r2, r3
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010b6c:	6a3b      	ldr	r3, [r7, #32]
 8010b6e:	68db      	ldr	r3, [r3, #12]
 8010b70:	899b      	ldrh	r3, [r3, #12]
 8010b72:	b29b      	uxth	r3, r3
 8010b74:	4618      	mov	r0, r3
 8010b76:	f7f9 f95d 	bl	8009e34 <lwip_htons>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	b2db      	uxtb	r3, r3
 8010b7e:	f003 0301 	and.w	r3, r3, #1
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d005      	beq.n	8010b92 <tcp_zero_window_probe+0x72>
 8010b86:	6a3b      	ldr	r3, [r7, #32]
 8010b88:	891b      	ldrh	r3, [r3, #8]
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	d101      	bne.n	8010b92 <tcp_zero_window_probe+0x72>
 8010b8e:	2301      	movs	r3, #1
 8010b90:	e000      	b.n	8010b94 <tcp_zero_window_probe+0x74>
 8010b92:	2300      	movs	r3, #0
 8010b94:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8010b96:	7ffb      	ldrb	r3, [r7, #31]
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	bf0c      	ite	eq
 8010b9c:	2301      	moveq	r3, #1
 8010b9e:	2300      	movne	r3, #0
 8010ba0:	b2db      	uxtb	r3, r3
 8010ba2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010ba4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010ba8:	b299      	uxth	r1, r3
 8010baa:	6a3b      	ldr	r3, [r7, #32]
 8010bac:	68db      	ldr	r3, [r3, #12]
 8010bae:	685b      	ldr	r3, [r3, #4]
 8010bb0:	8bba      	ldrh	r2, [r7, #28]
 8010bb2:	6878      	ldr	r0, [r7, #4]
 8010bb4:	f7ff fdfa 	bl	80107ac <tcp_output_alloc_header>
 8010bb8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8010bba:	69bb      	ldr	r3, [r7, #24]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d102      	bne.n	8010bc6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8010bc4:	e04c      	b.n	8010c60 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010bc6:	69bb      	ldr	r3, [r7, #24]
 8010bc8:	685b      	ldr	r3, [r3, #4]
 8010bca:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010bcc:	7ffb      	ldrb	r3, [r7, #31]
 8010bce:	2b00      	cmp	r3, #0
 8010bd0:	d011      	beq.n	8010bf6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010bd2:	697b      	ldr	r3, [r7, #20]
 8010bd4:	899b      	ldrh	r3, [r3, #12]
 8010bd6:	b29b      	uxth	r3, r3
 8010bd8:	b21b      	sxth	r3, r3
 8010bda:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010bde:	b21c      	sxth	r4, r3
 8010be0:	2011      	movs	r0, #17
 8010be2:	f7f9 f927 	bl	8009e34 <lwip_htons>
 8010be6:	4603      	mov	r3, r0
 8010be8:	b21b      	sxth	r3, r3
 8010bea:	4323      	orrs	r3, r4
 8010bec:	b21b      	sxth	r3, r3
 8010bee:	b29a      	uxth	r2, r3
 8010bf0:	697b      	ldr	r3, [r7, #20]
 8010bf2:	819a      	strh	r2, [r3, #12]
 8010bf4:	e010      	b.n	8010c18 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8010bf6:	69bb      	ldr	r3, [r7, #24]
 8010bf8:	685b      	ldr	r3, [r3, #4]
 8010bfa:	3314      	adds	r3, #20
 8010bfc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010bfe:	6a3b      	ldr	r3, [r7, #32]
 8010c00:	6858      	ldr	r0, [r3, #4]
 8010c02:	6a3b      	ldr	r3, [r7, #32]
 8010c04:	685b      	ldr	r3, [r3, #4]
 8010c06:	891a      	ldrh	r2, [r3, #8]
 8010c08:	6a3b      	ldr	r3, [r7, #32]
 8010c0a:	891b      	ldrh	r3, [r3, #8]
 8010c0c:	1ad3      	subs	r3, r2, r3
 8010c0e:	b29b      	uxth	r3, r3
 8010c10:	2201      	movs	r2, #1
 8010c12:	6939      	ldr	r1, [r7, #16]
 8010c14:	f7fa fe56 	bl	800b8c4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010c18:	6a3b      	ldr	r3, [r7, #32]
 8010c1a:	68db      	ldr	r3, [r3, #12]
 8010c1c:	685b      	ldr	r3, [r3, #4]
 8010c1e:	4618      	mov	r0, r3
 8010c20:	f7f9 f91e 	bl	8009e60 <lwip_htonl>
 8010c24:	4603      	mov	r3, r0
 8010c26:	3301      	adds	r3, #1
 8010c28:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	1ad3      	subs	r3, r2, r3
 8010c32:	2b00      	cmp	r3, #0
 8010c34:	da02      	bge.n	8010c3c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	68fa      	ldr	r2, [r7, #12]
 8010c3a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010c40:	2200      	movs	r2, #0
 8010c42:	69b9      	ldr	r1, [r7, #24]
 8010c44:	6878      	ldr	r0, [r7, #4]
 8010c46:	f7ff fdef 	bl	8010828 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010c4a:	687a      	ldr	r2, [r7, #4]
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	3304      	adds	r3, #4
 8010c50:	69b9      	ldr	r1, [r7, #24]
 8010c52:	6878      	ldr	r0, [r7, #4]
 8010c54:	f7ff fe26 	bl	80108a4 <tcp_output_control_segment>
 8010c58:	4603      	mov	r3, r0
 8010c5a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010c5c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010c60:	4618      	mov	r0, r3
 8010c62:	372c      	adds	r7, #44	@ 0x2c
 8010c64:	46bd      	mov	sp, r7
 8010c66:	bd90      	pop	{r4, r7, pc}
 8010c68:	080161f8 	.word	0x080161f8
 8010c6c:	080169f0 	.word	0x080169f0
 8010c70:	0801624c 	.word	0x0801624c

08010c74 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b082      	sub	sp, #8
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010c7c:	f7fa ff10 	bl	800baa0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010c80:	4b0a      	ldr	r3, [pc, #40]	@ (8010cac <tcpip_tcp_timer+0x38>)
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d103      	bne.n	8010c90 <tcpip_tcp_timer+0x1c>
 8010c88:	4b09      	ldr	r3, [pc, #36]	@ (8010cb0 <tcpip_tcp_timer+0x3c>)
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d005      	beq.n	8010c9c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010c90:	2200      	movs	r2, #0
 8010c92:	4908      	ldr	r1, [pc, #32]	@ (8010cb4 <tcpip_tcp_timer+0x40>)
 8010c94:	20fa      	movs	r0, #250	@ 0xfa
 8010c96:	f000 f8f3 	bl	8010e80 <sys_timeout>
 8010c9a:	e003      	b.n	8010ca4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010c9c:	4b06      	ldr	r3, [pc, #24]	@ (8010cb8 <tcpip_tcp_timer+0x44>)
 8010c9e:	2200      	movs	r2, #0
 8010ca0:	601a      	str	r2, [r3, #0]
  }
}
 8010ca2:	bf00      	nop
 8010ca4:	bf00      	nop
 8010ca6:	3708      	adds	r7, #8
 8010ca8:	46bd      	mov	sp, r7
 8010caa:	bd80      	pop	{r7, pc}
 8010cac:	2000b1b0 	.word	0x2000b1b0
 8010cb0:	2000b1b4 	.word	0x2000b1b4
 8010cb4:	08010c75 	.word	0x08010c75
 8010cb8:	2000b1fc 	.word	0x2000b1fc

08010cbc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8010cec <tcp_timer_needed+0x30>)
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d10f      	bne.n	8010ce8 <tcp_timer_needed+0x2c>
 8010cc8:	4b09      	ldr	r3, [pc, #36]	@ (8010cf0 <tcp_timer_needed+0x34>)
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d103      	bne.n	8010cd8 <tcp_timer_needed+0x1c>
 8010cd0:	4b08      	ldr	r3, [pc, #32]	@ (8010cf4 <tcp_timer_needed+0x38>)
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d007      	beq.n	8010ce8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8010cd8:	4b04      	ldr	r3, [pc, #16]	@ (8010cec <tcp_timer_needed+0x30>)
 8010cda:	2201      	movs	r2, #1
 8010cdc:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010cde:	2200      	movs	r2, #0
 8010ce0:	4905      	ldr	r1, [pc, #20]	@ (8010cf8 <tcp_timer_needed+0x3c>)
 8010ce2:	20fa      	movs	r0, #250	@ 0xfa
 8010ce4:	f000 f8cc 	bl	8010e80 <sys_timeout>
  }
}
 8010ce8:	bf00      	nop
 8010cea:	bd80      	pop	{r7, pc}
 8010cec:	2000b1fc 	.word	0x2000b1fc
 8010cf0:	2000b1b0 	.word	0x2000b1b0
 8010cf4:	2000b1b4 	.word	0x2000b1b4
 8010cf8:	08010c75 	.word	0x08010c75

08010cfc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b086      	sub	sp, #24
 8010d00:	af00      	add	r7, sp, #0
 8010d02:	60f8      	str	r0, [r7, #12]
 8010d04:	60b9      	str	r1, [r7, #8]
 8010d06:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010d08:	2006      	movs	r0, #6
 8010d0a:	f7f9 fd0b 	bl	800a724 <memp_malloc>
 8010d0e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010d10:	693b      	ldr	r3, [r7, #16]
 8010d12:	2b00      	cmp	r3, #0
 8010d14:	d109      	bne.n	8010d2a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010d16:	693b      	ldr	r3, [r7, #16]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d151      	bne.n	8010dc0 <sys_timeout_abs+0xc4>
 8010d1c:	4b2a      	ldr	r3, [pc, #168]	@ (8010dc8 <sys_timeout_abs+0xcc>)
 8010d1e:	22be      	movs	r2, #190	@ 0xbe
 8010d20:	492a      	ldr	r1, [pc, #168]	@ (8010dcc <sys_timeout_abs+0xd0>)
 8010d22:	482b      	ldr	r0, [pc, #172]	@ (8010dd0 <sys_timeout_abs+0xd4>)
 8010d24:	f002 fffa 	bl	8013d1c <iprintf>
    return;
 8010d28:	e04a      	b.n	8010dc0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8010d2a:	693b      	ldr	r3, [r7, #16]
 8010d2c:	2200      	movs	r2, #0
 8010d2e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8010d30:	693b      	ldr	r3, [r7, #16]
 8010d32:	68ba      	ldr	r2, [r7, #8]
 8010d34:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8010d36:	693b      	ldr	r3, [r7, #16]
 8010d38:	687a      	ldr	r2, [r7, #4]
 8010d3a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010d3c:	693b      	ldr	r3, [r7, #16]
 8010d3e:	68fa      	ldr	r2, [r7, #12]
 8010d40:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010d42:	4b24      	ldr	r3, [pc, #144]	@ (8010dd4 <sys_timeout_abs+0xd8>)
 8010d44:	681b      	ldr	r3, [r3, #0]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d103      	bne.n	8010d52 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8010d4a:	4a22      	ldr	r2, [pc, #136]	@ (8010dd4 <sys_timeout_abs+0xd8>)
 8010d4c:	693b      	ldr	r3, [r7, #16]
 8010d4e:	6013      	str	r3, [r2, #0]
    return;
 8010d50:	e037      	b.n	8010dc2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8010d52:	693b      	ldr	r3, [r7, #16]
 8010d54:	685a      	ldr	r2, [r3, #4]
 8010d56:	4b1f      	ldr	r3, [pc, #124]	@ (8010dd4 <sys_timeout_abs+0xd8>)
 8010d58:	681b      	ldr	r3, [r3, #0]
 8010d5a:	685b      	ldr	r3, [r3, #4]
 8010d5c:	1ad3      	subs	r3, r2, r3
 8010d5e:	0fdb      	lsrs	r3, r3, #31
 8010d60:	f003 0301 	and.w	r3, r3, #1
 8010d64:	b2db      	uxtb	r3, r3
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d007      	beq.n	8010d7a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8010d6a:	4b1a      	ldr	r3, [pc, #104]	@ (8010dd4 <sys_timeout_abs+0xd8>)
 8010d6c:	681a      	ldr	r2, [r3, #0]
 8010d6e:	693b      	ldr	r3, [r7, #16]
 8010d70:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8010d72:	4a18      	ldr	r2, [pc, #96]	@ (8010dd4 <sys_timeout_abs+0xd8>)
 8010d74:	693b      	ldr	r3, [r7, #16]
 8010d76:	6013      	str	r3, [r2, #0]
 8010d78:	e023      	b.n	8010dc2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8010d7a:	4b16      	ldr	r3, [pc, #88]	@ (8010dd4 <sys_timeout_abs+0xd8>)
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	617b      	str	r3, [r7, #20]
 8010d80:	e01a      	b.n	8010db8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010d82:	697b      	ldr	r3, [r7, #20]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d00b      	beq.n	8010da2 <sys_timeout_abs+0xa6>
 8010d8a:	693b      	ldr	r3, [r7, #16]
 8010d8c:	685a      	ldr	r2, [r3, #4]
 8010d8e:	697b      	ldr	r3, [r7, #20]
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	685b      	ldr	r3, [r3, #4]
 8010d94:	1ad3      	subs	r3, r2, r3
 8010d96:	0fdb      	lsrs	r3, r3, #31
 8010d98:	f003 0301 	and.w	r3, r3, #1
 8010d9c:	b2db      	uxtb	r3, r3
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d007      	beq.n	8010db2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8010da2:	697b      	ldr	r3, [r7, #20]
 8010da4:	681a      	ldr	r2, [r3, #0]
 8010da6:	693b      	ldr	r3, [r7, #16]
 8010da8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010daa:	697b      	ldr	r3, [r7, #20]
 8010dac:	693a      	ldr	r2, [r7, #16]
 8010dae:	601a      	str	r2, [r3, #0]
        break;
 8010db0:	e007      	b.n	8010dc2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010db2:	697b      	ldr	r3, [r7, #20]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	617b      	str	r3, [r7, #20]
 8010db8:	697b      	ldr	r3, [r7, #20]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d1e1      	bne.n	8010d82 <sys_timeout_abs+0x86>
 8010dbe:	e000      	b.n	8010dc2 <sys_timeout_abs+0xc6>
    return;
 8010dc0:	bf00      	nop
      }
    }
  }
}
 8010dc2:	3718      	adds	r7, #24
 8010dc4:	46bd      	mov	sp, r7
 8010dc6:	bd80      	pop	{r7, pc}
 8010dc8:	08016a14 	.word	0x08016a14
 8010dcc:	08016a48 	.word	0x08016a48
 8010dd0:	08016a88 	.word	0x08016a88
 8010dd4:	2000b1f4 	.word	0x2000b1f4

08010dd8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8010dd8:	b580      	push	{r7, lr}
 8010dda:	b086      	sub	sp, #24
 8010ddc:	af00      	add	r7, sp, #0
 8010dde:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010de4:	697b      	ldr	r3, [r7, #20]
 8010de6:	685b      	ldr	r3, [r3, #4]
 8010de8:	4798      	blx	r3

  now = sys_now();
 8010dea:	f7f8 fe2b 	bl	8009a44 <sys_now>
 8010dee:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010df0:	697b      	ldr	r3, [r7, #20]
 8010df2:	681a      	ldr	r2, [r3, #0]
 8010df4:	4b0f      	ldr	r3, [pc, #60]	@ (8010e34 <lwip_cyclic_timer+0x5c>)
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	4413      	add	r3, r2
 8010dfa:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010dfc:	68fa      	ldr	r2, [r7, #12]
 8010dfe:	693b      	ldr	r3, [r7, #16]
 8010e00:	1ad3      	subs	r3, r2, r3
 8010e02:	0fdb      	lsrs	r3, r3, #31
 8010e04:	f003 0301 	and.w	r3, r3, #1
 8010e08:	b2db      	uxtb	r3, r3
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d009      	beq.n	8010e22 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010e0e:	697b      	ldr	r3, [r7, #20]
 8010e10:	681a      	ldr	r2, [r3, #0]
 8010e12:	693b      	ldr	r3, [r7, #16]
 8010e14:	4413      	add	r3, r2
 8010e16:	687a      	ldr	r2, [r7, #4]
 8010e18:	4907      	ldr	r1, [pc, #28]	@ (8010e38 <lwip_cyclic_timer+0x60>)
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f7ff ff6e 	bl	8010cfc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010e20:	e004      	b.n	8010e2c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010e22:	687a      	ldr	r2, [r7, #4]
 8010e24:	4904      	ldr	r1, [pc, #16]	@ (8010e38 <lwip_cyclic_timer+0x60>)
 8010e26:	68f8      	ldr	r0, [r7, #12]
 8010e28:	f7ff ff68 	bl	8010cfc <sys_timeout_abs>
}
 8010e2c:	bf00      	nop
 8010e2e:	3718      	adds	r7, #24
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}
 8010e34:	2000b1f8 	.word	0x2000b1f8
 8010e38:	08010dd9 	.word	0x08010dd9

08010e3c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b082      	sub	sp, #8
 8010e40:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010e42:	2301      	movs	r3, #1
 8010e44:	607b      	str	r3, [r7, #4]
 8010e46:	e00e      	b.n	8010e66 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010e48:	4a0b      	ldr	r2, [pc, #44]	@ (8010e78 <sys_timeouts_init+0x3c>)
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	00db      	lsls	r3, r3, #3
 8010e54:	4a08      	ldr	r2, [pc, #32]	@ (8010e78 <sys_timeouts_init+0x3c>)
 8010e56:	4413      	add	r3, r2
 8010e58:	461a      	mov	r2, r3
 8010e5a:	4908      	ldr	r1, [pc, #32]	@ (8010e7c <sys_timeouts_init+0x40>)
 8010e5c:	f000 f810 	bl	8010e80 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	3301      	adds	r3, #1
 8010e64:	607b      	str	r3, [r7, #4]
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	2b02      	cmp	r3, #2
 8010e6a:	d9ed      	bls.n	8010e48 <sys_timeouts_init+0xc>
  }
}
 8010e6c:	bf00      	nop
 8010e6e:	bf00      	nop
 8010e70:	3708      	adds	r7, #8
 8010e72:	46bd      	mov	sp, r7
 8010e74:	bd80      	pop	{r7, pc}
 8010e76:	bf00      	nop
 8010e78:	08017608 	.word	0x08017608
 8010e7c:	08010dd9 	.word	0x08010dd9

08010e80 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b086      	sub	sp, #24
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	60f8      	str	r0, [r7, #12]
 8010e88:	60b9      	str	r1, [r7, #8]
 8010e8a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010e92:	d306      	bcc.n	8010ea2 <sys_timeout+0x22>
 8010e94:	4b0a      	ldr	r3, [pc, #40]	@ (8010ec0 <sys_timeout+0x40>)
 8010e96:	f240 1229 	movw	r2, #297	@ 0x129
 8010e9a:	490a      	ldr	r1, [pc, #40]	@ (8010ec4 <sys_timeout+0x44>)
 8010e9c:	480a      	ldr	r0, [pc, #40]	@ (8010ec8 <sys_timeout+0x48>)
 8010e9e:	f002 ff3d 	bl	8013d1c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010ea2:	f7f8 fdcf 	bl	8009a44 <sys_now>
 8010ea6:	4602      	mov	r2, r0
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	4413      	add	r3, r2
 8010eac:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010eae:	687a      	ldr	r2, [r7, #4]
 8010eb0:	68b9      	ldr	r1, [r7, #8]
 8010eb2:	6978      	ldr	r0, [r7, #20]
 8010eb4:	f7ff ff22 	bl	8010cfc <sys_timeout_abs>
#endif
}
 8010eb8:	bf00      	nop
 8010eba:	3718      	adds	r7, #24
 8010ebc:	46bd      	mov	sp, r7
 8010ebe:	bd80      	pop	{r7, pc}
 8010ec0:	08016a14 	.word	0x08016a14
 8010ec4:	08016ab0 	.word	0x08016ab0
 8010ec8:	08016a88 	.word	0x08016a88

08010ecc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b084      	sub	sp, #16
 8010ed0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8010ed2:	f7f8 fdb7 	bl	8009a44 <sys_now>
 8010ed6:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8010ed8:	4b1a      	ldr	r3, [pc, #104]	@ (8010f44 <sys_check_timeouts+0x78>)
 8010eda:	781b      	ldrb	r3, [r3, #0]
 8010edc:	b2db      	uxtb	r3, r3
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d001      	beq.n	8010ee6 <sys_check_timeouts+0x1a>
 8010ee2:	f7f9 ffcb 	bl	800ae7c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8010ee6:	4b18      	ldr	r3, [pc, #96]	@ (8010f48 <sys_check_timeouts+0x7c>)
 8010ee8:	681b      	ldr	r3, [r3, #0]
 8010eea:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8010eec:	68bb      	ldr	r3, [r7, #8]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d022      	beq.n	8010f38 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8010ef2:	68bb      	ldr	r3, [r7, #8]
 8010ef4:	685b      	ldr	r3, [r3, #4]
 8010ef6:	68fa      	ldr	r2, [r7, #12]
 8010ef8:	1ad3      	subs	r3, r2, r3
 8010efa:	0fdb      	lsrs	r3, r3, #31
 8010efc:	f003 0301 	and.w	r3, r3, #1
 8010f00:	b2db      	uxtb	r3, r3
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d11a      	bne.n	8010f3c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	681b      	ldr	r3, [r3, #0]
 8010f0a:	4a0f      	ldr	r2, [pc, #60]	@ (8010f48 <sys_check_timeouts+0x7c>)
 8010f0c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8010f0e:	68bb      	ldr	r3, [r7, #8]
 8010f10:	689b      	ldr	r3, [r3, #8]
 8010f12:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8010f14:	68bb      	ldr	r3, [r7, #8]
 8010f16:	68db      	ldr	r3, [r3, #12]
 8010f18:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8010f1a:	68bb      	ldr	r3, [r7, #8]
 8010f1c:	685b      	ldr	r3, [r3, #4]
 8010f1e:	4a0b      	ldr	r2, [pc, #44]	@ (8010f4c <sys_check_timeouts+0x80>)
 8010f20:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010f22:	68b9      	ldr	r1, [r7, #8]
 8010f24:	2006      	movs	r0, #6
 8010f26:	f7f9 fc6d 	bl	800a804 <memp_free>
    if (handler != NULL) {
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d0d3      	beq.n	8010ed8 <sys_check_timeouts+0xc>
      handler(arg);
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	6838      	ldr	r0, [r7, #0]
 8010f34:	4798      	blx	r3
  do {
 8010f36:	e7cf      	b.n	8010ed8 <sys_check_timeouts+0xc>
      return;
 8010f38:	bf00      	nop
 8010f3a:	e000      	b.n	8010f3e <sys_check_timeouts+0x72>
      return;
 8010f3c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8010f3e:	3710      	adds	r7, #16
 8010f40:	46bd      	mov	sp, r7
 8010f42:	bd80      	pop	{r7, pc}
 8010f44:	2000b1a1 	.word	0x2000b1a1
 8010f48:	2000b1f4 	.word	0x2000b1f4
 8010f4c:	2000b1f8 	.word	0x2000b1f8

08010f50 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010f54:	f002 fde2 	bl	8013b1c <rand>
 8010f58:	4603      	mov	r3, r0
 8010f5a:	b29b      	uxth	r3, r3
 8010f5c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010f60:	b29b      	uxth	r3, r3
 8010f62:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8010f66:	b29a      	uxth	r2, r3
 8010f68:	4b01      	ldr	r3, [pc, #4]	@ (8010f70 <udp_init+0x20>)
 8010f6a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010f6c:	bf00      	nop
 8010f6e:	bd80      	pop	{r7, pc}
 8010f70:	20000088 	.word	0x20000088

08010f74 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8010f74:	b480      	push	{r7}
 8010f76:	b083      	sub	sp, #12
 8010f78:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8010f7a:	2300      	movs	r3, #0
 8010f7c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8010f7e:	4b17      	ldr	r3, [pc, #92]	@ (8010fdc <udp_new_port+0x68>)
 8010f80:	881b      	ldrh	r3, [r3, #0]
 8010f82:	1c5a      	adds	r2, r3, #1
 8010f84:	b291      	uxth	r1, r2
 8010f86:	4a15      	ldr	r2, [pc, #84]	@ (8010fdc <udp_new_port+0x68>)
 8010f88:	8011      	strh	r1, [r2, #0]
 8010f8a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8010f8e:	4293      	cmp	r3, r2
 8010f90:	d103      	bne.n	8010f9a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8010f92:	4b12      	ldr	r3, [pc, #72]	@ (8010fdc <udp_new_port+0x68>)
 8010f94:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8010f98:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f9a:	4b11      	ldr	r3, [pc, #68]	@ (8010fe0 <udp_new_port+0x6c>)
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	603b      	str	r3, [r7, #0]
 8010fa0:	e011      	b.n	8010fc6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8010fa2:	683b      	ldr	r3, [r7, #0]
 8010fa4:	8a5a      	ldrh	r2, [r3, #18]
 8010fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8010fdc <udp_new_port+0x68>)
 8010fa8:	881b      	ldrh	r3, [r3, #0]
 8010faa:	429a      	cmp	r2, r3
 8010fac:	d108      	bne.n	8010fc0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8010fae:	88fb      	ldrh	r3, [r7, #6]
 8010fb0:	3301      	adds	r3, #1
 8010fb2:	80fb      	strh	r3, [r7, #6]
 8010fb4:	88fb      	ldrh	r3, [r7, #6]
 8010fb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010fba:	d3e0      	bcc.n	8010f7e <udp_new_port+0xa>
        return 0;
 8010fbc:	2300      	movs	r3, #0
 8010fbe:	e007      	b.n	8010fd0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010fc0:	683b      	ldr	r3, [r7, #0]
 8010fc2:	68db      	ldr	r3, [r3, #12]
 8010fc4:	603b      	str	r3, [r7, #0]
 8010fc6:	683b      	ldr	r3, [r7, #0]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d1ea      	bne.n	8010fa2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8010fcc:	4b03      	ldr	r3, [pc, #12]	@ (8010fdc <udp_new_port+0x68>)
 8010fce:	881b      	ldrh	r3, [r3, #0]
}
 8010fd0:	4618      	mov	r0, r3
 8010fd2:	370c      	adds	r7, #12
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fda:	4770      	bx	lr
 8010fdc:	20000088 	.word	0x20000088
 8010fe0:	2000b200 	.word	0x2000b200

08010fe4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010fe4:	b580      	push	{r7, lr}
 8010fe6:	b084      	sub	sp, #16
 8010fe8:	af00      	add	r7, sp, #0
 8010fea:	60f8      	str	r0, [r7, #12]
 8010fec:	60b9      	str	r1, [r7, #8]
 8010fee:	4613      	mov	r3, r2
 8010ff0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	2b00      	cmp	r3, #0
 8010ff6:	d105      	bne.n	8011004 <udp_input_local_match+0x20>
 8010ff8:	4b27      	ldr	r3, [pc, #156]	@ (8011098 <udp_input_local_match+0xb4>)
 8010ffa:	2287      	movs	r2, #135	@ 0x87
 8010ffc:	4927      	ldr	r1, [pc, #156]	@ (801109c <udp_input_local_match+0xb8>)
 8010ffe:	4828      	ldr	r0, [pc, #160]	@ (80110a0 <udp_input_local_match+0xbc>)
 8011000:	f002 fe8c 	bl	8013d1c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d105      	bne.n	8011016 <udp_input_local_match+0x32>
 801100a:	4b23      	ldr	r3, [pc, #140]	@ (8011098 <udp_input_local_match+0xb4>)
 801100c:	2288      	movs	r2, #136	@ 0x88
 801100e:	4925      	ldr	r1, [pc, #148]	@ (80110a4 <udp_input_local_match+0xc0>)
 8011010:	4823      	ldr	r0, [pc, #140]	@ (80110a0 <udp_input_local_match+0xbc>)
 8011012:	f002 fe83 	bl	8013d1c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011016:	68fb      	ldr	r3, [r7, #12]
 8011018:	7a1b      	ldrb	r3, [r3, #8]
 801101a:	2b00      	cmp	r3, #0
 801101c:	d00b      	beq.n	8011036 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	7a1a      	ldrb	r2, [r3, #8]
 8011022:	4b21      	ldr	r3, [pc, #132]	@ (80110a8 <udp_input_local_match+0xc4>)
 8011024:	685b      	ldr	r3, [r3, #4]
 8011026:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801102a:	3301      	adds	r3, #1
 801102c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801102e:	429a      	cmp	r2, r3
 8011030:	d001      	beq.n	8011036 <udp_input_local_match+0x52>
    return 0;
 8011032:	2300      	movs	r3, #0
 8011034:	e02b      	b.n	801108e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011036:	79fb      	ldrb	r3, [r7, #7]
 8011038:	2b00      	cmp	r3, #0
 801103a:	d018      	beq.n	801106e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d013      	beq.n	801106a <udp_input_local_match+0x86>
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	681b      	ldr	r3, [r3, #0]
 8011046:	2b00      	cmp	r3, #0
 8011048:	d00f      	beq.n	801106a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801104a:	4b17      	ldr	r3, [pc, #92]	@ (80110a8 <udp_input_local_match+0xc4>)
 801104c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801104e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011052:	d00a      	beq.n	801106a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011054:	68fb      	ldr	r3, [r7, #12]
 8011056:	681a      	ldr	r2, [r3, #0]
 8011058:	4b13      	ldr	r3, [pc, #76]	@ (80110a8 <udp_input_local_match+0xc4>)
 801105a:	695b      	ldr	r3, [r3, #20]
 801105c:	405a      	eors	r2, r3
 801105e:	68bb      	ldr	r3, [r7, #8]
 8011060:	3308      	adds	r3, #8
 8011062:	681b      	ldr	r3, [r3, #0]
 8011064:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011066:	2b00      	cmp	r3, #0
 8011068:	d110      	bne.n	801108c <udp_input_local_match+0xa8>
          return 1;
 801106a:	2301      	movs	r3, #1
 801106c:	e00f      	b.n	801108e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801106e:	68fb      	ldr	r3, [r7, #12]
 8011070:	2b00      	cmp	r3, #0
 8011072:	d009      	beq.n	8011088 <udp_input_local_match+0xa4>
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	681b      	ldr	r3, [r3, #0]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d005      	beq.n	8011088 <udp_input_local_match+0xa4>
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	681a      	ldr	r2, [r3, #0]
 8011080:	4b09      	ldr	r3, [pc, #36]	@ (80110a8 <udp_input_local_match+0xc4>)
 8011082:	695b      	ldr	r3, [r3, #20]
 8011084:	429a      	cmp	r2, r3
 8011086:	d101      	bne.n	801108c <udp_input_local_match+0xa8>
        return 1;
 8011088:	2301      	movs	r3, #1
 801108a:	e000      	b.n	801108e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801108c:	2300      	movs	r3, #0
}
 801108e:	4618      	mov	r0, r3
 8011090:	3710      	adds	r7, #16
 8011092:	46bd      	mov	sp, r7
 8011094:	bd80      	pop	{r7, pc}
 8011096:	bf00      	nop
 8011098:	08016afc 	.word	0x08016afc
 801109c:	08016b2c 	.word	0x08016b2c
 80110a0:	08016b50 	.word	0x08016b50
 80110a4:	08016b78 	.word	0x08016b78
 80110a8:	20005a74 	.word	0x20005a74

080110ac <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80110ac:	b590      	push	{r4, r7, lr}
 80110ae:	b08d      	sub	sp, #52	@ 0x34
 80110b0:	af02      	add	r7, sp, #8
 80110b2:	6078      	str	r0, [r7, #4]
 80110b4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80110b6:	2300      	movs	r3, #0
 80110b8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d105      	bne.n	80110cc <udp_input+0x20>
 80110c0:	4b7c      	ldr	r3, [pc, #496]	@ (80112b4 <udp_input+0x208>)
 80110c2:	22cf      	movs	r2, #207	@ 0xcf
 80110c4:	497c      	ldr	r1, [pc, #496]	@ (80112b8 <udp_input+0x20c>)
 80110c6:	487d      	ldr	r0, [pc, #500]	@ (80112bc <udp_input+0x210>)
 80110c8:	f002 fe28 	bl	8013d1c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80110cc:	683b      	ldr	r3, [r7, #0]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d105      	bne.n	80110de <udp_input+0x32>
 80110d2:	4b78      	ldr	r3, [pc, #480]	@ (80112b4 <udp_input+0x208>)
 80110d4:	22d0      	movs	r2, #208	@ 0xd0
 80110d6:	497a      	ldr	r1, [pc, #488]	@ (80112c0 <udp_input+0x214>)
 80110d8:	4878      	ldr	r0, [pc, #480]	@ (80112bc <udp_input+0x210>)
 80110da:	f002 fe1f 	bl	8013d1c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80110de:	687b      	ldr	r3, [r7, #4]
 80110e0:	895b      	ldrh	r3, [r3, #10]
 80110e2:	2b07      	cmp	r3, #7
 80110e4:	d803      	bhi.n	80110ee <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80110e6:	6878      	ldr	r0, [r7, #4]
 80110e8:	f7fa fa02 	bl	800b4f0 <pbuf_free>
    goto end;
 80110ec:	e0de      	b.n	80112ac <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	685b      	ldr	r3, [r3, #4]
 80110f2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80110f4:	4b73      	ldr	r3, [pc, #460]	@ (80112c4 <udp_input+0x218>)
 80110f6:	695b      	ldr	r3, [r3, #20]
 80110f8:	4a72      	ldr	r2, [pc, #456]	@ (80112c4 <udp_input+0x218>)
 80110fa:	6812      	ldr	r2, [r2, #0]
 80110fc:	4611      	mov	r1, r2
 80110fe:	4618      	mov	r0, r3
 8011100:	f001 fdb6 	bl	8012c70 <ip4_addr_isbroadcast_u32>
 8011104:	4603      	mov	r3, r0
 8011106:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011108:	697b      	ldr	r3, [r7, #20]
 801110a:	881b      	ldrh	r3, [r3, #0]
 801110c:	b29b      	uxth	r3, r3
 801110e:	4618      	mov	r0, r3
 8011110:	f7f8 fe90 	bl	8009e34 <lwip_htons>
 8011114:	4603      	mov	r3, r0
 8011116:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011118:	697b      	ldr	r3, [r7, #20]
 801111a:	885b      	ldrh	r3, [r3, #2]
 801111c:	b29b      	uxth	r3, r3
 801111e:	4618      	mov	r0, r3
 8011120:	f7f8 fe88 	bl	8009e34 <lwip_htons>
 8011124:	4603      	mov	r3, r0
 8011126:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011128:	2300      	movs	r3, #0
 801112a:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 801112c:	2300      	movs	r3, #0
 801112e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011130:	2300      	movs	r3, #0
 8011132:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011134:	4b64      	ldr	r3, [pc, #400]	@ (80112c8 <udp_input+0x21c>)
 8011136:	681b      	ldr	r3, [r3, #0]
 8011138:	627b      	str	r3, [r7, #36]	@ 0x24
 801113a:	e054      	b.n	80111e6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801113c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801113e:	8a5b      	ldrh	r3, [r3, #18]
 8011140:	89fa      	ldrh	r2, [r7, #14]
 8011142:	429a      	cmp	r2, r3
 8011144:	d14a      	bne.n	80111dc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011146:	7cfb      	ldrb	r3, [r7, #19]
 8011148:	461a      	mov	r2, r3
 801114a:	6839      	ldr	r1, [r7, #0]
 801114c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801114e:	f7ff ff49 	bl	8010fe4 <udp_input_local_match>
 8011152:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011154:	2b00      	cmp	r3, #0
 8011156:	d041      	beq.n	80111dc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801115a:	7c1b      	ldrb	r3, [r3, #16]
 801115c:	f003 0304 	and.w	r3, r3, #4
 8011160:	2b00      	cmp	r3, #0
 8011162:	d11d      	bne.n	80111a0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011164:	69fb      	ldr	r3, [r7, #28]
 8011166:	2b00      	cmp	r3, #0
 8011168:	d102      	bne.n	8011170 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801116a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801116c:	61fb      	str	r3, [r7, #28]
 801116e:	e017      	b.n	80111a0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011170:	7cfb      	ldrb	r3, [r7, #19]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d014      	beq.n	80111a0 <udp_input+0xf4>
 8011176:	4b53      	ldr	r3, [pc, #332]	@ (80112c4 <udp_input+0x218>)
 8011178:	695b      	ldr	r3, [r3, #20]
 801117a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801117e:	d10f      	bne.n	80111a0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011180:	69fb      	ldr	r3, [r7, #28]
 8011182:	681a      	ldr	r2, [r3, #0]
 8011184:	683b      	ldr	r3, [r7, #0]
 8011186:	3304      	adds	r3, #4
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	429a      	cmp	r2, r3
 801118c:	d008      	beq.n	80111a0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801118e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011190:	681a      	ldr	r2, [r3, #0]
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	3304      	adds	r3, #4
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	429a      	cmp	r2, r3
 801119a:	d101      	bne.n	80111a0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801119c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801119e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80111a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111a2:	8a9b      	ldrh	r3, [r3, #20]
 80111a4:	8a3a      	ldrh	r2, [r7, #16]
 80111a6:	429a      	cmp	r2, r3
 80111a8:	d118      	bne.n	80111dc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80111aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111ac:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d005      	beq.n	80111be <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80111b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111b4:	685a      	ldr	r2, [r3, #4]
 80111b6:	4b43      	ldr	r3, [pc, #268]	@ (80112c4 <udp_input+0x218>)
 80111b8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80111ba:	429a      	cmp	r2, r3
 80111bc:	d10e      	bne.n	80111dc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80111be:	6a3b      	ldr	r3, [r7, #32]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d014      	beq.n	80111ee <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80111c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111c6:	68da      	ldr	r2, [r3, #12]
 80111c8:	6a3b      	ldr	r3, [r7, #32]
 80111ca:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80111cc:	4b3e      	ldr	r3, [pc, #248]	@ (80112c8 <udp_input+0x21c>)
 80111ce:	681a      	ldr	r2, [r3, #0]
 80111d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111d2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80111d4:	4a3c      	ldr	r2, [pc, #240]	@ (80112c8 <udp_input+0x21c>)
 80111d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111d8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80111da:	e008      	b.n	80111ee <udp_input+0x142>
      }
    }

    prev = pcb;
 80111dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111de:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80111e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111e2:	68db      	ldr	r3, [r3, #12]
 80111e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80111e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d1a7      	bne.n	801113c <udp_input+0x90>
 80111ec:	e000      	b.n	80111f0 <udp_input+0x144>
        break;
 80111ee:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80111f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d101      	bne.n	80111fa <udp_input+0x14e>
    pcb = uncon_pcb;
 80111f6:	69fb      	ldr	r3, [r7, #28]
 80111f8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80111fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d002      	beq.n	8011206 <udp_input+0x15a>
    for_us = 1;
 8011200:	2301      	movs	r3, #1
 8011202:	76fb      	strb	r3, [r7, #27]
 8011204:	e00a      	b.n	801121c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011206:	683b      	ldr	r3, [r7, #0]
 8011208:	3304      	adds	r3, #4
 801120a:	681a      	ldr	r2, [r3, #0]
 801120c:	4b2d      	ldr	r3, [pc, #180]	@ (80112c4 <udp_input+0x218>)
 801120e:	695b      	ldr	r3, [r3, #20]
 8011210:	429a      	cmp	r2, r3
 8011212:	bf0c      	ite	eq
 8011214:	2301      	moveq	r3, #1
 8011216:	2300      	movne	r3, #0
 8011218:	b2db      	uxtb	r3, r3
 801121a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801121c:	7efb      	ldrb	r3, [r7, #27]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d041      	beq.n	80112a6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011222:	2108      	movs	r1, #8
 8011224:	6878      	ldr	r0, [r7, #4]
 8011226:	f7fa f8dd 	bl	800b3e4 <pbuf_remove_header>
 801122a:	4603      	mov	r3, r0
 801122c:	2b00      	cmp	r3, #0
 801122e:	d00a      	beq.n	8011246 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011230:	4b20      	ldr	r3, [pc, #128]	@ (80112b4 <udp_input+0x208>)
 8011232:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8011236:	4925      	ldr	r1, [pc, #148]	@ (80112cc <udp_input+0x220>)
 8011238:	4820      	ldr	r0, [pc, #128]	@ (80112bc <udp_input+0x210>)
 801123a:	f002 fd6f 	bl	8013d1c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	f7fa f956 	bl	800b4f0 <pbuf_free>
      goto end;
 8011244:	e032      	b.n	80112ac <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011248:	2b00      	cmp	r3, #0
 801124a:	d012      	beq.n	8011272 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801124c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801124e:	699b      	ldr	r3, [r3, #24]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d00a      	beq.n	801126a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011256:	699c      	ldr	r4, [r3, #24]
 8011258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801125a:	69d8      	ldr	r0, [r3, #28]
 801125c:	8a3b      	ldrh	r3, [r7, #16]
 801125e:	9300      	str	r3, [sp, #0]
 8011260:	4b1b      	ldr	r3, [pc, #108]	@ (80112d0 <udp_input+0x224>)
 8011262:	687a      	ldr	r2, [r7, #4]
 8011264:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011266:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011268:	e021      	b.n	80112ae <udp_input+0x202>
        pbuf_free(p);
 801126a:	6878      	ldr	r0, [r7, #4]
 801126c:	f7fa f940 	bl	800b4f0 <pbuf_free>
        goto end;
 8011270:	e01c      	b.n	80112ac <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011272:	7cfb      	ldrb	r3, [r7, #19]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d112      	bne.n	801129e <udp_input+0x1f2>
 8011278:	4b12      	ldr	r3, [pc, #72]	@ (80112c4 <udp_input+0x218>)
 801127a:	695b      	ldr	r3, [r3, #20]
 801127c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011280:	2be0      	cmp	r3, #224	@ 0xe0
 8011282:	d00c      	beq.n	801129e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011284:	4b0f      	ldr	r3, [pc, #60]	@ (80112c4 <udp_input+0x218>)
 8011286:	899b      	ldrh	r3, [r3, #12]
 8011288:	3308      	adds	r3, #8
 801128a:	b29b      	uxth	r3, r3
 801128c:	b21b      	sxth	r3, r3
 801128e:	4619      	mov	r1, r3
 8011290:	6878      	ldr	r0, [r7, #4]
 8011292:	f7fa f91a 	bl	800b4ca <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011296:	2103      	movs	r1, #3
 8011298:	6878      	ldr	r0, [r7, #4]
 801129a:	f001 f9c9 	bl	8012630 <icmp_dest_unreach>
      pbuf_free(p);
 801129e:	6878      	ldr	r0, [r7, #4]
 80112a0:	f7fa f926 	bl	800b4f0 <pbuf_free>
  return;
 80112a4:	e003      	b.n	80112ae <udp_input+0x202>
    pbuf_free(p);
 80112a6:	6878      	ldr	r0, [r7, #4]
 80112a8:	f7fa f922 	bl	800b4f0 <pbuf_free>
  return;
 80112ac:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80112ae:	372c      	adds	r7, #44	@ 0x2c
 80112b0:	46bd      	mov	sp, r7
 80112b2:	bd90      	pop	{r4, r7, pc}
 80112b4:	08016afc 	.word	0x08016afc
 80112b8:	08016ba0 	.word	0x08016ba0
 80112bc:	08016b50 	.word	0x08016b50
 80112c0:	08016bb8 	.word	0x08016bb8
 80112c4:	20005a74 	.word	0x20005a74
 80112c8:	2000b200 	.word	0x2000b200
 80112cc:	08016bd4 	.word	0x08016bd4
 80112d0:	20005a84 	.word	0x20005a84

080112d4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80112d4:	b580      	push	{r7, lr}
 80112d6:	b086      	sub	sp, #24
 80112d8:	af00      	add	r7, sp, #0
 80112da:	60f8      	str	r0, [r7, #12]
 80112dc:	60b9      	str	r1, [r7, #8]
 80112de:	4613      	mov	r3, r2
 80112e0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80112e2:	68bb      	ldr	r3, [r7, #8]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d101      	bne.n	80112ec <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80112e8:	4b39      	ldr	r3, [pc, #228]	@ (80113d0 <udp_bind+0xfc>)
 80112ea:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d109      	bne.n	8011306 <udp_bind+0x32>
 80112f2:	4b38      	ldr	r3, [pc, #224]	@ (80113d4 <udp_bind+0x100>)
 80112f4:	f240 32b7 	movw	r2, #951	@ 0x3b7
 80112f8:	4937      	ldr	r1, [pc, #220]	@ (80113d8 <udp_bind+0x104>)
 80112fa:	4838      	ldr	r0, [pc, #224]	@ (80113dc <udp_bind+0x108>)
 80112fc:	f002 fd0e 	bl	8013d1c <iprintf>
 8011300:	f06f 030f 	mvn.w	r3, #15
 8011304:	e060      	b.n	80113c8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8011306:	2300      	movs	r3, #0
 8011308:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801130a:	4b35      	ldr	r3, [pc, #212]	@ (80113e0 <udp_bind+0x10c>)
 801130c:	681b      	ldr	r3, [r3, #0]
 801130e:	617b      	str	r3, [r7, #20]
 8011310:	e009      	b.n	8011326 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011312:	68fa      	ldr	r2, [r7, #12]
 8011314:	697b      	ldr	r3, [r7, #20]
 8011316:	429a      	cmp	r2, r3
 8011318:	d102      	bne.n	8011320 <udp_bind+0x4c>
      rebind = 1;
 801131a:	2301      	movs	r3, #1
 801131c:	74fb      	strb	r3, [r7, #19]
      break;
 801131e:	e005      	b.n	801132c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011320:	697b      	ldr	r3, [r7, #20]
 8011322:	68db      	ldr	r3, [r3, #12]
 8011324:	617b      	str	r3, [r7, #20]
 8011326:	697b      	ldr	r3, [r7, #20]
 8011328:	2b00      	cmp	r3, #0
 801132a:	d1f2      	bne.n	8011312 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801132c:	88fb      	ldrh	r3, [r7, #6]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d109      	bne.n	8011346 <udp_bind+0x72>
    port = udp_new_port();
 8011332:	f7ff fe1f 	bl	8010f74 <udp_new_port>
 8011336:	4603      	mov	r3, r0
 8011338:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801133a:	88fb      	ldrh	r3, [r7, #6]
 801133c:	2b00      	cmp	r3, #0
 801133e:	d12c      	bne.n	801139a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011340:	f06f 0307 	mvn.w	r3, #7
 8011344:	e040      	b.n	80113c8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011346:	4b26      	ldr	r3, [pc, #152]	@ (80113e0 <udp_bind+0x10c>)
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	617b      	str	r3, [r7, #20]
 801134c:	e022      	b.n	8011394 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801134e:	68fa      	ldr	r2, [r7, #12]
 8011350:	697b      	ldr	r3, [r7, #20]
 8011352:	429a      	cmp	r2, r3
 8011354:	d01b      	beq.n	801138e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8011356:	697b      	ldr	r3, [r7, #20]
 8011358:	8a5b      	ldrh	r3, [r3, #18]
 801135a:	88fa      	ldrh	r2, [r7, #6]
 801135c:	429a      	cmp	r2, r3
 801135e:	d116      	bne.n	801138e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011360:	697b      	ldr	r3, [r7, #20]
 8011362:	681a      	ldr	r2, [r3, #0]
 8011364:	68bb      	ldr	r3, [r7, #8]
 8011366:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011368:	429a      	cmp	r2, r3
 801136a:	d00d      	beq.n	8011388 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801136c:	68bb      	ldr	r3, [r7, #8]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d00a      	beq.n	8011388 <udp_bind+0xb4>
 8011372:	68bb      	ldr	r3, [r7, #8]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	2b00      	cmp	r3, #0
 8011378:	d006      	beq.n	8011388 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801137a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801137c:	2b00      	cmp	r3, #0
 801137e:	d003      	beq.n	8011388 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011380:	697b      	ldr	r3, [r7, #20]
 8011382:	681b      	ldr	r3, [r3, #0]
 8011384:	2b00      	cmp	r3, #0
 8011386:	d102      	bne.n	801138e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011388:	f06f 0307 	mvn.w	r3, #7
 801138c:	e01c      	b.n	80113c8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801138e:	697b      	ldr	r3, [r7, #20]
 8011390:	68db      	ldr	r3, [r3, #12]
 8011392:	617b      	str	r3, [r7, #20]
 8011394:	697b      	ldr	r3, [r7, #20]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d1d9      	bne.n	801134e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801139a:	68bb      	ldr	r3, [r7, #8]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d002      	beq.n	80113a6 <udp_bind+0xd2>
 80113a0:	68bb      	ldr	r3, [r7, #8]
 80113a2:	681b      	ldr	r3, [r3, #0]
 80113a4:	e000      	b.n	80113a8 <udp_bind+0xd4>
 80113a6:	2300      	movs	r3, #0
 80113a8:	68fa      	ldr	r2, [r7, #12]
 80113aa:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	88fa      	ldrh	r2, [r7, #6]
 80113b0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80113b2:	7cfb      	ldrb	r3, [r7, #19]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d106      	bne.n	80113c6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80113b8:	4b09      	ldr	r3, [pc, #36]	@ (80113e0 <udp_bind+0x10c>)
 80113ba:	681a      	ldr	r2, [r3, #0]
 80113bc:	68fb      	ldr	r3, [r7, #12]
 80113be:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80113c0:	4a07      	ldr	r2, [pc, #28]	@ (80113e0 <udp_bind+0x10c>)
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80113c6:	2300      	movs	r3, #0
}
 80113c8:	4618      	mov	r0, r3
 80113ca:	3718      	adds	r7, #24
 80113cc:	46bd      	mov	sp, r7
 80113ce:	bd80      	pop	{r7, pc}
 80113d0:	08017620 	.word	0x08017620
 80113d4:	08016afc 	.word	0x08016afc
 80113d8:	08016dc4 	.word	0x08016dc4
 80113dc:	08016b50 	.word	0x08016b50
 80113e0:	2000b200 	.word	0x2000b200

080113e4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b086      	sub	sp, #24
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	60f8      	str	r0, [r7, #12]
 80113ec:	60b9      	str	r1, [r7, #8]
 80113ee:	4613      	mov	r3, r2
 80113f0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d109      	bne.n	801140c <udp_connect+0x28>
 80113f8:	4b2c      	ldr	r3, [pc, #176]	@ (80114ac <udp_connect+0xc8>)
 80113fa:	f240 4235 	movw	r2, #1077	@ 0x435
 80113fe:	492c      	ldr	r1, [pc, #176]	@ (80114b0 <udp_connect+0xcc>)
 8011400:	482c      	ldr	r0, [pc, #176]	@ (80114b4 <udp_connect+0xd0>)
 8011402:	f002 fc8b 	bl	8013d1c <iprintf>
 8011406:	f06f 030f 	mvn.w	r3, #15
 801140a:	e04b      	b.n	80114a4 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 801140c:	68bb      	ldr	r3, [r7, #8]
 801140e:	2b00      	cmp	r3, #0
 8011410:	d109      	bne.n	8011426 <udp_connect+0x42>
 8011412:	4b26      	ldr	r3, [pc, #152]	@ (80114ac <udp_connect+0xc8>)
 8011414:	f240 4236 	movw	r2, #1078	@ 0x436
 8011418:	4927      	ldr	r1, [pc, #156]	@ (80114b8 <udp_connect+0xd4>)
 801141a:	4826      	ldr	r0, [pc, #152]	@ (80114b4 <udp_connect+0xd0>)
 801141c:	f002 fc7e 	bl	8013d1c <iprintf>
 8011420:	f06f 030f 	mvn.w	r3, #15
 8011424:	e03e      	b.n	80114a4 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8011426:	68fb      	ldr	r3, [r7, #12]
 8011428:	8a5b      	ldrh	r3, [r3, #18]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d10f      	bne.n	801144e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801142e:	68f9      	ldr	r1, [r7, #12]
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	8a5b      	ldrh	r3, [r3, #18]
 8011434:	461a      	mov	r2, r3
 8011436:	68f8      	ldr	r0, [r7, #12]
 8011438:	f7ff ff4c 	bl	80112d4 <udp_bind>
 801143c:	4603      	mov	r3, r0
 801143e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8011440:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011444:	2b00      	cmp	r3, #0
 8011446:	d002      	beq.n	801144e <udp_connect+0x6a>
      return err;
 8011448:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801144c:	e02a      	b.n	80114a4 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801144e:	68bb      	ldr	r3, [r7, #8]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d002      	beq.n	801145a <udp_connect+0x76>
 8011454:	68bb      	ldr	r3, [r7, #8]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	e000      	b.n	801145c <udp_connect+0x78>
 801145a:	2300      	movs	r3, #0
 801145c:	68fa      	ldr	r2, [r7, #12]
 801145e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	88fa      	ldrh	r2, [r7, #6]
 8011464:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	7c1b      	ldrb	r3, [r3, #16]
 801146a:	f043 0304 	orr.w	r3, r3, #4
 801146e:	b2da      	uxtb	r2, r3
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011474:	4b11      	ldr	r3, [pc, #68]	@ (80114bc <udp_connect+0xd8>)
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	617b      	str	r3, [r7, #20]
 801147a:	e008      	b.n	801148e <udp_connect+0xaa>
    if (pcb == ipcb) {
 801147c:	68fa      	ldr	r2, [r7, #12]
 801147e:	697b      	ldr	r3, [r7, #20]
 8011480:	429a      	cmp	r2, r3
 8011482:	d101      	bne.n	8011488 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8011484:	2300      	movs	r3, #0
 8011486:	e00d      	b.n	80114a4 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011488:	697b      	ldr	r3, [r7, #20]
 801148a:	68db      	ldr	r3, [r3, #12]
 801148c:	617b      	str	r3, [r7, #20]
 801148e:	697b      	ldr	r3, [r7, #20]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d1f3      	bne.n	801147c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8011494:	4b09      	ldr	r3, [pc, #36]	@ (80114bc <udp_connect+0xd8>)
 8011496:	681a      	ldr	r2, [r3, #0]
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801149c:	4a07      	ldr	r2, [pc, #28]	@ (80114bc <udp_connect+0xd8>)
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80114a2:	2300      	movs	r3, #0
}
 80114a4:	4618      	mov	r0, r3
 80114a6:	3718      	adds	r7, #24
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd80      	pop	{r7, pc}
 80114ac:	08016afc 	.word	0x08016afc
 80114b0:	08016ddc 	.word	0x08016ddc
 80114b4:	08016b50 	.word	0x08016b50
 80114b8:	08016df8 	.word	0x08016df8
 80114bc:	2000b200 	.word	0x2000b200

080114c0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80114c0:	b580      	push	{r7, lr}
 80114c2:	b084      	sub	sp, #16
 80114c4:	af00      	add	r7, sp, #0
 80114c6:	60f8      	str	r0, [r7, #12]
 80114c8:	60b9      	str	r1, [r7, #8]
 80114ca:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80114cc:	68fb      	ldr	r3, [r7, #12]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d107      	bne.n	80114e2 <udp_recv+0x22>
 80114d2:	4b08      	ldr	r3, [pc, #32]	@ (80114f4 <udp_recv+0x34>)
 80114d4:	f240 428a 	movw	r2, #1162	@ 0x48a
 80114d8:	4907      	ldr	r1, [pc, #28]	@ (80114f8 <udp_recv+0x38>)
 80114da:	4808      	ldr	r0, [pc, #32]	@ (80114fc <udp_recv+0x3c>)
 80114dc:	f002 fc1e 	bl	8013d1c <iprintf>
 80114e0:	e005      	b.n	80114ee <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	68ba      	ldr	r2, [r7, #8]
 80114e6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	687a      	ldr	r2, [r7, #4]
 80114ec:	61da      	str	r2, [r3, #28]
}
 80114ee:	3710      	adds	r7, #16
 80114f0:	46bd      	mov	sp, r7
 80114f2:	bd80      	pop	{r7, pc}
 80114f4:	08016afc 	.word	0x08016afc
 80114f8:	08016e30 	.word	0x08016e30
 80114fc:	08016b50 	.word	0x08016b50

08011500 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8011500:	b580      	push	{r7, lr}
 8011502:	b082      	sub	sp, #8
 8011504:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8011506:	2000      	movs	r0, #0
 8011508:	f7f9 f90c 	bl	800a724 <memp_malloc>
 801150c:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	2b00      	cmp	r3, #0
 8011512:	d007      	beq.n	8011524 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8011514:	2220      	movs	r2, #32
 8011516:	2100      	movs	r1, #0
 8011518:	6878      	ldr	r0, [r7, #4]
 801151a:	f002 fc64 	bl	8013de6 <memset>
    pcb->ttl = UDP_TTL;
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	22ff      	movs	r2, #255	@ 0xff
 8011522:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8011524:	687b      	ldr	r3, [r7, #4]
}
 8011526:	4618      	mov	r0, r3
 8011528:	3708      	adds	r7, #8
 801152a:	46bd      	mov	sp, r7
 801152c:	bd80      	pop	{r7, pc}
	...

08011530 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011530:	b480      	push	{r7}
 8011532:	b085      	sub	sp, #20
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
 8011538:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801153a:	687b      	ldr	r3, [r7, #4]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d01e      	beq.n	801157e <udp_netif_ip_addr_changed+0x4e>
 8011540:	687b      	ldr	r3, [r7, #4]
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	2b00      	cmp	r3, #0
 8011546:	d01a      	beq.n	801157e <udp_netif_ip_addr_changed+0x4e>
 8011548:	683b      	ldr	r3, [r7, #0]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d017      	beq.n	801157e <udp_netif_ip_addr_changed+0x4e>
 801154e:	683b      	ldr	r3, [r7, #0]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d013      	beq.n	801157e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011556:	4b0d      	ldr	r3, [pc, #52]	@ (801158c <udp_netif_ip_addr_changed+0x5c>)
 8011558:	681b      	ldr	r3, [r3, #0]
 801155a:	60fb      	str	r3, [r7, #12]
 801155c:	e00c      	b.n	8011578 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	681a      	ldr	r2, [r3, #0]
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	429a      	cmp	r2, r3
 8011568:	d103      	bne.n	8011572 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801156a:	683b      	ldr	r3, [r7, #0]
 801156c:	681a      	ldr	r2, [r3, #0]
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	68db      	ldr	r3, [r3, #12]
 8011576:	60fb      	str	r3, [r7, #12]
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d1ef      	bne.n	801155e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801157e:	bf00      	nop
 8011580:	3714      	adds	r7, #20
 8011582:	46bd      	mov	sp, r7
 8011584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011588:	4770      	bx	lr
 801158a:	bf00      	nop
 801158c:	2000b200 	.word	0x2000b200

08011590 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b082      	sub	sp, #8
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011598:	4915      	ldr	r1, [pc, #84]	@ (80115f0 <etharp_free_entry+0x60>)
 801159a:	687a      	ldr	r2, [r7, #4]
 801159c:	4613      	mov	r3, r2
 801159e:	005b      	lsls	r3, r3, #1
 80115a0:	4413      	add	r3, r2
 80115a2:	00db      	lsls	r3, r3, #3
 80115a4:	440b      	add	r3, r1
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d013      	beq.n	80115d4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80115ac:	4910      	ldr	r1, [pc, #64]	@ (80115f0 <etharp_free_entry+0x60>)
 80115ae:	687a      	ldr	r2, [r7, #4]
 80115b0:	4613      	mov	r3, r2
 80115b2:	005b      	lsls	r3, r3, #1
 80115b4:	4413      	add	r3, r2
 80115b6:	00db      	lsls	r3, r3, #3
 80115b8:	440b      	add	r3, r1
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	4618      	mov	r0, r3
 80115be:	f7f9 ff97 	bl	800b4f0 <pbuf_free>
    arp_table[i].q = NULL;
 80115c2:	490b      	ldr	r1, [pc, #44]	@ (80115f0 <etharp_free_entry+0x60>)
 80115c4:	687a      	ldr	r2, [r7, #4]
 80115c6:	4613      	mov	r3, r2
 80115c8:	005b      	lsls	r3, r3, #1
 80115ca:	4413      	add	r3, r2
 80115cc:	00db      	lsls	r3, r3, #3
 80115ce:	440b      	add	r3, r1
 80115d0:	2200      	movs	r2, #0
 80115d2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80115d4:	4906      	ldr	r1, [pc, #24]	@ (80115f0 <etharp_free_entry+0x60>)
 80115d6:	687a      	ldr	r2, [r7, #4]
 80115d8:	4613      	mov	r3, r2
 80115da:	005b      	lsls	r3, r3, #1
 80115dc:	4413      	add	r3, r2
 80115de:	00db      	lsls	r3, r3, #3
 80115e0:	440b      	add	r3, r1
 80115e2:	3314      	adds	r3, #20
 80115e4:	2200      	movs	r2, #0
 80115e6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80115e8:	bf00      	nop
 80115ea:	3708      	adds	r7, #8
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}
 80115f0:	2000b204 	.word	0x2000b204

080115f4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b082      	sub	sp, #8
 80115f8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80115fa:	2300      	movs	r3, #0
 80115fc:	607b      	str	r3, [r7, #4]
 80115fe:	e096      	b.n	801172e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011600:	494f      	ldr	r1, [pc, #316]	@ (8011740 <etharp_tmr+0x14c>)
 8011602:	687a      	ldr	r2, [r7, #4]
 8011604:	4613      	mov	r3, r2
 8011606:	005b      	lsls	r3, r3, #1
 8011608:	4413      	add	r3, r2
 801160a:	00db      	lsls	r3, r3, #3
 801160c:	440b      	add	r3, r1
 801160e:	3314      	adds	r3, #20
 8011610:	781b      	ldrb	r3, [r3, #0]
 8011612:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011614:	78fb      	ldrb	r3, [r7, #3]
 8011616:	2b00      	cmp	r3, #0
 8011618:	f000 8086 	beq.w	8011728 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801161c:	4948      	ldr	r1, [pc, #288]	@ (8011740 <etharp_tmr+0x14c>)
 801161e:	687a      	ldr	r2, [r7, #4]
 8011620:	4613      	mov	r3, r2
 8011622:	005b      	lsls	r3, r3, #1
 8011624:	4413      	add	r3, r2
 8011626:	00db      	lsls	r3, r3, #3
 8011628:	440b      	add	r3, r1
 801162a:	3312      	adds	r3, #18
 801162c:	881b      	ldrh	r3, [r3, #0]
 801162e:	3301      	adds	r3, #1
 8011630:	b298      	uxth	r0, r3
 8011632:	4943      	ldr	r1, [pc, #268]	@ (8011740 <etharp_tmr+0x14c>)
 8011634:	687a      	ldr	r2, [r7, #4]
 8011636:	4613      	mov	r3, r2
 8011638:	005b      	lsls	r3, r3, #1
 801163a:	4413      	add	r3, r2
 801163c:	00db      	lsls	r3, r3, #3
 801163e:	440b      	add	r3, r1
 8011640:	3312      	adds	r3, #18
 8011642:	4602      	mov	r2, r0
 8011644:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011646:	493e      	ldr	r1, [pc, #248]	@ (8011740 <etharp_tmr+0x14c>)
 8011648:	687a      	ldr	r2, [r7, #4]
 801164a:	4613      	mov	r3, r2
 801164c:	005b      	lsls	r3, r3, #1
 801164e:	4413      	add	r3, r2
 8011650:	00db      	lsls	r3, r3, #3
 8011652:	440b      	add	r3, r1
 8011654:	3312      	adds	r3, #18
 8011656:	881b      	ldrh	r3, [r3, #0]
 8011658:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801165c:	d215      	bcs.n	801168a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801165e:	4938      	ldr	r1, [pc, #224]	@ (8011740 <etharp_tmr+0x14c>)
 8011660:	687a      	ldr	r2, [r7, #4]
 8011662:	4613      	mov	r3, r2
 8011664:	005b      	lsls	r3, r3, #1
 8011666:	4413      	add	r3, r2
 8011668:	00db      	lsls	r3, r3, #3
 801166a:	440b      	add	r3, r1
 801166c:	3314      	adds	r3, #20
 801166e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011670:	2b01      	cmp	r3, #1
 8011672:	d10e      	bne.n	8011692 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011674:	4932      	ldr	r1, [pc, #200]	@ (8011740 <etharp_tmr+0x14c>)
 8011676:	687a      	ldr	r2, [r7, #4]
 8011678:	4613      	mov	r3, r2
 801167a:	005b      	lsls	r3, r3, #1
 801167c:	4413      	add	r3, r2
 801167e:	00db      	lsls	r3, r3, #3
 8011680:	440b      	add	r3, r1
 8011682:	3312      	adds	r3, #18
 8011684:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011686:	2b04      	cmp	r3, #4
 8011688:	d903      	bls.n	8011692 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801168a:	6878      	ldr	r0, [r7, #4]
 801168c:	f7ff ff80 	bl	8011590 <etharp_free_entry>
 8011690:	e04a      	b.n	8011728 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011692:	492b      	ldr	r1, [pc, #172]	@ (8011740 <etharp_tmr+0x14c>)
 8011694:	687a      	ldr	r2, [r7, #4]
 8011696:	4613      	mov	r3, r2
 8011698:	005b      	lsls	r3, r3, #1
 801169a:	4413      	add	r3, r2
 801169c:	00db      	lsls	r3, r3, #3
 801169e:	440b      	add	r3, r1
 80116a0:	3314      	adds	r3, #20
 80116a2:	781b      	ldrb	r3, [r3, #0]
 80116a4:	2b03      	cmp	r3, #3
 80116a6:	d10a      	bne.n	80116be <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80116a8:	4925      	ldr	r1, [pc, #148]	@ (8011740 <etharp_tmr+0x14c>)
 80116aa:	687a      	ldr	r2, [r7, #4]
 80116ac:	4613      	mov	r3, r2
 80116ae:	005b      	lsls	r3, r3, #1
 80116b0:	4413      	add	r3, r2
 80116b2:	00db      	lsls	r3, r3, #3
 80116b4:	440b      	add	r3, r1
 80116b6:	3314      	adds	r3, #20
 80116b8:	2204      	movs	r2, #4
 80116ba:	701a      	strb	r2, [r3, #0]
 80116bc:	e034      	b.n	8011728 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80116be:	4920      	ldr	r1, [pc, #128]	@ (8011740 <etharp_tmr+0x14c>)
 80116c0:	687a      	ldr	r2, [r7, #4]
 80116c2:	4613      	mov	r3, r2
 80116c4:	005b      	lsls	r3, r3, #1
 80116c6:	4413      	add	r3, r2
 80116c8:	00db      	lsls	r3, r3, #3
 80116ca:	440b      	add	r3, r1
 80116cc:	3314      	adds	r3, #20
 80116ce:	781b      	ldrb	r3, [r3, #0]
 80116d0:	2b04      	cmp	r3, #4
 80116d2:	d10a      	bne.n	80116ea <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80116d4:	491a      	ldr	r1, [pc, #104]	@ (8011740 <etharp_tmr+0x14c>)
 80116d6:	687a      	ldr	r2, [r7, #4]
 80116d8:	4613      	mov	r3, r2
 80116da:	005b      	lsls	r3, r3, #1
 80116dc:	4413      	add	r3, r2
 80116de:	00db      	lsls	r3, r3, #3
 80116e0:	440b      	add	r3, r1
 80116e2:	3314      	adds	r3, #20
 80116e4:	2202      	movs	r2, #2
 80116e6:	701a      	strb	r2, [r3, #0]
 80116e8:	e01e      	b.n	8011728 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80116ea:	4915      	ldr	r1, [pc, #84]	@ (8011740 <etharp_tmr+0x14c>)
 80116ec:	687a      	ldr	r2, [r7, #4]
 80116ee:	4613      	mov	r3, r2
 80116f0:	005b      	lsls	r3, r3, #1
 80116f2:	4413      	add	r3, r2
 80116f4:	00db      	lsls	r3, r3, #3
 80116f6:	440b      	add	r3, r1
 80116f8:	3314      	adds	r3, #20
 80116fa:	781b      	ldrb	r3, [r3, #0]
 80116fc:	2b01      	cmp	r3, #1
 80116fe:	d113      	bne.n	8011728 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011700:	490f      	ldr	r1, [pc, #60]	@ (8011740 <etharp_tmr+0x14c>)
 8011702:	687a      	ldr	r2, [r7, #4]
 8011704:	4613      	mov	r3, r2
 8011706:	005b      	lsls	r3, r3, #1
 8011708:	4413      	add	r3, r2
 801170a:	00db      	lsls	r3, r3, #3
 801170c:	440b      	add	r3, r1
 801170e:	3308      	adds	r3, #8
 8011710:	6818      	ldr	r0, [r3, #0]
 8011712:	687a      	ldr	r2, [r7, #4]
 8011714:	4613      	mov	r3, r2
 8011716:	005b      	lsls	r3, r3, #1
 8011718:	4413      	add	r3, r2
 801171a:	00db      	lsls	r3, r3, #3
 801171c:	4a08      	ldr	r2, [pc, #32]	@ (8011740 <etharp_tmr+0x14c>)
 801171e:	4413      	add	r3, r2
 8011720:	3304      	adds	r3, #4
 8011722:	4619      	mov	r1, r3
 8011724:	f000 fe6e 	bl	8012404 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	3301      	adds	r3, #1
 801172c:	607b      	str	r3, [r7, #4]
 801172e:	687b      	ldr	r3, [r7, #4]
 8011730:	2b09      	cmp	r3, #9
 8011732:	f77f af65 	ble.w	8011600 <etharp_tmr+0xc>
      }
    }
  }
}
 8011736:	bf00      	nop
 8011738:	bf00      	nop
 801173a:	3708      	adds	r7, #8
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}
 8011740:	2000b204 	.word	0x2000b204

08011744 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011744:	b580      	push	{r7, lr}
 8011746:	b08a      	sub	sp, #40	@ 0x28
 8011748:	af00      	add	r7, sp, #0
 801174a:	60f8      	str	r0, [r7, #12]
 801174c:	460b      	mov	r3, r1
 801174e:	607a      	str	r2, [r7, #4]
 8011750:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011752:	230a      	movs	r3, #10
 8011754:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8011756:	230a      	movs	r3, #10
 8011758:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801175a:	230a      	movs	r3, #10
 801175c:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801175e:	2300      	movs	r3, #0
 8011760:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011762:	230a      	movs	r3, #10
 8011764:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011766:	2300      	movs	r3, #0
 8011768:	83bb      	strh	r3, [r7, #28]
 801176a:	2300      	movs	r3, #0
 801176c:	837b      	strh	r3, [r7, #26]
 801176e:	2300      	movs	r3, #0
 8011770:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011772:	2300      	movs	r3, #0
 8011774:	843b      	strh	r3, [r7, #32]
 8011776:	e0ae      	b.n	80118d6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011778:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801177c:	49a6      	ldr	r1, [pc, #664]	@ (8011a18 <etharp_find_entry+0x2d4>)
 801177e:	4613      	mov	r3, r2
 8011780:	005b      	lsls	r3, r3, #1
 8011782:	4413      	add	r3, r2
 8011784:	00db      	lsls	r3, r3, #3
 8011786:	440b      	add	r3, r1
 8011788:	3314      	adds	r3, #20
 801178a:	781b      	ldrb	r3, [r3, #0]
 801178c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801178e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8011792:	2b0a      	cmp	r3, #10
 8011794:	d105      	bne.n	80117a2 <etharp_find_entry+0x5e>
 8011796:	7dfb      	ldrb	r3, [r7, #23]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d102      	bne.n	80117a2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801179c:	8c3b      	ldrh	r3, [r7, #32]
 801179e:	847b      	strh	r3, [r7, #34]	@ 0x22
 80117a0:	e095      	b.n	80118ce <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80117a2:	7dfb      	ldrb	r3, [r7, #23]
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	f000 8092 	beq.w	80118ce <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80117aa:	7dfb      	ldrb	r3, [r7, #23]
 80117ac:	2b01      	cmp	r3, #1
 80117ae:	d009      	beq.n	80117c4 <etharp_find_entry+0x80>
 80117b0:	7dfb      	ldrb	r3, [r7, #23]
 80117b2:	2b01      	cmp	r3, #1
 80117b4:	d806      	bhi.n	80117c4 <etharp_find_entry+0x80>
 80117b6:	4b99      	ldr	r3, [pc, #612]	@ (8011a1c <etharp_find_entry+0x2d8>)
 80117b8:	f240 1223 	movw	r2, #291	@ 0x123
 80117bc:	4998      	ldr	r1, [pc, #608]	@ (8011a20 <etharp_find_entry+0x2dc>)
 80117be:	4899      	ldr	r0, [pc, #612]	@ (8011a24 <etharp_find_entry+0x2e0>)
 80117c0:	f002 faac 	bl	8013d1c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	d020      	beq.n	801180c <etharp_find_entry+0xc8>
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	6819      	ldr	r1, [r3, #0]
 80117ce:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80117d2:	4891      	ldr	r0, [pc, #580]	@ (8011a18 <etharp_find_entry+0x2d4>)
 80117d4:	4613      	mov	r3, r2
 80117d6:	005b      	lsls	r3, r3, #1
 80117d8:	4413      	add	r3, r2
 80117da:	00db      	lsls	r3, r3, #3
 80117dc:	4403      	add	r3, r0
 80117de:	3304      	adds	r3, #4
 80117e0:	681b      	ldr	r3, [r3, #0]
 80117e2:	4299      	cmp	r1, r3
 80117e4:	d112      	bne.n	801180c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80117e6:	687b      	ldr	r3, [r7, #4]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d00c      	beq.n	8011806 <etharp_find_entry+0xc2>
 80117ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80117f0:	4989      	ldr	r1, [pc, #548]	@ (8011a18 <etharp_find_entry+0x2d4>)
 80117f2:	4613      	mov	r3, r2
 80117f4:	005b      	lsls	r3, r3, #1
 80117f6:	4413      	add	r3, r2
 80117f8:	00db      	lsls	r3, r3, #3
 80117fa:	440b      	add	r3, r1
 80117fc:	3308      	adds	r3, #8
 80117fe:	681b      	ldr	r3, [r3, #0]
 8011800:	687a      	ldr	r2, [r7, #4]
 8011802:	429a      	cmp	r2, r3
 8011804:	d102      	bne.n	801180c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011806:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801180a:	e100      	b.n	8011a0e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801180c:	7dfb      	ldrb	r3, [r7, #23]
 801180e:	2b01      	cmp	r3, #1
 8011810:	d140      	bne.n	8011894 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011812:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011816:	4980      	ldr	r1, [pc, #512]	@ (8011a18 <etharp_find_entry+0x2d4>)
 8011818:	4613      	mov	r3, r2
 801181a:	005b      	lsls	r3, r3, #1
 801181c:	4413      	add	r3, r2
 801181e:	00db      	lsls	r3, r3, #3
 8011820:	440b      	add	r3, r1
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d01a      	beq.n	801185e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011828:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801182c:	497a      	ldr	r1, [pc, #488]	@ (8011a18 <etharp_find_entry+0x2d4>)
 801182e:	4613      	mov	r3, r2
 8011830:	005b      	lsls	r3, r3, #1
 8011832:	4413      	add	r3, r2
 8011834:	00db      	lsls	r3, r3, #3
 8011836:	440b      	add	r3, r1
 8011838:	3312      	adds	r3, #18
 801183a:	881b      	ldrh	r3, [r3, #0]
 801183c:	8bba      	ldrh	r2, [r7, #28]
 801183e:	429a      	cmp	r2, r3
 8011840:	d845      	bhi.n	80118ce <etharp_find_entry+0x18a>
            old_queue = i;
 8011842:	8c3b      	ldrh	r3, [r7, #32]
 8011844:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8011846:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801184a:	4973      	ldr	r1, [pc, #460]	@ (8011a18 <etharp_find_entry+0x2d4>)
 801184c:	4613      	mov	r3, r2
 801184e:	005b      	lsls	r3, r3, #1
 8011850:	4413      	add	r3, r2
 8011852:	00db      	lsls	r3, r3, #3
 8011854:	440b      	add	r3, r1
 8011856:	3312      	adds	r3, #18
 8011858:	881b      	ldrh	r3, [r3, #0]
 801185a:	83bb      	strh	r3, [r7, #28]
 801185c:	e037      	b.n	80118ce <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801185e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011862:	496d      	ldr	r1, [pc, #436]	@ (8011a18 <etharp_find_entry+0x2d4>)
 8011864:	4613      	mov	r3, r2
 8011866:	005b      	lsls	r3, r3, #1
 8011868:	4413      	add	r3, r2
 801186a:	00db      	lsls	r3, r3, #3
 801186c:	440b      	add	r3, r1
 801186e:	3312      	adds	r3, #18
 8011870:	881b      	ldrh	r3, [r3, #0]
 8011872:	8b7a      	ldrh	r2, [r7, #26]
 8011874:	429a      	cmp	r2, r3
 8011876:	d82a      	bhi.n	80118ce <etharp_find_entry+0x18a>
            old_pending = i;
 8011878:	8c3b      	ldrh	r3, [r7, #32]
 801187a:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801187c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011880:	4965      	ldr	r1, [pc, #404]	@ (8011a18 <etharp_find_entry+0x2d4>)
 8011882:	4613      	mov	r3, r2
 8011884:	005b      	lsls	r3, r3, #1
 8011886:	4413      	add	r3, r2
 8011888:	00db      	lsls	r3, r3, #3
 801188a:	440b      	add	r3, r1
 801188c:	3312      	adds	r3, #18
 801188e:	881b      	ldrh	r3, [r3, #0]
 8011890:	837b      	strh	r3, [r7, #26]
 8011892:	e01c      	b.n	80118ce <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011894:	7dfb      	ldrb	r3, [r7, #23]
 8011896:	2b01      	cmp	r3, #1
 8011898:	d919      	bls.n	80118ce <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801189a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801189e:	495e      	ldr	r1, [pc, #376]	@ (8011a18 <etharp_find_entry+0x2d4>)
 80118a0:	4613      	mov	r3, r2
 80118a2:	005b      	lsls	r3, r3, #1
 80118a4:	4413      	add	r3, r2
 80118a6:	00db      	lsls	r3, r3, #3
 80118a8:	440b      	add	r3, r1
 80118aa:	3312      	adds	r3, #18
 80118ac:	881b      	ldrh	r3, [r3, #0]
 80118ae:	8b3a      	ldrh	r2, [r7, #24]
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d80c      	bhi.n	80118ce <etharp_find_entry+0x18a>
            old_stable = i;
 80118b4:	8c3b      	ldrh	r3, [r7, #32]
 80118b6:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 80118b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80118bc:	4956      	ldr	r1, [pc, #344]	@ (8011a18 <etharp_find_entry+0x2d4>)
 80118be:	4613      	mov	r3, r2
 80118c0:	005b      	lsls	r3, r3, #1
 80118c2:	4413      	add	r3, r2
 80118c4:	00db      	lsls	r3, r3, #3
 80118c6:	440b      	add	r3, r1
 80118c8:	3312      	adds	r3, #18
 80118ca:	881b      	ldrh	r3, [r3, #0]
 80118cc:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80118ce:	8c3b      	ldrh	r3, [r7, #32]
 80118d0:	3301      	adds	r3, #1
 80118d2:	b29b      	uxth	r3, r3
 80118d4:	843b      	strh	r3, [r7, #32]
 80118d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80118da:	2b09      	cmp	r3, #9
 80118dc:	f77f af4c 	ble.w	8011778 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80118e0:	7afb      	ldrb	r3, [r7, #11]
 80118e2:	f003 0302 	and.w	r3, r3, #2
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d108      	bne.n	80118fc <etharp_find_entry+0x1b8>
 80118ea:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80118ee:	2b0a      	cmp	r3, #10
 80118f0:	d107      	bne.n	8011902 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80118f2:	7afb      	ldrb	r3, [r7, #11]
 80118f4:	f003 0301 	and.w	r3, r3, #1
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d102      	bne.n	8011902 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80118fc:	f04f 33ff 	mov.w	r3, #4294967295
 8011900:	e085      	b.n	8011a0e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011902:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8011906:	2b09      	cmp	r3, #9
 8011908:	dc02      	bgt.n	8011910 <etharp_find_entry+0x1cc>
    i = empty;
 801190a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801190c:	843b      	strh	r3, [r7, #32]
 801190e:	e039      	b.n	8011984 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011910:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8011914:	2b09      	cmp	r3, #9
 8011916:	dc14      	bgt.n	8011942 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011918:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801191a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801191c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011920:	493d      	ldr	r1, [pc, #244]	@ (8011a18 <etharp_find_entry+0x2d4>)
 8011922:	4613      	mov	r3, r2
 8011924:	005b      	lsls	r3, r3, #1
 8011926:	4413      	add	r3, r2
 8011928:	00db      	lsls	r3, r3, #3
 801192a:	440b      	add	r3, r1
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d018      	beq.n	8011964 <etharp_find_entry+0x220>
 8011932:	4b3a      	ldr	r3, [pc, #232]	@ (8011a1c <etharp_find_entry+0x2d8>)
 8011934:	f240 126d 	movw	r2, #365	@ 0x16d
 8011938:	493b      	ldr	r1, [pc, #236]	@ (8011a28 <etharp_find_entry+0x2e4>)
 801193a:	483a      	ldr	r0, [pc, #232]	@ (8011a24 <etharp_find_entry+0x2e0>)
 801193c:	f002 f9ee 	bl	8013d1c <iprintf>
 8011940:	e010      	b.n	8011964 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011942:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8011946:	2b09      	cmp	r3, #9
 8011948:	dc02      	bgt.n	8011950 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801194a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801194c:	843b      	strh	r3, [r7, #32]
 801194e:	e009      	b.n	8011964 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011950:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011954:	2b09      	cmp	r3, #9
 8011956:	dc02      	bgt.n	801195e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011958:	8bfb      	ldrh	r3, [r7, #30]
 801195a:	843b      	strh	r3, [r7, #32]
 801195c:	e002      	b.n	8011964 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801195e:	f04f 33ff 	mov.w	r3, #4294967295
 8011962:	e054      	b.n	8011a0e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011964:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011968:	2b09      	cmp	r3, #9
 801196a:	dd06      	ble.n	801197a <etharp_find_entry+0x236>
 801196c:	4b2b      	ldr	r3, [pc, #172]	@ (8011a1c <etharp_find_entry+0x2d8>)
 801196e:	f240 127f 	movw	r2, #383	@ 0x17f
 8011972:	492e      	ldr	r1, [pc, #184]	@ (8011a2c <etharp_find_entry+0x2e8>)
 8011974:	482b      	ldr	r0, [pc, #172]	@ (8011a24 <etharp_find_entry+0x2e0>)
 8011976:	f002 f9d1 	bl	8013d1c <iprintf>
    etharp_free_entry(i);
 801197a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801197e:	4618      	mov	r0, r3
 8011980:	f7ff fe06 	bl	8011590 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011984:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011988:	2b09      	cmp	r3, #9
 801198a:	dd06      	ble.n	801199a <etharp_find_entry+0x256>
 801198c:	4b23      	ldr	r3, [pc, #140]	@ (8011a1c <etharp_find_entry+0x2d8>)
 801198e:	f240 1283 	movw	r2, #387	@ 0x183
 8011992:	4926      	ldr	r1, [pc, #152]	@ (8011a2c <etharp_find_entry+0x2e8>)
 8011994:	4823      	ldr	r0, [pc, #140]	@ (8011a24 <etharp_find_entry+0x2e0>)
 8011996:	f002 f9c1 	bl	8013d1c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801199a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801199e:	491e      	ldr	r1, [pc, #120]	@ (8011a18 <etharp_find_entry+0x2d4>)
 80119a0:	4613      	mov	r3, r2
 80119a2:	005b      	lsls	r3, r3, #1
 80119a4:	4413      	add	r3, r2
 80119a6:	00db      	lsls	r3, r3, #3
 80119a8:	440b      	add	r3, r1
 80119aa:	3314      	adds	r3, #20
 80119ac:	781b      	ldrb	r3, [r3, #0]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d006      	beq.n	80119c0 <etharp_find_entry+0x27c>
 80119b2:	4b1a      	ldr	r3, [pc, #104]	@ (8011a1c <etharp_find_entry+0x2d8>)
 80119b4:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 80119b8:	491d      	ldr	r1, [pc, #116]	@ (8011a30 <etharp_find_entry+0x2ec>)
 80119ba:	481a      	ldr	r0, [pc, #104]	@ (8011a24 <etharp_find_entry+0x2e0>)
 80119bc:	f002 f9ae 	bl	8013d1c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d00b      	beq.n	80119de <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80119c6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	6819      	ldr	r1, [r3, #0]
 80119ce:	4812      	ldr	r0, [pc, #72]	@ (8011a18 <etharp_find_entry+0x2d4>)
 80119d0:	4613      	mov	r3, r2
 80119d2:	005b      	lsls	r3, r3, #1
 80119d4:	4413      	add	r3, r2
 80119d6:	00db      	lsls	r3, r3, #3
 80119d8:	4403      	add	r3, r0
 80119da:	3304      	adds	r3, #4
 80119dc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80119de:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119e2:	490d      	ldr	r1, [pc, #52]	@ (8011a18 <etharp_find_entry+0x2d4>)
 80119e4:	4613      	mov	r3, r2
 80119e6:	005b      	lsls	r3, r3, #1
 80119e8:	4413      	add	r3, r2
 80119ea:	00db      	lsls	r3, r3, #3
 80119ec:	440b      	add	r3, r1
 80119ee:	3312      	adds	r3, #18
 80119f0:	2200      	movs	r2, #0
 80119f2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80119f4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119f8:	4907      	ldr	r1, [pc, #28]	@ (8011a18 <etharp_find_entry+0x2d4>)
 80119fa:	4613      	mov	r3, r2
 80119fc:	005b      	lsls	r3, r3, #1
 80119fe:	4413      	add	r3, r2
 8011a00:	00db      	lsls	r3, r3, #3
 8011a02:	440b      	add	r3, r1
 8011a04:	3308      	adds	r3, #8
 8011a06:	687a      	ldr	r2, [r7, #4]
 8011a08:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011a0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011a0e:	4618      	mov	r0, r3
 8011a10:	3728      	adds	r7, #40	@ 0x28
 8011a12:	46bd      	mov	sp, r7
 8011a14:	bd80      	pop	{r7, pc}
 8011a16:	bf00      	nop
 8011a18:	2000b204 	.word	0x2000b204
 8011a1c:	08016e60 	.word	0x08016e60
 8011a20:	08016e98 	.word	0x08016e98
 8011a24:	08016ed8 	.word	0x08016ed8
 8011a28:	08016f00 	.word	0x08016f00
 8011a2c:	08016f18 	.word	0x08016f18
 8011a30:	08016f2c 	.word	0x08016f2c

08011a34 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b088      	sub	sp, #32
 8011a38:	af02      	add	r7, sp, #8
 8011a3a:	60f8      	str	r0, [r7, #12]
 8011a3c:	60b9      	str	r1, [r7, #8]
 8011a3e:	607a      	str	r2, [r7, #4]
 8011a40:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8011a48:	2b06      	cmp	r3, #6
 8011a4a:	d006      	beq.n	8011a5a <etharp_update_arp_entry+0x26>
 8011a4c:	4b48      	ldr	r3, [pc, #288]	@ (8011b70 <etharp_update_arp_entry+0x13c>)
 8011a4e:	f240 12a9 	movw	r2, #425	@ 0x1a9
 8011a52:	4948      	ldr	r1, [pc, #288]	@ (8011b74 <etharp_update_arp_entry+0x140>)
 8011a54:	4848      	ldr	r0, [pc, #288]	@ (8011b78 <etharp_update_arp_entry+0x144>)
 8011a56:	f002 f961 	bl	8013d1c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011a5a:	68bb      	ldr	r3, [r7, #8]
 8011a5c:	2b00      	cmp	r3, #0
 8011a5e:	d012      	beq.n	8011a86 <etharp_update_arp_entry+0x52>
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d00e      	beq.n	8011a86 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011a68:	68bb      	ldr	r3, [r7, #8]
 8011a6a:	681b      	ldr	r3, [r3, #0]
 8011a6c:	68f9      	ldr	r1, [r7, #12]
 8011a6e:	4618      	mov	r0, r3
 8011a70:	f001 f8fe 	bl	8012c70 <ip4_addr_isbroadcast_u32>
 8011a74:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d105      	bne.n	8011a86 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011a7a:	68bb      	ldr	r3, [r7, #8]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011a82:	2be0      	cmp	r3, #224	@ 0xe0
 8011a84:	d102      	bne.n	8011a8c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011a86:	f06f 030f 	mvn.w	r3, #15
 8011a8a:	e06c      	b.n	8011b66 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011a8c:	78fb      	ldrb	r3, [r7, #3]
 8011a8e:	68fa      	ldr	r2, [r7, #12]
 8011a90:	4619      	mov	r1, r3
 8011a92:	68b8      	ldr	r0, [r7, #8]
 8011a94:	f7ff fe56 	bl	8011744 <etharp_find_entry>
 8011a98:	4603      	mov	r3, r0
 8011a9a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011a9c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	da02      	bge.n	8011aaa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011aa4:	8afb      	ldrh	r3, [r7, #22]
 8011aa6:	b25b      	sxtb	r3, r3
 8011aa8:	e05d      	b.n	8011b66 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011aaa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011aae:	4933      	ldr	r1, [pc, #204]	@ (8011b7c <etharp_update_arp_entry+0x148>)
 8011ab0:	4613      	mov	r3, r2
 8011ab2:	005b      	lsls	r3, r3, #1
 8011ab4:	4413      	add	r3, r2
 8011ab6:	00db      	lsls	r3, r3, #3
 8011ab8:	440b      	add	r3, r1
 8011aba:	3314      	adds	r3, #20
 8011abc:	2202      	movs	r2, #2
 8011abe:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011ac0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011ac4:	492d      	ldr	r1, [pc, #180]	@ (8011b7c <etharp_update_arp_entry+0x148>)
 8011ac6:	4613      	mov	r3, r2
 8011ac8:	005b      	lsls	r3, r3, #1
 8011aca:	4413      	add	r3, r2
 8011acc:	00db      	lsls	r3, r3, #3
 8011ace:	440b      	add	r3, r1
 8011ad0:	3308      	adds	r3, #8
 8011ad2:	68fa      	ldr	r2, [r7, #12]
 8011ad4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011ad6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011ada:	4613      	mov	r3, r2
 8011adc:	005b      	lsls	r3, r3, #1
 8011ade:	4413      	add	r3, r2
 8011ae0:	00db      	lsls	r3, r3, #3
 8011ae2:	3308      	adds	r3, #8
 8011ae4:	4a25      	ldr	r2, [pc, #148]	@ (8011b7c <etharp_update_arp_entry+0x148>)
 8011ae6:	4413      	add	r3, r2
 8011ae8:	3304      	adds	r3, #4
 8011aea:	2206      	movs	r2, #6
 8011aec:	6879      	ldr	r1, [r7, #4]
 8011aee:	4618      	mov	r0, r3
 8011af0:	f002 f9ef 	bl	8013ed2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011af4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011af8:	4920      	ldr	r1, [pc, #128]	@ (8011b7c <etharp_update_arp_entry+0x148>)
 8011afa:	4613      	mov	r3, r2
 8011afc:	005b      	lsls	r3, r3, #1
 8011afe:	4413      	add	r3, r2
 8011b00:	00db      	lsls	r3, r3, #3
 8011b02:	440b      	add	r3, r1
 8011b04:	3312      	adds	r3, #18
 8011b06:	2200      	movs	r2, #0
 8011b08:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011b0a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011b0e:	491b      	ldr	r1, [pc, #108]	@ (8011b7c <etharp_update_arp_entry+0x148>)
 8011b10:	4613      	mov	r3, r2
 8011b12:	005b      	lsls	r3, r3, #1
 8011b14:	4413      	add	r3, r2
 8011b16:	00db      	lsls	r3, r3, #3
 8011b18:	440b      	add	r3, r1
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d021      	beq.n	8011b64 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011b20:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011b24:	4915      	ldr	r1, [pc, #84]	@ (8011b7c <etharp_update_arp_entry+0x148>)
 8011b26:	4613      	mov	r3, r2
 8011b28:	005b      	lsls	r3, r3, #1
 8011b2a:	4413      	add	r3, r2
 8011b2c:	00db      	lsls	r3, r3, #3
 8011b2e:	440b      	add	r3, r1
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011b34:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011b38:	4910      	ldr	r1, [pc, #64]	@ (8011b7c <etharp_update_arp_entry+0x148>)
 8011b3a:	4613      	mov	r3, r2
 8011b3c:	005b      	lsls	r3, r3, #1
 8011b3e:	4413      	add	r3, r2
 8011b40:	00db      	lsls	r3, r3, #3
 8011b42:	440b      	add	r3, r1
 8011b44:	2200      	movs	r2, #0
 8011b46:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8011b4e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011b52:	9300      	str	r3, [sp, #0]
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	6939      	ldr	r1, [r7, #16]
 8011b58:	68f8      	ldr	r0, [r7, #12]
 8011b5a:	f001 ff97 	bl	8013a8c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011b5e:	6938      	ldr	r0, [r7, #16]
 8011b60:	f7f9 fcc6 	bl	800b4f0 <pbuf_free>
  }
  return ERR_OK;
 8011b64:	2300      	movs	r3, #0
}
 8011b66:	4618      	mov	r0, r3
 8011b68:	3718      	adds	r7, #24
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	bd80      	pop	{r7, pc}
 8011b6e:	bf00      	nop
 8011b70:	08016e60 	.word	0x08016e60
 8011b74:	08016f58 	.word	0x08016f58
 8011b78:	08016ed8 	.word	0x08016ed8
 8011b7c:	2000b204 	.word	0x2000b204

08011b80 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011b80:	b580      	push	{r7, lr}
 8011b82:	b084      	sub	sp, #16
 8011b84:	af00      	add	r7, sp, #0
 8011b86:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011b88:	2300      	movs	r3, #0
 8011b8a:	60fb      	str	r3, [r7, #12]
 8011b8c:	e01e      	b.n	8011bcc <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011b8e:	4913      	ldr	r1, [pc, #76]	@ (8011bdc <etharp_cleanup_netif+0x5c>)
 8011b90:	68fa      	ldr	r2, [r7, #12]
 8011b92:	4613      	mov	r3, r2
 8011b94:	005b      	lsls	r3, r3, #1
 8011b96:	4413      	add	r3, r2
 8011b98:	00db      	lsls	r3, r3, #3
 8011b9a:	440b      	add	r3, r1
 8011b9c:	3314      	adds	r3, #20
 8011b9e:	781b      	ldrb	r3, [r3, #0]
 8011ba0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011ba2:	7afb      	ldrb	r3, [r7, #11]
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d00e      	beq.n	8011bc6 <etharp_cleanup_netif+0x46>
 8011ba8:	490c      	ldr	r1, [pc, #48]	@ (8011bdc <etharp_cleanup_netif+0x5c>)
 8011baa:	68fa      	ldr	r2, [r7, #12]
 8011bac:	4613      	mov	r3, r2
 8011bae:	005b      	lsls	r3, r3, #1
 8011bb0:	4413      	add	r3, r2
 8011bb2:	00db      	lsls	r3, r3, #3
 8011bb4:	440b      	add	r3, r1
 8011bb6:	3308      	adds	r3, #8
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	687a      	ldr	r2, [r7, #4]
 8011bbc:	429a      	cmp	r2, r3
 8011bbe:	d102      	bne.n	8011bc6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011bc0:	68f8      	ldr	r0, [r7, #12]
 8011bc2:	f7ff fce5 	bl	8011590 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011bc6:	68fb      	ldr	r3, [r7, #12]
 8011bc8:	3301      	adds	r3, #1
 8011bca:	60fb      	str	r3, [r7, #12]
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	2b09      	cmp	r3, #9
 8011bd0:	dddd      	ble.n	8011b8e <etharp_cleanup_netif+0xe>
    }
  }
}
 8011bd2:	bf00      	nop
 8011bd4:	bf00      	nop
 8011bd6:	3710      	adds	r7, #16
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	bd80      	pop	{r7, pc}
 8011bdc:	2000b204 	.word	0x2000b204

08011be0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011be0:	b5b0      	push	{r4, r5, r7, lr}
 8011be2:	b08a      	sub	sp, #40	@ 0x28
 8011be4:	af04      	add	r7, sp, #16
 8011be6:	6078      	str	r0, [r7, #4]
 8011be8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011bea:	683b      	ldr	r3, [r7, #0]
 8011bec:	2b00      	cmp	r3, #0
 8011bee:	d107      	bne.n	8011c00 <etharp_input+0x20>
 8011bf0:	4b3d      	ldr	r3, [pc, #244]	@ (8011ce8 <etharp_input+0x108>)
 8011bf2:	f240 228a 	movw	r2, #650	@ 0x28a
 8011bf6:	493d      	ldr	r1, [pc, #244]	@ (8011cec <etharp_input+0x10c>)
 8011bf8:	483d      	ldr	r0, [pc, #244]	@ (8011cf0 <etharp_input+0x110>)
 8011bfa:	f002 f88f 	bl	8013d1c <iprintf>
 8011bfe:	e06f      	b.n	8011ce0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	685b      	ldr	r3, [r3, #4]
 8011c04:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011c06:	693b      	ldr	r3, [r7, #16]
 8011c08:	881b      	ldrh	r3, [r3, #0]
 8011c0a:	b29b      	uxth	r3, r3
 8011c0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011c10:	d10c      	bne.n	8011c2c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011c12:	693b      	ldr	r3, [r7, #16]
 8011c14:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011c16:	2b06      	cmp	r3, #6
 8011c18:	d108      	bne.n	8011c2c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011c1a:	693b      	ldr	r3, [r7, #16]
 8011c1c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011c1e:	2b04      	cmp	r3, #4
 8011c20:	d104      	bne.n	8011c2c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011c22:	693b      	ldr	r3, [r7, #16]
 8011c24:	885b      	ldrh	r3, [r3, #2]
 8011c26:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011c28:	2b08      	cmp	r3, #8
 8011c2a:	d003      	beq.n	8011c34 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011c2c:	6878      	ldr	r0, [r7, #4]
 8011c2e:	f7f9 fc5f 	bl	800b4f0 <pbuf_free>
    return;
 8011c32:	e055      	b.n	8011ce0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011c34:	693b      	ldr	r3, [r7, #16]
 8011c36:	330e      	adds	r3, #14
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011c3c:	693b      	ldr	r3, [r7, #16]
 8011c3e:	3318      	adds	r3, #24
 8011c40:	681b      	ldr	r3, [r3, #0]
 8011c42:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011c44:	683b      	ldr	r3, [r7, #0]
 8011c46:	3304      	adds	r3, #4
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d102      	bne.n	8011c54 <etharp_input+0x74>
    for_us = 0;
 8011c4e:	2300      	movs	r3, #0
 8011c50:	75fb      	strb	r3, [r7, #23]
 8011c52:	e009      	b.n	8011c68 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011c54:	68ba      	ldr	r2, [r7, #8]
 8011c56:	683b      	ldr	r3, [r7, #0]
 8011c58:	3304      	adds	r3, #4
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	429a      	cmp	r2, r3
 8011c5e:	bf0c      	ite	eq
 8011c60:	2301      	moveq	r3, #1
 8011c62:	2300      	movne	r3, #0
 8011c64:	b2db      	uxtb	r3, r3
 8011c66:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011c68:	693b      	ldr	r3, [r7, #16]
 8011c6a:	f103 0208 	add.w	r2, r3, #8
 8011c6e:	7dfb      	ldrb	r3, [r7, #23]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d001      	beq.n	8011c78 <etharp_input+0x98>
 8011c74:	2301      	movs	r3, #1
 8011c76:	e000      	b.n	8011c7a <etharp_input+0x9a>
 8011c78:	2302      	movs	r3, #2
 8011c7a:	f107 010c 	add.w	r1, r7, #12
 8011c7e:	6838      	ldr	r0, [r7, #0]
 8011c80:	f7ff fed8 	bl	8011a34 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011c84:	693b      	ldr	r3, [r7, #16]
 8011c86:	88db      	ldrh	r3, [r3, #6]
 8011c88:	b29b      	uxth	r3, r3
 8011c8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011c8e:	d003      	beq.n	8011c98 <etharp_input+0xb8>
 8011c90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011c94:	d01e      	beq.n	8011cd4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011c96:	e020      	b.n	8011cda <etharp_input+0xfa>
      if (for_us) {
 8011c98:	7dfb      	ldrb	r3, [r7, #23]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d01c      	beq.n	8011cd8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011c9e:	683b      	ldr	r3, [r7, #0]
 8011ca0:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 8011ca4:	693b      	ldr	r3, [r7, #16]
 8011ca6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011caa:	683b      	ldr	r3, [r7, #0]
 8011cac:	f103 0526 	add.w	r5, r3, #38	@ 0x26
 8011cb0:	683b      	ldr	r3, [r7, #0]
 8011cb2:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011cb4:	693a      	ldr	r2, [r7, #16]
 8011cb6:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011cb8:	2102      	movs	r1, #2
 8011cba:	9103      	str	r1, [sp, #12]
 8011cbc:	f107 010c 	add.w	r1, r7, #12
 8011cc0:	9102      	str	r1, [sp, #8]
 8011cc2:	9201      	str	r2, [sp, #4]
 8011cc4:	9300      	str	r3, [sp, #0]
 8011cc6:	462b      	mov	r3, r5
 8011cc8:	4622      	mov	r2, r4
 8011cca:	4601      	mov	r1, r0
 8011ccc:	6838      	ldr	r0, [r7, #0]
 8011cce:	f000 faeb 	bl	80122a8 <etharp_raw>
      break;
 8011cd2:	e001      	b.n	8011cd8 <etharp_input+0xf8>
      break;
 8011cd4:	bf00      	nop
 8011cd6:	e000      	b.n	8011cda <etharp_input+0xfa>
      break;
 8011cd8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011cda:	6878      	ldr	r0, [r7, #4]
 8011cdc:	f7f9 fc08 	bl	800b4f0 <pbuf_free>
}
 8011ce0:	3718      	adds	r7, #24
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8011ce6:	bf00      	nop
 8011ce8:	08016e60 	.word	0x08016e60
 8011cec:	08016fb0 	.word	0x08016fb0
 8011cf0:	08016ed8 	.word	0x08016ed8

08011cf4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011cf4:	b580      	push	{r7, lr}
 8011cf6:	b086      	sub	sp, #24
 8011cf8:	af02      	add	r7, sp, #8
 8011cfa:	60f8      	str	r0, [r7, #12]
 8011cfc:	60b9      	str	r1, [r7, #8]
 8011cfe:	4613      	mov	r3, r2
 8011d00:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011d02:	79fa      	ldrb	r2, [r7, #7]
 8011d04:	4944      	ldr	r1, [pc, #272]	@ (8011e18 <etharp_output_to_arp_index+0x124>)
 8011d06:	4613      	mov	r3, r2
 8011d08:	005b      	lsls	r3, r3, #1
 8011d0a:	4413      	add	r3, r2
 8011d0c:	00db      	lsls	r3, r3, #3
 8011d0e:	440b      	add	r3, r1
 8011d10:	3314      	adds	r3, #20
 8011d12:	781b      	ldrb	r3, [r3, #0]
 8011d14:	2b01      	cmp	r3, #1
 8011d16:	d806      	bhi.n	8011d26 <etharp_output_to_arp_index+0x32>
 8011d18:	4b40      	ldr	r3, [pc, #256]	@ (8011e1c <etharp_output_to_arp_index+0x128>)
 8011d1a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8011d1e:	4940      	ldr	r1, [pc, #256]	@ (8011e20 <etharp_output_to_arp_index+0x12c>)
 8011d20:	4840      	ldr	r0, [pc, #256]	@ (8011e24 <etharp_output_to_arp_index+0x130>)
 8011d22:	f001 fffb 	bl	8013d1c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011d26:	79fa      	ldrb	r2, [r7, #7]
 8011d28:	493b      	ldr	r1, [pc, #236]	@ (8011e18 <etharp_output_to_arp_index+0x124>)
 8011d2a:	4613      	mov	r3, r2
 8011d2c:	005b      	lsls	r3, r3, #1
 8011d2e:	4413      	add	r3, r2
 8011d30:	00db      	lsls	r3, r3, #3
 8011d32:	440b      	add	r3, r1
 8011d34:	3314      	adds	r3, #20
 8011d36:	781b      	ldrb	r3, [r3, #0]
 8011d38:	2b02      	cmp	r3, #2
 8011d3a:	d153      	bne.n	8011de4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011d3c:	79fa      	ldrb	r2, [r7, #7]
 8011d3e:	4936      	ldr	r1, [pc, #216]	@ (8011e18 <etharp_output_to_arp_index+0x124>)
 8011d40:	4613      	mov	r3, r2
 8011d42:	005b      	lsls	r3, r3, #1
 8011d44:	4413      	add	r3, r2
 8011d46:	00db      	lsls	r3, r3, #3
 8011d48:	440b      	add	r3, r1
 8011d4a:	3312      	adds	r3, #18
 8011d4c:	881b      	ldrh	r3, [r3, #0]
 8011d4e:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 8011d52:	d919      	bls.n	8011d88 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011d54:	79fa      	ldrb	r2, [r7, #7]
 8011d56:	4613      	mov	r3, r2
 8011d58:	005b      	lsls	r3, r3, #1
 8011d5a:	4413      	add	r3, r2
 8011d5c:	00db      	lsls	r3, r3, #3
 8011d5e:	4a2e      	ldr	r2, [pc, #184]	@ (8011e18 <etharp_output_to_arp_index+0x124>)
 8011d60:	4413      	add	r3, r2
 8011d62:	3304      	adds	r3, #4
 8011d64:	4619      	mov	r1, r3
 8011d66:	68f8      	ldr	r0, [r7, #12]
 8011d68:	f000 fb4c 	bl	8012404 <etharp_request>
 8011d6c:	4603      	mov	r3, r0
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d138      	bne.n	8011de4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011d72:	79fa      	ldrb	r2, [r7, #7]
 8011d74:	4928      	ldr	r1, [pc, #160]	@ (8011e18 <etharp_output_to_arp_index+0x124>)
 8011d76:	4613      	mov	r3, r2
 8011d78:	005b      	lsls	r3, r3, #1
 8011d7a:	4413      	add	r3, r2
 8011d7c:	00db      	lsls	r3, r3, #3
 8011d7e:	440b      	add	r3, r1
 8011d80:	3314      	adds	r3, #20
 8011d82:	2203      	movs	r2, #3
 8011d84:	701a      	strb	r2, [r3, #0]
 8011d86:	e02d      	b.n	8011de4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011d88:	79fa      	ldrb	r2, [r7, #7]
 8011d8a:	4923      	ldr	r1, [pc, #140]	@ (8011e18 <etharp_output_to_arp_index+0x124>)
 8011d8c:	4613      	mov	r3, r2
 8011d8e:	005b      	lsls	r3, r3, #1
 8011d90:	4413      	add	r3, r2
 8011d92:	00db      	lsls	r3, r3, #3
 8011d94:	440b      	add	r3, r1
 8011d96:	3312      	adds	r3, #18
 8011d98:	881b      	ldrh	r3, [r3, #0]
 8011d9a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 8011d9e:	d321      	bcc.n	8011de4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8011da0:	79fa      	ldrb	r2, [r7, #7]
 8011da2:	4613      	mov	r3, r2
 8011da4:	005b      	lsls	r3, r3, #1
 8011da6:	4413      	add	r3, r2
 8011da8:	00db      	lsls	r3, r3, #3
 8011daa:	4a1b      	ldr	r2, [pc, #108]	@ (8011e18 <etharp_output_to_arp_index+0x124>)
 8011dac:	4413      	add	r3, r2
 8011dae:	1d19      	adds	r1, r3, #4
 8011db0:	79fa      	ldrb	r2, [r7, #7]
 8011db2:	4613      	mov	r3, r2
 8011db4:	005b      	lsls	r3, r3, #1
 8011db6:	4413      	add	r3, r2
 8011db8:	00db      	lsls	r3, r3, #3
 8011dba:	3308      	adds	r3, #8
 8011dbc:	4a16      	ldr	r2, [pc, #88]	@ (8011e18 <etharp_output_to_arp_index+0x124>)
 8011dbe:	4413      	add	r3, r2
 8011dc0:	3304      	adds	r3, #4
 8011dc2:	461a      	mov	r2, r3
 8011dc4:	68f8      	ldr	r0, [r7, #12]
 8011dc6:	f000 fafb 	bl	80123c0 <etharp_request_dst>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d109      	bne.n	8011de4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011dd0:	79fa      	ldrb	r2, [r7, #7]
 8011dd2:	4911      	ldr	r1, [pc, #68]	@ (8011e18 <etharp_output_to_arp_index+0x124>)
 8011dd4:	4613      	mov	r3, r2
 8011dd6:	005b      	lsls	r3, r3, #1
 8011dd8:	4413      	add	r3, r2
 8011dda:	00db      	lsls	r3, r3, #3
 8011ddc:	440b      	add	r3, r1
 8011dde:	3314      	adds	r3, #20
 8011de0:	2203      	movs	r2, #3
 8011de2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8011de4:	68fb      	ldr	r3, [r7, #12]
 8011de6:	f103 0126 	add.w	r1, r3, #38	@ 0x26
 8011dea:	79fa      	ldrb	r2, [r7, #7]
 8011dec:	4613      	mov	r3, r2
 8011dee:	005b      	lsls	r3, r3, #1
 8011df0:	4413      	add	r3, r2
 8011df2:	00db      	lsls	r3, r3, #3
 8011df4:	3308      	adds	r3, #8
 8011df6:	4a08      	ldr	r2, [pc, #32]	@ (8011e18 <etharp_output_to_arp_index+0x124>)
 8011df8:	4413      	add	r3, r2
 8011dfa:	3304      	adds	r3, #4
 8011dfc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8011e00:	9200      	str	r2, [sp, #0]
 8011e02:	460a      	mov	r2, r1
 8011e04:	68b9      	ldr	r1, [r7, #8]
 8011e06:	68f8      	ldr	r0, [r7, #12]
 8011e08:	f001 fe40 	bl	8013a8c <ethernet_output>
 8011e0c:	4603      	mov	r3, r0
}
 8011e0e:	4618      	mov	r0, r3
 8011e10:	3710      	adds	r7, #16
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd80      	pop	{r7, pc}
 8011e16:	bf00      	nop
 8011e18:	2000b204 	.word	0x2000b204
 8011e1c:	08016e60 	.word	0x08016e60
 8011e20:	08016fd0 	.word	0x08016fd0
 8011e24:	08016ed8 	.word	0x08016ed8

08011e28 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b08a      	sub	sp, #40	@ 0x28
 8011e2c:	af02      	add	r7, sp, #8
 8011e2e:	60f8      	str	r0, [r7, #12]
 8011e30:	60b9      	str	r1, [r7, #8]
 8011e32:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d106      	bne.n	8011e4c <etharp_output+0x24>
 8011e3e:	4b73      	ldr	r3, [pc, #460]	@ (801200c <etharp_output+0x1e4>)
 8011e40:	f240 321e 	movw	r2, #798	@ 0x31e
 8011e44:	4972      	ldr	r1, [pc, #456]	@ (8012010 <etharp_output+0x1e8>)
 8011e46:	4873      	ldr	r0, [pc, #460]	@ (8012014 <etharp_output+0x1ec>)
 8011e48:	f001 ff68 	bl	8013d1c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8011e4c:	68bb      	ldr	r3, [r7, #8]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	d106      	bne.n	8011e60 <etharp_output+0x38>
 8011e52:	4b6e      	ldr	r3, [pc, #440]	@ (801200c <etharp_output+0x1e4>)
 8011e54:	f240 321f 	movw	r2, #799	@ 0x31f
 8011e58:	496f      	ldr	r1, [pc, #444]	@ (8012018 <etharp_output+0x1f0>)
 8011e5a:	486e      	ldr	r0, [pc, #440]	@ (8012014 <etharp_output+0x1ec>)
 8011e5c:	f001 ff5e 	bl	8013d1c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d106      	bne.n	8011e74 <etharp_output+0x4c>
 8011e66:	4b69      	ldr	r3, [pc, #420]	@ (801200c <etharp_output+0x1e4>)
 8011e68:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8011e6c:	496b      	ldr	r1, [pc, #428]	@ (801201c <etharp_output+0x1f4>)
 8011e6e:	4869      	ldr	r0, [pc, #420]	@ (8012014 <etharp_output+0x1ec>)
 8011e70:	f001 ff54 	bl	8013d1c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	681b      	ldr	r3, [r3, #0]
 8011e78:	68f9      	ldr	r1, [r7, #12]
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f000 fef8 	bl	8012c70 <ip4_addr_isbroadcast_u32>
 8011e80:	4603      	mov	r3, r0
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d002      	beq.n	8011e8c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8011e86:	4b66      	ldr	r3, [pc, #408]	@ (8012020 <etharp_output+0x1f8>)
 8011e88:	61fb      	str	r3, [r7, #28]
 8011e8a:	e0af      	b.n	8011fec <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	681b      	ldr	r3, [r3, #0]
 8011e90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8011e94:	2be0      	cmp	r3, #224	@ 0xe0
 8011e96:	d118      	bne.n	8011eca <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8011e98:	2301      	movs	r3, #1
 8011e9a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8011e9c:	2300      	movs	r3, #0
 8011e9e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8011ea0:	235e      	movs	r3, #94	@ 0x5e
 8011ea2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8011ea4:	687b      	ldr	r3, [r7, #4]
 8011ea6:	3301      	adds	r3, #1
 8011ea8:	781b      	ldrb	r3, [r3, #0]
 8011eaa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011eae:	b2db      	uxtb	r3, r3
 8011eb0:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	3302      	adds	r3, #2
 8011eb6:	781b      	ldrb	r3, [r3, #0]
 8011eb8:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8011eba:	687b      	ldr	r3, [r7, #4]
 8011ebc:	3303      	adds	r3, #3
 8011ebe:	781b      	ldrb	r3, [r3, #0]
 8011ec0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8011ec2:	f107 0310 	add.w	r3, r7, #16
 8011ec6:	61fb      	str	r3, [r7, #28]
 8011ec8:	e090      	b.n	8011fec <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	681a      	ldr	r2, [r3, #0]
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	3304      	adds	r3, #4
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	405a      	eors	r2, r3
 8011ed6:	68fb      	ldr	r3, [r7, #12]
 8011ed8:	3308      	adds	r3, #8
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	4013      	ands	r3, r2
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d012      	beq.n	8011f08 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8011ee8:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 8011eec:	4293      	cmp	r3, r2
 8011eee:	d00b      	beq.n	8011f08 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8011ef0:	68fb      	ldr	r3, [r7, #12]
 8011ef2:	330c      	adds	r3, #12
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d003      	beq.n	8011f02 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8011efa:	68fb      	ldr	r3, [r7, #12]
 8011efc:	330c      	adds	r3, #12
 8011efe:	61bb      	str	r3, [r7, #24]
 8011f00:	e002      	b.n	8011f08 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8011f02:	f06f 0303 	mvn.w	r3, #3
 8011f06:	e07d      	b.n	8012004 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011f08:	4b46      	ldr	r3, [pc, #280]	@ (8012024 <etharp_output+0x1fc>)
 8011f0a:	781b      	ldrb	r3, [r3, #0]
 8011f0c:	4619      	mov	r1, r3
 8011f0e:	4a46      	ldr	r2, [pc, #280]	@ (8012028 <etharp_output+0x200>)
 8011f10:	460b      	mov	r3, r1
 8011f12:	005b      	lsls	r3, r3, #1
 8011f14:	440b      	add	r3, r1
 8011f16:	00db      	lsls	r3, r3, #3
 8011f18:	4413      	add	r3, r2
 8011f1a:	3314      	adds	r3, #20
 8011f1c:	781b      	ldrb	r3, [r3, #0]
 8011f1e:	2b01      	cmp	r3, #1
 8011f20:	d925      	bls.n	8011f6e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011f22:	4b40      	ldr	r3, [pc, #256]	@ (8012024 <etharp_output+0x1fc>)
 8011f24:	781b      	ldrb	r3, [r3, #0]
 8011f26:	4619      	mov	r1, r3
 8011f28:	4a3f      	ldr	r2, [pc, #252]	@ (8012028 <etharp_output+0x200>)
 8011f2a:	460b      	mov	r3, r1
 8011f2c:	005b      	lsls	r3, r3, #1
 8011f2e:	440b      	add	r3, r1
 8011f30:	00db      	lsls	r3, r3, #3
 8011f32:	4413      	add	r3, r2
 8011f34:	3308      	adds	r3, #8
 8011f36:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8011f38:	68fa      	ldr	r2, [r7, #12]
 8011f3a:	429a      	cmp	r2, r3
 8011f3c:	d117      	bne.n	8011f6e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8011f3e:	69bb      	ldr	r3, [r7, #24]
 8011f40:	681a      	ldr	r2, [r3, #0]
 8011f42:	4b38      	ldr	r3, [pc, #224]	@ (8012024 <etharp_output+0x1fc>)
 8011f44:	781b      	ldrb	r3, [r3, #0]
 8011f46:	4618      	mov	r0, r3
 8011f48:	4937      	ldr	r1, [pc, #220]	@ (8012028 <etharp_output+0x200>)
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	005b      	lsls	r3, r3, #1
 8011f4e:	4403      	add	r3, r0
 8011f50:	00db      	lsls	r3, r3, #3
 8011f52:	440b      	add	r3, r1
 8011f54:	3304      	adds	r3, #4
 8011f56:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8011f58:	429a      	cmp	r2, r3
 8011f5a:	d108      	bne.n	8011f6e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8011f5c:	4b31      	ldr	r3, [pc, #196]	@ (8012024 <etharp_output+0x1fc>)
 8011f5e:	781b      	ldrb	r3, [r3, #0]
 8011f60:	461a      	mov	r2, r3
 8011f62:	68b9      	ldr	r1, [r7, #8]
 8011f64:	68f8      	ldr	r0, [r7, #12]
 8011f66:	f7ff fec5 	bl	8011cf4 <etharp_output_to_arp_index>
 8011f6a:	4603      	mov	r3, r0
 8011f6c:	e04a      	b.n	8012004 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011f6e:	2300      	movs	r3, #0
 8011f70:	75fb      	strb	r3, [r7, #23]
 8011f72:	e031      	b.n	8011fd8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011f74:	7dfa      	ldrb	r2, [r7, #23]
 8011f76:	492c      	ldr	r1, [pc, #176]	@ (8012028 <etharp_output+0x200>)
 8011f78:	4613      	mov	r3, r2
 8011f7a:	005b      	lsls	r3, r3, #1
 8011f7c:	4413      	add	r3, r2
 8011f7e:	00db      	lsls	r3, r3, #3
 8011f80:	440b      	add	r3, r1
 8011f82:	3314      	adds	r3, #20
 8011f84:	781b      	ldrb	r3, [r3, #0]
 8011f86:	2b01      	cmp	r3, #1
 8011f88:	d923      	bls.n	8011fd2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8011f8a:	7dfa      	ldrb	r2, [r7, #23]
 8011f8c:	4926      	ldr	r1, [pc, #152]	@ (8012028 <etharp_output+0x200>)
 8011f8e:	4613      	mov	r3, r2
 8011f90:	005b      	lsls	r3, r3, #1
 8011f92:	4413      	add	r3, r2
 8011f94:	00db      	lsls	r3, r3, #3
 8011f96:	440b      	add	r3, r1
 8011f98:	3308      	adds	r3, #8
 8011f9a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8011f9c:	68fa      	ldr	r2, [r7, #12]
 8011f9e:	429a      	cmp	r2, r3
 8011fa0:	d117      	bne.n	8011fd2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8011fa2:	69bb      	ldr	r3, [r7, #24]
 8011fa4:	6819      	ldr	r1, [r3, #0]
 8011fa6:	7dfa      	ldrb	r2, [r7, #23]
 8011fa8:	481f      	ldr	r0, [pc, #124]	@ (8012028 <etharp_output+0x200>)
 8011faa:	4613      	mov	r3, r2
 8011fac:	005b      	lsls	r3, r3, #1
 8011fae:	4413      	add	r3, r2
 8011fb0:	00db      	lsls	r3, r3, #3
 8011fb2:	4403      	add	r3, r0
 8011fb4:	3304      	adds	r3, #4
 8011fb6:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8011fb8:	4299      	cmp	r1, r3
 8011fba:	d10a      	bne.n	8011fd2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8011fbc:	4a19      	ldr	r2, [pc, #100]	@ (8012024 <etharp_output+0x1fc>)
 8011fbe:	7dfb      	ldrb	r3, [r7, #23]
 8011fc0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8011fc2:	7dfb      	ldrb	r3, [r7, #23]
 8011fc4:	461a      	mov	r2, r3
 8011fc6:	68b9      	ldr	r1, [r7, #8]
 8011fc8:	68f8      	ldr	r0, [r7, #12]
 8011fca:	f7ff fe93 	bl	8011cf4 <etharp_output_to_arp_index>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	e018      	b.n	8012004 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8011fd2:	7dfb      	ldrb	r3, [r7, #23]
 8011fd4:	3301      	adds	r3, #1
 8011fd6:	75fb      	strb	r3, [r7, #23]
 8011fd8:	7dfb      	ldrb	r3, [r7, #23]
 8011fda:	2b09      	cmp	r3, #9
 8011fdc:	d9ca      	bls.n	8011f74 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8011fde:	68ba      	ldr	r2, [r7, #8]
 8011fe0:	69b9      	ldr	r1, [r7, #24]
 8011fe2:	68f8      	ldr	r0, [r7, #12]
 8011fe4:	f000 f822 	bl	801202c <etharp_query>
 8011fe8:	4603      	mov	r3, r0
 8011fea:	e00b      	b.n	8012004 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8011ff2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8011ff6:	9300      	str	r3, [sp, #0]
 8011ff8:	69fb      	ldr	r3, [r7, #28]
 8011ffa:	68b9      	ldr	r1, [r7, #8]
 8011ffc:	68f8      	ldr	r0, [r7, #12]
 8011ffe:	f001 fd45 	bl	8013a8c <ethernet_output>
 8012002:	4603      	mov	r3, r0
}
 8012004:	4618      	mov	r0, r3
 8012006:	3720      	adds	r7, #32
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}
 801200c:	08016e60 	.word	0x08016e60
 8012010:	08016fb0 	.word	0x08016fb0
 8012014:	08016ed8 	.word	0x08016ed8
 8012018:	08017000 	.word	0x08017000
 801201c:	08016fa0 	.word	0x08016fa0
 8012020:	08017624 	.word	0x08017624
 8012024:	2000b2f4 	.word	0x2000b2f4
 8012028:	2000b204 	.word	0x2000b204

0801202c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b08c      	sub	sp, #48	@ 0x30
 8012030:	af02      	add	r7, sp, #8
 8012032:	60f8      	str	r0, [r7, #12]
 8012034:	60b9      	str	r1, [r7, #8]
 8012036:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012038:	68fb      	ldr	r3, [r7, #12]
 801203a:	3326      	adds	r3, #38	@ 0x26
 801203c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801203e:	23ff      	movs	r3, #255	@ 0xff
 8012040:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 8012044:	2300      	movs	r3, #0
 8012046:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012048:	68bb      	ldr	r3, [r7, #8]
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	68f9      	ldr	r1, [r7, #12]
 801204e:	4618      	mov	r0, r3
 8012050:	f000 fe0e 	bl	8012c70 <ip4_addr_isbroadcast_u32>
 8012054:	4603      	mov	r3, r0
 8012056:	2b00      	cmp	r3, #0
 8012058:	d10c      	bne.n	8012074 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801205a:	68bb      	ldr	r3, [r7, #8]
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012062:	2be0      	cmp	r3, #224	@ 0xe0
 8012064:	d006      	beq.n	8012074 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012066:	68bb      	ldr	r3, [r7, #8]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d003      	beq.n	8012074 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801206c:	68bb      	ldr	r3, [r7, #8]
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d102      	bne.n	801207a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012074:	f06f 030f 	mvn.w	r3, #15
 8012078:	e101      	b.n	801227e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801207a:	68fa      	ldr	r2, [r7, #12]
 801207c:	2101      	movs	r1, #1
 801207e:	68b8      	ldr	r0, [r7, #8]
 8012080:	f7ff fb60 	bl	8011744 <etharp_find_entry>
 8012084:	4603      	mov	r3, r0
 8012086:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012088:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801208c:	2b00      	cmp	r3, #0
 801208e:	da02      	bge.n	8012096 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012090:	8a7b      	ldrh	r3, [r7, #18]
 8012092:	b25b      	sxtb	r3, r3
 8012094:	e0f3      	b.n	801227e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8012096:	8a7b      	ldrh	r3, [r7, #18]
 8012098:	2b7e      	cmp	r3, #126	@ 0x7e
 801209a:	d906      	bls.n	80120aa <etharp_query+0x7e>
 801209c:	4b7a      	ldr	r3, [pc, #488]	@ (8012288 <etharp_query+0x25c>)
 801209e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 80120a2:	497a      	ldr	r1, [pc, #488]	@ (801228c <etharp_query+0x260>)
 80120a4:	487a      	ldr	r0, [pc, #488]	@ (8012290 <etharp_query+0x264>)
 80120a6:	f001 fe39 	bl	8013d1c <iprintf>
  i = (netif_addr_idx_t)i_err;
 80120aa:	8a7b      	ldrh	r3, [r7, #18]
 80120ac:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80120ae:	7c7a      	ldrb	r2, [r7, #17]
 80120b0:	4978      	ldr	r1, [pc, #480]	@ (8012294 <etharp_query+0x268>)
 80120b2:	4613      	mov	r3, r2
 80120b4:	005b      	lsls	r3, r3, #1
 80120b6:	4413      	add	r3, r2
 80120b8:	00db      	lsls	r3, r3, #3
 80120ba:	440b      	add	r3, r1
 80120bc:	3314      	adds	r3, #20
 80120be:	781b      	ldrb	r3, [r3, #0]
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d115      	bne.n	80120f0 <etharp_query+0xc4>
    is_new_entry = 1;
 80120c4:	2301      	movs	r3, #1
 80120c6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80120c8:	7c7a      	ldrb	r2, [r7, #17]
 80120ca:	4972      	ldr	r1, [pc, #456]	@ (8012294 <etharp_query+0x268>)
 80120cc:	4613      	mov	r3, r2
 80120ce:	005b      	lsls	r3, r3, #1
 80120d0:	4413      	add	r3, r2
 80120d2:	00db      	lsls	r3, r3, #3
 80120d4:	440b      	add	r3, r1
 80120d6:	3314      	adds	r3, #20
 80120d8:	2201      	movs	r2, #1
 80120da:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80120dc:	7c7a      	ldrb	r2, [r7, #17]
 80120de:	496d      	ldr	r1, [pc, #436]	@ (8012294 <etharp_query+0x268>)
 80120e0:	4613      	mov	r3, r2
 80120e2:	005b      	lsls	r3, r3, #1
 80120e4:	4413      	add	r3, r2
 80120e6:	00db      	lsls	r3, r3, #3
 80120e8:	440b      	add	r3, r1
 80120ea:	3308      	adds	r3, #8
 80120ec:	68fa      	ldr	r2, [r7, #12]
 80120ee:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80120f0:	7c7a      	ldrb	r2, [r7, #17]
 80120f2:	4968      	ldr	r1, [pc, #416]	@ (8012294 <etharp_query+0x268>)
 80120f4:	4613      	mov	r3, r2
 80120f6:	005b      	lsls	r3, r3, #1
 80120f8:	4413      	add	r3, r2
 80120fa:	00db      	lsls	r3, r3, #3
 80120fc:	440b      	add	r3, r1
 80120fe:	3314      	adds	r3, #20
 8012100:	781b      	ldrb	r3, [r3, #0]
 8012102:	2b01      	cmp	r3, #1
 8012104:	d011      	beq.n	801212a <etharp_query+0xfe>
 8012106:	7c7a      	ldrb	r2, [r7, #17]
 8012108:	4962      	ldr	r1, [pc, #392]	@ (8012294 <etharp_query+0x268>)
 801210a:	4613      	mov	r3, r2
 801210c:	005b      	lsls	r3, r3, #1
 801210e:	4413      	add	r3, r2
 8012110:	00db      	lsls	r3, r3, #3
 8012112:	440b      	add	r3, r1
 8012114:	3314      	adds	r3, #20
 8012116:	781b      	ldrb	r3, [r3, #0]
 8012118:	2b01      	cmp	r3, #1
 801211a:	d806      	bhi.n	801212a <etharp_query+0xfe>
 801211c:	4b5a      	ldr	r3, [pc, #360]	@ (8012288 <etharp_query+0x25c>)
 801211e:	f240 32cd 	movw	r2, #973	@ 0x3cd
 8012122:	495d      	ldr	r1, [pc, #372]	@ (8012298 <etharp_query+0x26c>)
 8012124:	485a      	ldr	r0, [pc, #360]	@ (8012290 <etharp_query+0x264>)
 8012126:	f001 fdf9 	bl	8013d1c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801212a:	6a3b      	ldr	r3, [r7, #32]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d102      	bne.n	8012136 <etharp_query+0x10a>
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	2b00      	cmp	r3, #0
 8012134:	d10c      	bne.n	8012150 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8012136:	68b9      	ldr	r1, [r7, #8]
 8012138:	68f8      	ldr	r0, [r7, #12]
 801213a:	f000 f963 	bl	8012404 <etharp_request>
 801213e:	4603      	mov	r3, r0
 8012140:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d102      	bne.n	8012150 <etharp_query+0x124>
      return result;
 801214a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801214e:	e096      	b.n	801227e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d106      	bne.n	8012164 <etharp_query+0x138>
 8012156:	4b4c      	ldr	r3, [pc, #304]	@ (8012288 <etharp_query+0x25c>)
 8012158:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801215c:	494f      	ldr	r1, [pc, #316]	@ (801229c <etharp_query+0x270>)
 801215e:	484c      	ldr	r0, [pc, #304]	@ (8012290 <etharp_query+0x264>)
 8012160:	f001 fddc 	bl	8013d1c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012164:	7c7a      	ldrb	r2, [r7, #17]
 8012166:	494b      	ldr	r1, [pc, #300]	@ (8012294 <etharp_query+0x268>)
 8012168:	4613      	mov	r3, r2
 801216a:	005b      	lsls	r3, r3, #1
 801216c:	4413      	add	r3, r2
 801216e:	00db      	lsls	r3, r3, #3
 8012170:	440b      	add	r3, r1
 8012172:	3314      	adds	r3, #20
 8012174:	781b      	ldrb	r3, [r3, #0]
 8012176:	2b01      	cmp	r3, #1
 8012178:	d917      	bls.n	80121aa <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801217a:	4a49      	ldr	r2, [pc, #292]	@ (80122a0 <etharp_query+0x274>)
 801217c:	7c7b      	ldrb	r3, [r7, #17]
 801217e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012180:	7c7a      	ldrb	r2, [r7, #17]
 8012182:	4613      	mov	r3, r2
 8012184:	005b      	lsls	r3, r3, #1
 8012186:	4413      	add	r3, r2
 8012188:	00db      	lsls	r3, r3, #3
 801218a:	3308      	adds	r3, #8
 801218c:	4a41      	ldr	r2, [pc, #260]	@ (8012294 <etharp_query+0x268>)
 801218e:	4413      	add	r3, r2
 8012190:	3304      	adds	r3, #4
 8012192:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8012196:	9200      	str	r2, [sp, #0]
 8012198:	697a      	ldr	r2, [r7, #20]
 801219a:	6879      	ldr	r1, [r7, #4]
 801219c:	68f8      	ldr	r0, [r7, #12]
 801219e:	f001 fc75 	bl	8013a8c <ethernet_output>
 80121a2:	4603      	mov	r3, r0
 80121a4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80121a8:	e067      	b.n	801227a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80121aa:	7c7a      	ldrb	r2, [r7, #17]
 80121ac:	4939      	ldr	r1, [pc, #228]	@ (8012294 <etharp_query+0x268>)
 80121ae:	4613      	mov	r3, r2
 80121b0:	005b      	lsls	r3, r3, #1
 80121b2:	4413      	add	r3, r2
 80121b4:	00db      	lsls	r3, r3, #3
 80121b6:	440b      	add	r3, r1
 80121b8:	3314      	adds	r3, #20
 80121ba:	781b      	ldrb	r3, [r3, #0]
 80121bc:	2b01      	cmp	r3, #1
 80121be:	d15c      	bne.n	801227a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80121c0:	2300      	movs	r3, #0
 80121c2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80121c8:	e01c      	b.n	8012204 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80121ca:	69fb      	ldr	r3, [r7, #28]
 80121cc:	895a      	ldrh	r2, [r3, #10]
 80121ce:	69fb      	ldr	r3, [r7, #28]
 80121d0:	891b      	ldrh	r3, [r3, #8]
 80121d2:	429a      	cmp	r2, r3
 80121d4:	d10a      	bne.n	80121ec <etharp_query+0x1c0>
 80121d6:	69fb      	ldr	r3, [r7, #28]
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d006      	beq.n	80121ec <etharp_query+0x1c0>
 80121de:	4b2a      	ldr	r3, [pc, #168]	@ (8012288 <etharp_query+0x25c>)
 80121e0:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 80121e4:	492f      	ldr	r1, [pc, #188]	@ (80122a4 <etharp_query+0x278>)
 80121e6:	482a      	ldr	r0, [pc, #168]	@ (8012290 <etharp_query+0x264>)
 80121e8:	f001 fd98 	bl	8013d1c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80121ec:	69fb      	ldr	r3, [r7, #28]
 80121ee:	7b1b      	ldrb	r3, [r3, #12]
 80121f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d002      	beq.n	80121fe <etharp_query+0x1d2>
        copy_needed = 1;
 80121f8:	2301      	movs	r3, #1
 80121fa:	61bb      	str	r3, [r7, #24]
        break;
 80121fc:	e005      	b.n	801220a <etharp_query+0x1de>
      }
      p = p->next;
 80121fe:	69fb      	ldr	r3, [r7, #28]
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012204:	69fb      	ldr	r3, [r7, #28]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d1df      	bne.n	80121ca <etharp_query+0x19e>
    }
    if (copy_needed) {
 801220a:	69bb      	ldr	r3, [r7, #24]
 801220c:	2b00      	cmp	r3, #0
 801220e:	d007      	beq.n	8012220 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012210:	687a      	ldr	r2, [r7, #4]
 8012212:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8012216:	200e      	movs	r0, #14
 8012218:	f7f9 fbc6 	bl	800b9a8 <pbuf_clone>
 801221c:	61f8      	str	r0, [r7, #28]
 801221e:	e004      	b.n	801222a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012224:	69f8      	ldr	r0, [r7, #28]
 8012226:	f7f9 fa03 	bl	800b630 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801222a:	69fb      	ldr	r3, [r7, #28]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d021      	beq.n	8012274 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012230:	7c7a      	ldrb	r2, [r7, #17]
 8012232:	4918      	ldr	r1, [pc, #96]	@ (8012294 <etharp_query+0x268>)
 8012234:	4613      	mov	r3, r2
 8012236:	005b      	lsls	r3, r3, #1
 8012238:	4413      	add	r3, r2
 801223a:	00db      	lsls	r3, r3, #3
 801223c:	440b      	add	r3, r1
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d00a      	beq.n	801225a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8012244:	7c7a      	ldrb	r2, [r7, #17]
 8012246:	4913      	ldr	r1, [pc, #76]	@ (8012294 <etharp_query+0x268>)
 8012248:	4613      	mov	r3, r2
 801224a:	005b      	lsls	r3, r3, #1
 801224c:	4413      	add	r3, r2
 801224e:	00db      	lsls	r3, r3, #3
 8012250:	440b      	add	r3, r1
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	4618      	mov	r0, r3
 8012256:	f7f9 f94b 	bl	800b4f0 <pbuf_free>
      }
      arp_table[i].q = p;
 801225a:	7c7a      	ldrb	r2, [r7, #17]
 801225c:	490d      	ldr	r1, [pc, #52]	@ (8012294 <etharp_query+0x268>)
 801225e:	4613      	mov	r3, r2
 8012260:	005b      	lsls	r3, r3, #1
 8012262:	4413      	add	r3, r2
 8012264:	00db      	lsls	r3, r3, #3
 8012266:	440b      	add	r3, r1
 8012268:	69fa      	ldr	r2, [r7, #28]
 801226a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801226c:	2300      	movs	r3, #0
 801226e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012272:	e002      	b.n	801227a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012274:	23ff      	movs	r3, #255	@ 0xff
 8012276:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801227a:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801227e:	4618      	mov	r0, r3
 8012280:	3728      	adds	r7, #40	@ 0x28
 8012282:	46bd      	mov	sp, r7
 8012284:	bd80      	pop	{r7, pc}
 8012286:	bf00      	nop
 8012288:	08016e60 	.word	0x08016e60
 801228c:	0801700c 	.word	0x0801700c
 8012290:	08016ed8 	.word	0x08016ed8
 8012294:	2000b204 	.word	0x2000b204
 8012298:	0801701c 	.word	0x0801701c
 801229c:	08017000 	.word	0x08017000
 80122a0:	2000b2f4 	.word	0x2000b2f4
 80122a4:	08017044 	.word	0x08017044

080122a8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80122a8:	b580      	push	{r7, lr}
 80122aa:	b08a      	sub	sp, #40	@ 0x28
 80122ac:	af02      	add	r7, sp, #8
 80122ae:	60f8      	str	r0, [r7, #12]
 80122b0:	60b9      	str	r1, [r7, #8]
 80122b2:	607a      	str	r2, [r7, #4]
 80122b4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80122b6:	2300      	movs	r3, #0
 80122b8:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d106      	bne.n	80122ce <etharp_raw+0x26>
 80122c0:	4b3a      	ldr	r3, [pc, #232]	@ (80123ac <etharp_raw+0x104>)
 80122c2:	f240 4257 	movw	r2, #1111	@ 0x457
 80122c6:	493a      	ldr	r1, [pc, #232]	@ (80123b0 <etharp_raw+0x108>)
 80122c8:	483a      	ldr	r0, [pc, #232]	@ (80123b4 <etharp_raw+0x10c>)
 80122ca:	f001 fd27 	bl	8013d1c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80122ce:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80122d2:	211c      	movs	r1, #28
 80122d4:	200e      	movs	r0, #14
 80122d6:	f7f8 fe27 	bl	800af28 <pbuf_alloc>
 80122da:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80122dc:	69bb      	ldr	r3, [r7, #24]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d102      	bne.n	80122e8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80122e2:	f04f 33ff 	mov.w	r3, #4294967295
 80122e6:	e05d      	b.n	80123a4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80122e8:	69bb      	ldr	r3, [r7, #24]
 80122ea:	895b      	ldrh	r3, [r3, #10]
 80122ec:	2b1b      	cmp	r3, #27
 80122ee:	d806      	bhi.n	80122fe <etharp_raw+0x56>
 80122f0:	4b2e      	ldr	r3, [pc, #184]	@ (80123ac <etharp_raw+0x104>)
 80122f2:	f240 4262 	movw	r2, #1122	@ 0x462
 80122f6:	4930      	ldr	r1, [pc, #192]	@ (80123b8 <etharp_raw+0x110>)
 80122f8:	482e      	ldr	r0, [pc, #184]	@ (80123b4 <etharp_raw+0x10c>)
 80122fa:	f001 fd0f 	bl	8013d1c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80122fe:	69bb      	ldr	r3, [r7, #24]
 8012300:	685b      	ldr	r3, [r3, #4]
 8012302:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012304:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8012306:	4618      	mov	r0, r3
 8012308:	f7f7 fd94 	bl	8009e34 <lwip_htons>
 801230c:	4603      	mov	r3, r0
 801230e:	461a      	mov	r2, r3
 8012310:	697b      	ldr	r3, [r7, #20]
 8012312:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801231a:	2b06      	cmp	r3, #6
 801231c:	d006      	beq.n	801232c <etharp_raw+0x84>
 801231e:	4b23      	ldr	r3, [pc, #140]	@ (80123ac <etharp_raw+0x104>)
 8012320:	f240 4269 	movw	r2, #1129	@ 0x469
 8012324:	4925      	ldr	r1, [pc, #148]	@ (80123bc <etharp_raw+0x114>)
 8012326:	4823      	ldr	r0, [pc, #140]	@ (80123b4 <etharp_raw+0x10c>)
 8012328:	f001 fcf8 	bl	8013d1c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801232c:	697b      	ldr	r3, [r7, #20]
 801232e:	3308      	adds	r3, #8
 8012330:	2206      	movs	r2, #6
 8012332:	6839      	ldr	r1, [r7, #0]
 8012334:	4618      	mov	r0, r3
 8012336:	f001 fdcc 	bl	8013ed2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801233a:	697b      	ldr	r3, [r7, #20]
 801233c:	3312      	adds	r3, #18
 801233e:	2206      	movs	r2, #6
 8012340:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012342:	4618      	mov	r0, r3
 8012344:	f001 fdc5 	bl	8013ed2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012348:	697b      	ldr	r3, [r7, #20]
 801234a:	330e      	adds	r3, #14
 801234c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801234e:	6812      	ldr	r2, [r2, #0]
 8012350:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8012352:	697b      	ldr	r3, [r7, #20]
 8012354:	3318      	adds	r3, #24
 8012356:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012358:	6812      	ldr	r2, [r2, #0]
 801235a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801235c:	697b      	ldr	r3, [r7, #20]
 801235e:	2200      	movs	r2, #0
 8012360:	701a      	strb	r2, [r3, #0]
 8012362:	2200      	movs	r2, #0
 8012364:	f042 0201 	orr.w	r2, r2, #1
 8012368:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801236a:	697b      	ldr	r3, [r7, #20]
 801236c:	2200      	movs	r2, #0
 801236e:	f042 0208 	orr.w	r2, r2, #8
 8012372:	709a      	strb	r2, [r3, #2]
 8012374:	2200      	movs	r2, #0
 8012376:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012378:	697b      	ldr	r3, [r7, #20]
 801237a:	2206      	movs	r2, #6
 801237c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801237e:	697b      	ldr	r3, [r7, #20]
 8012380:	2204      	movs	r2, #4
 8012382:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012384:	f640 0306 	movw	r3, #2054	@ 0x806
 8012388:	9300      	str	r3, [sp, #0]
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	68ba      	ldr	r2, [r7, #8]
 801238e:	69b9      	ldr	r1, [r7, #24]
 8012390:	68f8      	ldr	r0, [r7, #12]
 8012392:	f001 fb7b 	bl	8013a8c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8012396:	69b8      	ldr	r0, [r7, #24]
 8012398:	f7f9 f8aa 	bl	800b4f0 <pbuf_free>
  p = NULL;
 801239c:	2300      	movs	r3, #0
 801239e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80123a0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80123a4:	4618      	mov	r0, r3
 80123a6:	3720      	adds	r7, #32
 80123a8:	46bd      	mov	sp, r7
 80123aa:	bd80      	pop	{r7, pc}
 80123ac:	08016e60 	.word	0x08016e60
 80123b0:	08016fb0 	.word	0x08016fb0
 80123b4:	08016ed8 	.word	0x08016ed8
 80123b8:	08017060 	.word	0x08017060
 80123bc:	08017094 	.word	0x08017094

080123c0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b088      	sub	sp, #32
 80123c4:	af04      	add	r7, sp, #16
 80123c6:	60f8      	str	r0, [r7, #12]
 80123c8:	60b9      	str	r1, [r7, #8]
 80123ca:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	f103 0126 	add.w	r1, r3, #38	@ 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80123dc:	2201      	movs	r2, #1
 80123de:	9203      	str	r2, [sp, #12]
 80123e0:	68ba      	ldr	r2, [r7, #8]
 80123e2:	9202      	str	r2, [sp, #8]
 80123e4:	4a06      	ldr	r2, [pc, #24]	@ (8012400 <etharp_request_dst+0x40>)
 80123e6:	9201      	str	r2, [sp, #4]
 80123e8:	9300      	str	r3, [sp, #0]
 80123ea:	4603      	mov	r3, r0
 80123ec:	687a      	ldr	r2, [r7, #4]
 80123ee:	68f8      	ldr	r0, [r7, #12]
 80123f0:	f7ff ff5a 	bl	80122a8 <etharp_raw>
 80123f4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80123f6:	4618      	mov	r0, r3
 80123f8:	3710      	adds	r7, #16
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd80      	pop	{r7, pc}
 80123fe:	bf00      	nop
 8012400:	0801762c 	.word	0x0801762c

08012404 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012404:	b580      	push	{r7, lr}
 8012406:	b082      	sub	sp, #8
 8012408:	af00      	add	r7, sp, #0
 801240a:	6078      	str	r0, [r7, #4]
 801240c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801240e:	4a05      	ldr	r2, [pc, #20]	@ (8012424 <etharp_request+0x20>)
 8012410:	6839      	ldr	r1, [r7, #0]
 8012412:	6878      	ldr	r0, [r7, #4]
 8012414:	f7ff ffd4 	bl	80123c0 <etharp_request_dst>
 8012418:	4603      	mov	r3, r0
}
 801241a:	4618      	mov	r0, r3
 801241c:	3708      	adds	r7, #8
 801241e:	46bd      	mov	sp, r7
 8012420:	bd80      	pop	{r7, pc}
 8012422:	bf00      	nop
 8012424:	08017624 	.word	0x08017624

08012428 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b08e      	sub	sp, #56	@ 0x38
 801242c:	af04      	add	r7, sp, #16
 801242e:	6078      	str	r0, [r7, #4]
 8012430:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012432:	4b79      	ldr	r3, [pc, #484]	@ (8012618 <icmp_input+0x1f0>)
 8012434:	689b      	ldr	r3, [r3, #8]
 8012436:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801243a:	781b      	ldrb	r3, [r3, #0]
 801243c:	f003 030f 	and.w	r3, r3, #15
 8012440:	b2db      	uxtb	r3, r3
 8012442:	009b      	lsls	r3, r3, #2
 8012444:	b2db      	uxtb	r3, r3
 8012446:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 8012448:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801244a:	2b13      	cmp	r3, #19
 801244c:	f240 80cd 	bls.w	80125ea <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	895b      	ldrh	r3, [r3, #10]
 8012454:	2b03      	cmp	r3, #3
 8012456:	f240 80ca 	bls.w	80125ee <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	685b      	ldr	r3, [r3, #4]
 801245e:	781b      	ldrb	r3, [r3, #0]
 8012460:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012464:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8012468:	2b00      	cmp	r3, #0
 801246a:	f000 80b7 	beq.w	80125dc <icmp_input+0x1b4>
 801246e:	2b08      	cmp	r3, #8
 8012470:	f040 80b7 	bne.w	80125e2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012474:	4b69      	ldr	r3, [pc, #420]	@ (801261c <icmp_input+0x1f4>)
 8012476:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012478:	4b67      	ldr	r3, [pc, #412]	@ (8012618 <icmp_input+0x1f0>)
 801247a:	695b      	ldr	r3, [r3, #20]
 801247c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012480:	2be0      	cmp	r3, #224	@ 0xe0
 8012482:	f000 80bb 	beq.w	80125fc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012486:	4b64      	ldr	r3, [pc, #400]	@ (8012618 <icmp_input+0x1f0>)
 8012488:	695b      	ldr	r3, [r3, #20]
 801248a:	4a63      	ldr	r2, [pc, #396]	@ (8012618 <icmp_input+0x1f0>)
 801248c:	6812      	ldr	r2, [r2, #0]
 801248e:	4611      	mov	r1, r2
 8012490:	4618      	mov	r0, r3
 8012492:	f000 fbed 	bl	8012c70 <ip4_addr_isbroadcast_u32>
 8012496:	4603      	mov	r3, r0
 8012498:	2b00      	cmp	r3, #0
 801249a:	f040 80b1 	bne.w	8012600 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	891b      	ldrh	r3, [r3, #8]
 80124a2:	2b07      	cmp	r3, #7
 80124a4:	f240 80a5 	bls.w	80125f2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80124a8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80124aa:	330e      	adds	r3, #14
 80124ac:	4619      	mov	r1, r3
 80124ae:	6878      	ldr	r0, [r7, #4]
 80124b0:	f7f8 ff88 	bl	800b3c4 <pbuf_add_header>
 80124b4:	4603      	mov	r3, r0
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d04b      	beq.n	8012552 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80124ba:	687b      	ldr	r3, [r7, #4]
 80124bc:	891a      	ldrh	r2, [r3, #8]
 80124be:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80124c0:	4413      	add	r3, r2
 80124c2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	891b      	ldrh	r3, [r3, #8]
 80124c8:	8b7a      	ldrh	r2, [r7, #26]
 80124ca:	429a      	cmp	r2, r3
 80124cc:	f0c0 809a 	bcc.w	8012604 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80124d0:	8b7b      	ldrh	r3, [r7, #26]
 80124d2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80124d6:	4619      	mov	r1, r3
 80124d8:	200e      	movs	r0, #14
 80124da:	f7f8 fd25 	bl	800af28 <pbuf_alloc>
 80124de:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80124e0:	697b      	ldr	r3, [r7, #20]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	f000 8090 	beq.w	8012608 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80124e8:	697b      	ldr	r3, [r7, #20]
 80124ea:	895b      	ldrh	r3, [r3, #10]
 80124ec:	461a      	mov	r2, r3
 80124ee:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80124f0:	3308      	adds	r3, #8
 80124f2:	429a      	cmp	r2, r3
 80124f4:	d203      	bcs.n	80124fe <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80124f6:	6978      	ldr	r0, [r7, #20]
 80124f8:	f7f8 fffa 	bl	800b4f0 <pbuf_free>
          goto icmperr;
 80124fc:	e085      	b.n	801260a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80124fe:	697b      	ldr	r3, [r7, #20]
 8012500:	685b      	ldr	r3, [r3, #4]
 8012502:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012504:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012506:	4618      	mov	r0, r3
 8012508:	f001 fce3 	bl	8013ed2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801250c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801250e:	4619      	mov	r1, r3
 8012510:	6978      	ldr	r0, [r7, #20]
 8012512:	f7f8 ff67 	bl	800b3e4 <pbuf_remove_header>
 8012516:	4603      	mov	r3, r0
 8012518:	2b00      	cmp	r3, #0
 801251a:	d009      	beq.n	8012530 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801251c:	4b40      	ldr	r3, [pc, #256]	@ (8012620 <icmp_input+0x1f8>)
 801251e:	22b6      	movs	r2, #182	@ 0xb6
 8012520:	4940      	ldr	r1, [pc, #256]	@ (8012624 <icmp_input+0x1fc>)
 8012522:	4841      	ldr	r0, [pc, #260]	@ (8012628 <icmp_input+0x200>)
 8012524:	f001 fbfa 	bl	8013d1c <iprintf>
          pbuf_free(r);
 8012528:	6978      	ldr	r0, [r7, #20]
 801252a:	f7f8 ffe1 	bl	800b4f0 <pbuf_free>
          goto icmperr;
 801252e:	e06c      	b.n	801260a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012530:	6879      	ldr	r1, [r7, #4]
 8012532:	6978      	ldr	r0, [r7, #20]
 8012534:	f7f9 f8f4 	bl	800b720 <pbuf_copy>
 8012538:	4603      	mov	r3, r0
 801253a:	2b00      	cmp	r3, #0
 801253c:	d003      	beq.n	8012546 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801253e:	6978      	ldr	r0, [r7, #20]
 8012540:	f7f8 ffd6 	bl	800b4f0 <pbuf_free>
          goto icmperr;
 8012544:	e061      	b.n	801260a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8012546:	6878      	ldr	r0, [r7, #4]
 8012548:	f7f8 ffd2 	bl	800b4f0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801254c:	697b      	ldr	r3, [r7, #20]
 801254e:	607b      	str	r3, [r7, #4]
 8012550:	e00f      	b.n	8012572 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012552:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012554:	330e      	adds	r3, #14
 8012556:	4619      	mov	r1, r3
 8012558:	6878      	ldr	r0, [r7, #4]
 801255a:	f7f8 ff43 	bl	800b3e4 <pbuf_remove_header>
 801255e:	4603      	mov	r3, r0
 8012560:	2b00      	cmp	r3, #0
 8012562:	d006      	beq.n	8012572 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012564:	4b2e      	ldr	r3, [pc, #184]	@ (8012620 <icmp_input+0x1f8>)
 8012566:	22c7      	movs	r2, #199	@ 0xc7
 8012568:	4930      	ldr	r1, [pc, #192]	@ (801262c <icmp_input+0x204>)
 801256a:	482f      	ldr	r0, [pc, #188]	@ (8012628 <icmp_input+0x200>)
 801256c:	f001 fbd6 	bl	8013d1c <iprintf>
          goto icmperr;
 8012570:	e04b      	b.n	801260a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	685b      	ldr	r3, [r3, #4]
 8012576:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012578:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801257a:	4619      	mov	r1, r3
 801257c:	6878      	ldr	r0, [r7, #4]
 801257e:	f7f8 ff21 	bl	800b3c4 <pbuf_add_header>
 8012582:	4603      	mov	r3, r0
 8012584:	2b00      	cmp	r3, #0
 8012586:	d12b      	bne.n	80125e0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	685b      	ldr	r3, [r3, #4]
 801258c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801258e:	69fb      	ldr	r3, [r7, #28]
 8012590:	681a      	ldr	r2, [r3, #0]
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012596:	4b20      	ldr	r3, [pc, #128]	@ (8012618 <icmp_input+0x1f0>)
 8012598:	691a      	ldr	r2, [r3, #16]
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801259e:	693b      	ldr	r3, [r7, #16]
 80125a0:	2200      	movs	r2, #0
 80125a2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80125a4:	693b      	ldr	r3, [r7, #16]
 80125a6:	2200      	movs	r2, #0
 80125a8:	709a      	strb	r2, [r3, #2]
 80125aa:	2200      	movs	r2, #0
 80125ac:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	22ff      	movs	r2, #255	@ 0xff
 80125b2:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	2200      	movs	r2, #0
 80125b8:	729a      	strb	r2, [r3, #10]
 80125ba:	2200      	movs	r2, #0
 80125bc:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80125be:	683b      	ldr	r3, [r7, #0]
 80125c0:	9302      	str	r3, [sp, #8]
 80125c2:	2301      	movs	r3, #1
 80125c4:	9301      	str	r3, [sp, #4]
 80125c6:	2300      	movs	r3, #0
 80125c8:	9300      	str	r3, [sp, #0]
 80125ca:	23ff      	movs	r3, #255	@ 0xff
 80125cc:	2200      	movs	r2, #0
 80125ce:	69f9      	ldr	r1, [r7, #28]
 80125d0:	6878      	ldr	r0, [r7, #4]
 80125d2:	f000 fa75 	bl	8012ac0 <ip4_output_if>
 80125d6:	4603      	mov	r3, r0
 80125d8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80125da:	e001      	b.n	80125e0 <icmp_input+0x1b8>
      break;
 80125dc:	bf00      	nop
 80125de:	e000      	b.n	80125e2 <icmp_input+0x1ba>
      break;
 80125e0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80125e2:	6878      	ldr	r0, [r7, #4]
 80125e4:	f7f8 ff84 	bl	800b4f0 <pbuf_free>
  return;
 80125e8:	e013      	b.n	8012612 <icmp_input+0x1ea>
    goto lenerr;
 80125ea:	bf00      	nop
 80125ec:	e002      	b.n	80125f4 <icmp_input+0x1cc>
    goto lenerr;
 80125ee:	bf00      	nop
 80125f0:	e000      	b.n	80125f4 <icmp_input+0x1cc>
        goto lenerr;
 80125f2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80125f4:	6878      	ldr	r0, [r7, #4]
 80125f6:	f7f8 ff7b 	bl	800b4f0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80125fa:	e00a      	b.n	8012612 <icmp_input+0x1ea>
        goto icmperr;
 80125fc:	bf00      	nop
 80125fe:	e004      	b.n	801260a <icmp_input+0x1e2>
        goto icmperr;
 8012600:	bf00      	nop
 8012602:	e002      	b.n	801260a <icmp_input+0x1e2>
          goto icmperr;
 8012604:	bf00      	nop
 8012606:	e000      	b.n	801260a <icmp_input+0x1e2>
          goto icmperr;
 8012608:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801260a:	6878      	ldr	r0, [r7, #4]
 801260c:	f7f8 ff70 	bl	800b4f0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012610:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012612:	3728      	adds	r7, #40	@ 0x28
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}
 8012618:	20005a74 	.word	0x20005a74
 801261c:	20005a88 	.word	0x20005a88
 8012620:	080170d8 	.word	0x080170d8
 8012624:	08017110 	.word	0x08017110
 8012628:	08017148 	.word	0x08017148
 801262c:	08017170 	.word	0x08017170

08012630 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012630:	b580      	push	{r7, lr}
 8012632:	b082      	sub	sp, #8
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
 8012638:	460b      	mov	r3, r1
 801263a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801263c:	78fb      	ldrb	r3, [r7, #3]
 801263e:	461a      	mov	r2, r3
 8012640:	2103      	movs	r1, #3
 8012642:	6878      	ldr	r0, [r7, #4]
 8012644:	f000 f814 	bl	8012670 <icmp_send_response>
}
 8012648:	bf00      	nop
 801264a:	3708      	adds	r7, #8
 801264c:	46bd      	mov	sp, r7
 801264e:	bd80      	pop	{r7, pc}

08012650 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b082      	sub	sp, #8
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
 8012658:	460b      	mov	r3, r1
 801265a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801265c:	78fb      	ldrb	r3, [r7, #3]
 801265e:	461a      	mov	r2, r3
 8012660:	210b      	movs	r1, #11
 8012662:	6878      	ldr	r0, [r7, #4]
 8012664:	f000 f804 	bl	8012670 <icmp_send_response>
}
 8012668:	bf00      	nop
 801266a:	3708      	adds	r7, #8
 801266c:	46bd      	mov	sp, r7
 801266e:	bd80      	pop	{r7, pc}

08012670 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012670:	b580      	push	{r7, lr}
 8012672:	b08c      	sub	sp, #48	@ 0x30
 8012674:	af04      	add	r7, sp, #16
 8012676:	6078      	str	r0, [r7, #4]
 8012678:	460b      	mov	r3, r1
 801267a:	70fb      	strb	r3, [r7, #3]
 801267c:	4613      	mov	r3, r2
 801267e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012680:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8012684:	2124      	movs	r1, #36	@ 0x24
 8012686:	2022      	movs	r0, #34	@ 0x22
 8012688:	f7f8 fc4e 	bl	800af28 <pbuf_alloc>
 801268c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801268e:	69fb      	ldr	r3, [r7, #28]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d04c      	beq.n	801272e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012694:	69fb      	ldr	r3, [r7, #28]
 8012696:	895b      	ldrh	r3, [r3, #10]
 8012698:	2b23      	cmp	r3, #35	@ 0x23
 801269a:	d806      	bhi.n	80126aa <icmp_send_response+0x3a>
 801269c:	4b26      	ldr	r3, [pc, #152]	@ (8012738 <icmp_send_response+0xc8>)
 801269e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 80126a2:	4926      	ldr	r1, [pc, #152]	@ (801273c <icmp_send_response+0xcc>)
 80126a4:	4826      	ldr	r0, [pc, #152]	@ (8012740 <icmp_send_response+0xd0>)
 80126a6:	f001 fb39 	bl	8013d1c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	685b      	ldr	r3, [r3, #4]
 80126ae:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80126b0:	69fb      	ldr	r3, [r7, #28]
 80126b2:	685b      	ldr	r3, [r3, #4]
 80126b4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80126b6:	697b      	ldr	r3, [r7, #20]
 80126b8:	78fa      	ldrb	r2, [r7, #3]
 80126ba:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80126bc:	697b      	ldr	r3, [r7, #20]
 80126be:	78ba      	ldrb	r2, [r7, #2]
 80126c0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80126c2:	697b      	ldr	r3, [r7, #20]
 80126c4:	2200      	movs	r2, #0
 80126c6:	711a      	strb	r2, [r3, #4]
 80126c8:	2200      	movs	r2, #0
 80126ca:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80126cc:	697b      	ldr	r3, [r7, #20]
 80126ce:	2200      	movs	r2, #0
 80126d0:	719a      	strb	r2, [r3, #6]
 80126d2:	2200      	movs	r2, #0
 80126d4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80126d6:	69fb      	ldr	r3, [r7, #28]
 80126d8:	685b      	ldr	r3, [r3, #4]
 80126da:	f103 0008 	add.w	r0, r3, #8
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	685b      	ldr	r3, [r3, #4]
 80126e2:	221c      	movs	r2, #28
 80126e4:	4619      	mov	r1, r3
 80126e6:	f001 fbf4 	bl	8013ed2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80126ea:	69bb      	ldr	r3, [r7, #24]
 80126ec:	68db      	ldr	r3, [r3, #12]
 80126ee:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80126f0:	f107 030c 	add.w	r3, r7, #12
 80126f4:	4618      	mov	r0, r3
 80126f6:	f000 f825 	bl	8012744 <ip4_route>
 80126fa:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80126fc:	693b      	ldr	r3, [r7, #16]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d011      	beq.n	8012726 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012702:	697b      	ldr	r3, [r7, #20]
 8012704:	2200      	movs	r2, #0
 8012706:	709a      	strb	r2, [r3, #2]
 8012708:	2200      	movs	r2, #0
 801270a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801270c:	f107 020c 	add.w	r2, r7, #12
 8012710:	693b      	ldr	r3, [r7, #16]
 8012712:	9302      	str	r3, [sp, #8]
 8012714:	2301      	movs	r3, #1
 8012716:	9301      	str	r3, [sp, #4]
 8012718:	2300      	movs	r3, #0
 801271a:	9300      	str	r3, [sp, #0]
 801271c:	23ff      	movs	r3, #255	@ 0xff
 801271e:	2100      	movs	r1, #0
 8012720:	69f8      	ldr	r0, [r7, #28]
 8012722:	f000 f9cd 	bl	8012ac0 <ip4_output_if>
  }
  pbuf_free(q);
 8012726:	69f8      	ldr	r0, [r7, #28]
 8012728:	f7f8 fee2 	bl	800b4f0 <pbuf_free>
 801272c:	e000      	b.n	8012730 <icmp_send_response+0xc0>
    return;
 801272e:	bf00      	nop
}
 8012730:	3720      	adds	r7, #32
 8012732:	46bd      	mov	sp, r7
 8012734:	bd80      	pop	{r7, pc}
 8012736:	bf00      	nop
 8012738:	080170d8 	.word	0x080170d8
 801273c:	080171a4 	.word	0x080171a4
 8012740:	08017148 	.word	0x08017148

08012744 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012744:	b480      	push	{r7}
 8012746:	b085      	sub	sp, #20
 8012748:	af00      	add	r7, sp, #0
 801274a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801274c:	4b33      	ldr	r3, [pc, #204]	@ (801281c <ip4_route+0xd8>)
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	60fb      	str	r3, [r7, #12]
 8012752:	e036      	b.n	80127c2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801275a:	f003 0301 	and.w	r3, r3, #1
 801275e:	b2db      	uxtb	r3, r3
 8012760:	2b00      	cmp	r3, #0
 8012762:	d02b      	beq.n	80127bc <ip4_route+0x78>
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 801276a:	089b      	lsrs	r3, r3, #2
 801276c:	f003 0301 	and.w	r3, r3, #1
 8012770:	b2db      	uxtb	r3, r3
 8012772:	2b00      	cmp	r3, #0
 8012774:	d022      	beq.n	80127bc <ip4_route+0x78>
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	3304      	adds	r3, #4
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d01d      	beq.n	80127bc <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	681a      	ldr	r2, [r3, #0]
 8012784:	68fb      	ldr	r3, [r7, #12]
 8012786:	3304      	adds	r3, #4
 8012788:	681b      	ldr	r3, [r3, #0]
 801278a:	405a      	eors	r2, r3
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	3308      	adds	r3, #8
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	4013      	ands	r3, r2
 8012794:	2b00      	cmp	r3, #0
 8012796:	d101      	bne.n	801279c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	e038      	b.n	801280e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80127a2:	f003 0302 	and.w	r3, r3, #2
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d108      	bne.n	80127bc <ip4_route+0x78>
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	681a      	ldr	r2, [r3, #0]
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	330c      	adds	r3, #12
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	429a      	cmp	r2, r3
 80127b6:	d101      	bne.n	80127bc <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	e028      	b.n	801280e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	60fb      	str	r3, [r7, #12]
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d1c5      	bne.n	8012754 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80127c8:	4b15      	ldr	r3, [pc, #84]	@ (8012820 <ip4_route+0xdc>)
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d01a      	beq.n	8012806 <ip4_route+0xc2>
 80127d0:	4b13      	ldr	r3, [pc, #76]	@ (8012820 <ip4_route+0xdc>)
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80127d8:	f003 0301 	and.w	r3, r3, #1
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d012      	beq.n	8012806 <ip4_route+0xc2>
 80127e0:	4b0f      	ldr	r3, [pc, #60]	@ (8012820 <ip4_route+0xdc>)
 80127e2:	681b      	ldr	r3, [r3, #0]
 80127e4:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80127e8:	f003 0304 	and.w	r3, r3, #4
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d00a      	beq.n	8012806 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80127f0:	4b0b      	ldr	r3, [pc, #44]	@ (8012820 <ip4_route+0xdc>)
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	3304      	adds	r3, #4
 80127f6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d004      	beq.n	8012806 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	b2db      	uxtb	r3, r3
 8012802:	2b7f      	cmp	r3, #127	@ 0x7f
 8012804:	d101      	bne.n	801280a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012806:	2300      	movs	r3, #0
 8012808:	e001      	b.n	801280e <ip4_route+0xca>
  }

  return netif_default;
 801280a:	4b05      	ldr	r3, [pc, #20]	@ (8012820 <ip4_route+0xdc>)
 801280c:	681b      	ldr	r3, [r3, #0]
}
 801280e:	4618      	mov	r0, r3
 8012810:	3714      	adds	r7, #20
 8012812:	46bd      	mov	sp, r7
 8012814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012818:	4770      	bx	lr
 801281a:	bf00      	nop
 801281c:	2000b198 	.word	0x2000b198
 8012820:	2000b19c 	.word	0x2000b19c

08012824 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b082      	sub	sp, #8
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012832:	f003 0301 	and.w	r3, r3, #1
 8012836:	b2db      	uxtb	r3, r3
 8012838:	2b00      	cmp	r3, #0
 801283a:	d016      	beq.n	801286a <ip4_input_accept+0x46>
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	3304      	adds	r3, #4
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	2b00      	cmp	r3, #0
 8012844:	d011      	beq.n	801286a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012846:	4b0b      	ldr	r3, [pc, #44]	@ (8012874 <ip4_input_accept+0x50>)
 8012848:	695a      	ldr	r2, [r3, #20]
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	3304      	adds	r3, #4
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	429a      	cmp	r2, r3
 8012852:	d008      	beq.n	8012866 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012854:	4b07      	ldr	r3, [pc, #28]	@ (8012874 <ip4_input_accept+0x50>)
 8012856:	695b      	ldr	r3, [r3, #20]
 8012858:	6879      	ldr	r1, [r7, #4]
 801285a:	4618      	mov	r0, r3
 801285c:	f000 fa08 	bl	8012c70 <ip4_addr_isbroadcast_u32>
 8012860:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012862:	2b00      	cmp	r3, #0
 8012864:	d001      	beq.n	801286a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8012866:	2301      	movs	r3, #1
 8012868:	e000      	b.n	801286c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801286a:	2300      	movs	r3, #0
}
 801286c:	4618      	mov	r0, r3
 801286e:	3708      	adds	r7, #8
 8012870:	46bd      	mov	sp, r7
 8012872:	bd80      	pop	{r7, pc}
 8012874:	20005a74 	.word	0x20005a74

08012878 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b086      	sub	sp, #24
 801287c:	af00      	add	r7, sp, #0
 801287e:	6078      	str	r0, [r7, #4]
 8012880:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	685b      	ldr	r3, [r3, #4]
 8012886:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8012888:	697b      	ldr	r3, [r7, #20]
 801288a:	781b      	ldrb	r3, [r3, #0]
 801288c:	091b      	lsrs	r3, r3, #4
 801288e:	b2db      	uxtb	r3, r3
 8012890:	2b04      	cmp	r3, #4
 8012892:	d004      	beq.n	801289e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012894:	6878      	ldr	r0, [r7, #4]
 8012896:	f7f8 fe2b 	bl	800b4f0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801289a:	2300      	movs	r3, #0
 801289c:	e107      	b.n	8012aae <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801289e:	697b      	ldr	r3, [r7, #20]
 80128a0:	781b      	ldrb	r3, [r3, #0]
 80128a2:	f003 030f 	and.w	r3, r3, #15
 80128a6:	b2db      	uxtb	r3, r3
 80128a8:	009b      	lsls	r3, r3, #2
 80128aa:	b2db      	uxtb	r3, r3
 80128ac:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80128ae:	697b      	ldr	r3, [r7, #20]
 80128b0:	885b      	ldrh	r3, [r3, #2]
 80128b2:	b29b      	uxth	r3, r3
 80128b4:	4618      	mov	r0, r3
 80128b6:	f7f7 fabd 	bl	8009e34 <lwip_htons>
 80128ba:	4603      	mov	r3, r0
 80128bc:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	891b      	ldrh	r3, [r3, #8]
 80128c2:	89ba      	ldrh	r2, [r7, #12]
 80128c4:	429a      	cmp	r2, r3
 80128c6:	d204      	bcs.n	80128d2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80128c8:	89bb      	ldrh	r3, [r7, #12]
 80128ca:	4619      	mov	r1, r3
 80128cc:	6878      	ldr	r0, [r7, #4]
 80128ce:	f7f8 fc89 	bl	800b1e4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	895b      	ldrh	r3, [r3, #10]
 80128d6:	89fa      	ldrh	r2, [r7, #14]
 80128d8:	429a      	cmp	r2, r3
 80128da:	d807      	bhi.n	80128ec <ip4_input+0x74>
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	891b      	ldrh	r3, [r3, #8]
 80128e0:	89ba      	ldrh	r2, [r7, #12]
 80128e2:	429a      	cmp	r2, r3
 80128e4:	d802      	bhi.n	80128ec <ip4_input+0x74>
 80128e6:	89fb      	ldrh	r3, [r7, #14]
 80128e8:	2b13      	cmp	r3, #19
 80128ea:	d804      	bhi.n	80128f6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80128ec:	6878      	ldr	r0, [r7, #4]
 80128ee:	f7f8 fdff 	bl	800b4f0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80128f2:	2300      	movs	r3, #0
 80128f4:	e0db      	b.n	8012aae <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80128f6:	697b      	ldr	r3, [r7, #20]
 80128f8:	691b      	ldr	r3, [r3, #16]
 80128fa:	4a6f      	ldr	r2, [pc, #444]	@ (8012ab8 <ip4_input+0x240>)
 80128fc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80128fe:	697b      	ldr	r3, [r7, #20]
 8012900:	68db      	ldr	r3, [r3, #12]
 8012902:	4a6d      	ldr	r2, [pc, #436]	@ (8012ab8 <ip4_input+0x240>)
 8012904:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012906:	4b6c      	ldr	r3, [pc, #432]	@ (8012ab8 <ip4_input+0x240>)
 8012908:	695b      	ldr	r3, [r3, #20]
 801290a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801290e:	2be0      	cmp	r3, #224	@ 0xe0
 8012910:	d112      	bne.n	8012938 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012912:	683b      	ldr	r3, [r7, #0]
 8012914:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012918:	f003 0301 	and.w	r3, r3, #1
 801291c:	b2db      	uxtb	r3, r3
 801291e:	2b00      	cmp	r3, #0
 8012920:	d007      	beq.n	8012932 <ip4_input+0xba>
 8012922:	683b      	ldr	r3, [r7, #0]
 8012924:	3304      	adds	r3, #4
 8012926:	681b      	ldr	r3, [r3, #0]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d002      	beq.n	8012932 <ip4_input+0xba>
      netif = inp;
 801292c:	683b      	ldr	r3, [r7, #0]
 801292e:	613b      	str	r3, [r7, #16]
 8012930:	e02a      	b.n	8012988 <ip4_input+0x110>
    } else {
      netif = NULL;
 8012932:	2300      	movs	r3, #0
 8012934:	613b      	str	r3, [r7, #16]
 8012936:	e027      	b.n	8012988 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012938:	6838      	ldr	r0, [r7, #0]
 801293a:	f7ff ff73 	bl	8012824 <ip4_input_accept>
 801293e:	4603      	mov	r3, r0
 8012940:	2b00      	cmp	r3, #0
 8012942:	d002      	beq.n	801294a <ip4_input+0xd2>
      netif = inp;
 8012944:	683b      	ldr	r3, [r7, #0]
 8012946:	613b      	str	r3, [r7, #16]
 8012948:	e01e      	b.n	8012988 <ip4_input+0x110>
    } else {
      netif = NULL;
 801294a:	2300      	movs	r3, #0
 801294c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801294e:	4b5a      	ldr	r3, [pc, #360]	@ (8012ab8 <ip4_input+0x240>)
 8012950:	695b      	ldr	r3, [r3, #20]
 8012952:	b2db      	uxtb	r3, r3
 8012954:	2b7f      	cmp	r3, #127	@ 0x7f
 8012956:	d017      	beq.n	8012988 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012958:	4b58      	ldr	r3, [pc, #352]	@ (8012abc <ip4_input+0x244>)
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	613b      	str	r3, [r7, #16]
 801295e:	e00e      	b.n	801297e <ip4_input+0x106>
          if (netif == inp) {
 8012960:	693a      	ldr	r2, [r7, #16]
 8012962:	683b      	ldr	r3, [r7, #0]
 8012964:	429a      	cmp	r2, r3
 8012966:	d006      	beq.n	8012976 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012968:	6938      	ldr	r0, [r7, #16]
 801296a:	f7ff ff5b 	bl	8012824 <ip4_input_accept>
 801296e:	4603      	mov	r3, r0
 8012970:	2b00      	cmp	r3, #0
 8012972:	d108      	bne.n	8012986 <ip4_input+0x10e>
 8012974:	e000      	b.n	8012978 <ip4_input+0x100>
            continue;
 8012976:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012978:	693b      	ldr	r3, [r7, #16]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	613b      	str	r3, [r7, #16]
 801297e:	693b      	ldr	r3, [r7, #16]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d1ed      	bne.n	8012960 <ip4_input+0xe8>
 8012984:	e000      	b.n	8012988 <ip4_input+0x110>
            break;
 8012986:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012988:	4b4b      	ldr	r3, [pc, #300]	@ (8012ab8 <ip4_input+0x240>)
 801298a:	691b      	ldr	r3, [r3, #16]
 801298c:	6839      	ldr	r1, [r7, #0]
 801298e:	4618      	mov	r0, r3
 8012990:	f000 f96e 	bl	8012c70 <ip4_addr_isbroadcast_u32>
 8012994:	4603      	mov	r3, r0
 8012996:	2b00      	cmp	r3, #0
 8012998:	d105      	bne.n	80129a6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801299a:	4b47      	ldr	r3, [pc, #284]	@ (8012ab8 <ip4_input+0x240>)
 801299c:	691b      	ldr	r3, [r3, #16]
 801299e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80129a2:	2be0      	cmp	r3, #224	@ 0xe0
 80129a4:	d104      	bne.n	80129b0 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80129a6:	6878      	ldr	r0, [r7, #4]
 80129a8:	f7f8 fda2 	bl	800b4f0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80129ac:	2300      	movs	r3, #0
 80129ae:	e07e      	b.n	8012aae <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80129b0:	693b      	ldr	r3, [r7, #16]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d104      	bne.n	80129c0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80129b6:	6878      	ldr	r0, [r7, #4]
 80129b8:	f7f8 fd9a 	bl	800b4f0 <pbuf_free>
    return ERR_OK;
 80129bc:	2300      	movs	r3, #0
 80129be:	e076      	b.n	8012aae <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80129c0:	697b      	ldr	r3, [r7, #20]
 80129c2:	88db      	ldrh	r3, [r3, #6]
 80129c4:	b29b      	uxth	r3, r3
 80129c6:	461a      	mov	r2, r3
 80129c8:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 80129cc:	4013      	ands	r3, r2
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d00b      	beq.n	80129ea <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80129d2:	6878      	ldr	r0, [r7, #4]
 80129d4:	f000 fc92 	bl	80132fc <ip4_reass>
 80129d8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80129da:	687b      	ldr	r3, [r7, #4]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d101      	bne.n	80129e4 <ip4_input+0x16c>
      return ERR_OK;
 80129e0:	2300      	movs	r3, #0
 80129e2:	e064      	b.n	8012aae <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	685b      	ldr	r3, [r3, #4]
 80129e8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80129ea:	4a33      	ldr	r2, [pc, #204]	@ (8012ab8 <ip4_input+0x240>)
 80129ec:	693b      	ldr	r3, [r7, #16]
 80129ee:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80129f0:	4a31      	ldr	r2, [pc, #196]	@ (8012ab8 <ip4_input+0x240>)
 80129f2:	683b      	ldr	r3, [r7, #0]
 80129f4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80129f6:	4a30      	ldr	r2, [pc, #192]	@ (8012ab8 <ip4_input+0x240>)
 80129f8:	697b      	ldr	r3, [r7, #20]
 80129fa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80129fc:	697b      	ldr	r3, [r7, #20]
 80129fe:	781b      	ldrb	r3, [r3, #0]
 8012a00:	f003 030f 	and.w	r3, r3, #15
 8012a04:	b2db      	uxtb	r3, r3
 8012a06:	009b      	lsls	r3, r3, #2
 8012a08:	b2db      	uxtb	r3, r3
 8012a0a:	461a      	mov	r2, r3
 8012a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8012ab8 <ip4_input+0x240>)
 8012a0e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012a10:	89fb      	ldrh	r3, [r7, #14]
 8012a12:	4619      	mov	r1, r3
 8012a14:	6878      	ldr	r0, [r7, #4]
 8012a16:	f7f8 fce5 	bl	800b3e4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012a1a:	697b      	ldr	r3, [r7, #20]
 8012a1c:	7a5b      	ldrb	r3, [r3, #9]
 8012a1e:	2b11      	cmp	r3, #17
 8012a20:	d006      	beq.n	8012a30 <ip4_input+0x1b8>
 8012a22:	2b11      	cmp	r3, #17
 8012a24:	dc13      	bgt.n	8012a4e <ip4_input+0x1d6>
 8012a26:	2b01      	cmp	r3, #1
 8012a28:	d00c      	beq.n	8012a44 <ip4_input+0x1cc>
 8012a2a:	2b06      	cmp	r3, #6
 8012a2c:	d005      	beq.n	8012a3a <ip4_input+0x1c2>
 8012a2e:	e00e      	b.n	8012a4e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012a30:	6839      	ldr	r1, [r7, #0]
 8012a32:	6878      	ldr	r0, [r7, #4]
 8012a34:	f7fe fb3a 	bl	80110ac <udp_input>
        break;
 8012a38:	e026      	b.n	8012a88 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012a3a:	6839      	ldr	r1, [r7, #0]
 8012a3c:	6878      	ldr	r0, [r7, #4]
 8012a3e:	f7fa fb81 	bl	800d144 <tcp_input>
        break;
 8012a42:	e021      	b.n	8012a88 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012a44:	6839      	ldr	r1, [r7, #0]
 8012a46:	6878      	ldr	r0, [r7, #4]
 8012a48:	f7ff fcee 	bl	8012428 <icmp_input>
        break;
 8012a4c:	e01c      	b.n	8012a88 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8012ab8 <ip4_input+0x240>)
 8012a50:	695b      	ldr	r3, [r3, #20]
 8012a52:	6939      	ldr	r1, [r7, #16]
 8012a54:	4618      	mov	r0, r3
 8012a56:	f000 f90b 	bl	8012c70 <ip4_addr_isbroadcast_u32>
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d10f      	bne.n	8012a80 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012a60:	4b15      	ldr	r3, [pc, #84]	@ (8012ab8 <ip4_input+0x240>)
 8012a62:	695b      	ldr	r3, [r3, #20]
 8012a64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012a68:	2be0      	cmp	r3, #224	@ 0xe0
 8012a6a:	d009      	beq.n	8012a80 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012a6c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012a70:	4619      	mov	r1, r3
 8012a72:	6878      	ldr	r0, [r7, #4]
 8012a74:	f7f8 fd29 	bl	800b4ca <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012a78:	2102      	movs	r1, #2
 8012a7a:	6878      	ldr	r0, [r7, #4]
 8012a7c:	f7ff fdd8 	bl	8012630 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012a80:	6878      	ldr	r0, [r7, #4]
 8012a82:	f7f8 fd35 	bl	800b4f0 <pbuf_free>
        break;
 8012a86:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012a88:	4b0b      	ldr	r3, [pc, #44]	@ (8012ab8 <ip4_input+0x240>)
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8012ab8 <ip4_input+0x240>)
 8012a90:	2200      	movs	r2, #0
 8012a92:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012a94:	4b08      	ldr	r3, [pc, #32]	@ (8012ab8 <ip4_input+0x240>)
 8012a96:	2200      	movs	r2, #0
 8012a98:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012a9a:	4b07      	ldr	r3, [pc, #28]	@ (8012ab8 <ip4_input+0x240>)
 8012a9c:	2200      	movs	r2, #0
 8012a9e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012aa0:	4b05      	ldr	r3, [pc, #20]	@ (8012ab8 <ip4_input+0x240>)
 8012aa2:	2200      	movs	r2, #0
 8012aa4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012aa6:	4b04      	ldr	r3, [pc, #16]	@ (8012ab8 <ip4_input+0x240>)
 8012aa8:	2200      	movs	r2, #0
 8012aaa:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012aac:	2300      	movs	r3, #0
}
 8012aae:	4618      	mov	r0, r3
 8012ab0:	3718      	adds	r7, #24
 8012ab2:	46bd      	mov	sp, r7
 8012ab4:	bd80      	pop	{r7, pc}
 8012ab6:	bf00      	nop
 8012ab8:	20005a74 	.word	0x20005a74
 8012abc:	2000b198 	.word	0x2000b198

08012ac0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012ac0:	b580      	push	{r7, lr}
 8012ac2:	b08a      	sub	sp, #40	@ 0x28
 8012ac4:	af04      	add	r7, sp, #16
 8012ac6:	60f8      	str	r0, [r7, #12]
 8012ac8:	60b9      	str	r1, [r7, #8]
 8012aca:	607a      	str	r2, [r7, #4]
 8012acc:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012ace:	68bb      	ldr	r3, [r7, #8]
 8012ad0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d009      	beq.n	8012aec <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012ad8:	68bb      	ldr	r3, [r7, #8]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d003      	beq.n	8012ae6 <ip4_output_if+0x26>
 8012ade:	68bb      	ldr	r3, [r7, #8]
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d102      	bne.n	8012aec <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012ae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012ae8:	3304      	adds	r3, #4
 8012aea:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012aec:	78fa      	ldrb	r2, [r7, #3]
 8012aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012af0:	9302      	str	r3, [sp, #8]
 8012af2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012af6:	9301      	str	r3, [sp, #4]
 8012af8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012afc:	9300      	str	r3, [sp, #0]
 8012afe:	4613      	mov	r3, r2
 8012b00:	687a      	ldr	r2, [r7, #4]
 8012b02:	6979      	ldr	r1, [r7, #20]
 8012b04:	68f8      	ldr	r0, [r7, #12]
 8012b06:	f000 f805 	bl	8012b14 <ip4_output_if_src>
 8012b0a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012b0c:	4618      	mov	r0, r3
 8012b0e:	3718      	adds	r7, #24
 8012b10:	46bd      	mov	sp, r7
 8012b12:	bd80      	pop	{r7, pc}

08012b14 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012b14:	b580      	push	{r7, lr}
 8012b16:	b088      	sub	sp, #32
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	60f8      	str	r0, [r7, #12]
 8012b1c:	60b9      	str	r1, [r7, #8]
 8012b1e:	607a      	str	r2, [r7, #4]
 8012b20:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	7b9b      	ldrb	r3, [r3, #14]
 8012b26:	2b01      	cmp	r3, #1
 8012b28:	d006      	beq.n	8012b38 <ip4_output_if_src+0x24>
 8012b2a:	4b4b      	ldr	r3, [pc, #300]	@ (8012c58 <ip4_output_if_src+0x144>)
 8012b2c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 8012b30:	494a      	ldr	r1, [pc, #296]	@ (8012c5c <ip4_output_if_src+0x148>)
 8012b32:	484b      	ldr	r0, [pc, #300]	@ (8012c60 <ip4_output_if_src+0x14c>)
 8012b34:	f001 f8f2 	bl	8013d1c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012b38:	687b      	ldr	r3, [r7, #4]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d060      	beq.n	8012c00 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012b3e:	2314      	movs	r3, #20
 8012b40:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012b42:	2114      	movs	r1, #20
 8012b44:	68f8      	ldr	r0, [r7, #12]
 8012b46:	f7f8 fc3d 	bl	800b3c4 <pbuf_add_header>
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d002      	beq.n	8012b56 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012b50:	f06f 0301 	mvn.w	r3, #1
 8012b54:	e07c      	b.n	8012c50 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	685b      	ldr	r3, [r3, #4]
 8012b5a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012b5c:	68fb      	ldr	r3, [r7, #12]
 8012b5e:	895b      	ldrh	r3, [r3, #10]
 8012b60:	2b13      	cmp	r3, #19
 8012b62:	d806      	bhi.n	8012b72 <ip4_output_if_src+0x5e>
 8012b64:	4b3c      	ldr	r3, [pc, #240]	@ (8012c58 <ip4_output_if_src+0x144>)
 8012b66:	f44f 7262 	mov.w	r2, #904	@ 0x388
 8012b6a:	493e      	ldr	r1, [pc, #248]	@ (8012c64 <ip4_output_if_src+0x150>)
 8012b6c:	483c      	ldr	r0, [pc, #240]	@ (8012c60 <ip4_output_if_src+0x14c>)
 8012b6e:	f001 f8d5 	bl	8013d1c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012b72:	69fb      	ldr	r3, [r7, #28]
 8012b74:	78fa      	ldrb	r2, [r7, #3]
 8012b76:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012b78:	69fb      	ldr	r3, [r7, #28]
 8012b7a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8012b7e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	681a      	ldr	r2, [r3, #0]
 8012b84:	69fb      	ldr	r3, [r7, #28]
 8012b86:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012b88:	8b7b      	ldrh	r3, [r7, #26]
 8012b8a:	089b      	lsrs	r3, r3, #2
 8012b8c:	b29b      	uxth	r3, r3
 8012b8e:	b2db      	uxtb	r3, r3
 8012b90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012b94:	b2da      	uxtb	r2, r3
 8012b96:	69fb      	ldr	r3, [r7, #28]
 8012b98:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012b9a:	69fb      	ldr	r3, [r7, #28]
 8012b9c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8012ba0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	891b      	ldrh	r3, [r3, #8]
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	f7f7 f944 	bl	8009e34 <lwip_htons>
 8012bac:	4603      	mov	r3, r0
 8012bae:	461a      	mov	r2, r3
 8012bb0:	69fb      	ldr	r3, [r7, #28]
 8012bb2:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012bb4:	69fb      	ldr	r3, [r7, #28]
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	719a      	strb	r2, [r3, #6]
 8012bba:	2200      	movs	r2, #0
 8012bbc:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012bbe:	4b2a      	ldr	r3, [pc, #168]	@ (8012c68 <ip4_output_if_src+0x154>)
 8012bc0:	881b      	ldrh	r3, [r3, #0]
 8012bc2:	4618      	mov	r0, r3
 8012bc4:	f7f7 f936 	bl	8009e34 <lwip_htons>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	461a      	mov	r2, r3
 8012bcc:	69fb      	ldr	r3, [r7, #28]
 8012bce:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012bd0:	4b25      	ldr	r3, [pc, #148]	@ (8012c68 <ip4_output_if_src+0x154>)
 8012bd2:	881b      	ldrh	r3, [r3, #0]
 8012bd4:	3301      	adds	r3, #1
 8012bd6:	b29a      	uxth	r2, r3
 8012bd8:	4b23      	ldr	r3, [pc, #140]	@ (8012c68 <ip4_output_if_src+0x154>)
 8012bda:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012bdc:	68bb      	ldr	r3, [r7, #8]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d104      	bne.n	8012bec <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012be2:	4b22      	ldr	r3, [pc, #136]	@ (8012c6c <ip4_output_if_src+0x158>)
 8012be4:	681a      	ldr	r2, [r3, #0]
 8012be6:	69fb      	ldr	r3, [r7, #28]
 8012be8:	60da      	str	r2, [r3, #12]
 8012bea:	e003      	b.n	8012bf4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012bec:	68bb      	ldr	r3, [r7, #8]
 8012bee:	681a      	ldr	r2, [r3, #0]
 8012bf0:	69fb      	ldr	r3, [r7, #28]
 8012bf2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012bf4:	69fb      	ldr	r3, [r7, #28]
 8012bf6:	2200      	movs	r2, #0
 8012bf8:	729a      	strb	r2, [r3, #10]
 8012bfa:	2200      	movs	r2, #0
 8012bfc:	72da      	strb	r2, [r3, #11]
 8012bfe:	e00f      	b.n	8012c20 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	895b      	ldrh	r3, [r3, #10]
 8012c04:	2b13      	cmp	r3, #19
 8012c06:	d802      	bhi.n	8012c0e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012c08:	f06f 0301 	mvn.w	r3, #1
 8012c0c:	e020      	b.n	8012c50 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012c0e:	68fb      	ldr	r3, [r7, #12]
 8012c10:	685b      	ldr	r3, [r3, #4]
 8012c12:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012c14:	69fb      	ldr	r3, [r7, #28]
 8012c16:	691b      	ldr	r3, [r3, #16]
 8012c18:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012c1a:	f107 0314 	add.w	r3, r7, #20
 8012c1e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c22:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d00c      	beq.n	8012c42 <ip4_output_if_src+0x12e>
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	891a      	ldrh	r2, [r3, #8]
 8012c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c2e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8012c30:	429a      	cmp	r2, r3
 8012c32:	d906      	bls.n	8012c42 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012c34:	687a      	ldr	r2, [r7, #4]
 8012c36:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8012c38:	68f8      	ldr	r0, [r7, #12]
 8012c3a:	f000 fd53 	bl	80136e4 <ip4_frag>
 8012c3e:	4603      	mov	r3, r0
 8012c40:	e006      	b.n	8012c50 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012c44:	695b      	ldr	r3, [r3, #20]
 8012c46:	687a      	ldr	r2, [r7, #4]
 8012c48:	68f9      	ldr	r1, [r7, #12]
 8012c4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012c4c:	4798      	blx	r3
 8012c4e:	4603      	mov	r3, r0
}
 8012c50:	4618      	mov	r0, r3
 8012c52:	3720      	adds	r7, #32
 8012c54:	46bd      	mov	sp, r7
 8012c56:	bd80      	pop	{r7, pc}
 8012c58:	080171d0 	.word	0x080171d0
 8012c5c:	08017204 	.word	0x08017204
 8012c60:	08017210 	.word	0x08017210
 8012c64:	08017238 	.word	0x08017238
 8012c68:	2000b2f6 	.word	0x2000b2f6
 8012c6c:	08017620 	.word	0x08017620

08012c70 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012c70:	b480      	push	{r7}
 8012c72:	b085      	sub	sp, #20
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
 8012c78:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c84:	d002      	beq.n	8012c8c <ip4_addr_isbroadcast_u32+0x1c>
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d101      	bne.n	8012c90 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012c8c:	2301      	movs	r3, #1
 8012c8e:	e02a      	b.n	8012ce6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012c90:	683b      	ldr	r3, [r7, #0]
 8012c92:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8012c96:	f003 0302 	and.w	r3, r3, #2
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d101      	bne.n	8012ca2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012c9e:	2300      	movs	r3, #0
 8012ca0:	e021      	b.n	8012ce6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012ca2:	683b      	ldr	r3, [r7, #0]
 8012ca4:	3304      	adds	r3, #4
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	687a      	ldr	r2, [r7, #4]
 8012caa:	429a      	cmp	r2, r3
 8012cac:	d101      	bne.n	8012cb2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012cae:	2300      	movs	r3, #0
 8012cb0:	e019      	b.n	8012ce6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012cb2:	68fa      	ldr	r2, [r7, #12]
 8012cb4:	683b      	ldr	r3, [r7, #0]
 8012cb6:	3304      	adds	r3, #4
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	405a      	eors	r2, r3
 8012cbc:	683b      	ldr	r3, [r7, #0]
 8012cbe:	3308      	adds	r3, #8
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	4013      	ands	r3, r2
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d10d      	bne.n	8012ce4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012cc8:	683b      	ldr	r3, [r7, #0]
 8012cca:	3308      	adds	r3, #8
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	43da      	mvns	r2, r3
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012cd4:	683b      	ldr	r3, [r7, #0]
 8012cd6:	3308      	adds	r3, #8
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012cdc:	429a      	cmp	r2, r3
 8012cde:	d101      	bne.n	8012ce4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012ce0:	2301      	movs	r3, #1
 8012ce2:	e000      	b.n	8012ce6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012ce4:	2300      	movs	r3, #0
  }
}
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	3714      	adds	r7, #20
 8012cea:	46bd      	mov	sp, r7
 8012cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf0:	4770      	bx	lr
	...

08012cf4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012cf4:	b580      	push	{r7, lr}
 8012cf6:	b084      	sub	sp, #16
 8012cf8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012cfa:	2300      	movs	r3, #0
 8012cfc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012cfe:	4b12      	ldr	r3, [pc, #72]	@ (8012d48 <ip_reass_tmr+0x54>)
 8012d00:	681b      	ldr	r3, [r3, #0]
 8012d02:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012d04:	e018      	b.n	8012d38 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	7fdb      	ldrb	r3, [r3, #31]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d00b      	beq.n	8012d26 <ip_reass_tmr+0x32>
      r->timer--;
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	7fdb      	ldrb	r3, [r3, #31]
 8012d12:	3b01      	subs	r3, #1
 8012d14:	b2da      	uxtb	r2, r3
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	681b      	ldr	r3, [r3, #0]
 8012d22:	60fb      	str	r3, [r7, #12]
 8012d24:	e008      	b.n	8012d38 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012d30:	68b9      	ldr	r1, [r7, #8]
 8012d32:	6878      	ldr	r0, [r7, #4]
 8012d34:	f000 f80a 	bl	8012d4c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d1e3      	bne.n	8012d06 <ip_reass_tmr+0x12>
    }
  }
}
 8012d3e:	bf00      	nop
 8012d40:	bf00      	nop
 8012d42:	3710      	adds	r7, #16
 8012d44:	46bd      	mov	sp, r7
 8012d46:	bd80      	pop	{r7, pc}
 8012d48:	2000b2f8 	.word	0x2000b2f8

08012d4c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012d4c:	b580      	push	{r7, lr}
 8012d4e:	b088      	sub	sp, #32
 8012d50:	af00      	add	r7, sp, #0
 8012d52:	6078      	str	r0, [r7, #4]
 8012d54:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012d56:	2300      	movs	r3, #0
 8012d58:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012d5a:	683a      	ldr	r2, [r7, #0]
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	429a      	cmp	r2, r3
 8012d60:	d105      	bne.n	8012d6e <ip_reass_free_complete_datagram+0x22>
 8012d62:	4b45      	ldr	r3, [pc, #276]	@ (8012e78 <ip_reass_free_complete_datagram+0x12c>)
 8012d64:	22ab      	movs	r2, #171	@ 0xab
 8012d66:	4945      	ldr	r1, [pc, #276]	@ (8012e7c <ip_reass_free_complete_datagram+0x130>)
 8012d68:	4845      	ldr	r0, [pc, #276]	@ (8012e80 <ip_reass_free_complete_datagram+0x134>)
 8012d6a:	f000 ffd7 	bl	8013d1c <iprintf>
  if (prev != NULL) {
 8012d6e:	683b      	ldr	r3, [r7, #0]
 8012d70:	2b00      	cmp	r3, #0
 8012d72:	d00a      	beq.n	8012d8a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012d74:	683b      	ldr	r3, [r7, #0]
 8012d76:	681b      	ldr	r3, [r3, #0]
 8012d78:	687a      	ldr	r2, [r7, #4]
 8012d7a:	429a      	cmp	r2, r3
 8012d7c:	d005      	beq.n	8012d8a <ip_reass_free_complete_datagram+0x3e>
 8012d7e:	4b3e      	ldr	r3, [pc, #248]	@ (8012e78 <ip_reass_free_complete_datagram+0x12c>)
 8012d80:	22ad      	movs	r2, #173	@ 0xad
 8012d82:	4940      	ldr	r1, [pc, #256]	@ (8012e84 <ip_reass_free_complete_datagram+0x138>)
 8012d84:	483e      	ldr	r0, [pc, #248]	@ (8012e80 <ip_reass_free_complete_datagram+0x134>)
 8012d86:	f000 ffc9 	bl	8013d1c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	685b      	ldr	r3, [r3, #4]
 8012d8e:	685b      	ldr	r3, [r3, #4]
 8012d90:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012d92:	697b      	ldr	r3, [r7, #20]
 8012d94:	889b      	ldrh	r3, [r3, #4]
 8012d96:	b29b      	uxth	r3, r3
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d12a      	bne.n	8012df2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	685b      	ldr	r3, [r3, #4]
 8012da0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8012da2:	697b      	ldr	r3, [r7, #20]
 8012da4:	681a      	ldr	r2, [r3, #0]
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8012daa:	69bb      	ldr	r3, [r7, #24]
 8012dac:	6858      	ldr	r0, [r3, #4]
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	3308      	adds	r3, #8
 8012db2:	2214      	movs	r2, #20
 8012db4:	4619      	mov	r1, r3
 8012db6:	f001 f88c 	bl	8013ed2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8012dba:	2101      	movs	r1, #1
 8012dbc:	69b8      	ldr	r0, [r7, #24]
 8012dbe:	f7ff fc47 	bl	8012650 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8012dc2:	69b8      	ldr	r0, [r7, #24]
 8012dc4:	f7f8 fc1c 	bl	800b600 <pbuf_clen>
 8012dc8:	4603      	mov	r3, r0
 8012dca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012dcc:	8bfa      	ldrh	r2, [r7, #30]
 8012dce:	8a7b      	ldrh	r3, [r7, #18]
 8012dd0:	4413      	add	r3, r2
 8012dd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012dd6:	db05      	blt.n	8012de4 <ip_reass_free_complete_datagram+0x98>
 8012dd8:	4b27      	ldr	r3, [pc, #156]	@ (8012e78 <ip_reass_free_complete_datagram+0x12c>)
 8012dda:	22bc      	movs	r2, #188	@ 0xbc
 8012ddc:	492a      	ldr	r1, [pc, #168]	@ (8012e88 <ip_reass_free_complete_datagram+0x13c>)
 8012dde:	4828      	ldr	r0, [pc, #160]	@ (8012e80 <ip_reass_free_complete_datagram+0x134>)
 8012de0:	f000 ff9c 	bl	8013d1c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012de4:	8bfa      	ldrh	r2, [r7, #30]
 8012de6:	8a7b      	ldrh	r3, [r7, #18]
 8012de8:	4413      	add	r3, r2
 8012dea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8012dec:	69b8      	ldr	r0, [r7, #24]
 8012dee:	f7f8 fb7f 	bl	800b4f0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	685b      	ldr	r3, [r3, #4]
 8012df6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8012df8:	e01f      	b.n	8012e3a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8012dfa:	69bb      	ldr	r3, [r7, #24]
 8012dfc:	685b      	ldr	r3, [r3, #4]
 8012dfe:	617b      	str	r3, [r7, #20]
    pcur = p;
 8012e00:	69bb      	ldr	r3, [r7, #24]
 8012e02:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8012e04:	697b      	ldr	r3, [r7, #20]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8012e0a:	68f8      	ldr	r0, [r7, #12]
 8012e0c:	f7f8 fbf8 	bl	800b600 <pbuf_clen>
 8012e10:	4603      	mov	r3, r0
 8012e12:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8012e14:	8bfa      	ldrh	r2, [r7, #30]
 8012e16:	8a7b      	ldrh	r3, [r7, #18]
 8012e18:	4413      	add	r3, r2
 8012e1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012e1e:	db05      	blt.n	8012e2c <ip_reass_free_complete_datagram+0xe0>
 8012e20:	4b15      	ldr	r3, [pc, #84]	@ (8012e78 <ip_reass_free_complete_datagram+0x12c>)
 8012e22:	22cc      	movs	r2, #204	@ 0xcc
 8012e24:	4918      	ldr	r1, [pc, #96]	@ (8012e88 <ip_reass_free_complete_datagram+0x13c>)
 8012e26:	4816      	ldr	r0, [pc, #88]	@ (8012e80 <ip_reass_free_complete_datagram+0x134>)
 8012e28:	f000 ff78 	bl	8013d1c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8012e2c:	8bfa      	ldrh	r2, [r7, #30]
 8012e2e:	8a7b      	ldrh	r3, [r7, #18]
 8012e30:	4413      	add	r3, r2
 8012e32:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8012e34:	68f8      	ldr	r0, [r7, #12]
 8012e36:	f7f8 fb5b 	bl	800b4f0 <pbuf_free>
  while (p != NULL) {
 8012e3a:	69bb      	ldr	r3, [r7, #24]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d1dc      	bne.n	8012dfa <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8012e40:	6839      	ldr	r1, [r7, #0]
 8012e42:	6878      	ldr	r0, [r7, #4]
 8012e44:	f000 f8c2 	bl	8012fcc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8012e48:	4b10      	ldr	r3, [pc, #64]	@ (8012e8c <ip_reass_free_complete_datagram+0x140>)
 8012e4a:	881b      	ldrh	r3, [r3, #0]
 8012e4c:	8bfa      	ldrh	r2, [r7, #30]
 8012e4e:	429a      	cmp	r2, r3
 8012e50:	d905      	bls.n	8012e5e <ip_reass_free_complete_datagram+0x112>
 8012e52:	4b09      	ldr	r3, [pc, #36]	@ (8012e78 <ip_reass_free_complete_datagram+0x12c>)
 8012e54:	22d2      	movs	r2, #210	@ 0xd2
 8012e56:	490e      	ldr	r1, [pc, #56]	@ (8012e90 <ip_reass_free_complete_datagram+0x144>)
 8012e58:	4809      	ldr	r0, [pc, #36]	@ (8012e80 <ip_reass_free_complete_datagram+0x134>)
 8012e5a:	f000 ff5f 	bl	8013d1c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8012e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8012e8c <ip_reass_free_complete_datagram+0x140>)
 8012e60:	881a      	ldrh	r2, [r3, #0]
 8012e62:	8bfb      	ldrh	r3, [r7, #30]
 8012e64:	1ad3      	subs	r3, r2, r3
 8012e66:	b29a      	uxth	r2, r3
 8012e68:	4b08      	ldr	r3, [pc, #32]	@ (8012e8c <ip_reass_free_complete_datagram+0x140>)
 8012e6a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8012e6c:	8bfb      	ldrh	r3, [r7, #30]
}
 8012e6e:	4618      	mov	r0, r3
 8012e70:	3720      	adds	r7, #32
 8012e72:	46bd      	mov	sp, r7
 8012e74:	bd80      	pop	{r7, pc}
 8012e76:	bf00      	nop
 8012e78:	08017268 	.word	0x08017268
 8012e7c:	080172a4 	.word	0x080172a4
 8012e80:	080172b0 	.word	0x080172b0
 8012e84:	080172d8 	.word	0x080172d8
 8012e88:	080172ec 	.word	0x080172ec
 8012e8c:	2000b2fc 	.word	0x2000b2fc
 8012e90:	0801730c 	.word	0x0801730c

08012e94 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8012e94:	b580      	push	{r7, lr}
 8012e96:	b08a      	sub	sp, #40	@ 0x28
 8012e98:	af00      	add	r7, sp, #0
 8012e9a:	6078      	str	r0, [r7, #4]
 8012e9c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8012eaa:	2300      	movs	r3, #0
 8012eac:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8012eae:	2300      	movs	r3, #0
 8012eb0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8012eb2:	4b28      	ldr	r3, [pc, #160]	@ (8012f54 <ip_reass_remove_oldest_datagram+0xc0>)
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8012eb8:	e030      	b.n	8012f1c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8012eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ebc:	695a      	ldr	r2, [r3, #20]
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	68db      	ldr	r3, [r3, #12]
 8012ec2:	429a      	cmp	r2, r3
 8012ec4:	d10c      	bne.n	8012ee0 <ip_reass_remove_oldest_datagram+0x4c>
 8012ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ec8:	699a      	ldr	r2, [r3, #24]
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	691b      	ldr	r3, [r3, #16]
 8012ece:	429a      	cmp	r2, r3
 8012ed0:	d106      	bne.n	8012ee0 <ip_reass_remove_oldest_datagram+0x4c>
 8012ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ed4:	899a      	ldrh	r2, [r3, #12]
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	889b      	ldrh	r3, [r3, #4]
 8012eda:	b29b      	uxth	r3, r3
 8012edc:	429a      	cmp	r2, r3
 8012ede:	d014      	beq.n	8012f0a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8012ee0:	693b      	ldr	r3, [r7, #16]
 8012ee2:	3301      	adds	r3, #1
 8012ee4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8012ee6:	6a3b      	ldr	r3, [r7, #32]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d104      	bne.n	8012ef6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8012eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012eee:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012ef0:	69fb      	ldr	r3, [r7, #28]
 8012ef2:	61bb      	str	r3, [r7, #24]
 8012ef4:	e009      	b.n	8012f0a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8012ef6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012ef8:	7fda      	ldrb	r2, [r3, #31]
 8012efa:	6a3b      	ldr	r3, [r7, #32]
 8012efc:	7fdb      	ldrb	r3, [r3, #31]
 8012efe:	429a      	cmp	r2, r3
 8012f00:	d803      	bhi.n	8012f0a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8012f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f04:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8012f06:	69fb      	ldr	r3, [r7, #28]
 8012f08:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8012f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d001      	beq.n	8012f16 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8012f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f14:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8012f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 8012f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d1cb      	bne.n	8012eba <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8012f22:	6a3b      	ldr	r3, [r7, #32]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d008      	beq.n	8012f3a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8012f28:	69b9      	ldr	r1, [r7, #24]
 8012f2a:	6a38      	ldr	r0, [r7, #32]
 8012f2c:	f7ff ff0e 	bl	8012d4c <ip_reass_free_complete_datagram>
 8012f30:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8012f32:	697a      	ldr	r2, [r7, #20]
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	4413      	add	r3, r2
 8012f38:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8012f3a:	697a      	ldr	r2, [r7, #20]
 8012f3c:	683b      	ldr	r3, [r7, #0]
 8012f3e:	429a      	cmp	r2, r3
 8012f40:	da02      	bge.n	8012f48 <ip_reass_remove_oldest_datagram+0xb4>
 8012f42:	693b      	ldr	r3, [r7, #16]
 8012f44:	2b01      	cmp	r3, #1
 8012f46:	dcac      	bgt.n	8012ea2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8012f48:	697b      	ldr	r3, [r7, #20]
}
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	3728      	adds	r7, #40	@ 0x28
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	bd80      	pop	{r7, pc}
 8012f52:	bf00      	nop
 8012f54:	2000b2f8 	.word	0x2000b2f8

08012f58 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b084      	sub	sp, #16
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
 8012f60:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012f62:	2004      	movs	r0, #4
 8012f64:	f7f7 fbde 	bl	800a724 <memp_malloc>
 8012f68:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d110      	bne.n	8012f92 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8012f70:	6839      	ldr	r1, [r7, #0]
 8012f72:	6878      	ldr	r0, [r7, #4]
 8012f74:	f7ff ff8e 	bl	8012e94 <ip_reass_remove_oldest_datagram>
 8012f78:	4602      	mov	r2, r0
 8012f7a:	683b      	ldr	r3, [r7, #0]
 8012f7c:	4293      	cmp	r3, r2
 8012f7e:	dc03      	bgt.n	8012f88 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8012f80:	2004      	movs	r0, #4
 8012f82:	f7f7 fbcf 	bl	800a724 <memp_malloc>
 8012f86:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d101      	bne.n	8012f92 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8012f8e:	2300      	movs	r3, #0
 8012f90:	e016      	b.n	8012fc0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8012f92:	2220      	movs	r2, #32
 8012f94:	2100      	movs	r1, #0
 8012f96:	68f8      	ldr	r0, [r7, #12]
 8012f98:	f000 ff25 	bl	8013de6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	220f      	movs	r2, #15
 8012fa0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8012fa2:	4b09      	ldr	r3, [pc, #36]	@ (8012fc8 <ip_reass_enqueue_new_datagram+0x70>)
 8012fa4:	681a      	ldr	r2, [r3, #0]
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8012faa:	4a07      	ldr	r2, [pc, #28]	@ (8012fc8 <ip_reass_enqueue_new_datagram+0x70>)
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	3308      	adds	r3, #8
 8012fb4:	2214      	movs	r2, #20
 8012fb6:	6879      	ldr	r1, [r7, #4]
 8012fb8:	4618      	mov	r0, r3
 8012fba:	f000 ff8a 	bl	8013ed2 <memcpy>
  return ipr;
 8012fbe:	68fb      	ldr	r3, [r7, #12]
}
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	3710      	adds	r7, #16
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	bd80      	pop	{r7, pc}
 8012fc8:	2000b2f8 	.word	0x2000b2f8

08012fcc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b082      	sub	sp, #8
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
 8012fd4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8012fd6:	4b10      	ldr	r3, [pc, #64]	@ (8013018 <ip_reass_dequeue_datagram+0x4c>)
 8012fd8:	681b      	ldr	r3, [r3, #0]
 8012fda:	687a      	ldr	r2, [r7, #4]
 8012fdc:	429a      	cmp	r2, r3
 8012fde:	d104      	bne.n	8012fea <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	4a0c      	ldr	r2, [pc, #48]	@ (8013018 <ip_reass_dequeue_datagram+0x4c>)
 8012fe6:	6013      	str	r3, [r2, #0]
 8012fe8:	e00d      	b.n	8013006 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8012fea:	683b      	ldr	r3, [r7, #0]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d106      	bne.n	8012ffe <ip_reass_dequeue_datagram+0x32>
 8012ff0:	4b0a      	ldr	r3, [pc, #40]	@ (801301c <ip_reass_dequeue_datagram+0x50>)
 8012ff2:	f240 1245 	movw	r2, #325	@ 0x145
 8012ff6:	490a      	ldr	r1, [pc, #40]	@ (8013020 <ip_reass_dequeue_datagram+0x54>)
 8012ff8:	480a      	ldr	r0, [pc, #40]	@ (8013024 <ip_reass_dequeue_datagram+0x58>)
 8012ffa:	f000 fe8f 	bl	8013d1c <iprintf>
    prev->next = ipr->next;
 8012ffe:	687b      	ldr	r3, [r7, #4]
 8013000:	681a      	ldr	r2, [r3, #0]
 8013002:	683b      	ldr	r3, [r7, #0]
 8013004:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8013006:	6879      	ldr	r1, [r7, #4]
 8013008:	2004      	movs	r0, #4
 801300a:	f7f7 fbfb 	bl	800a804 <memp_free>
}
 801300e:	bf00      	nop
 8013010:	3708      	adds	r7, #8
 8013012:	46bd      	mov	sp, r7
 8013014:	bd80      	pop	{r7, pc}
 8013016:	bf00      	nop
 8013018:	2000b2f8 	.word	0x2000b2f8
 801301c:	08017268 	.word	0x08017268
 8013020:	08017330 	.word	0x08017330
 8013024:	080172b0 	.word	0x080172b0

08013028 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8013028:	b580      	push	{r7, lr}
 801302a:	b08c      	sub	sp, #48	@ 0x30
 801302c:	af00      	add	r7, sp, #0
 801302e:	60f8      	str	r0, [r7, #12]
 8013030:	60b9      	str	r1, [r7, #8]
 8013032:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013034:	2300      	movs	r3, #0
 8013036:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013038:	2301      	movs	r3, #1
 801303a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801303c:	68bb      	ldr	r3, [r7, #8]
 801303e:	685b      	ldr	r3, [r3, #4]
 8013040:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013042:	69fb      	ldr	r3, [r7, #28]
 8013044:	885b      	ldrh	r3, [r3, #2]
 8013046:	b29b      	uxth	r3, r3
 8013048:	4618      	mov	r0, r3
 801304a:	f7f6 fef3 	bl	8009e34 <lwip_htons>
 801304e:	4603      	mov	r3, r0
 8013050:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8013052:	69fb      	ldr	r3, [r7, #28]
 8013054:	781b      	ldrb	r3, [r3, #0]
 8013056:	f003 030f 	and.w	r3, r3, #15
 801305a:	b2db      	uxtb	r3, r3
 801305c:	009b      	lsls	r3, r3, #2
 801305e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013060:	7e7b      	ldrb	r3, [r7, #25]
 8013062:	b29b      	uxth	r3, r3
 8013064:	8b7a      	ldrh	r2, [r7, #26]
 8013066:	429a      	cmp	r2, r3
 8013068:	d202      	bcs.n	8013070 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801306a:	f04f 33ff 	mov.w	r3, #4294967295
 801306e:	e135      	b.n	80132dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013070:	7e7b      	ldrb	r3, [r7, #25]
 8013072:	b29b      	uxth	r3, r3
 8013074:	8b7a      	ldrh	r2, [r7, #26]
 8013076:	1ad3      	subs	r3, r2, r3
 8013078:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801307a:	69fb      	ldr	r3, [r7, #28]
 801307c:	88db      	ldrh	r3, [r3, #6]
 801307e:	b29b      	uxth	r3, r3
 8013080:	4618      	mov	r0, r3
 8013082:	f7f6 fed7 	bl	8009e34 <lwip_htons>
 8013086:	4603      	mov	r3, r0
 8013088:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801308c:	b29b      	uxth	r3, r3
 801308e:	00db      	lsls	r3, r3, #3
 8013090:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013092:	68bb      	ldr	r3, [r7, #8]
 8013094:	685b      	ldr	r3, [r3, #4]
 8013096:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 8013098:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801309a:	2200      	movs	r2, #0
 801309c:	701a      	strb	r2, [r3, #0]
 801309e:	2200      	movs	r2, #0
 80130a0:	705a      	strb	r2, [r3, #1]
 80130a2:	2200      	movs	r2, #0
 80130a4:	709a      	strb	r2, [r3, #2]
 80130a6:	2200      	movs	r2, #0
 80130a8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80130aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130ac:	8afa      	ldrh	r2, [r7, #22]
 80130ae:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80130b0:	8afa      	ldrh	r2, [r7, #22]
 80130b2:	8b7b      	ldrh	r3, [r7, #26]
 80130b4:	4413      	add	r3, r2
 80130b6:	b29a      	uxth	r2, r3
 80130b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130ba:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80130bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130be:	88db      	ldrh	r3, [r3, #6]
 80130c0:	b29b      	uxth	r3, r3
 80130c2:	8afa      	ldrh	r2, [r7, #22]
 80130c4:	429a      	cmp	r2, r3
 80130c6:	d902      	bls.n	80130ce <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80130c8:	f04f 33ff 	mov.w	r3, #4294967295
 80130cc:	e106      	b.n	80132dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	685b      	ldr	r3, [r3, #4]
 80130d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80130d4:	e068      	b.n	80131a8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80130d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80130d8:	685b      	ldr	r3, [r3, #4]
 80130da:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80130dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130de:	889b      	ldrh	r3, [r3, #4]
 80130e0:	b29a      	uxth	r2, r3
 80130e2:	693b      	ldr	r3, [r7, #16]
 80130e4:	889b      	ldrh	r3, [r3, #4]
 80130e6:	b29b      	uxth	r3, r3
 80130e8:	429a      	cmp	r2, r3
 80130ea:	d235      	bcs.n	8013158 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80130ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80130f0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80130f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d020      	beq.n	801313a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80130f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80130fa:	889b      	ldrh	r3, [r3, #4]
 80130fc:	b29a      	uxth	r2, r3
 80130fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013100:	88db      	ldrh	r3, [r3, #6]
 8013102:	b29b      	uxth	r3, r3
 8013104:	429a      	cmp	r2, r3
 8013106:	d307      	bcc.n	8013118 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8013108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801310a:	88db      	ldrh	r3, [r3, #6]
 801310c:	b29a      	uxth	r2, r3
 801310e:	693b      	ldr	r3, [r7, #16]
 8013110:	889b      	ldrh	r3, [r3, #4]
 8013112:	b29b      	uxth	r3, r3
 8013114:	429a      	cmp	r2, r3
 8013116:	d902      	bls.n	801311e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013118:	f04f 33ff 	mov.w	r3, #4294967295
 801311c:	e0de      	b.n	80132dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801311e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013120:	68ba      	ldr	r2, [r7, #8]
 8013122:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013126:	88db      	ldrh	r3, [r3, #6]
 8013128:	b29a      	uxth	r2, r3
 801312a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801312c:	889b      	ldrh	r3, [r3, #4]
 801312e:	b29b      	uxth	r3, r3
 8013130:	429a      	cmp	r2, r3
 8013132:	d03d      	beq.n	80131b0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013134:	2300      	movs	r3, #0
 8013136:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013138:	e03a      	b.n	80131b0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801313a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801313c:	88db      	ldrh	r3, [r3, #6]
 801313e:	b29a      	uxth	r2, r3
 8013140:	693b      	ldr	r3, [r7, #16]
 8013142:	889b      	ldrh	r3, [r3, #4]
 8013144:	b29b      	uxth	r3, r3
 8013146:	429a      	cmp	r2, r3
 8013148:	d902      	bls.n	8013150 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801314a:	f04f 33ff 	mov.w	r3, #4294967295
 801314e:	e0c5      	b.n	80132dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	68ba      	ldr	r2, [r7, #8]
 8013154:	605a      	str	r2, [r3, #4]
      break;
 8013156:	e02b      	b.n	80131b0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801315a:	889b      	ldrh	r3, [r3, #4]
 801315c:	b29a      	uxth	r2, r3
 801315e:	693b      	ldr	r3, [r7, #16]
 8013160:	889b      	ldrh	r3, [r3, #4]
 8013162:	b29b      	uxth	r3, r3
 8013164:	429a      	cmp	r2, r3
 8013166:	d102      	bne.n	801316e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013168:	f04f 33ff 	mov.w	r3, #4294967295
 801316c:	e0b6      	b.n	80132dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801316e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013170:	889b      	ldrh	r3, [r3, #4]
 8013172:	b29a      	uxth	r2, r3
 8013174:	693b      	ldr	r3, [r7, #16]
 8013176:	88db      	ldrh	r3, [r3, #6]
 8013178:	b29b      	uxth	r3, r3
 801317a:	429a      	cmp	r2, r3
 801317c:	d202      	bcs.n	8013184 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801317e:	f04f 33ff 	mov.w	r3, #4294967295
 8013182:	e0ab      	b.n	80132dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013186:	2b00      	cmp	r3, #0
 8013188:	d009      	beq.n	801319e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801318a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801318c:	88db      	ldrh	r3, [r3, #6]
 801318e:	b29a      	uxth	r2, r3
 8013190:	693b      	ldr	r3, [r7, #16]
 8013192:	889b      	ldrh	r3, [r3, #4]
 8013194:	b29b      	uxth	r3, r3
 8013196:	429a      	cmp	r2, r3
 8013198:	d001      	beq.n	801319e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801319a:	2300      	movs	r3, #0
 801319c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801319e:	693b      	ldr	r3, [r7, #16]
 80131a0:	681b      	ldr	r3, [r3, #0]
 80131a2:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 80131a4:	693b      	ldr	r3, [r7, #16]
 80131a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 80131a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d193      	bne.n	80130d6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80131ae:	e000      	b.n	80131b2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80131b0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80131b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d12d      	bne.n	8013214 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80131b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d01c      	beq.n	80131f8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80131be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131c0:	88db      	ldrh	r3, [r3, #6]
 80131c2:	b29a      	uxth	r2, r3
 80131c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131c6:	889b      	ldrh	r3, [r3, #4]
 80131c8:	b29b      	uxth	r3, r3
 80131ca:	429a      	cmp	r2, r3
 80131cc:	d906      	bls.n	80131dc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80131ce:	4b45      	ldr	r3, [pc, #276]	@ (80132e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80131d0:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 80131d4:	4944      	ldr	r1, [pc, #272]	@ (80132e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80131d6:	4845      	ldr	r0, [pc, #276]	@ (80132ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80131d8:	f000 fda0 	bl	8013d1c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80131dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131de:	68ba      	ldr	r2, [r7, #8]
 80131e0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80131e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131e4:	88db      	ldrh	r3, [r3, #6]
 80131e6:	b29a      	uxth	r2, r3
 80131e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80131ea:	889b      	ldrh	r3, [r3, #4]
 80131ec:	b29b      	uxth	r3, r3
 80131ee:	429a      	cmp	r2, r3
 80131f0:	d010      	beq.n	8013214 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80131f2:	2300      	movs	r3, #0
 80131f4:	623b      	str	r3, [r7, #32]
 80131f6:	e00d      	b.n	8013214 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	685b      	ldr	r3, [r3, #4]
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d006      	beq.n	801320e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013200:	4b38      	ldr	r3, [pc, #224]	@ (80132e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013202:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 8013206:	493a      	ldr	r1, [pc, #232]	@ (80132f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8013208:	4838      	ldr	r0, [pc, #224]	@ (80132ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801320a:	f000 fd87 	bl	8013d1c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	68ba      	ldr	r2, [r7, #8]
 8013212:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d105      	bne.n	8013226 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	7f9b      	ldrb	r3, [r3, #30]
 801321e:	f003 0301 	and.w	r3, r3, #1
 8013222:	2b00      	cmp	r3, #0
 8013224:	d059      	beq.n	80132da <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8013226:	6a3b      	ldr	r3, [r7, #32]
 8013228:	2b00      	cmp	r3, #0
 801322a:	d04f      	beq.n	80132cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	685b      	ldr	r3, [r3, #4]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d006      	beq.n	8013242 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	685b      	ldr	r3, [r3, #4]
 8013238:	685b      	ldr	r3, [r3, #4]
 801323a:	889b      	ldrh	r3, [r3, #4]
 801323c:	b29b      	uxth	r3, r3
 801323e:	2b00      	cmp	r3, #0
 8013240:	d002      	beq.n	8013248 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8013242:	2300      	movs	r3, #0
 8013244:	623b      	str	r3, [r7, #32]
 8013246:	e041      	b.n	80132cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801324a:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801324c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 8013252:	e012      	b.n	801327a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8013254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013256:	685b      	ldr	r3, [r3, #4]
 8013258:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801325a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801325c:	88db      	ldrh	r3, [r3, #6]
 801325e:	b29a      	uxth	r2, r3
 8013260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013262:	889b      	ldrh	r3, [r3, #4]
 8013264:	b29b      	uxth	r3, r3
 8013266:	429a      	cmp	r2, r3
 8013268:	d002      	beq.n	8013270 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801326a:	2300      	movs	r3, #0
 801326c:	623b      	str	r3, [r7, #32]
            break;
 801326e:	e007      	b.n	8013280 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013272:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 8013274:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801327c:	2b00      	cmp	r3, #0
 801327e:	d1e9      	bne.n	8013254 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013280:	6a3b      	ldr	r3, [r7, #32]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d022      	beq.n	80132cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	685b      	ldr	r3, [r3, #4]
 801328a:	2b00      	cmp	r3, #0
 801328c:	d106      	bne.n	801329c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801328e:	4b15      	ldr	r3, [pc, #84]	@ (80132e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013290:	f240 12df 	movw	r2, #479	@ 0x1df
 8013294:	4917      	ldr	r1, [pc, #92]	@ (80132f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013296:	4815      	ldr	r0, [pc, #84]	@ (80132ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013298:	f000 fd40 	bl	8013d1c <iprintf>
          LWIP_ASSERT("sanity check",
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	685b      	ldr	r3, [r3, #4]
 80132a0:	685b      	ldr	r3, [r3, #4]
 80132a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80132a4:	429a      	cmp	r2, r3
 80132a6:	d106      	bne.n	80132b6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80132a8:	4b0e      	ldr	r3, [pc, #56]	@ (80132e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80132aa:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80132ae:	4911      	ldr	r1, [pc, #68]	@ (80132f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80132b0:	480e      	ldr	r0, [pc, #56]	@ (80132ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80132b2:	f000 fd33 	bl	8013d1c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80132b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d006      	beq.n	80132cc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80132be:	4b09      	ldr	r3, [pc, #36]	@ (80132e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80132c0:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 80132c4:	490c      	ldr	r1, [pc, #48]	@ (80132f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80132c6:	4809      	ldr	r0, [pc, #36]	@ (80132ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80132c8:	f000 fd28 	bl	8013d1c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80132cc:	6a3b      	ldr	r3, [r7, #32]
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	bf14      	ite	ne
 80132d2:	2301      	movne	r3, #1
 80132d4:	2300      	moveq	r3, #0
 80132d6:	b2db      	uxtb	r3, r3
 80132d8:	e000      	b.n	80132dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80132da:	2300      	movs	r3, #0
}
 80132dc:	4618      	mov	r0, r3
 80132de:	3730      	adds	r7, #48	@ 0x30
 80132e0:	46bd      	mov	sp, r7
 80132e2:	bd80      	pop	{r7, pc}
 80132e4:	08017268 	.word	0x08017268
 80132e8:	0801734c 	.word	0x0801734c
 80132ec:	080172b0 	.word	0x080172b0
 80132f0:	0801736c 	.word	0x0801736c
 80132f4:	080173a4 	.word	0x080173a4
 80132f8:	080173b4 	.word	0x080173b4

080132fc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80132fc:	b580      	push	{r7, lr}
 80132fe:	b08e      	sub	sp, #56	@ 0x38
 8013300:	af00      	add	r7, sp, #0
 8013302:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	685b      	ldr	r3, [r3, #4]
 8013308:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801330a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801330c:	781b      	ldrb	r3, [r3, #0]
 801330e:	f003 030f 	and.w	r3, r3, #15
 8013312:	b2db      	uxtb	r3, r3
 8013314:	009b      	lsls	r3, r3, #2
 8013316:	b2db      	uxtb	r3, r3
 8013318:	2b14      	cmp	r3, #20
 801331a:	f040 8171 	bne.w	8013600 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801331e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013320:	88db      	ldrh	r3, [r3, #6]
 8013322:	b29b      	uxth	r3, r3
 8013324:	4618      	mov	r0, r3
 8013326:	f7f6 fd85 	bl	8009e34 <lwip_htons>
 801332a:	4603      	mov	r3, r0
 801332c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013330:	b29b      	uxth	r3, r3
 8013332:	00db      	lsls	r3, r3, #3
 8013334:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8013336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013338:	885b      	ldrh	r3, [r3, #2]
 801333a:	b29b      	uxth	r3, r3
 801333c:	4618      	mov	r0, r3
 801333e:	f7f6 fd79 	bl	8009e34 <lwip_htons>
 8013342:	4603      	mov	r3, r0
 8013344:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8013346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013348:	781b      	ldrb	r3, [r3, #0]
 801334a:	f003 030f 	and.w	r3, r3, #15
 801334e:	b2db      	uxtb	r3, r3
 8013350:	009b      	lsls	r3, r3, #2
 8013352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 8013356:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801335a:	b29b      	uxth	r3, r3
 801335c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801335e:	429a      	cmp	r2, r3
 8013360:	f0c0 8150 	bcc.w	8013604 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013364:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8013368:	b29b      	uxth	r3, r3
 801336a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801336c:	1ad3      	subs	r3, r2, r3
 801336e:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013370:	6878      	ldr	r0, [r7, #4]
 8013372:	f7f8 f945 	bl	800b600 <pbuf_clen>
 8013376:	4603      	mov	r3, r0
 8013378:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801337a:	4b8c      	ldr	r3, [pc, #560]	@ (80135ac <ip4_reass+0x2b0>)
 801337c:	881b      	ldrh	r3, [r3, #0]
 801337e:	461a      	mov	r2, r3
 8013380:	8c3b      	ldrh	r3, [r7, #32]
 8013382:	4413      	add	r3, r2
 8013384:	2b0a      	cmp	r3, #10
 8013386:	dd10      	ble.n	80133aa <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013388:	8c3b      	ldrh	r3, [r7, #32]
 801338a:	4619      	mov	r1, r3
 801338c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801338e:	f7ff fd81 	bl	8012e94 <ip_reass_remove_oldest_datagram>
 8013392:	4603      	mov	r3, r0
 8013394:	2b00      	cmp	r3, #0
 8013396:	f000 8137 	beq.w	8013608 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801339a:	4b84      	ldr	r3, [pc, #528]	@ (80135ac <ip4_reass+0x2b0>)
 801339c:	881b      	ldrh	r3, [r3, #0]
 801339e:	461a      	mov	r2, r3
 80133a0:	8c3b      	ldrh	r3, [r7, #32]
 80133a2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80133a4:	2b0a      	cmp	r3, #10
 80133a6:	f300 812f 	bgt.w	8013608 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80133aa:	4b81      	ldr	r3, [pc, #516]	@ (80135b0 <ip4_reass+0x2b4>)
 80133ac:	681b      	ldr	r3, [r3, #0]
 80133ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80133b0:	e015      	b.n	80133de <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80133b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133b4:	695a      	ldr	r2, [r3, #20]
 80133b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133b8:	68db      	ldr	r3, [r3, #12]
 80133ba:	429a      	cmp	r2, r3
 80133bc:	d10c      	bne.n	80133d8 <ip4_reass+0xdc>
 80133be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133c0:	699a      	ldr	r2, [r3, #24]
 80133c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133c4:	691b      	ldr	r3, [r3, #16]
 80133c6:	429a      	cmp	r2, r3
 80133c8:	d106      	bne.n	80133d8 <ip4_reass+0xdc>
 80133ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133cc:	899a      	ldrh	r2, [r3, #12]
 80133ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80133d0:	889b      	ldrh	r3, [r3, #4]
 80133d2:	b29b      	uxth	r3, r3
 80133d4:	429a      	cmp	r2, r3
 80133d6:	d006      	beq.n	80133e6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80133d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80133de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d1e6      	bne.n	80133b2 <ip4_reass+0xb6>
 80133e4:	e000      	b.n	80133e8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80133e6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80133e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d109      	bne.n	8013402 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80133ee:	8c3b      	ldrh	r3, [r7, #32]
 80133f0:	4619      	mov	r1, r3
 80133f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80133f4:	f7ff fdb0 	bl	8012f58 <ip_reass_enqueue_new_datagram>
 80133f8:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80133fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d11c      	bne.n	801343a <ip4_reass+0x13e>
      goto nullreturn;
 8013400:	e105      	b.n	801360e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013404:	88db      	ldrh	r3, [r3, #6]
 8013406:	b29b      	uxth	r3, r3
 8013408:	4618      	mov	r0, r3
 801340a:	f7f6 fd13 	bl	8009e34 <lwip_htons>
 801340e:	4603      	mov	r3, r0
 8013410:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013414:	2b00      	cmp	r3, #0
 8013416:	d110      	bne.n	801343a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8013418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801341a:	89db      	ldrh	r3, [r3, #14]
 801341c:	4618      	mov	r0, r3
 801341e:	f7f6 fd09 	bl	8009e34 <lwip_htons>
 8013422:	4603      	mov	r3, r0
 8013424:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013428:	2b00      	cmp	r3, #0
 801342a:	d006      	beq.n	801343a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801342c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801342e:	3308      	adds	r3, #8
 8013430:	2214      	movs	r2, #20
 8013432:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013434:	4618      	mov	r0, r3
 8013436:	f000 fd4c 	bl	8013ed2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801343a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801343c:	88db      	ldrh	r3, [r3, #6]
 801343e:	b29b      	uxth	r3, r3
 8013440:	f003 0320 	and.w	r3, r3, #32
 8013444:	2b00      	cmp	r3, #0
 8013446:	bf0c      	ite	eq
 8013448:	2301      	moveq	r3, #1
 801344a:	2300      	movne	r3, #0
 801344c:	b2db      	uxtb	r3, r3
 801344e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013450:	69fb      	ldr	r3, [r7, #28]
 8013452:	2b00      	cmp	r3, #0
 8013454:	d00e      	beq.n	8013474 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013456:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8013458:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801345a:	4413      	add	r3, r2
 801345c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801345e:	8b7a      	ldrh	r2, [r7, #26]
 8013460:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8013462:	429a      	cmp	r2, r3
 8013464:	f0c0 80a0 	bcc.w	80135a8 <ip4_reass+0x2ac>
 8013468:	8b7b      	ldrh	r3, [r7, #26]
 801346a:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801346e:	4293      	cmp	r3, r2
 8013470:	f200 809a 	bhi.w	80135a8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013474:	69fa      	ldr	r2, [r7, #28]
 8013476:	6879      	ldr	r1, [r7, #4]
 8013478:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801347a:	f7ff fdd5 	bl	8013028 <ip_reass_chain_frag_into_datagram_and_validate>
 801347e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013480:	697b      	ldr	r3, [r7, #20]
 8013482:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013486:	f000 809b 	beq.w	80135c0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801348a:	4b48      	ldr	r3, [pc, #288]	@ (80135ac <ip4_reass+0x2b0>)
 801348c:	881a      	ldrh	r2, [r3, #0]
 801348e:	8c3b      	ldrh	r3, [r7, #32]
 8013490:	4413      	add	r3, r2
 8013492:	b29a      	uxth	r2, r3
 8013494:	4b45      	ldr	r3, [pc, #276]	@ (80135ac <ip4_reass+0x2b0>)
 8013496:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013498:	69fb      	ldr	r3, [r7, #28]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d00d      	beq.n	80134ba <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801349e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80134a0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80134a2:	4413      	add	r3, r2
 80134a4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80134a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134a8:	8a7a      	ldrh	r2, [r7, #18]
 80134aa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80134ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134ae:	7f9b      	ldrb	r3, [r3, #30]
 80134b0:	f043 0301 	orr.w	r3, r3, #1
 80134b4:	b2da      	uxtb	r2, r3
 80134b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134b8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80134ba:	697b      	ldr	r3, [r7, #20]
 80134bc:	2b01      	cmp	r3, #1
 80134be:	d171      	bne.n	80135a4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80134c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134c2:	8b9b      	ldrh	r3, [r3, #28]
 80134c4:	3314      	adds	r3, #20
 80134c6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80134c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134ca:	685b      	ldr	r3, [r3, #4]
 80134cc:	685b      	ldr	r3, [r3, #4]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80134d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134d4:	685b      	ldr	r3, [r3, #4]
 80134d6:	685b      	ldr	r3, [r3, #4]
 80134d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80134da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80134dc:	3308      	adds	r3, #8
 80134de:	2214      	movs	r2, #20
 80134e0:	4619      	mov	r1, r3
 80134e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80134e4:	f000 fcf5 	bl	8013ed2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80134e8:	8a3b      	ldrh	r3, [r7, #16]
 80134ea:	4618      	mov	r0, r3
 80134ec:	f7f6 fca2 	bl	8009e34 <lwip_htons>
 80134f0:	4603      	mov	r3, r0
 80134f2:	461a      	mov	r2, r3
 80134f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134f6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80134f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80134fa:	2200      	movs	r2, #0
 80134fc:	719a      	strb	r2, [r3, #6]
 80134fe:	2200      	movs	r2, #0
 8013500:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013504:	2200      	movs	r2, #0
 8013506:	729a      	strb	r2, [r3, #10]
 8013508:	2200      	movs	r2, #0
 801350a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801350c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801350e:	685b      	ldr	r3, [r3, #4]
 8013510:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013512:	e00d      	b.n	8013530 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013514:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013516:	685b      	ldr	r3, [r3, #4]
 8013518:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801351a:	2114      	movs	r1, #20
 801351c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801351e:	f7f7 ff61 	bl	800b3e4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8013522:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8013524:	6878      	ldr	r0, [r7, #4]
 8013526:	f7f8 f8a5 	bl	800b674 <pbuf_cat>
      r = iprh->next_pbuf;
 801352a:	68fb      	ldr	r3, [r7, #12]
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 8013530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013532:	2b00      	cmp	r3, #0
 8013534:	d1ee      	bne.n	8013514 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013536:	4b1e      	ldr	r3, [pc, #120]	@ (80135b0 <ip4_reass+0x2b4>)
 8013538:	681b      	ldr	r3, [r3, #0]
 801353a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801353c:	429a      	cmp	r2, r3
 801353e:	d102      	bne.n	8013546 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013540:	2300      	movs	r3, #0
 8013542:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8013544:	e010      	b.n	8013568 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013546:	4b1a      	ldr	r3, [pc, #104]	@ (80135b0 <ip4_reass+0x2b4>)
 8013548:	681b      	ldr	r3, [r3, #0]
 801354a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801354c:	e007      	b.n	801355e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801354e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013554:	429a      	cmp	r2, r3
 8013556:	d006      	beq.n	8013566 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801355e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013560:	2b00      	cmp	r3, #0
 8013562:	d1f4      	bne.n	801354e <ip4_reass+0x252>
 8013564:	e000      	b.n	8013568 <ip4_reass+0x26c>
          break;
 8013566:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013568:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801356a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801356c:	f7ff fd2e 	bl	8012fcc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013570:	6878      	ldr	r0, [r7, #4]
 8013572:	f7f8 f845 	bl	800b600 <pbuf_clen>
 8013576:	4603      	mov	r3, r0
 8013578:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801357a:	4b0c      	ldr	r3, [pc, #48]	@ (80135ac <ip4_reass+0x2b0>)
 801357c:	881b      	ldrh	r3, [r3, #0]
 801357e:	8c3a      	ldrh	r2, [r7, #32]
 8013580:	429a      	cmp	r2, r3
 8013582:	d906      	bls.n	8013592 <ip4_reass+0x296>
 8013584:	4b0b      	ldr	r3, [pc, #44]	@ (80135b4 <ip4_reass+0x2b8>)
 8013586:	f240 229b 	movw	r2, #667	@ 0x29b
 801358a:	490b      	ldr	r1, [pc, #44]	@ (80135b8 <ip4_reass+0x2bc>)
 801358c:	480b      	ldr	r0, [pc, #44]	@ (80135bc <ip4_reass+0x2c0>)
 801358e:	f000 fbc5 	bl	8013d1c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013592:	4b06      	ldr	r3, [pc, #24]	@ (80135ac <ip4_reass+0x2b0>)
 8013594:	881a      	ldrh	r2, [r3, #0]
 8013596:	8c3b      	ldrh	r3, [r7, #32]
 8013598:	1ad3      	subs	r3, r2, r3
 801359a:	b29a      	uxth	r2, r3
 801359c:	4b03      	ldr	r3, [pc, #12]	@ (80135ac <ip4_reass+0x2b0>)
 801359e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	e038      	b.n	8013616 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80135a4:	2300      	movs	r3, #0
 80135a6:	e036      	b.n	8013616 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80135a8:	bf00      	nop
 80135aa:	e00a      	b.n	80135c2 <ip4_reass+0x2c6>
 80135ac:	2000b2fc 	.word	0x2000b2fc
 80135b0:	2000b2f8 	.word	0x2000b2f8
 80135b4:	08017268 	.word	0x08017268
 80135b8:	080173d8 	.word	0x080173d8
 80135bc:	080172b0 	.word	0x080172b0
    goto nullreturn_ipr;
 80135c0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80135c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d106      	bne.n	80135d6 <ip4_reass+0x2da>
 80135c8:	4b15      	ldr	r3, [pc, #84]	@ (8013620 <ip4_reass+0x324>)
 80135ca:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 80135ce:	4915      	ldr	r1, [pc, #84]	@ (8013624 <ip4_reass+0x328>)
 80135d0:	4815      	ldr	r0, [pc, #84]	@ (8013628 <ip4_reass+0x32c>)
 80135d2:	f000 fba3 	bl	8013d1c <iprintf>
  if (ipr->p == NULL) {
 80135d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135d8:	685b      	ldr	r3, [r3, #4]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d116      	bne.n	801360c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80135de:	4b13      	ldr	r3, [pc, #76]	@ (801362c <ip4_reass+0x330>)
 80135e0:	681b      	ldr	r3, [r3, #0]
 80135e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80135e4:	429a      	cmp	r2, r3
 80135e6:	d006      	beq.n	80135f6 <ip4_reass+0x2fa>
 80135e8:	4b0d      	ldr	r3, [pc, #52]	@ (8013620 <ip4_reass+0x324>)
 80135ea:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80135ee:	4910      	ldr	r1, [pc, #64]	@ (8013630 <ip4_reass+0x334>)
 80135f0:	480d      	ldr	r0, [pc, #52]	@ (8013628 <ip4_reass+0x32c>)
 80135f2:	f000 fb93 	bl	8013d1c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80135f6:	2100      	movs	r1, #0
 80135f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80135fa:	f7ff fce7 	bl	8012fcc <ip_reass_dequeue_datagram>
 80135fe:	e006      	b.n	801360e <ip4_reass+0x312>
    goto nullreturn;
 8013600:	bf00      	nop
 8013602:	e004      	b.n	801360e <ip4_reass+0x312>
    goto nullreturn;
 8013604:	bf00      	nop
 8013606:	e002      	b.n	801360e <ip4_reass+0x312>
      goto nullreturn;
 8013608:	bf00      	nop
 801360a:	e000      	b.n	801360e <ip4_reass+0x312>
  }

nullreturn:
 801360c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801360e:	6878      	ldr	r0, [r7, #4]
 8013610:	f7f7 ff6e 	bl	800b4f0 <pbuf_free>
  return NULL;
 8013614:	2300      	movs	r3, #0
}
 8013616:	4618      	mov	r0, r3
 8013618:	3738      	adds	r7, #56	@ 0x38
 801361a:	46bd      	mov	sp, r7
 801361c:	bd80      	pop	{r7, pc}
 801361e:	bf00      	nop
 8013620:	08017268 	.word	0x08017268
 8013624:	080173f4 	.word	0x080173f4
 8013628:	080172b0 	.word	0x080172b0
 801362c:	2000b2f8 	.word	0x2000b2f8
 8013630:	08017400 	.word	0x08017400

08013634 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013634:	b580      	push	{r7, lr}
 8013636:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013638:	2005      	movs	r0, #5
 801363a:	f7f7 f873 	bl	800a724 <memp_malloc>
 801363e:	4603      	mov	r3, r0
}
 8013640:	4618      	mov	r0, r3
 8013642:	bd80      	pop	{r7, pc}

08013644 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013644:	b580      	push	{r7, lr}
 8013646:	b082      	sub	sp, #8
 8013648:	af00      	add	r7, sp, #0
 801364a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d106      	bne.n	8013660 <ip_frag_free_pbuf_custom_ref+0x1c>
 8013652:	4b07      	ldr	r3, [pc, #28]	@ (8013670 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013654:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 8013658:	4906      	ldr	r1, [pc, #24]	@ (8013674 <ip_frag_free_pbuf_custom_ref+0x30>)
 801365a:	4807      	ldr	r0, [pc, #28]	@ (8013678 <ip_frag_free_pbuf_custom_ref+0x34>)
 801365c:	f000 fb5e 	bl	8013d1c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013660:	6879      	ldr	r1, [r7, #4]
 8013662:	2005      	movs	r0, #5
 8013664:	f7f7 f8ce 	bl	800a804 <memp_free>
}
 8013668:	bf00      	nop
 801366a:	3708      	adds	r7, #8
 801366c:	46bd      	mov	sp, r7
 801366e:	bd80      	pop	{r7, pc}
 8013670:	08017268 	.word	0x08017268
 8013674:	08017420 	.word	0x08017420
 8013678:	080172b0 	.word	0x080172b0

0801367c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801367c:	b580      	push	{r7, lr}
 801367e:	b084      	sub	sp, #16
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	2b00      	cmp	r3, #0
 801368c:	d106      	bne.n	801369c <ipfrag_free_pbuf_custom+0x20>
 801368e:	4b11      	ldr	r3, [pc, #68]	@ (80136d4 <ipfrag_free_pbuf_custom+0x58>)
 8013690:	f240 22ce 	movw	r2, #718	@ 0x2ce
 8013694:	4910      	ldr	r1, [pc, #64]	@ (80136d8 <ipfrag_free_pbuf_custom+0x5c>)
 8013696:	4811      	ldr	r0, [pc, #68]	@ (80136dc <ipfrag_free_pbuf_custom+0x60>)
 8013698:	f000 fb40 	bl	8013d1c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801369c:	68fa      	ldr	r2, [r7, #12]
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	429a      	cmp	r2, r3
 80136a2:	d006      	beq.n	80136b2 <ipfrag_free_pbuf_custom+0x36>
 80136a4:	4b0b      	ldr	r3, [pc, #44]	@ (80136d4 <ipfrag_free_pbuf_custom+0x58>)
 80136a6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 80136aa:	490d      	ldr	r1, [pc, #52]	@ (80136e0 <ipfrag_free_pbuf_custom+0x64>)
 80136ac:	480b      	ldr	r0, [pc, #44]	@ (80136dc <ipfrag_free_pbuf_custom+0x60>)
 80136ae:	f000 fb35 	bl	8013d1c <iprintf>
  if (pcr->original != NULL) {
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	695b      	ldr	r3, [r3, #20]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d004      	beq.n	80136c4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	695b      	ldr	r3, [r3, #20]
 80136be:	4618      	mov	r0, r3
 80136c0:	f7f7 ff16 	bl	800b4f0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80136c4:	68f8      	ldr	r0, [r7, #12]
 80136c6:	f7ff ffbd 	bl	8013644 <ip_frag_free_pbuf_custom_ref>
}
 80136ca:	bf00      	nop
 80136cc:	3710      	adds	r7, #16
 80136ce:	46bd      	mov	sp, r7
 80136d0:	bd80      	pop	{r7, pc}
 80136d2:	bf00      	nop
 80136d4:	08017268 	.word	0x08017268
 80136d8:	0801742c 	.word	0x0801742c
 80136dc:	080172b0 	.word	0x080172b0
 80136e0:	08017438 	.word	0x08017438

080136e4 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b094      	sub	sp, #80	@ 0x50
 80136e8:	af02      	add	r7, sp, #8
 80136ea:	60f8      	str	r0, [r7, #12]
 80136ec:	60b9      	str	r1, [r7, #8]
 80136ee:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80136f0:	2300      	movs	r3, #0
 80136f2:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80136f6:	68bb      	ldr	r3, [r7, #8]
 80136f8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80136fa:	3b14      	subs	r3, #20
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	da00      	bge.n	8013702 <ip4_frag+0x1e>
 8013700:	3307      	adds	r3, #7
 8013702:	10db      	asrs	r3, r3, #3
 8013704:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013706:	2314      	movs	r3, #20
 8013708:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801370a:	68fb      	ldr	r3, [r7, #12]
 801370c:	685b      	ldr	r3, [r3, #4]
 801370e:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 8013710:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013712:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013716:	781b      	ldrb	r3, [r3, #0]
 8013718:	f003 030f 	and.w	r3, r3, #15
 801371c:	b2db      	uxtb	r3, r3
 801371e:	009b      	lsls	r3, r3, #2
 8013720:	b2db      	uxtb	r3, r3
 8013722:	2b14      	cmp	r3, #20
 8013724:	d002      	beq.n	801372c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013726:	f06f 0305 	mvn.w	r3, #5
 801372a:	e110      	b.n	801394e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801372c:	68fb      	ldr	r3, [r7, #12]
 801372e:	895b      	ldrh	r3, [r3, #10]
 8013730:	2b13      	cmp	r3, #19
 8013732:	d809      	bhi.n	8013748 <ip4_frag+0x64>
 8013734:	4b88      	ldr	r3, [pc, #544]	@ (8013958 <ip4_frag+0x274>)
 8013736:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801373a:	4988      	ldr	r1, [pc, #544]	@ (801395c <ip4_frag+0x278>)
 801373c:	4888      	ldr	r0, [pc, #544]	@ (8013960 <ip4_frag+0x27c>)
 801373e:	f000 faed 	bl	8013d1c <iprintf>
 8013742:	f06f 0305 	mvn.w	r3, #5
 8013746:	e102      	b.n	801394e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801374a:	88db      	ldrh	r3, [r3, #6]
 801374c:	b29b      	uxth	r3, r3
 801374e:	4618      	mov	r0, r3
 8013750:	f7f6 fb70 	bl	8009e34 <lwip_htons>
 8013754:	4603      	mov	r3, r0
 8013756:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 8013758:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801375a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801375e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013762:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8013764:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8013768:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	891b      	ldrh	r3, [r3, #8]
 801376e:	3b14      	subs	r3, #20
 8013770:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 8013774:	e0e1      	b.n	801393a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013776:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013778:	00db      	lsls	r3, r3, #3
 801377a:	b29b      	uxth	r3, r3
 801377c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013780:	4293      	cmp	r3, r2
 8013782:	bf28      	it	cs
 8013784:	4613      	movcs	r3, r2
 8013786:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013788:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801378c:	2114      	movs	r1, #20
 801378e:	200e      	movs	r0, #14
 8013790:	f7f7 fbca 	bl	800af28 <pbuf_alloc>
 8013794:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 8013796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013798:	2b00      	cmp	r3, #0
 801379a:	f000 80d5 	beq.w	8013948 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801379e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137a0:	895b      	ldrh	r3, [r3, #10]
 80137a2:	2b13      	cmp	r3, #19
 80137a4:	d806      	bhi.n	80137b4 <ip4_frag+0xd0>
 80137a6:	4b6c      	ldr	r3, [pc, #432]	@ (8013958 <ip4_frag+0x274>)
 80137a8:	f44f 7249 	mov.w	r2, #804	@ 0x324
 80137ac:	496d      	ldr	r1, [pc, #436]	@ (8013964 <ip4_frag+0x280>)
 80137ae:	486c      	ldr	r0, [pc, #432]	@ (8013960 <ip4_frag+0x27c>)
 80137b0:	f000 fab4 	bl	8013d1c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80137b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137b6:	685b      	ldr	r3, [r3, #4]
 80137b8:	2214      	movs	r2, #20
 80137ba:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80137bc:	4618      	mov	r0, r3
 80137be:	f000 fb88 	bl	8013ed2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80137c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137c4:	685b      	ldr	r3, [r3, #4]
 80137c6:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 80137c8:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80137ca:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 80137ce:	e064      	b.n	801389a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 80137d0:	68fb      	ldr	r3, [r7, #12]
 80137d2:	895a      	ldrh	r2, [r3, #10]
 80137d4:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80137d6:	1ad3      	subs	r3, r2, r3
 80137d8:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	895b      	ldrh	r3, [r3, #10]
 80137de:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80137e0:	429a      	cmp	r2, r3
 80137e2:	d906      	bls.n	80137f2 <ip4_frag+0x10e>
 80137e4:	4b5c      	ldr	r3, [pc, #368]	@ (8013958 <ip4_frag+0x274>)
 80137e6:	f240 322d 	movw	r2, #813	@ 0x32d
 80137ea:	495f      	ldr	r1, [pc, #380]	@ (8013968 <ip4_frag+0x284>)
 80137ec:	485c      	ldr	r0, [pc, #368]	@ (8013960 <ip4_frag+0x27c>)
 80137ee:	f000 fa95 	bl	8013d1c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80137f2:	8bfa      	ldrh	r2, [r7, #30]
 80137f4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80137f8:	4293      	cmp	r3, r2
 80137fa:	bf28      	it	cs
 80137fc:	4613      	movcs	r3, r2
 80137fe:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013802:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013806:	2b00      	cmp	r3, #0
 8013808:	d105      	bne.n	8013816 <ip4_frag+0x132>
        poff = 0;
 801380a:	2300      	movs	r3, #0
 801380c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	60fb      	str	r3, [r7, #12]
        continue;
 8013814:	e041      	b.n	801389a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013816:	f7ff ff0d 	bl	8013634 <ip_frag_alloc_pbuf_custom_ref>
 801381a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801381c:	69bb      	ldr	r3, [r7, #24]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d103      	bne.n	801382a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013822:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013824:	f7f7 fe64 	bl	800b4f0 <pbuf_free>
        goto memerr;
 8013828:	e08f      	b.n	801394a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801382a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801382c:	68fb      	ldr	r3, [r7, #12]
 801382e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013830:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8013832:	4413      	add	r3, r2
 8013834:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 8013838:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801383c:	9201      	str	r2, [sp, #4]
 801383e:	9300      	str	r3, [sp, #0]
 8013840:	4603      	mov	r3, r0
 8013842:	2241      	movs	r2, #65	@ 0x41
 8013844:	2000      	movs	r0, #0
 8013846:	f7f7 fc99 	bl	800b17c <pbuf_alloced_custom>
 801384a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801384c:	697b      	ldr	r3, [r7, #20]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d106      	bne.n	8013860 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013852:	69b8      	ldr	r0, [r7, #24]
 8013854:	f7ff fef6 	bl	8013644 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013858:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801385a:	f7f7 fe49 	bl	800b4f0 <pbuf_free>
        goto memerr;
 801385e:	e074      	b.n	801394a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013860:	68f8      	ldr	r0, [r7, #12]
 8013862:	f7f7 fee5 	bl	800b630 <pbuf_ref>
      pcr->original = p;
 8013866:	69bb      	ldr	r3, [r7, #24]
 8013868:	68fa      	ldr	r2, [r7, #12]
 801386a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801386c:	69bb      	ldr	r3, [r7, #24]
 801386e:	4a3f      	ldr	r2, [pc, #252]	@ (801396c <ip4_frag+0x288>)
 8013870:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013872:	6979      	ldr	r1, [r7, #20]
 8013874:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8013876:	f7f7 fefd 	bl	800b674 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801387a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801387e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8013882:	1ad3      	subs	r3, r2, r3
 8013884:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 8013888:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801388c:	2b00      	cmp	r3, #0
 801388e:	d004      	beq.n	801389a <ip4_frag+0x1b6>
        poff = 0;
 8013890:	2300      	movs	r3, #0
 8013892:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801389a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801389e:	2b00      	cmp	r3, #0
 80138a0:	d196      	bne.n	80137d0 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80138a2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80138a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80138a8:	4413      	add	r3, r2
 80138aa:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80138ac:	68bb      	ldr	r3, [r7, #8]
 80138ae:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80138b0:	f1a3 0213 	sub.w	r2, r3, #19
 80138b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80138b8:	429a      	cmp	r2, r3
 80138ba:	bfcc      	ite	gt
 80138bc:	2301      	movgt	r3, #1
 80138be:	2300      	movle	r3, #0
 80138c0:	b2db      	uxtb	r3, r3
 80138c2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80138c4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80138c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80138cc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 80138ce:	6a3b      	ldr	r3, [r7, #32]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d002      	beq.n	80138da <ip4_frag+0x1f6>
 80138d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138d6:	2b00      	cmp	r3, #0
 80138d8:	d003      	beq.n	80138e2 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80138da:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80138dc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80138e0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80138e2:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80138e4:	4618      	mov	r0, r3
 80138e6:	f7f6 faa5 	bl	8009e34 <lwip_htons>
 80138ea:	4603      	mov	r3, r0
 80138ec:	461a      	mov	r2, r3
 80138ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80138f0:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80138f2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80138f4:	3314      	adds	r3, #20
 80138f6:	b29b      	uxth	r3, r3
 80138f8:	4618      	mov	r0, r3
 80138fa:	f7f6 fa9b 	bl	8009e34 <lwip_htons>
 80138fe:	4603      	mov	r3, r0
 8013900:	461a      	mov	r2, r3
 8013902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013904:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013908:	2200      	movs	r2, #0
 801390a:	729a      	strb	r2, [r3, #10]
 801390c:	2200      	movs	r2, #0
 801390e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013910:	68bb      	ldr	r3, [r7, #8]
 8013912:	695b      	ldr	r3, [r3, #20]
 8013914:	687a      	ldr	r2, [r7, #4]
 8013916:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013918:	68b8      	ldr	r0, [r7, #8]
 801391a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801391c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801391e:	f7f7 fde7 	bl	800b4f0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013922:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8013926:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8013928:	1ad3      	subs	r3, r2, r3
 801392a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801392e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8013932:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8013934:	4413      	add	r3, r2
 8013936:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801393a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801393e:	2b00      	cmp	r3, #0
 8013940:	f47f af19 	bne.w	8013776 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013944:	2300      	movs	r3, #0
 8013946:	e002      	b.n	801394e <ip4_frag+0x26a>
      goto memerr;
 8013948:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801394a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801394e:	4618      	mov	r0, r3
 8013950:	3748      	adds	r7, #72	@ 0x48
 8013952:	46bd      	mov	sp, r7
 8013954:	bd80      	pop	{r7, pc}
 8013956:	bf00      	nop
 8013958:	08017268 	.word	0x08017268
 801395c:	08017444 	.word	0x08017444
 8013960:	080172b0 	.word	0x080172b0
 8013964:	08017460 	.word	0x08017460
 8013968:	08017480 	.word	0x08017480
 801396c:	0801367d 	.word	0x0801367d

08013970 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013970:	b580      	push	{r7, lr}
 8013972:	b086      	sub	sp, #24
 8013974:	af00      	add	r7, sp, #0
 8013976:	6078      	str	r0, [r7, #4]
 8013978:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801397a:	230e      	movs	r3, #14
 801397c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	895b      	ldrh	r3, [r3, #10]
 8013982:	2b0e      	cmp	r3, #14
 8013984:	d96e      	bls.n	8013a64 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	7bdb      	ldrb	r3, [r3, #15]
 801398a:	2b00      	cmp	r3, #0
 801398c:	d106      	bne.n	801399c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801398e:	683b      	ldr	r3, [r7, #0]
 8013990:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8013994:	3301      	adds	r3, #1
 8013996:	b2da      	uxtb	r2, r3
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	685b      	ldr	r3, [r3, #4]
 80139a0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80139a2:	693b      	ldr	r3, [r7, #16]
 80139a4:	7b1a      	ldrb	r2, [r3, #12]
 80139a6:	7b5b      	ldrb	r3, [r3, #13]
 80139a8:	021b      	lsls	r3, r3, #8
 80139aa:	4313      	orrs	r3, r2
 80139ac:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80139ae:	693b      	ldr	r3, [r7, #16]
 80139b0:	781b      	ldrb	r3, [r3, #0]
 80139b2:	f003 0301 	and.w	r3, r3, #1
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d023      	beq.n	8013a02 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80139ba:	693b      	ldr	r3, [r7, #16]
 80139bc:	781b      	ldrb	r3, [r3, #0]
 80139be:	2b01      	cmp	r3, #1
 80139c0:	d10f      	bne.n	80139e2 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80139c2:	693b      	ldr	r3, [r7, #16]
 80139c4:	785b      	ldrb	r3, [r3, #1]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d11b      	bne.n	8013a02 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80139ca:	693b      	ldr	r3, [r7, #16]
 80139cc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80139ce:	2b5e      	cmp	r3, #94	@ 0x5e
 80139d0:	d117      	bne.n	8013a02 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	7b5b      	ldrb	r3, [r3, #13]
 80139d6:	f043 0310 	orr.w	r3, r3, #16
 80139da:	b2da      	uxtb	r2, r3
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	735a      	strb	r2, [r3, #13]
 80139e0:	e00f      	b.n	8013a02 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80139e2:	693b      	ldr	r3, [r7, #16]
 80139e4:	2206      	movs	r2, #6
 80139e6:	4928      	ldr	r1, [pc, #160]	@ (8013a88 <ethernet_input+0x118>)
 80139e8:	4618      	mov	r0, r3
 80139ea:	f000 f9ec 	bl	8013dc6 <memcmp>
 80139ee:	4603      	mov	r3, r0
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d106      	bne.n	8013a02 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	7b5b      	ldrb	r3, [r3, #13]
 80139f8:	f043 0308 	orr.w	r3, r3, #8
 80139fc:	b2da      	uxtb	r2, r3
 80139fe:	687b      	ldr	r3, [r7, #4]
 8013a00:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013a02:	89fb      	ldrh	r3, [r7, #14]
 8013a04:	2b08      	cmp	r3, #8
 8013a06:	d003      	beq.n	8013a10 <ethernet_input+0xa0>
 8013a08:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8013a0c:	d014      	beq.n	8013a38 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013a0e:	e032      	b.n	8013a76 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013a10:	683b      	ldr	r3, [r7, #0]
 8013a12:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013a16:	f003 0308 	and.w	r3, r3, #8
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d024      	beq.n	8013a68 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013a1e:	8afb      	ldrh	r3, [r7, #22]
 8013a20:	4619      	mov	r1, r3
 8013a22:	6878      	ldr	r0, [r7, #4]
 8013a24:	f7f7 fcde 	bl	800b3e4 <pbuf_remove_header>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d11e      	bne.n	8013a6c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013a2e:	6839      	ldr	r1, [r7, #0]
 8013a30:	6878      	ldr	r0, [r7, #4]
 8013a32:	f7fe ff21 	bl	8012878 <ip4_input>
      break;
 8013a36:	e013      	b.n	8013a60 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013a38:	683b      	ldr	r3, [r7, #0]
 8013a3a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8013a3e:	f003 0308 	and.w	r3, r3, #8
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d014      	beq.n	8013a70 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013a46:	8afb      	ldrh	r3, [r7, #22]
 8013a48:	4619      	mov	r1, r3
 8013a4a:	6878      	ldr	r0, [r7, #4]
 8013a4c:	f7f7 fcca 	bl	800b3e4 <pbuf_remove_header>
 8013a50:	4603      	mov	r3, r0
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d10e      	bne.n	8013a74 <ethernet_input+0x104>
        etharp_input(p, netif);
 8013a56:	6839      	ldr	r1, [r7, #0]
 8013a58:	6878      	ldr	r0, [r7, #4]
 8013a5a:	f7fe f8c1 	bl	8011be0 <etharp_input>
      break;
 8013a5e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013a60:	2300      	movs	r3, #0
 8013a62:	e00c      	b.n	8013a7e <ethernet_input+0x10e>
    goto free_and_return;
 8013a64:	bf00      	nop
 8013a66:	e006      	b.n	8013a76 <ethernet_input+0x106>
        goto free_and_return;
 8013a68:	bf00      	nop
 8013a6a:	e004      	b.n	8013a76 <ethernet_input+0x106>
        goto free_and_return;
 8013a6c:	bf00      	nop
 8013a6e:	e002      	b.n	8013a76 <ethernet_input+0x106>
        goto free_and_return;
 8013a70:	bf00      	nop
 8013a72:	e000      	b.n	8013a76 <ethernet_input+0x106>
        goto free_and_return;
 8013a74:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013a76:	6878      	ldr	r0, [r7, #4]
 8013a78:	f7f7 fd3a 	bl	800b4f0 <pbuf_free>
  return ERR_OK;
 8013a7c:	2300      	movs	r3, #0
}
 8013a7e:	4618      	mov	r0, r3
 8013a80:	3718      	adds	r7, #24
 8013a82:	46bd      	mov	sp, r7
 8013a84:	bd80      	pop	{r7, pc}
 8013a86:	bf00      	nop
 8013a88:	08017624 	.word	0x08017624

08013a8c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b086      	sub	sp, #24
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	60f8      	str	r0, [r7, #12]
 8013a94:	60b9      	str	r1, [r7, #8]
 8013a96:	607a      	str	r2, [r7, #4]
 8013a98:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013a9a:	8c3b      	ldrh	r3, [r7, #32]
 8013a9c:	4618      	mov	r0, r3
 8013a9e:	f7f6 f9c9 	bl	8009e34 <lwip_htons>
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013aa6:	210e      	movs	r1, #14
 8013aa8:	68b8      	ldr	r0, [r7, #8]
 8013aaa:	f7f7 fc8b 	bl	800b3c4 <pbuf_add_header>
 8013aae:	4603      	mov	r3, r0
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d125      	bne.n	8013b00 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013ab4:	68bb      	ldr	r3, [r7, #8]
 8013ab6:	685b      	ldr	r3, [r3, #4]
 8013ab8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013aba:	693b      	ldr	r3, [r7, #16]
 8013abc:	8afa      	ldrh	r2, [r7, #22]
 8013abe:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013ac0:	693b      	ldr	r3, [r7, #16]
 8013ac2:	2206      	movs	r2, #6
 8013ac4:	6839      	ldr	r1, [r7, #0]
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	f000 fa03 	bl	8013ed2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013acc:	693b      	ldr	r3, [r7, #16]
 8013ace:	3306      	adds	r3, #6
 8013ad0:	2206      	movs	r2, #6
 8013ad2:	6879      	ldr	r1, [r7, #4]
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	f000 f9fc 	bl	8013ed2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8013ae0:	2b06      	cmp	r3, #6
 8013ae2:	d006      	beq.n	8013af2 <ethernet_output+0x66>
 8013ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8013b10 <ethernet_output+0x84>)
 8013ae6:	f44f 7299 	mov.w	r2, #306	@ 0x132
 8013aea:	490a      	ldr	r1, [pc, #40]	@ (8013b14 <ethernet_output+0x88>)
 8013aec:	480a      	ldr	r0, [pc, #40]	@ (8013b18 <ethernet_output+0x8c>)
 8013aee:	f000 f915 	bl	8013d1c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	699b      	ldr	r3, [r3, #24]
 8013af6:	68b9      	ldr	r1, [r7, #8]
 8013af8:	68f8      	ldr	r0, [r7, #12]
 8013afa:	4798      	blx	r3
 8013afc:	4603      	mov	r3, r0
 8013afe:	e002      	b.n	8013b06 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013b00:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013b02:	f06f 0301 	mvn.w	r3, #1
}
 8013b06:	4618      	mov	r0, r3
 8013b08:	3718      	adds	r7, #24
 8013b0a:	46bd      	mov	sp, r7
 8013b0c:	bd80      	pop	{r7, pc}
 8013b0e:	bf00      	nop
 8013b10:	08017490 	.word	0x08017490
 8013b14:	080174c8 	.word	0x080174c8
 8013b18:	080174fc 	.word	0x080174fc

08013b1c <rand>:
 8013b1c:	4b16      	ldr	r3, [pc, #88]	@ (8013b78 <rand+0x5c>)
 8013b1e:	b510      	push	{r4, lr}
 8013b20:	681c      	ldr	r4, [r3, #0]
 8013b22:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013b24:	b9b3      	cbnz	r3, 8013b54 <rand+0x38>
 8013b26:	2018      	movs	r0, #24
 8013b28:	f000 fa4a 	bl	8013fc0 <malloc>
 8013b2c:	4602      	mov	r2, r0
 8013b2e:	6320      	str	r0, [r4, #48]	@ 0x30
 8013b30:	b920      	cbnz	r0, 8013b3c <rand+0x20>
 8013b32:	4b12      	ldr	r3, [pc, #72]	@ (8013b7c <rand+0x60>)
 8013b34:	4812      	ldr	r0, [pc, #72]	@ (8013b80 <rand+0x64>)
 8013b36:	2152      	movs	r1, #82	@ 0x52
 8013b38:	f000 f9da 	bl	8013ef0 <__assert_func>
 8013b3c:	4911      	ldr	r1, [pc, #68]	@ (8013b84 <rand+0x68>)
 8013b3e:	4b12      	ldr	r3, [pc, #72]	@ (8013b88 <rand+0x6c>)
 8013b40:	e9c0 1300 	strd	r1, r3, [r0]
 8013b44:	4b11      	ldr	r3, [pc, #68]	@ (8013b8c <rand+0x70>)
 8013b46:	6083      	str	r3, [r0, #8]
 8013b48:	230b      	movs	r3, #11
 8013b4a:	8183      	strh	r3, [r0, #12]
 8013b4c:	2100      	movs	r1, #0
 8013b4e:	2001      	movs	r0, #1
 8013b50:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8013b54:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013b56:	480e      	ldr	r0, [pc, #56]	@ (8013b90 <rand+0x74>)
 8013b58:	690b      	ldr	r3, [r1, #16]
 8013b5a:	694c      	ldr	r4, [r1, #20]
 8013b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8013b94 <rand+0x78>)
 8013b5e:	4358      	muls	r0, r3
 8013b60:	fb02 0004 	mla	r0, r2, r4, r0
 8013b64:	fba3 3202 	umull	r3, r2, r3, r2
 8013b68:	3301      	adds	r3, #1
 8013b6a:	eb40 0002 	adc.w	r0, r0, r2
 8013b6e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8013b72:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8013b76:	bd10      	pop	{r4, pc}
 8013b78:	20000098 	.word	0x20000098
 8013b7c:	08017632 	.word	0x08017632
 8013b80:	08017649 	.word	0x08017649
 8013b84:	abcd330e 	.word	0xabcd330e
 8013b88:	e66d1234 	.word	0xe66d1234
 8013b8c:	0005deec 	.word	0x0005deec
 8013b90:	5851f42d 	.word	0x5851f42d
 8013b94:	4c957f2d 	.word	0x4c957f2d

08013b98 <std>:
 8013b98:	2300      	movs	r3, #0
 8013b9a:	b510      	push	{r4, lr}
 8013b9c:	4604      	mov	r4, r0
 8013b9e:	e9c0 3300 	strd	r3, r3, [r0]
 8013ba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013ba6:	6083      	str	r3, [r0, #8]
 8013ba8:	8181      	strh	r1, [r0, #12]
 8013baa:	6643      	str	r3, [r0, #100]	@ 0x64
 8013bac:	81c2      	strh	r2, [r0, #14]
 8013bae:	6183      	str	r3, [r0, #24]
 8013bb0:	4619      	mov	r1, r3
 8013bb2:	2208      	movs	r2, #8
 8013bb4:	305c      	adds	r0, #92	@ 0x5c
 8013bb6:	f000 f916 	bl	8013de6 <memset>
 8013bba:	4b0d      	ldr	r3, [pc, #52]	@ (8013bf0 <std+0x58>)
 8013bbc:	6263      	str	r3, [r4, #36]	@ 0x24
 8013bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8013bf4 <std+0x5c>)
 8013bc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8013bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8013bf8 <std+0x60>)
 8013bc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8013bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8013bfc <std+0x64>)
 8013bc8:	6323      	str	r3, [r4, #48]	@ 0x30
 8013bca:	4b0d      	ldr	r3, [pc, #52]	@ (8013c00 <std+0x68>)
 8013bcc:	6224      	str	r4, [r4, #32]
 8013bce:	429c      	cmp	r4, r3
 8013bd0:	d006      	beq.n	8013be0 <std+0x48>
 8013bd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8013bd6:	4294      	cmp	r4, r2
 8013bd8:	d002      	beq.n	8013be0 <std+0x48>
 8013bda:	33d0      	adds	r3, #208	@ 0xd0
 8013bdc:	429c      	cmp	r4, r3
 8013bde:	d105      	bne.n	8013bec <std+0x54>
 8013be0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013be8:	f000 b970 	b.w	8013ecc <__retarget_lock_init_recursive>
 8013bec:	bd10      	pop	{r4, pc}
 8013bee:	bf00      	nop
 8013bf0:	08013d41 	.word	0x08013d41
 8013bf4:	08013d63 	.word	0x08013d63
 8013bf8:	08013d9b 	.word	0x08013d9b
 8013bfc:	08013dbf 	.word	0x08013dbf
 8013c00:	2000b300 	.word	0x2000b300

08013c04 <stdio_exit_handler>:
 8013c04:	4a02      	ldr	r2, [pc, #8]	@ (8013c10 <stdio_exit_handler+0xc>)
 8013c06:	4903      	ldr	r1, [pc, #12]	@ (8013c14 <stdio_exit_handler+0x10>)
 8013c08:	4803      	ldr	r0, [pc, #12]	@ (8013c18 <stdio_exit_handler+0x14>)
 8013c0a:	f000 b869 	b.w	8013ce0 <_fwalk_sglue>
 8013c0e:	bf00      	nop
 8013c10:	2000008c 	.word	0x2000008c
 8013c14:	080147d1 	.word	0x080147d1
 8013c18:	2000009c 	.word	0x2000009c

08013c1c <cleanup_stdio>:
 8013c1c:	6841      	ldr	r1, [r0, #4]
 8013c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8013c50 <cleanup_stdio+0x34>)
 8013c20:	4299      	cmp	r1, r3
 8013c22:	b510      	push	{r4, lr}
 8013c24:	4604      	mov	r4, r0
 8013c26:	d001      	beq.n	8013c2c <cleanup_stdio+0x10>
 8013c28:	f000 fdd2 	bl	80147d0 <_fflush_r>
 8013c2c:	68a1      	ldr	r1, [r4, #8]
 8013c2e:	4b09      	ldr	r3, [pc, #36]	@ (8013c54 <cleanup_stdio+0x38>)
 8013c30:	4299      	cmp	r1, r3
 8013c32:	d002      	beq.n	8013c3a <cleanup_stdio+0x1e>
 8013c34:	4620      	mov	r0, r4
 8013c36:	f000 fdcb 	bl	80147d0 <_fflush_r>
 8013c3a:	68e1      	ldr	r1, [r4, #12]
 8013c3c:	4b06      	ldr	r3, [pc, #24]	@ (8013c58 <cleanup_stdio+0x3c>)
 8013c3e:	4299      	cmp	r1, r3
 8013c40:	d004      	beq.n	8013c4c <cleanup_stdio+0x30>
 8013c42:	4620      	mov	r0, r4
 8013c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c48:	f000 bdc2 	b.w	80147d0 <_fflush_r>
 8013c4c:	bd10      	pop	{r4, pc}
 8013c4e:	bf00      	nop
 8013c50:	2000b300 	.word	0x2000b300
 8013c54:	2000b368 	.word	0x2000b368
 8013c58:	2000b3d0 	.word	0x2000b3d0

08013c5c <global_stdio_init.part.0>:
 8013c5c:	b510      	push	{r4, lr}
 8013c5e:	4b0b      	ldr	r3, [pc, #44]	@ (8013c8c <global_stdio_init.part.0+0x30>)
 8013c60:	4c0b      	ldr	r4, [pc, #44]	@ (8013c90 <global_stdio_init.part.0+0x34>)
 8013c62:	4a0c      	ldr	r2, [pc, #48]	@ (8013c94 <global_stdio_init.part.0+0x38>)
 8013c64:	601a      	str	r2, [r3, #0]
 8013c66:	4620      	mov	r0, r4
 8013c68:	2200      	movs	r2, #0
 8013c6a:	2104      	movs	r1, #4
 8013c6c:	f7ff ff94 	bl	8013b98 <std>
 8013c70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013c74:	2201      	movs	r2, #1
 8013c76:	2109      	movs	r1, #9
 8013c78:	f7ff ff8e 	bl	8013b98 <std>
 8013c7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8013c80:	2202      	movs	r2, #2
 8013c82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013c86:	2112      	movs	r1, #18
 8013c88:	f7ff bf86 	b.w	8013b98 <std>
 8013c8c:	2000b438 	.word	0x2000b438
 8013c90:	2000b300 	.word	0x2000b300
 8013c94:	08013c05 	.word	0x08013c05

08013c98 <__sfp_lock_acquire>:
 8013c98:	4801      	ldr	r0, [pc, #4]	@ (8013ca0 <__sfp_lock_acquire+0x8>)
 8013c9a:	f000 b918 	b.w	8013ece <__retarget_lock_acquire_recursive>
 8013c9e:	bf00      	nop
 8013ca0:	2000b441 	.word	0x2000b441

08013ca4 <__sfp_lock_release>:
 8013ca4:	4801      	ldr	r0, [pc, #4]	@ (8013cac <__sfp_lock_release+0x8>)
 8013ca6:	f000 b913 	b.w	8013ed0 <__retarget_lock_release_recursive>
 8013caa:	bf00      	nop
 8013cac:	2000b441 	.word	0x2000b441

08013cb0 <__sinit>:
 8013cb0:	b510      	push	{r4, lr}
 8013cb2:	4604      	mov	r4, r0
 8013cb4:	f7ff fff0 	bl	8013c98 <__sfp_lock_acquire>
 8013cb8:	6a23      	ldr	r3, [r4, #32]
 8013cba:	b11b      	cbz	r3, 8013cc4 <__sinit+0x14>
 8013cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013cc0:	f7ff bff0 	b.w	8013ca4 <__sfp_lock_release>
 8013cc4:	4b04      	ldr	r3, [pc, #16]	@ (8013cd8 <__sinit+0x28>)
 8013cc6:	6223      	str	r3, [r4, #32]
 8013cc8:	4b04      	ldr	r3, [pc, #16]	@ (8013cdc <__sinit+0x2c>)
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d1f5      	bne.n	8013cbc <__sinit+0xc>
 8013cd0:	f7ff ffc4 	bl	8013c5c <global_stdio_init.part.0>
 8013cd4:	e7f2      	b.n	8013cbc <__sinit+0xc>
 8013cd6:	bf00      	nop
 8013cd8:	08013c1d 	.word	0x08013c1d
 8013cdc:	2000b438 	.word	0x2000b438

08013ce0 <_fwalk_sglue>:
 8013ce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ce4:	4607      	mov	r7, r0
 8013ce6:	4688      	mov	r8, r1
 8013ce8:	4614      	mov	r4, r2
 8013cea:	2600      	movs	r6, #0
 8013cec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013cf0:	f1b9 0901 	subs.w	r9, r9, #1
 8013cf4:	d505      	bpl.n	8013d02 <_fwalk_sglue+0x22>
 8013cf6:	6824      	ldr	r4, [r4, #0]
 8013cf8:	2c00      	cmp	r4, #0
 8013cfa:	d1f7      	bne.n	8013cec <_fwalk_sglue+0xc>
 8013cfc:	4630      	mov	r0, r6
 8013cfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013d02:	89ab      	ldrh	r3, [r5, #12]
 8013d04:	2b01      	cmp	r3, #1
 8013d06:	d907      	bls.n	8013d18 <_fwalk_sglue+0x38>
 8013d08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013d0c:	3301      	adds	r3, #1
 8013d0e:	d003      	beq.n	8013d18 <_fwalk_sglue+0x38>
 8013d10:	4629      	mov	r1, r5
 8013d12:	4638      	mov	r0, r7
 8013d14:	47c0      	blx	r8
 8013d16:	4306      	orrs	r6, r0
 8013d18:	3568      	adds	r5, #104	@ 0x68
 8013d1a:	e7e9      	b.n	8013cf0 <_fwalk_sglue+0x10>

08013d1c <iprintf>:
 8013d1c:	b40f      	push	{r0, r1, r2, r3}
 8013d1e:	b507      	push	{r0, r1, r2, lr}
 8013d20:	4906      	ldr	r1, [pc, #24]	@ (8013d3c <iprintf+0x20>)
 8013d22:	ab04      	add	r3, sp, #16
 8013d24:	6808      	ldr	r0, [r1, #0]
 8013d26:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d2a:	6881      	ldr	r1, [r0, #8]
 8013d2c:	9301      	str	r3, [sp, #4]
 8013d2e:	f000 fa27 	bl	8014180 <_vfiprintf_r>
 8013d32:	b003      	add	sp, #12
 8013d34:	f85d eb04 	ldr.w	lr, [sp], #4
 8013d38:	b004      	add	sp, #16
 8013d3a:	4770      	bx	lr
 8013d3c:	20000098 	.word	0x20000098

08013d40 <__sread>:
 8013d40:	b510      	push	{r4, lr}
 8013d42:	460c      	mov	r4, r1
 8013d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d48:	f000 f878 	bl	8013e3c <_read_r>
 8013d4c:	2800      	cmp	r0, #0
 8013d4e:	bfab      	itete	ge
 8013d50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8013d52:	89a3      	ldrhlt	r3, [r4, #12]
 8013d54:	181b      	addge	r3, r3, r0
 8013d56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8013d5a:	bfac      	ite	ge
 8013d5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8013d5e:	81a3      	strhlt	r3, [r4, #12]
 8013d60:	bd10      	pop	{r4, pc}

08013d62 <__swrite>:
 8013d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013d66:	461f      	mov	r7, r3
 8013d68:	898b      	ldrh	r3, [r1, #12]
 8013d6a:	05db      	lsls	r3, r3, #23
 8013d6c:	4605      	mov	r5, r0
 8013d6e:	460c      	mov	r4, r1
 8013d70:	4616      	mov	r6, r2
 8013d72:	d505      	bpl.n	8013d80 <__swrite+0x1e>
 8013d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013d78:	2302      	movs	r3, #2
 8013d7a:	2200      	movs	r2, #0
 8013d7c:	f000 f84c 	bl	8013e18 <_lseek_r>
 8013d80:	89a3      	ldrh	r3, [r4, #12]
 8013d82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013d86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8013d8a:	81a3      	strh	r3, [r4, #12]
 8013d8c:	4632      	mov	r2, r6
 8013d8e:	463b      	mov	r3, r7
 8013d90:	4628      	mov	r0, r5
 8013d92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013d96:	f000 b863 	b.w	8013e60 <_write_r>

08013d9a <__sseek>:
 8013d9a:	b510      	push	{r4, lr}
 8013d9c:	460c      	mov	r4, r1
 8013d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013da2:	f000 f839 	bl	8013e18 <_lseek_r>
 8013da6:	1c43      	adds	r3, r0, #1
 8013da8:	89a3      	ldrh	r3, [r4, #12]
 8013daa:	bf15      	itete	ne
 8013dac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8013dae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8013db2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8013db6:	81a3      	strheq	r3, [r4, #12]
 8013db8:	bf18      	it	ne
 8013dba:	81a3      	strhne	r3, [r4, #12]
 8013dbc:	bd10      	pop	{r4, pc}

08013dbe <__sclose>:
 8013dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013dc2:	f000 b819 	b.w	8013df8 <_close_r>

08013dc6 <memcmp>:
 8013dc6:	b510      	push	{r4, lr}
 8013dc8:	3901      	subs	r1, #1
 8013dca:	4402      	add	r2, r0
 8013dcc:	4290      	cmp	r0, r2
 8013dce:	d101      	bne.n	8013dd4 <memcmp+0xe>
 8013dd0:	2000      	movs	r0, #0
 8013dd2:	e005      	b.n	8013de0 <memcmp+0x1a>
 8013dd4:	7803      	ldrb	r3, [r0, #0]
 8013dd6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8013dda:	42a3      	cmp	r3, r4
 8013ddc:	d001      	beq.n	8013de2 <memcmp+0x1c>
 8013dde:	1b18      	subs	r0, r3, r4
 8013de0:	bd10      	pop	{r4, pc}
 8013de2:	3001      	adds	r0, #1
 8013de4:	e7f2      	b.n	8013dcc <memcmp+0x6>

08013de6 <memset>:
 8013de6:	4402      	add	r2, r0
 8013de8:	4603      	mov	r3, r0
 8013dea:	4293      	cmp	r3, r2
 8013dec:	d100      	bne.n	8013df0 <memset+0xa>
 8013dee:	4770      	bx	lr
 8013df0:	f803 1b01 	strb.w	r1, [r3], #1
 8013df4:	e7f9      	b.n	8013dea <memset+0x4>
	...

08013df8 <_close_r>:
 8013df8:	b538      	push	{r3, r4, r5, lr}
 8013dfa:	4d06      	ldr	r5, [pc, #24]	@ (8013e14 <_close_r+0x1c>)
 8013dfc:	2300      	movs	r3, #0
 8013dfe:	4604      	mov	r4, r0
 8013e00:	4608      	mov	r0, r1
 8013e02:	602b      	str	r3, [r5, #0]
 8013e04:	f7ed ff84 	bl	8001d10 <_close>
 8013e08:	1c43      	adds	r3, r0, #1
 8013e0a:	d102      	bne.n	8013e12 <_close_r+0x1a>
 8013e0c:	682b      	ldr	r3, [r5, #0]
 8013e0e:	b103      	cbz	r3, 8013e12 <_close_r+0x1a>
 8013e10:	6023      	str	r3, [r4, #0]
 8013e12:	bd38      	pop	{r3, r4, r5, pc}
 8013e14:	2000b43c 	.word	0x2000b43c

08013e18 <_lseek_r>:
 8013e18:	b538      	push	{r3, r4, r5, lr}
 8013e1a:	4d07      	ldr	r5, [pc, #28]	@ (8013e38 <_lseek_r+0x20>)
 8013e1c:	4604      	mov	r4, r0
 8013e1e:	4608      	mov	r0, r1
 8013e20:	4611      	mov	r1, r2
 8013e22:	2200      	movs	r2, #0
 8013e24:	602a      	str	r2, [r5, #0]
 8013e26:	461a      	mov	r2, r3
 8013e28:	f7ed ff99 	bl	8001d5e <_lseek>
 8013e2c:	1c43      	adds	r3, r0, #1
 8013e2e:	d102      	bne.n	8013e36 <_lseek_r+0x1e>
 8013e30:	682b      	ldr	r3, [r5, #0]
 8013e32:	b103      	cbz	r3, 8013e36 <_lseek_r+0x1e>
 8013e34:	6023      	str	r3, [r4, #0]
 8013e36:	bd38      	pop	{r3, r4, r5, pc}
 8013e38:	2000b43c 	.word	0x2000b43c

08013e3c <_read_r>:
 8013e3c:	b538      	push	{r3, r4, r5, lr}
 8013e3e:	4d07      	ldr	r5, [pc, #28]	@ (8013e5c <_read_r+0x20>)
 8013e40:	4604      	mov	r4, r0
 8013e42:	4608      	mov	r0, r1
 8013e44:	4611      	mov	r1, r2
 8013e46:	2200      	movs	r2, #0
 8013e48:	602a      	str	r2, [r5, #0]
 8013e4a:	461a      	mov	r2, r3
 8013e4c:	f7ed ff27 	bl	8001c9e <_read>
 8013e50:	1c43      	adds	r3, r0, #1
 8013e52:	d102      	bne.n	8013e5a <_read_r+0x1e>
 8013e54:	682b      	ldr	r3, [r5, #0]
 8013e56:	b103      	cbz	r3, 8013e5a <_read_r+0x1e>
 8013e58:	6023      	str	r3, [r4, #0]
 8013e5a:	bd38      	pop	{r3, r4, r5, pc}
 8013e5c:	2000b43c 	.word	0x2000b43c

08013e60 <_write_r>:
 8013e60:	b538      	push	{r3, r4, r5, lr}
 8013e62:	4d07      	ldr	r5, [pc, #28]	@ (8013e80 <_write_r+0x20>)
 8013e64:	4604      	mov	r4, r0
 8013e66:	4608      	mov	r0, r1
 8013e68:	4611      	mov	r1, r2
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	602a      	str	r2, [r5, #0]
 8013e6e:	461a      	mov	r2, r3
 8013e70:	f7ed ff32 	bl	8001cd8 <_write>
 8013e74:	1c43      	adds	r3, r0, #1
 8013e76:	d102      	bne.n	8013e7e <_write_r+0x1e>
 8013e78:	682b      	ldr	r3, [r5, #0]
 8013e7a:	b103      	cbz	r3, 8013e7e <_write_r+0x1e>
 8013e7c:	6023      	str	r3, [r4, #0]
 8013e7e:	bd38      	pop	{r3, r4, r5, pc}
 8013e80:	2000b43c 	.word	0x2000b43c

08013e84 <__libc_init_array>:
 8013e84:	b570      	push	{r4, r5, r6, lr}
 8013e86:	4d0d      	ldr	r5, [pc, #52]	@ (8013ebc <__libc_init_array+0x38>)
 8013e88:	4c0d      	ldr	r4, [pc, #52]	@ (8013ec0 <__libc_init_array+0x3c>)
 8013e8a:	1b64      	subs	r4, r4, r5
 8013e8c:	10a4      	asrs	r4, r4, #2
 8013e8e:	2600      	movs	r6, #0
 8013e90:	42a6      	cmp	r6, r4
 8013e92:	d109      	bne.n	8013ea8 <__libc_init_array+0x24>
 8013e94:	4d0b      	ldr	r5, [pc, #44]	@ (8013ec4 <__libc_init_array+0x40>)
 8013e96:	4c0c      	ldr	r4, [pc, #48]	@ (8013ec8 <__libc_init_array+0x44>)
 8013e98:	f000 fe48 	bl	8014b2c <_init>
 8013e9c:	1b64      	subs	r4, r4, r5
 8013e9e:	10a4      	asrs	r4, r4, #2
 8013ea0:	2600      	movs	r6, #0
 8013ea2:	42a6      	cmp	r6, r4
 8013ea4:	d105      	bne.n	8013eb2 <__libc_init_array+0x2e>
 8013ea6:	bd70      	pop	{r4, r5, r6, pc}
 8013ea8:	f855 3b04 	ldr.w	r3, [r5], #4
 8013eac:	4798      	blx	r3
 8013eae:	3601      	adds	r6, #1
 8013eb0:	e7ee      	b.n	8013e90 <__libc_init_array+0xc>
 8013eb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8013eb6:	4798      	blx	r3
 8013eb8:	3601      	adds	r6, #1
 8013eba:	e7f2      	b.n	8013ea2 <__libc_init_array+0x1e>
 8013ebc:	08017718 	.word	0x08017718
 8013ec0:	08017718 	.word	0x08017718
 8013ec4:	08017718 	.word	0x08017718
 8013ec8:	0801771c 	.word	0x0801771c

08013ecc <__retarget_lock_init_recursive>:
 8013ecc:	4770      	bx	lr

08013ece <__retarget_lock_acquire_recursive>:
 8013ece:	4770      	bx	lr

08013ed0 <__retarget_lock_release_recursive>:
 8013ed0:	4770      	bx	lr

08013ed2 <memcpy>:
 8013ed2:	440a      	add	r2, r1
 8013ed4:	4291      	cmp	r1, r2
 8013ed6:	f100 33ff 	add.w	r3, r0, #4294967295
 8013eda:	d100      	bne.n	8013ede <memcpy+0xc>
 8013edc:	4770      	bx	lr
 8013ede:	b510      	push	{r4, lr}
 8013ee0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013ee4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013ee8:	4291      	cmp	r1, r2
 8013eea:	d1f9      	bne.n	8013ee0 <memcpy+0xe>
 8013eec:	bd10      	pop	{r4, pc}
	...

08013ef0 <__assert_func>:
 8013ef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013ef2:	4614      	mov	r4, r2
 8013ef4:	461a      	mov	r2, r3
 8013ef6:	4b09      	ldr	r3, [pc, #36]	@ (8013f1c <__assert_func+0x2c>)
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	4605      	mov	r5, r0
 8013efc:	68d8      	ldr	r0, [r3, #12]
 8013efe:	b14c      	cbz	r4, 8013f14 <__assert_func+0x24>
 8013f00:	4b07      	ldr	r3, [pc, #28]	@ (8013f20 <__assert_func+0x30>)
 8013f02:	9100      	str	r1, [sp, #0]
 8013f04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013f08:	4906      	ldr	r1, [pc, #24]	@ (8013f24 <__assert_func+0x34>)
 8013f0a:	462b      	mov	r3, r5
 8013f0c:	f000 fc88 	bl	8014820 <fiprintf>
 8013f10:	f000 fd3c 	bl	801498c <abort>
 8013f14:	4b04      	ldr	r3, [pc, #16]	@ (8013f28 <__assert_func+0x38>)
 8013f16:	461c      	mov	r4, r3
 8013f18:	e7f3      	b.n	8013f02 <__assert_func+0x12>
 8013f1a:	bf00      	nop
 8013f1c:	20000098 	.word	0x20000098
 8013f20:	080176a1 	.word	0x080176a1
 8013f24:	080176ae 	.word	0x080176ae
 8013f28:	080176dc 	.word	0x080176dc

08013f2c <_free_r>:
 8013f2c:	b538      	push	{r3, r4, r5, lr}
 8013f2e:	4605      	mov	r5, r0
 8013f30:	2900      	cmp	r1, #0
 8013f32:	d041      	beq.n	8013fb8 <_free_r+0x8c>
 8013f34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f38:	1f0c      	subs	r4, r1, #4
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	bfb8      	it	lt
 8013f3e:	18e4      	addlt	r4, r4, r3
 8013f40:	f000 f8e8 	bl	8014114 <__malloc_lock>
 8013f44:	4a1d      	ldr	r2, [pc, #116]	@ (8013fbc <_free_r+0x90>)
 8013f46:	6813      	ldr	r3, [r2, #0]
 8013f48:	b933      	cbnz	r3, 8013f58 <_free_r+0x2c>
 8013f4a:	6063      	str	r3, [r4, #4]
 8013f4c:	6014      	str	r4, [r2, #0]
 8013f4e:	4628      	mov	r0, r5
 8013f50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013f54:	f000 b8e4 	b.w	8014120 <__malloc_unlock>
 8013f58:	42a3      	cmp	r3, r4
 8013f5a:	d908      	bls.n	8013f6e <_free_r+0x42>
 8013f5c:	6820      	ldr	r0, [r4, #0]
 8013f5e:	1821      	adds	r1, r4, r0
 8013f60:	428b      	cmp	r3, r1
 8013f62:	bf01      	itttt	eq
 8013f64:	6819      	ldreq	r1, [r3, #0]
 8013f66:	685b      	ldreq	r3, [r3, #4]
 8013f68:	1809      	addeq	r1, r1, r0
 8013f6a:	6021      	streq	r1, [r4, #0]
 8013f6c:	e7ed      	b.n	8013f4a <_free_r+0x1e>
 8013f6e:	461a      	mov	r2, r3
 8013f70:	685b      	ldr	r3, [r3, #4]
 8013f72:	b10b      	cbz	r3, 8013f78 <_free_r+0x4c>
 8013f74:	42a3      	cmp	r3, r4
 8013f76:	d9fa      	bls.n	8013f6e <_free_r+0x42>
 8013f78:	6811      	ldr	r1, [r2, #0]
 8013f7a:	1850      	adds	r0, r2, r1
 8013f7c:	42a0      	cmp	r0, r4
 8013f7e:	d10b      	bne.n	8013f98 <_free_r+0x6c>
 8013f80:	6820      	ldr	r0, [r4, #0]
 8013f82:	4401      	add	r1, r0
 8013f84:	1850      	adds	r0, r2, r1
 8013f86:	4283      	cmp	r3, r0
 8013f88:	6011      	str	r1, [r2, #0]
 8013f8a:	d1e0      	bne.n	8013f4e <_free_r+0x22>
 8013f8c:	6818      	ldr	r0, [r3, #0]
 8013f8e:	685b      	ldr	r3, [r3, #4]
 8013f90:	6053      	str	r3, [r2, #4]
 8013f92:	4408      	add	r0, r1
 8013f94:	6010      	str	r0, [r2, #0]
 8013f96:	e7da      	b.n	8013f4e <_free_r+0x22>
 8013f98:	d902      	bls.n	8013fa0 <_free_r+0x74>
 8013f9a:	230c      	movs	r3, #12
 8013f9c:	602b      	str	r3, [r5, #0]
 8013f9e:	e7d6      	b.n	8013f4e <_free_r+0x22>
 8013fa0:	6820      	ldr	r0, [r4, #0]
 8013fa2:	1821      	adds	r1, r4, r0
 8013fa4:	428b      	cmp	r3, r1
 8013fa6:	bf04      	itt	eq
 8013fa8:	6819      	ldreq	r1, [r3, #0]
 8013faa:	685b      	ldreq	r3, [r3, #4]
 8013fac:	6063      	str	r3, [r4, #4]
 8013fae:	bf04      	itt	eq
 8013fb0:	1809      	addeq	r1, r1, r0
 8013fb2:	6021      	streq	r1, [r4, #0]
 8013fb4:	6054      	str	r4, [r2, #4]
 8013fb6:	e7ca      	b.n	8013f4e <_free_r+0x22>
 8013fb8:	bd38      	pop	{r3, r4, r5, pc}
 8013fba:	bf00      	nop
 8013fbc:	2000b448 	.word	0x2000b448

08013fc0 <malloc>:
 8013fc0:	4b02      	ldr	r3, [pc, #8]	@ (8013fcc <malloc+0xc>)
 8013fc2:	4601      	mov	r1, r0
 8013fc4:	6818      	ldr	r0, [r3, #0]
 8013fc6:	f000 b825 	b.w	8014014 <_malloc_r>
 8013fca:	bf00      	nop
 8013fcc:	20000098 	.word	0x20000098

08013fd0 <sbrk_aligned>:
 8013fd0:	b570      	push	{r4, r5, r6, lr}
 8013fd2:	4e0f      	ldr	r6, [pc, #60]	@ (8014010 <sbrk_aligned+0x40>)
 8013fd4:	460c      	mov	r4, r1
 8013fd6:	6831      	ldr	r1, [r6, #0]
 8013fd8:	4605      	mov	r5, r0
 8013fda:	b911      	cbnz	r1, 8013fe2 <sbrk_aligned+0x12>
 8013fdc:	f000 fcc6 	bl	801496c <_sbrk_r>
 8013fe0:	6030      	str	r0, [r6, #0]
 8013fe2:	4621      	mov	r1, r4
 8013fe4:	4628      	mov	r0, r5
 8013fe6:	f000 fcc1 	bl	801496c <_sbrk_r>
 8013fea:	1c43      	adds	r3, r0, #1
 8013fec:	d103      	bne.n	8013ff6 <sbrk_aligned+0x26>
 8013fee:	f04f 34ff 	mov.w	r4, #4294967295
 8013ff2:	4620      	mov	r0, r4
 8013ff4:	bd70      	pop	{r4, r5, r6, pc}
 8013ff6:	1cc4      	adds	r4, r0, #3
 8013ff8:	f024 0403 	bic.w	r4, r4, #3
 8013ffc:	42a0      	cmp	r0, r4
 8013ffe:	d0f8      	beq.n	8013ff2 <sbrk_aligned+0x22>
 8014000:	1a21      	subs	r1, r4, r0
 8014002:	4628      	mov	r0, r5
 8014004:	f000 fcb2 	bl	801496c <_sbrk_r>
 8014008:	3001      	adds	r0, #1
 801400a:	d1f2      	bne.n	8013ff2 <sbrk_aligned+0x22>
 801400c:	e7ef      	b.n	8013fee <sbrk_aligned+0x1e>
 801400e:	bf00      	nop
 8014010:	2000b444 	.word	0x2000b444

08014014 <_malloc_r>:
 8014014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014018:	1ccd      	adds	r5, r1, #3
 801401a:	f025 0503 	bic.w	r5, r5, #3
 801401e:	3508      	adds	r5, #8
 8014020:	2d0c      	cmp	r5, #12
 8014022:	bf38      	it	cc
 8014024:	250c      	movcc	r5, #12
 8014026:	2d00      	cmp	r5, #0
 8014028:	4606      	mov	r6, r0
 801402a:	db01      	blt.n	8014030 <_malloc_r+0x1c>
 801402c:	42a9      	cmp	r1, r5
 801402e:	d904      	bls.n	801403a <_malloc_r+0x26>
 8014030:	230c      	movs	r3, #12
 8014032:	6033      	str	r3, [r6, #0]
 8014034:	2000      	movs	r0, #0
 8014036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801403a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8014110 <_malloc_r+0xfc>
 801403e:	f000 f869 	bl	8014114 <__malloc_lock>
 8014042:	f8d8 3000 	ldr.w	r3, [r8]
 8014046:	461c      	mov	r4, r3
 8014048:	bb44      	cbnz	r4, 801409c <_malloc_r+0x88>
 801404a:	4629      	mov	r1, r5
 801404c:	4630      	mov	r0, r6
 801404e:	f7ff ffbf 	bl	8013fd0 <sbrk_aligned>
 8014052:	1c43      	adds	r3, r0, #1
 8014054:	4604      	mov	r4, r0
 8014056:	d158      	bne.n	801410a <_malloc_r+0xf6>
 8014058:	f8d8 4000 	ldr.w	r4, [r8]
 801405c:	4627      	mov	r7, r4
 801405e:	2f00      	cmp	r7, #0
 8014060:	d143      	bne.n	80140ea <_malloc_r+0xd6>
 8014062:	2c00      	cmp	r4, #0
 8014064:	d04b      	beq.n	80140fe <_malloc_r+0xea>
 8014066:	6823      	ldr	r3, [r4, #0]
 8014068:	4639      	mov	r1, r7
 801406a:	4630      	mov	r0, r6
 801406c:	eb04 0903 	add.w	r9, r4, r3
 8014070:	f000 fc7c 	bl	801496c <_sbrk_r>
 8014074:	4581      	cmp	r9, r0
 8014076:	d142      	bne.n	80140fe <_malloc_r+0xea>
 8014078:	6821      	ldr	r1, [r4, #0]
 801407a:	1a6d      	subs	r5, r5, r1
 801407c:	4629      	mov	r1, r5
 801407e:	4630      	mov	r0, r6
 8014080:	f7ff ffa6 	bl	8013fd0 <sbrk_aligned>
 8014084:	3001      	adds	r0, #1
 8014086:	d03a      	beq.n	80140fe <_malloc_r+0xea>
 8014088:	6823      	ldr	r3, [r4, #0]
 801408a:	442b      	add	r3, r5
 801408c:	6023      	str	r3, [r4, #0]
 801408e:	f8d8 3000 	ldr.w	r3, [r8]
 8014092:	685a      	ldr	r2, [r3, #4]
 8014094:	bb62      	cbnz	r2, 80140f0 <_malloc_r+0xdc>
 8014096:	f8c8 7000 	str.w	r7, [r8]
 801409a:	e00f      	b.n	80140bc <_malloc_r+0xa8>
 801409c:	6822      	ldr	r2, [r4, #0]
 801409e:	1b52      	subs	r2, r2, r5
 80140a0:	d420      	bmi.n	80140e4 <_malloc_r+0xd0>
 80140a2:	2a0b      	cmp	r2, #11
 80140a4:	d917      	bls.n	80140d6 <_malloc_r+0xc2>
 80140a6:	1961      	adds	r1, r4, r5
 80140a8:	42a3      	cmp	r3, r4
 80140aa:	6025      	str	r5, [r4, #0]
 80140ac:	bf18      	it	ne
 80140ae:	6059      	strne	r1, [r3, #4]
 80140b0:	6863      	ldr	r3, [r4, #4]
 80140b2:	bf08      	it	eq
 80140b4:	f8c8 1000 	streq.w	r1, [r8]
 80140b8:	5162      	str	r2, [r4, r5]
 80140ba:	604b      	str	r3, [r1, #4]
 80140bc:	4630      	mov	r0, r6
 80140be:	f000 f82f 	bl	8014120 <__malloc_unlock>
 80140c2:	f104 000b 	add.w	r0, r4, #11
 80140c6:	1d23      	adds	r3, r4, #4
 80140c8:	f020 0007 	bic.w	r0, r0, #7
 80140cc:	1ac2      	subs	r2, r0, r3
 80140ce:	bf1c      	itt	ne
 80140d0:	1a1b      	subne	r3, r3, r0
 80140d2:	50a3      	strne	r3, [r4, r2]
 80140d4:	e7af      	b.n	8014036 <_malloc_r+0x22>
 80140d6:	6862      	ldr	r2, [r4, #4]
 80140d8:	42a3      	cmp	r3, r4
 80140da:	bf0c      	ite	eq
 80140dc:	f8c8 2000 	streq.w	r2, [r8]
 80140e0:	605a      	strne	r2, [r3, #4]
 80140e2:	e7eb      	b.n	80140bc <_malloc_r+0xa8>
 80140e4:	4623      	mov	r3, r4
 80140e6:	6864      	ldr	r4, [r4, #4]
 80140e8:	e7ae      	b.n	8014048 <_malloc_r+0x34>
 80140ea:	463c      	mov	r4, r7
 80140ec:	687f      	ldr	r7, [r7, #4]
 80140ee:	e7b6      	b.n	801405e <_malloc_r+0x4a>
 80140f0:	461a      	mov	r2, r3
 80140f2:	685b      	ldr	r3, [r3, #4]
 80140f4:	42a3      	cmp	r3, r4
 80140f6:	d1fb      	bne.n	80140f0 <_malloc_r+0xdc>
 80140f8:	2300      	movs	r3, #0
 80140fa:	6053      	str	r3, [r2, #4]
 80140fc:	e7de      	b.n	80140bc <_malloc_r+0xa8>
 80140fe:	230c      	movs	r3, #12
 8014100:	6033      	str	r3, [r6, #0]
 8014102:	4630      	mov	r0, r6
 8014104:	f000 f80c 	bl	8014120 <__malloc_unlock>
 8014108:	e794      	b.n	8014034 <_malloc_r+0x20>
 801410a:	6005      	str	r5, [r0, #0]
 801410c:	e7d6      	b.n	80140bc <_malloc_r+0xa8>
 801410e:	bf00      	nop
 8014110:	2000b448 	.word	0x2000b448

08014114 <__malloc_lock>:
 8014114:	4801      	ldr	r0, [pc, #4]	@ (801411c <__malloc_lock+0x8>)
 8014116:	f7ff beda 	b.w	8013ece <__retarget_lock_acquire_recursive>
 801411a:	bf00      	nop
 801411c:	2000b440 	.word	0x2000b440

08014120 <__malloc_unlock>:
 8014120:	4801      	ldr	r0, [pc, #4]	@ (8014128 <__malloc_unlock+0x8>)
 8014122:	f7ff bed5 	b.w	8013ed0 <__retarget_lock_release_recursive>
 8014126:	bf00      	nop
 8014128:	2000b440 	.word	0x2000b440

0801412c <__sfputc_r>:
 801412c:	6893      	ldr	r3, [r2, #8]
 801412e:	3b01      	subs	r3, #1
 8014130:	2b00      	cmp	r3, #0
 8014132:	b410      	push	{r4}
 8014134:	6093      	str	r3, [r2, #8]
 8014136:	da08      	bge.n	801414a <__sfputc_r+0x1e>
 8014138:	6994      	ldr	r4, [r2, #24]
 801413a:	42a3      	cmp	r3, r4
 801413c:	db01      	blt.n	8014142 <__sfputc_r+0x16>
 801413e:	290a      	cmp	r1, #10
 8014140:	d103      	bne.n	801414a <__sfputc_r+0x1e>
 8014142:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014146:	f000 bb7d 	b.w	8014844 <__swbuf_r>
 801414a:	6813      	ldr	r3, [r2, #0]
 801414c:	1c58      	adds	r0, r3, #1
 801414e:	6010      	str	r0, [r2, #0]
 8014150:	7019      	strb	r1, [r3, #0]
 8014152:	4608      	mov	r0, r1
 8014154:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014158:	4770      	bx	lr

0801415a <__sfputs_r>:
 801415a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801415c:	4606      	mov	r6, r0
 801415e:	460f      	mov	r7, r1
 8014160:	4614      	mov	r4, r2
 8014162:	18d5      	adds	r5, r2, r3
 8014164:	42ac      	cmp	r4, r5
 8014166:	d101      	bne.n	801416c <__sfputs_r+0x12>
 8014168:	2000      	movs	r0, #0
 801416a:	e007      	b.n	801417c <__sfputs_r+0x22>
 801416c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014170:	463a      	mov	r2, r7
 8014172:	4630      	mov	r0, r6
 8014174:	f7ff ffda 	bl	801412c <__sfputc_r>
 8014178:	1c43      	adds	r3, r0, #1
 801417a:	d1f3      	bne.n	8014164 <__sfputs_r+0xa>
 801417c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014180 <_vfiprintf_r>:
 8014180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014184:	460d      	mov	r5, r1
 8014186:	b09d      	sub	sp, #116	@ 0x74
 8014188:	4614      	mov	r4, r2
 801418a:	4698      	mov	r8, r3
 801418c:	4606      	mov	r6, r0
 801418e:	b118      	cbz	r0, 8014198 <_vfiprintf_r+0x18>
 8014190:	6a03      	ldr	r3, [r0, #32]
 8014192:	b90b      	cbnz	r3, 8014198 <_vfiprintf_r+0x18>
 8014194:	f7ff fd8c 	bl	8013cb0 <__sinit>
 8014198:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801419a:	07d9      	lsls	r1, r3, #31
 801419c:	d405      	bmi.n	80141aa <_vfiprintf_r+0x2a>
 801419e:	89ab      	ldrh	r3, [r5, #12]
 80141a0:	059a      	lsls	r2, r3, #22
 80141a2:	d402      	bmi.n	80141aa <_vfiprintf_r+0x2a>
 80141a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80141a6:	f7ff fe92 	bl	8013ece <__retarget_lock_acquire_recursive>
 80141aa:	89ab      	ldrh	r3, [r5, #12]
 80141ac:	071b      	lsls	r3, r3, #28
 80141ae:	d501      	bpl.n	80141b4 <_vfiprintf_r+0x34>
 80141b0:	692b      	ldr	r3, [r5, #16]
 80141b2:	b99b      	cbnz	r3, 80141dc <_vfiprintf_r+0x5c>
 80141b4:	4629      	mov	r1, r5
 80141b6:	4630      	mov	r0, r6
 80141b8:	f000 fb82 	bl	80148c0 <__swsetup_r>
 80141bc:	b170      	cbz	r0, 80141dc <_vfiprintf_r+0x5c>
 80141be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80141c0:	07dc      	lsls	r4, r3, #31
 80141c2:	d504      	bpl.n	80141ce <_vfiprintf_r+0x4e>
 80141c4:	f04f 30ff 	mov.w	r0, #4294967295
 80141c8:	b01d      	add	sp, #116	@ 0x74
 80141ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80141ce:	89ab      	ldrh	r3, [r5, #12]
 80141d0:	0598      	lsls	r0, r3, #22
 80141d2:	d4f7      	bmi.n	80141c4 <_vfiprintf_r+0x44>
 80141d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80141d6:	f7ff fe7b 	bl	8013ed0 <__retarget_lock_release_recursive>
 80141da:	e7f3      	b.n	80141c4 <_vfiprintf_r+0x44>
 80141dc:	2300      	movs	r3, #0
 80141de:	9309      	str	r3, [sp, #36]	@ 0x24
 80141e0:	2320      	movs	r3, #32
 80141e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80141e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80141ea:	2330      	movs	r3, #48	@ 0x30
 80141ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801439c <_vfiprintf_r+0x21c>
 80141f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80141f4:	f04f 0901 	mov.w	r9, #1
 80141f8:	4623      	mov	r3, r4
 80141fa:	469a      	mov	sl, r3
 80141fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014200:	b10a      	cbz	r2, 8014206 <_vfiprintf_r+0x86>
 8014202:	2a25      	cmp	r2, #37	@ 0x25
 8014204:	d1f9      	bne.n	80141fa <_vfiprintf_r+0x7a>
 8014206:	ebba 0b04 	subs.w	fp, sl, r4
 801420a:	d00b      	beq.n	8014224 <_vfiprintf_r+0xa4>
 801420c:	465b      	mov	r3, fp
 801420e:	4622      	mov	r2, r4
 8014210:	4629      	mov	r1, r5
 8014212:	4630      	mov	r0, r6
 8014214:	f7ff ffa1 	bl	801415a <__sfputs_r>
 8014218:	3001      	adds	r0, #1
 801421a:	f000 80a7 	beq.w	801436c <_vfiprintf_r+0x1ec>
 801421e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014220:	445a      	add	r2, fp
 8014222:	9209      	str	r2, [sp, #36]	@ 0x24
 8014224:	f89a 3000 	ldrb.w	r3, [sl]
 8014228:	2b00      	cmp	r3, #0
 801422a:	f000 809f 	beq.w	801436c <_vfiprintf_r+0x1ec>
 801422e:	2300      	movs	r3, #0
 8014230:	f04f 32ff 	mov.w	r2, #4294967295
 8014234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014238:	f10a 0a01 	add.w	sl, sl, #1
 801423c:	9304      	str	r3, [sp, #16]
 801423e:	9307      	str	r3, [sp, #28]
 8014240:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014244:	931a      	str	r3, [sp, #104]	@ 0x68
 8014246:	4654      	mov	r4, sl
 8014248:	2205      	movs	r2, #5
 801424a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801424e:	4853      	ldr	r0, [pc, #332]	@ (801439c <_vfiprintf_r+0x21c>)
 8014250:	f7eb ffbe 	bl	80001d0 <memchr>
 8014254:	9a04      	ldr	r2, [sp, #16]
 8014256:	b9d8      	cbnz	r0, 8014290 <_vfiprintf_r+0x110>
 8014258:	06d1      	lsls	r1, r2, #27
 801425a:	bf44      	itt	mi
 801425c:	2320      	movmi	r3, #32
 801425e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014262:	0713      	lsls	r3, r2, #28
 8014264:	bf44      	itt	mi
 8014266:	232b      	movmi	r3, #43	@ 0x2b
 8014268:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801426c:	f89a 3000 	ldrb.w	r3, [sl]
 8014270:	2b2a      	cmp	r3, #42	@ 0x2a
 8014272:	d015      	beq.n	80142a0 <_vfiprintf_r+0x120>
 8014274:	9a07      	ldr	r2, [sp, #28]
 8014276:	4654      	mov	r4, sl
 8014278:	2000      	movs	r0, #0
 801427a:	f04f 0c0a 	mov.w	ip, #10
 801427e:	4621      	mov	r1, r4
 8014280:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014284:	3b30      	subs	r3, #48	@ 0x30
 8014286:	2b09      	cmp	r3, #9
 8014288:	d94b      	bls.n	8014322 <_vfiprintf_r+0x1a2>
 801428a:	b1b0      	cbz	r0, 80142ba <_vfiprintf_r+0x13a>
 801428c:	9207      	str	r2, [sp, #28]
 801428e:	e014      	b.n	80142ba <_vfiprintf_r+0x13a>
 8014290:	eba0 0308 	sub.w	r3, r0, r8
 8014294:	fa09 f303 	lsl.w	r3, r9, r3
 8014298:	4313      	orrs	r3, r2
 801429a:	9304      	str	r3, [sp, #16]
 801429c:	46a2      	mov	sl, r4
 801429e:	e7d2      	b.n	8014246 <_vfiprintf_r+0xc6>
 80142a0:	9b03      	ldr	r3, [sp, #12]
 80142a2:	1d19      	adds	r1, r3, #4
 80142a4:	681b      	ldr	r3, [r3, #0]
 80142a6:	9103      	str	r1, [sp, #12]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	bfbb      	ittet	lt
 80142ac:	425b      	neglt	r3, r3
 80142ae:	f042 0202 	orrlt.w	r2, r2, #2
 80142b2:	9307      	strge	r3, [sp, #28]
 80142b4:	9307      	strlt	r3, [sp, #28]
 80142b6:	bfb8      	it	lt
 80142b8:	9204      	strlt	r2, [sp, #16]
 80142ba:	7823      	ldrb	r3, [r4, #0]
 80142bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80142be:	d10a      	bne.n	80142d6 <_vfiprintf_r+0x156>
 80142c0:	7863      	ldrb	r3, [r4, #1]
 80142c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80142c4:	d132      	bne.n	801432c <_vfiprintf_r+0x1ac>
 80142c6:	9b03      	ldr	r3, [sp, #12]
 80142c8:	1d1a      	adds	r2, r3, #4
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	9203      	str	r2, [sp, #12]
 80142ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80142d2:	3402      	adds	r4, #2
 80142d4:	9305      	str	r3, [sp, #20]
 80142d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80143ac <_vfiprintf_r+0x22c>
 80142da:	7821      	ldrb	r1, [r4, #0]
 80142dc:	2203      	movs	r2, #3
 80142de:	4650      	mov	r0, sl
 80142e0:	f7eb ff76 	bl	80001d0 <memchr>
 80142e4:	b138      	cbz	r0, 80142f6 <_vfiprintf_r+0x176>
 80142e6:	9b04      	ldr	r3, [sp, #16]
 80142e8:	eba0 000a 	sub.w	r0, r0, sl
 80142ec:	2240      	movs	r2, #64	@ 0x40
 80142ee:	4082      	lsls	r2, r0
 80142f0:	4313      	orrs	r3, r2
 80142f2:	3401      	adds	r4, #1
 80142f4:	9304      	str	r3, [sp, #16]
 80142f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142fa:	4829      	ldr	r0, [pc, #164]	@ (80143a0 <_vfiprintf_r+0x220>)
 80142fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014300:	2206      	movs	r2, #6
 8014302:	f7eb ff65 	bl	80001d0 <memchr>
 8014306:	2800      	cmp	r0, #0
 8014308:	d03f      	beq.n	801438a <_vfiprintf_r+0x20a>
 801430a:	4b26      	ldr	r3, [pc, #152]	@ (80143a4 <_vfiprintf_r+0x224>)
 801430c:	bb1b      	cbnz	r3, 8014356 <_vfiprintf_r+0x1d6>
 801430e:	9b03      	ldr	r3, [sp, #12]
 8014310:	3307      	adds	r3, #7
 8014312:	f023 0307 	bic.w	r3, r3, #7
 8014316:	3308      	adds	r3, #8
 8014318:	9303      	str	r3, [sp, #12]
 801431a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801431c:	443b      	add	r3, r7
 801431e:	9309      	str	r3, [sp, #36]	@ 0x24
 8014320:	e76a      	b.n	80141f8 <_vfiprintf_r+0x78>
 8014322:	fb0c 3202 	mla	r2, ip, r2, r3
 8014326:	460c      	mov	r4, r1
 8014328:	2001      	movs	r0, #1
 801432a:	e7a8      	b.n	801427e <_vfiprintf_r+0xfe>
 801432c:	2300      	movs	r3, #0
 801432e:	3401      	adds	r4, #1
 8014330:	9305      	str	r3, [sp, #20]
 8014332:	4619      	mov	r1, r3
 8014334:	f04f 0c0a 	mov.w	ip, #10
 8014338:	4620      	mov	r0, r4
 801433a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801433e:	3a30      	subs	r2, #48	@ 0x30
 8014340:	2a09      	cmp	r2, #9
 8014342:	d903      	bls.n	801434c <_vfiprintf_r+0x1cc>
 8014344:	2b00      	cmp	r3, #0
 8014346:	d0c6      	beq.n	80142d6 <_vfiprintf_r+0x156>
 8014348:	9105      	str	r1, [sp, #20]
 801434a:	e7c4      	b.n	80142d6 <_vfiprintf_r+0x156>
 801434c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014350:	4604      	mov	r4, r0
 8014352:	2301      	movs	r3, #1
 8014354:	e7f0      	b.n	8014338 <_vfiprintf_r+0x1b8>
 8014356:	ab03      	add	r3, sp, #12
 8014358:	9300      	str	r3, [sp, #0]
 801435a:	462a      	mov	r2, r5
 801435c:	4b12      	ldr	r3, [pc, #72]	@ (80143a8 <_vfiprintf_r+0x228>)
 801435e:	a904      	add	r1, sp, #16
 8014360:	4630      	mov	r0, r6
 8014362:	f3af 8000 	nop.w
 8014366:	4607      	mov	r7, r0
 8014368:	1c78      	adds	r0, r7, #1
 801436a:	d1d6      	bne.n	801431a <_vfiprintf_r+0x19a>
 801436c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801436e:	07d9      	lsls	r1, r3, #31
 8014370:	d405      	bmi.n	801437e <_vfiprintf_r+0x1fe>
 8014372:	89ab      	ldrh	r3, [r5, #12]
 8014374:	059a      	lsls	r2, r3, #22
 8014376:	d402      	bmi.n	801437e <_vfiprintf_r+0x1fe>
 8014378:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801437a:	f7ff fda9 	bl	8013ed0 <__retarget_lock_release_recursive>
 801437e:	89ab      	ldrh	r3, [r5, #12]
 8014380:	065b      	lsls	r3, r3, #25
 8014382:	f53f af1f 	bmi.w	80141c4 <_vfiprintf_r+0x44>
 8014386:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014388:	e71e      	b.n	80141c8 <_vfiprintf_r+0x48>
 801438a:	ab03      	add	r3, sp, #12
 801438c:	9300      	str	r3, [sp, #0]
 801438e:	462a      	mov	r2, r5
 8014390:	4b05      	ldr	r3, [pc, #20]	@ (80143a8 <_vfiprintf_r+0x228>)
 8014392:	a904      	add	r1, sp, #16
 8014394:	4630      	mov	r0, r6
 8014396:	f000 f879 	bl	801448c <_printf_i>
 801439a:	e7e4      	b.n	8014366 <_vfiprintf_r+0x1e6>
 801439c:	080176dd 	.word	0x080176dd
 80143a0:	080176e7 	.word	0x080176e7
 80143a4:	00000000 	.word	0x00000000
 80143a8:	0801415b 	.word	0x0801415b
 80143ac:	080176e3 	.word	0x080176e3

080143b0 <_printf_common>:
 80143b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80143b4:	4616      	mov	r6, r2
 80143b6:	4698      	mov	r8, r3
 80143b8:	688a      	ldr	r2, [r1, #8]
 80143ba:	690b      	ldr	r3, [r1, #16]
 80143bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80143c0:	4293      	cmp	r3, r2
 80143c2:	bfb8      	it	lt
 80143c4:	4613      	movlt	r3, r2
 80143c6:	6033      	str	r3, [r6, #0]
 80143c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80143cc:	4607      	mov	r7, r0
 80143ce:	460c      	mov	r4, r1
 80143d0:	b10a      	cbz	r2, 80143d6 <_printf_common+0x26>
 80143d2:	3301      	adds	r3, #1
 80143d4:	6033      	str	r3, [r6, #0]
 80143d6:	6823      	ldr	r3, [r4, #0]
 80143d8:	0699      	lsls	r1, r3, #26
 80143da:	bf42      	ittt	mi
 80143dc:	6833      	ldrmi	r3, [r6, #0]
 80143de:	3302      	addmi	r3, #2
 80143e0:	6033      	strmi	r3, [r6, #0]
 80143e2:	6825      	ldr	r5, [r4, #0]
 80143e4:	f015 0506 	ands.w	r5, r5, #6
 80143e8:	d106      	bne.n	80143f8 <_printf_common+0x48>
 80143ea:	f104 0a19 	add.w	sl, r4, #25
 80143ee:	68e3      	ldr	r3, [r4, #12]
 80143f0:	6832      	ldr	r2, [r6, #0]
 80143f2:	1a9b      	subs	r3, r3, r2
 80143f4:	42ab      	cmp	r3, r5
 80143f6:	dc26      	bgt.n	8014446 <_printf_common+0x96>
 80143f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80143fc:	6822      	ldr	r2, [r4, #0]
 80143fe:	3b00      	subs	r3, #0
 8014400:	bf18      	it	ne
 8014402:	2301      	movne	r3, #1
 8014404:	0692      	lsls	r2, r2, #26
 8014406:	d42b      	bmi.n	8014460 <_printf_common+0xb0>
 8014408:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801440c:	4641      	mov	r1, r8
 801440e:	4638      	mov	r0, r7
 8014410:	47c8      	blx	r9
 8014412:	3001      	adds	r0, #1
 8014414:	d01e      	beq.n	8014454 <_printf_common+0xa4>
 8014416:	6823      	ldr	r3, [r4, #0]
 8014418:	6922      	ldr	r2, [r4, #16]
 801441a:	f003 0306 	and.w	r3, r3, #6
 801441e:	2b04      	cmp	r3, #4
 8014420:	bf02      	ittt	eq
 8014422:	68e5      	ldreq	r5, [r4, #12]
 8014424:	6833      	ldreq	r3, [r6, #0]
 8014426:	1aed      	subeq	r5, r5, r3
 8014428:	68a3      	ldr	r3, [r4, #8]
 801442a:	bf0c      	ite	eq
 801442c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014430:	2500      	movne	r5, #0
 8014432:	4293      	cmp	r3, r2
 8014434:	bfc4      	itt	gt
 8014436:	1a9b      	subgt	r3, r3, r2
 8014438:	18ed      	addgt	r5, r5, r3
 801443a:	2600      	movs	r6, #0
 801443c:	341a      	adds	r4, #26
 801443e:	42b5      	cmp	r5, r6
 8014440:	d11a      	bne.n	8014478 <_printf_common+0xc8>
 8014442:	2000      	movs	r0, #0
 8014444:	e008      	b.n	8014458 <_printf_common+0xa8>
 8014446:	2301      	movs	r3, #1
 8014448:	4652      	mov	r2, sl
 801444a:	4641      	mov	r1, r8
 801444c:	4638      	mov	r0, r7
 801444e:	47c8      	blx	r9
 8014450:	3001      	adds	r0, #1
 8014452:	d103      	bne.n	801445c <_printf_common+0xac>
 8014454:	f04f 30ff 	mov.w	r0, #4294967295
 8014458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801445c:	3501      	adds	r5, #1
 801445e:	e7c6      	b.n	80143ee <_printf_common+0x3e>
 8014460:	18e1      	adds	r1, r4, r3
 8014462:	1c5a      	adds	r2, r3, #1
 8014464:	2030      	movs	r0, #48	@ 0x30
 8014466:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801446a:	4422      	add	r2, r4
 801446c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8014470:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8014474:	3302      	adds	r3, #2
 8014476:	e7c7      	b.n	8014408 <_printf_common+0x58>
 8014478:	2301      	movs	r3, #1
 801447a:	4622      	mov	r2, r4
 801447c:	4641      	mov	r1, r8
 801447e:	4638      	mov	r0, r7
 8014480:	47c8      	blx	r9
 8014482:	3001      	adds	r0, #1
 8014484:	d0e6      	beq.n	8014454 <_printf_common+0xa4>
 8014486:	3601      	adds	r6, #1
 8014488:	e7d9      	b.n	801443e <_printf_common+0x8e>
	...

0801448c <_printf_i>:
 801448c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014490:	7e0f      	ldrb	r7, [r1, #24]
 8014492:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8014494:	2f78      	cmp	r7, #120	@ 0x78
 8014496:	4691      	mov	r9, r2
 8014498:	4680      	mov	r8, r0
 801449a:	460c      	mov	r4, r1
 801449c:	469a      	mov	sl, r3
 801449e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80144a2:	d807      	bhi.n	80144b4 <_printf_i+0x28>
 80144a4:	2f62      	cmp	r7, #98	@ 0x62
 80144a6:	d80a      	bhi.n	80144be <_printf_i+0x32>
 80144a8:	2f00      	cmp	r7, #0
 80144aa:	f000 80d1 	beq.w	8014650 <_printf_i+0x1c4>
 80144ae:	2f58      	cmp	r7, #88	@ 0x58
 80144b0:	f000 80b8 	beq.w	8014624 <_printf_i+0x198>
 80144b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80144b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80144bc:	e03a      	b.n	8014534 <_printf_i+0xa8>
 80144be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80144c2:	2b15      	cmp	r3, #21
 80144c4:	d8f6      	bhi.n	80144b4 <_printf_i+0x28>
 80144c6:	a101      	add	r1, pc, #4	@ (adr r1, 80144cc <_printf_i+0x40>)
 80144c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80144cc:	08014525 	.word	0x08014525
 80144d0:	08014539 	.word	0x08014539
 80144d4:	080144b5 	.word	0x080144b5
 80144d8:	080144b5 	.word	0x080144b5
 80144dc:	080144b5 	.word	0x080144b5
 80144e0:	080144b5 	.word	0x080144b5
 80144e4:	08014539 	.word	0x08014539
 80144e8:	080144b5 	.word	0x080144b5
 80144ec:	080144b5 	.word	0x080144b5
 80144f0:	080144b5 	.word	0x080144b5
 80144f4:	080144b5 	.word	0x080144b5
 80144f8:	08014637 	.word	0x08014637
 80144fc:	08014563 	.word	0x08014563
 8014500:	080145f1 	.word	0x080145f1
 8014504:	080144b5 	.word	0x080144b5
 8014508:	080144b5 	.word	0x080144b5
 801450c:	08014659 	.word	0x08014659
 8014510:	080144b5 	.word	0x080144b5
 8014514:	08014563 	.word	0x08014563
 8014518:	080144b5 	.word	0x080144b5
 801451c:	080144b5 	.word	0x080144b5
 8014520:	080145f9 	.word	0x080145f9
 8014524:	6833      	ldr	r3, [r6, #0]
 8014526:	1d1a      	adds	r2, r3, #4
 8014528:	681b      	ldr	r3, [r3, #0]
 801452a:	6032      	str	r2, [r6, #0]
 801452c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8014530:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8014534:	2301      	movs	r3, #1
 8014536:	e09c      	b.n	8014672 <_printf_i+0x1e6>
 8014538:	6833      	ldr	r3, [r6, #0]
 801453a:	6820      	ldr	r0, [r4, #0]
 801453c:	1d19      	adds	r1, r3, #4
 801453e:	6031      	str	r1, [r6, #0]
 8014540:	0606      	lsls	r6, r0, #24
 8014542:	d501      	bpl.n	8014548 <_printf_i+0xbc>
 8014544:	681d      	ldr	r5, [r3, #0]
 8014546:	e003      	b.n	8014550 <_printf_i+0xc4>
 8014548:	0645      	lsls	r5, r0, #25
 801454a:	d5fb      	bpl.n	8014544 <_printf_i+0xb8>
 801454c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8014550:	2d00      	cmp	r5, #0
 8014552:	da03      	bge.n	801455c <_printf_i+0xd0>
 8014554:	232d      	movs	r3, #45	@ 0x2d
 8014556:	426d      	negs	r5, r5
 8014558:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801455c:	4858      	ldr	r0, [pc, #352]	@ (80146c0 <_printf_i+0x234>)
 801455e:	230a      	movs	r3, #10
 8014560:	e011      	b.n	8014586 <_printf_i+0xfa>
 8014562:	6821      	ldr	r1, [r4, #0]
 8014564:	6833      	ldr	r3, [r6, #0]
 8014566:	0608      	lsls	r0, r1, #24
 8014568:	f853 5b04 	ldr.w	r5, [r3], #4
 801456c:	d402      	bmi.n	8014574 <_printf_i+0xe8>
 801456e:	0649      	lsls	r1, r1, #25
 8014570:	bf48      	it	mi
 8014572:	b2ad      	uxthmi	r5, r5
 8014574:	2f6f      	cmp	r7, #111	@ 0x6f
 8014576:	4852      	ldr	r0, [pc, #328]	@ (80146c0 <_printf_i+0x234>)
 8014578:	6033      	str	r3, [r6, #0]
 801457a:	bf14      	ite	ne
 801457c:	230a      	movne	r3, #10
 801457e:	2308      	moveq	r3, #8
 8014580:	2100      	movs	r1, #0
 8014582:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8014586:	6866      	ldr	r6, [r4, #4]
 8014588:	60a6      	str	r6, [r4, #8]
 801458a:	2e00      	cmp	r6, #0
 801458c:	db05      	blt.n	801459a <_printf_i+0x10e>
 801458e:	6821      	ldr	r1, [r4, #0]
 8014590:	432e      	orrs	r6, r5
 8014592:	f021 0104 	bic.w	r1, r1, #4
 8014596:	6021      	str	r1, [r4, #0]
 8014598:	d04b      	beq.n	8014632 <_printf_i+0x1a6>
 801459a:	4616      	mov	r6, r2
 801459c:	fbb5 f1f3 	udiv	r1, r5, r3
 80145a0:	fb03 5711 	mls	r7, r3, r1, r5
 80145a4:	5dc7      	ldrb	r7, [r0, r7]
 80145a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80145aa:	462f      	mov	r7, r5
 80145ac:	42bb      	cmp	r3, r7
 80145ae:	460d      	mov	r5, r1
 80145b0:	d9f4      	bls.n	801459c <_printf_i+0x110>
 80145b2:	2b08      	cmp	r3, #8
 80145b4:	d10b      	bne.n	80145ce <_printf_i+0x142>
 80145b6:	6823      	ldr	r3, [r4, #0]
 80145b8:	07df      	lsls	r7, r3, #31
 80145ba:	d508      	bpl.n	80145ce <_printf_i+0x142>
 80145bc:	6923      	ldr	r3, [r4, #16]
 80145be:	6861      	ldr	r1, [r4, #4]
 80145c0:	4299      	cmp	r1, r3
 80145c2:	bfde      	ittt	le
 80145c4:	2330      	movle	r3, #48	@ 0x30
 80145c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80145ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80145ce:	1b92      	subs	r2, r2, r6
 80145d0:	6122      	str	r2, [r4, #16]
 80145d2:	f8cd a000 	str.w	sl, [sp]
 80145d6:	464b      	mov	r3, r9
 80145d8:	aa03      	add	r2, sp, #12
 80145da:	4621      	mov	r1, r4
 80145dc:	4640      	mov	r0, r8
 80145de:	f7ff fee7 	bl	80143b0 <_printf_common>
 80145e2:	3001      	adds	r0, #1
 80145e4:	d14a      	bne.n	801467c <_printf_i+0x1f0>
 80145e6:	f04f 30ff 	mov.w	r0, #4294967295
 80145ea:	b004      	add	sp, #16
 80145ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145f0:	6823      	ldr	r3, [r4, #0]
 80145f2:	f043 0320 	orr.w	r3, r3, #32
 80145f6:	6023      	str	r3, [r4, #0]
 80145f8:	4832      	ldr	r0, [pc, #200]	@ (80146c4 <_printf_i+0x238>)
 80145fa:	2778      	movs	r7, #120	@ 0x78
 80145fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8014600:	6823      	ldr	r3, [r4, #0]
 8014602:	6831      	ldr	r1, [r6, #0]
 8014604:	061f      	lsls	r7, r3, #24
 8014606:	f851 5b04 	ldr.w	r5, [r1], #4
 801460a:	d402      	bmi.n	8014612 <_printf_i+0x186>
 801460c:	065f      	lsls	r7, r3, #25
 801460e:	bf48      	it	mi
 8014610:	b2ad      	uxthmi	r5, r5
 8014612:	6031      	str	r1, [r6, #0]
 8014614:	07d9      	lsls	r1, r3, #31
 8014616:	bf44      	itt	mi
 8014618:	f043 0320 	orrmi.w	r3, r3, #32
 801461c:	6023      	strmi	r3, [r4, #0]
 801461e:	b11d      	cbz	r5, 8014628 <_printf_i+0x19c>
 8014620:	2310      	movs	r3, #16
 8014622:	e7ad      	b.n	8014580 <_printf_i+0xf4>
 8014624:	4826      	ldr	r0, [pc, #152]	@ (80146c0 <_printf_i+0x234>)
 8014626:	e7e9      	b.n	80145fc <_printf_i+0x170>
 8014628:	6823      	ldr	r3, [r4, #0]
 801462a:	f023 0320 	bic.w	r3, r3, #32
 801462e:	6023      	str	r3, [r4, #0]
 8014630:	e7f6      	b.n	8014620 <_printf_i+0x194>
 8014632:	4616      	mov	r6, r2
 8014634:	e7bd      	b.n	80145b2 <_printf_i+0x126>
 8014636:	6833      	ldr	r3, [r6, #0]
 8014638:	6825      	ldr	r5, [r4, #0]
 801463a:	6961      	ldr	r1, [r4, #20]
 801463c:	1d18      	adds	r0, r3, #4
 801463e:	6030      	str	r0, [r6, #0]
 8014640:	062e      	lsls	r6, r5, #24
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	d501      	bpl.n	801464a <_printf_i+0x1be>
 8014646:	6019      	str	r1, [r3, #0]
 8014648:	e002      	b.n	8014650 <_printf_i+0x1c4>
 801464a:	0668      	lsls	r0, r5, #25
 801464c:	d5fb      	bpl.n	8014646 <_printf_i+0x1ba>
 801464e:	8019      	strh	r1, [r3, #0]
 8014650:	2300      	movs	r3, #0
 8014652:	6123      	str	r3, [r4, #16]
 8014654:	4616      	mov	r6, r2
 8014656:	e7bc      	b.n	80145d2 <_printf_i+0x146>
 8014658:	6833      	ldr	r3, [r6, #0]
 801465a:	1d1a      	adds	r2, r3, #4
 801465c:	6032      	str	r2, [r6, #0]
 801465e:	681e      	ldr	r6, [r3, #0]
 8014660:	6862      	ldr	r2, [r4, #4]
 8014662:	2100      	movs	r1, #0
 8014664:	4630      	mov	r0, r6
 8014666:	f7eb fdb3 	bl	80001d0 <memchr>
 801466a:	b108      	cbz	r0, 8014670 <_printf_i+0x1e4>
 801466c:	1b80      	subs	r0, r0, r6
 801466e:	6060      	str	r0, [r4, #4]
 8014670:	6863      	ldr	r3, [r4, #4]
 8014672:	6123      	str	r3, [r4, #16]
 8014674:	2300      	movs	r3, #0
 8014676:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801467a:	e7aa      	b.n	80145d2 <_printf_i+0x146>
 801467c:	6923      	ldr	r3, [r4, #16]
 801467e:	4632      	mov	r2, r6
 8014680:	4649      	mov	r1, r9
 8014682:	4640      	mov	r0, r8
 8014684:	47d0      	blx	sl
 8014686:	3001      	adds	r0, #1
 8014688:	d0ad      	beq.n	80145e6 <_printf_i+0x15a>
 801468a:	6823      	ldr	r3, [r4, #0]
 801468c:	079b      	lsls	r3, r3, #30
 801468e:	d413      	bmi.n	80146b8 <_printf_i+0x22c>
 8014690:	68e0      	ldr	r0, [r4, #12]
 8014692:	9b03      	ldr	r3, [sp, #12]
 8014694:	4298      	cmp	r0, r3
 8014696:	bfb8      	it	lt
 8014698:	4618      	movlt	r0, r3
 801469a:	e7a6      	b.n	80145ea <_printf_i+0x15e>
 801469c:	2301      	movs	r3, #1
 801469e:	4632      	mov	r2, r6
 80146a0:	4649      	mov	r1, r9
 80146a2:	4640      	mov	r0, r8
 80146a4:	47d0      	blx	sl
 80146a6:	3001      	adds	r0, #1
 80146a8:	d09d      	beq.n	80145e6 <_printf_i+0x15a>
 80146aa:	3501      	adds	r5, #1
 80146ac:	68e3      	ldr	r3, [r4, #12]
 80146ae:	9903      	ldr	r1, [sp, #12]
 80146b0:	1a5b      	subs	r3, r3, r1
 80146b2:	42ab      	cmp	r3, r5
 80146b4:	dcf2      	bgt.n	801469c <_printf_i+0x210>
 80146b6:	e7eb      	b.n	8014690 <_printf_i+0x204>
 80146b8:	2500      	movs	r5, #0
 80146ba:	f104 0619 	add.w	r6, r4, #25
 80146be:	e7f5      	b.n	80146ac <_printf_i+0x220>
 80146c0:	080176ee 	.word	0x080176ee
 80146c4:	080176ff 	.word	0x080176ff

080146c8 <__sflush_r>:
 80146c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80146cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146d0:	0716      	lsls	r6, r2, #28
 80146d2:	4605      	mov	r5, r0
 80146d4:	460c      	mov	r4, r1
 80146d6:	d454      	bmi.n	8014782 <__sflush_r+0xba>
 80146d8:	684b      	ldr	r3, [r1, #4]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	dc02      	bgt.n	80146e4 <__sflush_r+0x1c>
 80146de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80146e0:	2b00      	cmp	r3, #0
 80146e2:	dd48      	ble.n	8014776 <__sflush_r+0xae>
 80146e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80146e6:	2e00      	cmp	r6, #0
 80146e8:	d045      	beq.n	8014776 <__sflush_r+0xae>
 80146ea:	2300      	movs	r3, #0
 80146ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80146f0:	682f      	ldr	r7, [r5, #0]
 80146f2:	6a21      	ldr	r1, [r4, #32]
 80146f4:	602b      	str	r3, [r5, #0]
 80146f6:	d030      	beq.n	801475a <__sflush_r+0x92>
 80146f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80146fa:	89a3      	ldrh	r3, [r4, #12]
 80146fc:	0759      	lsls	r1, r3, #29
 80146fe:	d505      	bpl.n	801470c <__sflush_r+0x44>
 8014700:	6863      	ldr	r3, [r4, #4]
 8014702:	1ad2      	subs	r2, r2, r3
 8014704:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014706:	b10b      	cbz	r3, 801470c <__sflush_r+0x44>
 8014708:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801470a:	1ad2      	subs	r2, r2, r3
 801470c:	2300      	movs	r3, #0
 801470e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014710:	6a21      	ldr	r1, [r4, #32]
 8014712:	4628      	mov	r0, r5
 8014714:	47b0      	blx	r6
 8014716:	1c43      	adds	r3, r0, #1
 8014718:	89a3      	ldrh	r3, [r4, #12]
 801471a:	d106      	bne.n	801472a <__sflush_r+0x62>
 801471c:	6829      	ldr	r1, [r5, #0]
 801471e:	291d      	cmp	r1, #29
 8014720:	d82b      	bhi.n	801477a <__sflush_r+0xb2>
 8014722:	4a2a      	ldr	r2, [pc, #168]	@ (80147cc <__sflush_r+0x104>)
 8014724:	40ca      	lsrs	r2, r1
 8014726:	07d6      	lsls	r6, r2, #31
 8014728:	d527      	bpl.n	801477a <__sflush_r+0xb2>
 801472a:	2200      	movs	r2, #0
 801472c:	6062      	str	r2, [r4, #4]
 801472e:	04d9      	lsls	r1, r3, #19
 8014730:	6922      	ldr	r2, [r4, #16]
 8014732:	6022      	str	r2, [r4, #0]
 8014734:	d504      	bpl.n	8014740 <__sflush_r+0x78>
 8014736:	1c42      	adds	r2, r0, #1
 8014738:	d101      	bne.n	801473e <__sflush_r+0x76>
 801473a:	682b      	ldr	r3, [r5, #0]
 801473c:	b903      	cbnz	r3, 8014740 <__sflush_r+0x78>
 801473e:	6560      	str	r0, [r4, #84]	@ 0x54
 8014740:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014742:	602f      	str	r7, [r5, #0]
 8014744:	b1b9      	cbz	r1, 8014776 <__sflush_r+0xae>
 8014746:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801474a:	4299      	cmp	r1, r3
 801474c:	d002      	beq.n	8014754 <__sflush_r+0x8c>
 801474e:	4628      	mov	r0, r5
 8014750:	f7ff fbec 	bl	8013f2c <_free_r>
 8014754:	2300      	movs	r3, #0
 8014756:	6363      	str	r3, [r4, #52]	@ 0x34
 8014758:	e00d      	b.n	8014776 <__sflush_r+0xae>
 801475a:	2301      	movs	r3, #1
 801475c:	4628      	mov	r0, r5
 801475e:	47b0      	blx	r6
 8014760:	4602      	mov	r2, r0
 8014762:	1c50      	adds	r0, r2, #1
 8014764:	d1c9      	bne.n	80146fa <__sflush_r+0x32>
 8014766:	682b      	ldr	r3, [r5, #0]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d0c6      	beq.n	80146fa <__sflush_r+0x32>
 801476c:	2b1d      	cmp	r3, #29
 801476e:	d001      	beq.n	8014774 <__sflush_r+0xac>
 8014770:	2b16      	cmp	r3, #22
 8014772:	d11e      	bne.n	80147b2 <__sflush_r+0xea>
 8014774:	602f      	str	r7, [r5, #0]
 8014776:	2000      	movs	r0, #0
 8014778:	e022      	b.n	80147c0 <__sflush_r+0xf8>
 801477a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801477e:	b21b      	sxth	r3, r3
 8014780:	e01b      	b.n	80147ba <__sflush_r+0xf2>
 8014782:	690f      	ldr	r7, [r1, #16]
 8014784:	2f00      	cmp	r7, #0
 8014786:	d0f6      	beq.n	8014776 <__sflush_r+0xae>
 8014788:	0793      	lsls	r3, r2, #30
 801478a:	680e      	ldr	r6, [r1, #0]
 801478c:	bf08      	it	eq
 801478e:	694b      	ldreq	r3, [r1, #20]
 8014790:	600f      	str	r7, [r1, #0]
 8014792:	bf18      	it	ne
 8014794:	2300      	movne	r3, #0
 8014796:	eba6 0807 	sub.w	r8, r6, r7
 801479a:	608b      	str	r3, [r1, #8]
 801479c:	f1b8 0f00 	cmp.w	r8, #0
 80147a0:	dde9      	ble.n	8014776 <__sflush_r+0xae>
 80147a2:	6a21      	ldr	r1, [r4, #32]
 80147a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80147a6:	4643      	mov	r3, r8
 80147a8:	463a      	mov	r2, r7
 80147aa:	4628      	mov	r0, r5
 80147ac:	47b0      	blx	r6
 80147ae:	2800      	cmp	r0, #0
 80147b0:	dc08      	bgt.n	80147c4 <__sflush_r+0xfc>
 80147b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80147ba:	81a3      	strh	r3, [r4, #12]
 80147bc:	f04f 30ff 	mov.w	r0, #4294967295
 80147c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80147c4:	4407      	add	r7, r0
 80147c6:	eba8 0800 	sub.w	r8, r8, r0
 80147ca:	e7e7      	b.n	801479c <__sflush_r+0xd4>
 80147cc:	20400001 	.word	0x20400001

080147d0 <_fflush_r>:
 80147d0:	b538      	push	{r3, r4, r5, lr}
 80147d2:	690b      	ldr	r3, [r1, #16]
 80147d4:	4605      	mov	r5, r0
 80147d6:	460c      	mov	r4, r1
 80147d8:	b913      	cbnz	r3, 80147e0 <_fflush_r+0x10>
 80147da:	2500      	movs	r5, #0
 80147dc:	4628      	mov	r0, r5
 80147de:	bd38      	pop	{r3, r4, r5, pc}
 80147e0:	b118      	cbz	r0, 80147ea <_fflush_r+0x1a>
 80147e2:	6a03      	ldr	r3, [r0, #32]
 80147e4:	b90b      	cbnz	r3, 80147ea <_fflush_r+0x1a>
 80147e6:	f7ff fa63 	bl	8013cb0 <__sinit>
 80147ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d0f3      	beq.n	80147da <_fflush_r+0xa>
 80147f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80147f4:	07d0      	lsls	r0, r2, #31
 80147f6:	d404      	bmi.n	8014802 <_fflush_r+0x32>
 80147f8:	0599      	lsls	r1, r3, #22
 80147fa:	d402      	bmi.n	8014802 <_fflush_r+0x32>
 80147fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80147fe:	f7ff fb66 	bl	8013ece <__retarget_lock_acquire_recursive>
 8014802:	4628      	mov	r0, r5
 8014804:	4621      	mov	r1, r4
 8014806:	f7ff ff5f 	bl	80146c8 <__sflush_r>
 801480a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801480c:	07da      	lsls	r2, r3, #31
 801480e:	4605      	mov	r5, r0
 8014810:	d4e4      	bmi.n	80147dc <_fflush_r+0xc>
 8014812:	89a3      	ldrh	r3, [r4, #12]
 8014814:	059b      	lsls	r3, r3, #22
 8014816:	d4e1      	bmi.n	80147dc <_fflush_r+0xc>
 8014818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801481a:	f7ff fb59 	bl	8013ed0 <__retarget_lock_release_recursive>
 801481e:	e7dd      	b.n	80147dc <_fflush_r+0xc>

08014820 <fiprintf>:
 8014820:	b40e      	push	{r1, r2, r3}
 8014822:	b503      	push	{r0, r1, lr}
 8014824:	4601      	mov	r1, r0
 8014826:	ab03      	add	r3, sp, #12
 8014828:	4805      	ldr	r0, [pc, #20]	@ (8014840 <fiprintf+0x20>)
 801482a:	f853 2b04 	ldr.w	r2, [r3], #4
 801482e:	6800      	ldr	r0, [r0, #0]
 8014830:	9301      	str	r3, [sp, #4]
 8014832:	f7ff fca5 	bl	8014180 <_vfiprintf_r>
 8014836:	b002      	add	sp, #8
 8014838:	f85d eb04 	ldr.w	lr, [sp], #4
 801483c:	b003      	add	sp, #12
 801483e:	4770      	bx	lr
 8014840:	20000098 	.word	0x20000098

08014844 <__swbuf_r>:
 8014844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014846:	460e      	mov	r6, r1
 8014848:	4614      	mov	r4, r2
 801484a:	4605      	mov	r5, r0
 801484c:	b118      	cbz	r0, 8014856 <__swbuf_r+0x12>
 801484e:	6a03      	ldr	r3, [r0, #32]
 8014850:	b90b      	cbnz	r3, 8014856 <__swbuf_r+0x12>
 8014852:	f7ff fa2d 	bl	8013cb0 <__sinit>
 8014856:	69a3      	ldr	r3, [r4, #24]
 8014858:	60a3      	str	r3, [r4, #8]
 801485a:	89a3      	ldrh	r3, [r4, #12]
 801485c:	071a      	lsls	r2, r3, #28
 801485e:	d501      	bpl.n	8014864 <__swbuf_r+0x20>
 8014860:	6923      	ldr	r3, [r4, #16]
 8014862:	b943      	cbnz	r3, 8014876 <__swbuf_r+0x32>
 8014864:	4621      	mov	r1, r4
 8014866:	4628      	mov	r0, r5
 8014868:	f000 f82a 	bl	80148c0 <__swsetup_r>
 801486c:	b118      	cbz	r0, 8014876 <__swbuf_r+0x32>
 801486e:	f04f 37ff 	mov.w	r7, #4294967295
 8014872:	4638      	mov	r0, r7
 8014874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014876:	6823      	ldr	r3, [r4, #0]
 8014878:	6922      	ldr	r2, [r4, #16]
 801487a:	1a98      	subs	r0, r3, r2
 801487c:	6963      	ldr	r3, [r4, #20]
 801487e:	b2f6      	uxtb	r6, r6
 8014880:	4283      	cmp	r3, r0
 8014882:	4637      	mov	r7, r6
 8014884:	dc05      	bgt.n	8014892 <__swbuf_r+0x4e>
 8014886:	4621      	mov	r1, r4
 8014888:	4628      	mov	r0, r5
 801488a:	f7ff ffa1 	bl	80147d0 <_fflush_r>
 801488e:	2800      	cmp	r0, #0
 8014890:	d1ed      	bne.n	801486e <__swbuf_r+0x2a>
 8014892:	68a3      	ldr	r3, [r4, #8]
 8014894:	3b01      	subs	r3, #1
 8014896:	60a3      	str	r3, [r4, #8]
 8014898:	6823      	ldr	r3, [r4, #0]
 801489a:	1c5a      	adds	r2, r3, #1
 801489c:	6022      	str	r2, [r4, #0]
 801489e:	701e      	strb	r6, [r3, #0]
 80148a0:	6962      	ldr	r2, [r4, #20]
 80148a2:	1c43      	adds	r3, r0, #1
 80148a4:	429a      	cmp	r2, r3
 80148a6:	d004      	beq.n	80148b2 <__swbuf_r+0x6e>
 80148a8:	89a3      	ldrh	r3, [r4, #12]
 80148aa:	07db      	lsls	r3, r3, #31
 80148ac:	d5e1      	bpl.n	8014872 <__swbuf_r+0x2e>
 80148ae:	2e0a      	cmp	r6, #10
 80148b0:	d1df      	bne.n	8014872 <__swbuf_r+0x2e>
 80148b2:	4621      	mov	r1, r4
 80148b4:	4628      	mov	r0, r5
 80148b6:	f7ff ff8b 	bl	80147d0 <_fflush_r>
 80148ba:	2800      	cmp	r0, #0
 80148bc:	d0d9      	beq.n	8014872 <__swbuf_r+0x2e>
 80148be:	e7d6      	b.n	801486e <__swbuf_r+0x2a>

080148c0 <__swsetup_r>:
 80148c0:	b538      	push	{r3, r4, r5, lr}
 80148c2:	4b29      	ldr	r3, [pc, #164]	@ (8014968 <__swsetup_r+0xa8>)
 80148c4:	4605      	mov	r5, r0
 80148c6:	6818      	ldr	r0, [r3, #0]
 80148c8:	460c      	mov	r4, r1
 80148ca:	b118      	cbz	r0, 80148d4 <__swsetup_r+0x14>
 80148cc:	6a03      	ldr	r3, [r0, #32]
 80148ce:	b90b      	cbnz	r3, 80148d4 <__swsetup_r+0x14>
 80148d0:	f7ff f9ee 	bl	8013cb0 <__sinit>
 80148d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80148d8:	0719      	lsls	r1, r3, #28
 80148da:	d422      	bmi.n	8014922 <__swsetup_r+0x62>
 80148dc:	06da      	lsls	r2, r3, #27
 80148de:	d407      	bmi.n	80148f0 <__swsetup_r+0x30>
 80148e0:	2209      	movs	r2, #9
 80148e2:	602a      	str	r2, [r5, #0]
 80148e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80148e8:	81a3      	strh	r3, [r4, #12]
 80148ea:	f04f 30ff 	mov.w	r0, #4294967295
 80148ee:	e033      	b.n	8014958 <__swsetup_r+0x98>
 80148f0:	0758      	lsls	r0, r3, #29
 80148f2:	d512      	bpl.n	801491a <__swsetup_r+0x5a>
 80148f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80148f6:	b141      	cbz	r1, 801490a <__swsetup_r+0x4a>
 80148f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80148fc:	4299      	cmp	r1, r3
 80148fe:	d002      	beq.n	8014906 <__swsetup_r+0x46>
 8014900:	4628      	mov	r0, r5
 8014902:	f7ff fb13 	bl	8013f2c <_free_r>
 8014906:	2300      	movs	r3, #0
 8014908:	6363      	str	r3, [r4, #52]	@ 0x34
 801490a:	89a3      	ldrh	r3, [r4, #12]
 801490c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014910:	81a3      	strh	r3, [r4, #12]
 8014912:	2300      	movs	r3, #0
 8014914:	6063      	str	r3, [r4, #4]
 8014916:	6923      	ldr	r3, [r4, #16]
 8014918:	6023      	str	r3, [r4, #0]
 801491a:	89a3      	ldrh	r3, [r4, #12]
 801491c:	f043 0308 	orr.w	r3, r3, #8
 8014920:	81a3      	strh	r3, [r4, #12]
 8014922:	6923      	ldr	r3, [r4, #16]
 8014924:	b94b      	cbnz	r3, 801493a <__swsetup_r+0x7a>
 8014926:	89a3      	ldrh	r3, [r4, #12]
 8014928:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801492c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014930:	d003      	beq.n	801493a <__swsetup_r+0x7a>
 8014932:	4621      	mov	r1, r4
 8014934:	4628      	mov	r0, r5
 8014936:	f000 f856 	bl	80149e6 <__smakebuf_r>
 801493a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801493e:	f013 0201 	ands.w	r2, r3, #1
 8014942:	d00a      	beq.n	801495a <__swsetup_r+0x9a>
 8014944:	2200      	movs	r2, #0
 8014946:	60a2      	str	r2, [r4, #8]
 8014948:	6962      	ldr	r2, [r4, #20]
 801494a:	4252      	negs	r2, r2
 801494c:	61a2      	str	r2, [r4, #24]
 801494e:	6922      	ldr	r2, [r4, #16]
 8014950:	b942      	cbnz	r2, 8014964 <__swsetup_r+0xa4>
 8014952:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014956:	d1c5      	bne.n	80148e4 <__swsetup_r+0x24>
 8014958:	bd38      	pop	{r3, r4, r5, pc}
 801495a:	0799      	lsls	r1, r3, #30
 801495c:	bf58      	it	pl
 801495e:	6962      	ldrpl	r2, [r4, #20]
 8014960:	60a2      	str	r2, [r4, #8]
 8014962:	e7f4      	b.n	801494e <__swsetup_r+0x8e>
 8014964:	2000      	movs	r0, #0
 8014966:	e7f7      	b.n	8014958 <__swsetup_r+0x98>
 8014968:	20000098 	.word	0x20000098

0801496c <_sbrk_r>:
 801496c:	b538      	push	{r3, r4, r5, lr}
 801496e:	4d06      	ldr	r5, [pc, #24]	@ (8014988 <_sbrk_r+0x1c>)
 8014970:	2300      	movs	r3, #0
 8014972:	4604      	mov	r4, r0
 8014974:	4608      	mov	r0, r1
 8014976:	602b      	str	r3, [r5, #0]
 8014978:	f7ed f9fe 	bl	8001d78 <_sbrk>
 801497c:	1c43      	adds	r3, r0, #1
 801497e:	d102      	bne.n	8014986 <_sbrk_r+0x1a>
 8014980:	682b      	ldr	r3, [r5, #0]
 8014982:	b103      	cbz	r3, 8014986 <_sbrk_r+0x1a>
 8014984:	6023      	str	r3, [r4, #0]
 8014986:	bd38      	pop	{r3, r4, r5, pc}
 8014988:	2000b43c 	.word	0x2000b43c

0801498c <abort>:
 801498c:	b508      	push	{r3, lr}
 801498e:	2006      	movs	r0, #6
 8014990:	f000 f88e 	bl	8014ab0 <raise>
 8014994:	2001      	movs	r0, #1
 8014996:	f7ed f977 	bl	8001c88 <_exit>

0801499a <__swhatbuf_r>:
 801499a:	b570      	push	{r4, r5, r6, lr}
 801499c:	460c      	mov	r4, r1
 801499e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80149a2:	2900      	cmp	r1, #0
 80149a4:	b096      	sub	sp, #88	@ 0x58
 80149a6:	4615      	mov	r5, r2
 80149a8:	461e      	mov	r6, r3
 80149aa:	da0d      	bge.n	80149c8 <__swhatbuf_r+0x2e>
 80149ac:	89a3      	ldrh	r3, [r4, #12]
 80149ae:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80149b2:	f04f 0100 	mov.w	r1, #0
 80149b6:	bf14      	ite	ne
 80149b8:	2340      	movne	r3, #64	@ 0x40
 80149ba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80149be:	2000      	movs	r0, #0
 80149c0:	6031      	str	r1, [r6, #0]
 80149c2:	602b      	str	r3, [r5, #0]
 80149c4:	b016      	add	sp, #88	@ 0x58
 80149c6:	bd70      	pop	{r4, r5, r6, pc}
 80149c8:	466a      	mov	r2, sp
 80149ca:	f000 f879 	bl	8014ac0 <_fstat_r>
 80149ce:	2800      	cmp	r0, #0
 80149d0:	dbec      	blt.n	80149ac <__swhatbuf_r+0x12>
 80149d2:	9901      	ldr	r1, [sp, #4]
 80149d4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80149d8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80149dc:	4259      	negs	r1, r3
 80149de:	4159      	adcs	r1, r3
 80149e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80149e4:	e7eb      	b.n	80149be <__swhatbuf_r+0x24>

080149e6 <__smakebuf_r>:
 80149e6:	898b      	ldrh	r3, [r1, #12]
 80149e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80149ea:	079d      	lsls	r5, r3, #30
 80149ec:	4606      	mov	r6, r0
 80149ee:	460c      	mov	r4, r1
 80149f0:	d507      	bpl.n	8014a02 <__smakebuf_r+0x1c>
 80149f2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80149f6:	6023      	str	r3, [r4, #0]
 80149f8:	6123      	str	r3, [r4, #16]
 80149fa:	2301      	movs	r3, #1
 80149fc:	6163      	str	r3, [r4, #20]
 80149fe:	b003      	add	sp, #12
 8014a00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a02:	ab01      	add	r3, sp, #4
 8014a04:	466a      	mov	r2, sp
 8014a06:	f7ff ffc8 	bl	801499a <__swhatbuf_r>
 8014a0a:	9f00      	ldr	r7, [sp, #0]
 8014a0c:	4605      	mov	r5, r0
 8014a0e:	4639      	mov	r1, r7
 8014a10:	4630      	mov	r0, r6
 8014a12:	f7ff faff 	bl	8014014 <_malloc_r>
 8014a16:	b948      	cbnz	r0, 8014a2c <__smakebuf_r+0x46>
 8014a18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a1c:	059a      	lsls	r2, r3, #22
 8014a1e:	d4ee      	bmi.n	80149fe <__smakebuf_r+0x18>
 8014a20:	f023 0303 	bic.w	r3, r3, #3
 8014a24:	f043 0302 	orr.w	r3, r3, #2
 8014a28:	81a3      	strh	r3, [r4, #12]
 8014a2a:	e7e2      	b.n	80149f2 <__smakebuf_r+0xc>
 8014a2c:	89a3      	ldrh	r3, [r4, #12]
 8014a2e:	6020      	str	r0, [r4, #0]
 8014a30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014a34:	81a3      	strh	r3, [r4, #12]
 8014a36:	9b01      	ldr	r3, [sp, #4]
 8014a38:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014a3c:	b15b      	cbz	r3, 8014a56 <__smakebuf_r+0x70>
 8014a3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014a42:	4630      	mov	r0, r6
 8014a44:	f000 f84e 	bl	8014ae4 <_isatty_r>
 8014a48:	b128      	cbz	r0, 8014a56 <__smakebuf_r+0x70>
 8014a4a:	89a3      	ldrh	r3, [r4, #12]
 8014a4c:	f023 0303 	bic.w	r3, r3, #3
 8014a50:	f043 0301 	orr.w	r3, r3, #1
 8014a54:	81a3      	strh	r3, [r4, #12]
 8014a56:	89a3      	ldrh	r3, [r4, #12]
 8014a58:	431d      	orrs	r5, r3
 8014a5a:	81a5      	strh	r5, [r4, #12]
 8014a5c:	e7cf      	b.n	80149fe <__smakebuf_r+0x18>

08014a5e <_raise_r>:
 8014a5e:	291f      	cmp	r1, #31
 8014a60:	b538      	push	{r3, r4, r5, lr}
 8014a62:	4605      	mov	r5, r0
 8014a64:	460c      	mov	r4, r1
 8014a66:	d904      	bls.n	8014a72 <_raise_r+0x14>
 8014a68:	2316      	movs	r3, #22
 8014a6a:	6003      	str	r3, [r0, #0]
 8014a6c:	f04f 30ff 	mov.w	r0, #4294967295
 8014a70:	bd38      	pop	{r3, r4, r5, pc}
 8014a72:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014a74:	b112      	cbz	r2, 8014a7c <_raise_r+0x1e>
 8014a76:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014a7a:	b94b      	cbnz	r3, 8014a90 <_raise_r+0x32>
 8014a7c:	4628      	mov	r0, r5
 8014a7e:	f000 f853 	bl	8014b28 <_getpid_r>
 8014a82:	4622      	mov	r2, r4
 8014a84:	4601      	mov	r1, r0
 8014a86:	4628      	mov	r0, r5
 8014a88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a8c:	f000 b83a 	b.w	8014b04 <_kill_r>
 8014a90:	2b01      	cmp	r3, #1
 8014a92:	d00a      	beq.n	8014aaa <_raise_r+0x4c>
 8014a94:	1c59      	adds	r1, r3, #1
 8014a96:	d103      	bne.n	8014aa0 <_raise_r+0x42>
 8014a98:	2316      	movs	r3, #22
 8014a9a:	6003      	str	r3, [r0, #0]
 8014a9c:	2001      	movs	r0, #1
 8014a9e:	e7e7      	b.n	8014a70 <_raise_r+0x12>
 8014aa0:	2100      	movs	r1, #0
 8014aa2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014aa6:	4620      	mov	r0, r4
 8014aa8:	4798      	blx	r3
 8014aaa:	2000      	movs	r0, #0
 8014aac:	e7e0      	b.n	8014a70 <_raise_r+0x12>
	...

08014ab0 <raise>:
 8014ab0:	4b02      	ldr	r3, [pc, #8]	@ (8014abc <raise+0xc>)
 8014ab2:	4601      	mov	r1, r0
 8014ab4:	6818      	ldr	r0, [r3, #0]
 8014ab6:	f7ff bfd2 	b.w	8014a5e <_raise_r>
 8014aba:	bf00      	nop
 8014abc:	20000098 	.word	0x20000098

08014ac0 <_fstat_r>:
 8014ac0:	b538      	push	{r3, r4, r5, lr}
 8014ac2:	4d07      	ldr	r5, [pc, #28]	@ (8014ae0 <_fstat_r+0x20>)
 8014ac4:	2300      	movs	r3, #0
 8014ac6:	4604      	mov	r4, r0
 8014ac8:	4608      	mov	r0, r1
 8014aca:	4611      	mov	r1, r2
 8014acc:	602b      	str	r3, [r5, #0]
 8014ace:	f7ed f92b 	bl	8001d28 <_fstat>
 8014ad2:	1c43      	adds	r3, r0, #1
 8014ad4:	d102      	bne.n	8014adc <_fstat_r+0x1c>
 8014ad6:	682b      	ldr	r3, [r5, #0]
 8014ad8:	b103      	cbz	r3, 8014adc <_fstat_r+0x1c>
 8014ada:	6023      	str	r3, [r4, #0]
 8014adc:	bd38      	pop	{r3, r4, r5, pc}
 8014ade:	bf00      	nop
 8014ae0:	2000b43c 	.word	0x2000b43c

08014ae4 <_isatty_r>:
 8014ae4:	b538      	push	{r3, r4, r5, lr}
 8014ae6:	4d06      	ldr	r5, [pc, #24]	@ (8014b00 <_isatty_r+0x1c>)
 8014ae8:	2300      	movs	r3, #0
 8014aea:	4604      	mov	r4, r0
 8014aec:	4608      	mov	r0, r1
 8014aee:	602b      	str	r3, [r5, #0]
 8014af0:	f7ed f92a 	bl	8001d48 <_isatty>
 8014af4:	1c43      	adds	r3, r0, #1
 8014af6:	d102      	bne.n	8014afe <_isatty_r+0x1a>
 8014af8:	682b      	ldr	r3, [r5, #0]
 8014afa:	b103      	cbz	r3, 8014afe <_isatty_r+0x1a>
 8014afc:	6023      	str	r3, [r4, #0]
 8014afe:	bd38      	pop	{r3, r4, r5, pc}
 8014b00:	2000b43c 	.word	0x2000b43c

08014b04 <_kill_r>:
 8014b04:	b538      	push	{r3, r4, r5, lr}
 8014b06:	4d07      	ldr	r5, [pc, #28]	@ (8014b24 <_kill_r+0x20>)
 8014b08:	2300      	movs	r3, #0
 8014b0a:	4604      	mov	r4, r0
 8014b0c:	4608      	mov	r0, r1
 8014b0e:	4611      	mov	r1, r2
 8014b10:	602b      	str	r3, [r5, #0]
 8014b12:	f7ed f8a7 	bl	8001c64 <_kill>
 8014b16:	1c43      	adds	r3, r0, #1
 8014b18:	d102      	bne.n	8014b20 <_kill_r+0x1c>
 8014b1a:	682b      	ldr	r3, [r5, #0]
 8014b1c:	b103      	cbz	r3, 8014b20 <_kill_r+0x1c>
 8014b1e:	6023      	str	r3, [r4, #0]
 8014b20:	bd38      	pop	{r3, r4, r5, pc}
 8014b22:	bf00      	nop
 8014b24:	2000b43c 	.word	0x2000b43c

08014b28 <_getpid_r>:
 8014b28:	f7ed b894 	b.w	8001c54 <_getpid>

08014b2c <_init>:
 8014b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b2e:	bf00      	nop
 8014b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b32:	bc08      	pop	{r3}
 8014b34:	469e      	mov	lr, r3
 8014b36:	4770      	bx	lr

08014b38 <_fini>:
 8014b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b3a:	bf00      	nop
 8014b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014b3e:	bc08      	pop	{r3}
 8014b40:	469e      	mov	lr, r3
 8014b42:	4770      	bx	lr


arm_2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000453c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080046c4  080046c4  000056c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046dc  080046dc  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080046dc  080046dc  000056dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046e4  080046e4  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046e4  080046e4  000056e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080046e8  080046e8  000056e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080046ec  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006010  2**0
                  CONTENTS
 10 .bss          00000570  20000010  20000010  00006010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000580  20000580  00006010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cd9c  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001a6e  00000000  00000000  00012ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c70  00000000  00000000  00014850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009d0  00000000  00000000  000154c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020f35  00000000  00000000  00015e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dd60  00000000  00000000  00036dc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb8b7  00000000  00000000  00044b25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001103dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003484  00000000  00000000  00110420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000078  00000000  00000000  001138a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080046ac 	.word	0x080046ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080046ac 	.word	0x080046ac

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <setMotor>:
PID_t arm_vertical = {0};

int setpoint = 0;

void setMotor(uint8_t motor, int16_t speed)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	460a      	mov	r2, r1
 80004fe:	71fb      	strb	r3, [r7, #7]
 8000500:	4613      	mov	r3, r2
 8000502:	80bb      	strh	r3, [r7, #4]
	uint8_t dir_a = (speed >= 0);
 8000504:	88bb      	ldrh	r3, [r7, #4]
 8000506:	43db      	mvns	r3, r3
 8000508:	b29b      	uxth	r3, r3
 800050a:	0bdb      	lsrs	r3, r3, #15
 800050c:	b2db      	uxtb	r3, r3
 800050e:	73fb      	strb	r3, [r7, #15]
	uint8_t dir_b = (speed < 0);
 8000510:	88bb      	ldrh	r3, [r7, #4]
 8000512:	0bdb      	lsrs	r3, r3, #15
 8000514:	b2db      	uxtb	r3, r3
 8000516:	73bb      	strb	r3, [r7, #14]
	speed = abs(speed);
 8000518:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800051c:	2b00      	cmp	r3, #0
 800051e:	bfb8      	it	lt
 8000520:	425b      	neglt	r3, r3
 8000522:	b29b      	uxth	r3, r3
 8000524:	80bb      	strh	r3, [r7, #4]

	switch(motor)
 8000526:	79fb      	ldrb	r3, [r7, #7]
 8000528:	3b01      	subs	r3, #1
 800052a:	2b03      	cmp	r3, #3
 800052c:	d854      	bhi.n	80005d8 <setMotor+0xe4>
 800052e:	a201      	add	r2, pc, #4	@ (adr r2, 8000534 <setMotor+0x40>)
 8000530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000534:	08000545 	.word	0x08000545
 8000538:	0800056b 	.word	0x0800056b
 800053c:	08000591 	.word	0x08000591
 8000540:	080005b7 	.word	0x080005b7
	{
		case 1:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_10, dir_a);
 8000544:	7bfb      	ldrb	r3, [r7, #15]
 8000546:	461a      	mov	r2, r3
 8000548:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800054c:	4825      	ldr	r0, [pc, #148]	@ (80005e4 <setMotor+0xf0>)
 800054e:	f002 f919 	bl	8002784 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_8 , dir_b);
 8000552:	7bbb      	ldrb	r3, [r7, #14]
 8000554:	461a      	mov	r2, r3
 8000556:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800055a:	4822      	ldr	r0, [pc, #136]	@ (80005e4 <setMotor+0xf0>)
 800055c:	f002 f912 	bl	8002784 <HAL_GPIO_WritePin>
			TIM13 -> CCR1 = speed;
 8000560:	4a21      	ldr	r2, [pc, #132]	@ (80005e8 <setMotor+0xf4>)
 8000562:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000566:	6353      	str	r3, [r2, #52]	@ 0x34
			break;
 8000568:	e037      	b.n	80005da <setMotor+0xe6>
		case 2:
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, dir_a);
 800056a:	7bfb      	ldrb	r3, [r7, #15]
 800056c:	461a      	mov	r2, r3
 800056e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000572:	481e      	ldr	r0, [pc, #120]	@ (80005ec <setMotor+0xf8>)
 8000574:	f002 f906 	bl	8002784 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_14, dir_b);
 8000578:	7bbb      	ldrb	r3, [r7, #14]
 800057a:	461a      	mov	r2, r3
 800057c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000580:	4818      	ldr	r0, [pc, #96]	@ (80005e4 <setMotor+0xf0>)
 8000582:	f002 f8ff 	bl	8002784 <HAL_GPIO_WritePin>
			TIM12 -> CCR2 = speed;
 8000586:	4a1a      	ldr	r2, [pc, #104]	@ (80005f0 <setMotor+0xfc>)
 8000588:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800058c:	6393      	str	r3, [r2, #56]	@ 0x38
			break;
 800058e:	e024      	b.n	80005da <setMotor+0xe6>
		case 3:
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, dir_a);
 8000590:	7bfb      	ldrb	r3, [r7, #15]
 8000592:	461a      	mov	r2, r3
 8000594:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000598:	4814      	ldr	r0, [pc, #80]	@ (80005ec <setMotor+0xf8>)
 800059a:	f002 f8f3 	bl	8002784 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8 , dir_b);
 800059e:	7bbb      	ldrb	r3, [r7, #14]
 80005a0:	461a      	mov	r2, r3
 80005a2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80005a6:	4811      	ldr	r0, [pc, #68]	@ (80005ec <setMotor+0xf8>)
 80005a8:	f002 f8ec 	bl	8002784 <HAL_GPIO_WritePin>
			TIM12 -> CCR1 = speed;
 80005ac:	4a10      	ldr	r2, [pc, #64]	@ (80005f0 <setMotor+0xfc>)
 80005ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005b2:	6353      	str	r3, [r2, #52]	@ 0x34
			break;
 80005b4:	e011      	b.n	80005da <setMotor+0xe6>
		case 4:
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2 , dir_a);
 80005b6:	7bfb      	ldrb	r3, [r7, #15]
 80005b8:	461a      	mov	r2, r3
 80005ba:	2104      	movs	r1, #4
 80005bc:	4809      	ldr	r0, [pc, #36]	@ (80005e4 <setMotor+0xf0>)
 80005be:	f002 f8e1 	bl	8002784 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_4 , dir_b);
 80005c2:	7bbb      	ldrb	r3, [r7, #14]
 80005c4:	461a      	mov	r2, r3
 80005c6:	2110      	movs	r1, #16
 80005c8:	4806      	ldr	r0, [pc, #24]	@ (80005e4 <setMotor+0xf0>)
 80005ca:	f002 f8db 	bl	8002784 <HAL_GPIO_WritePin>
			TIM14 -> CCR1 = speed;
 80005ce:	4a09      	ldr	r2, [pc, #36]	@ (80005f4 <setMotor+0x100>)
 80005d0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005d4:	6353      	str	r3, [r2, #52]	@ 0x34
			break;
 80005d6:	e000      	b.n	80005da <setMotor+0xe6>
		default:
			break;
 80005d8:	bf00      	nop
	}
}
 80005da:	bf00      	nop
 80005dc:	3710      	adds	r7, #16
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	40021000 	.word	0x40021000
 80005e8:	40001c00 	.word	0x40001c00
 80005ec:	40020c00 	.word	0x40020c00
 80005f0:	40001800 	.word	0x40001800
 80005f4:	40002000 	.word	0x40002000

080005f8 <arm_init>:

uint8_t arm_init()
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	LIM_SW2_STAT = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 80005fc:	2102      	movs	r1, #2
 80005fe:	481c      	ldr	r0, [pc, #112]	@ (8000670 <arm_init+0x78>)
 8000600:	f002 f8a8 	bl	8002754 <HAL_GPIO_ReadPin>
 8000604:	4603      	mov	r3, r0
 8000606:	461a      	mov	r2, r3
 8000608:	4b1a      	ldr	r3, [pc, #104]	@ (8000674 <arm_init+0x7c>)
 800060a:	701a      	strb	r2, [r3, #0]
	LIM_SW3_STAT = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3);
 800060c:	2108      	movs	r1, #8
 800060e:	4818      	ldr	r0, [pc, #96]	@ (8000670 <arm_init+0x78>)
 8000610:	f002 f8a0 	bl	8002754 <HAL_GPIO_ReadPin>
 8000614:	4603      	mov	r3, r0
 8000616:	461a      	mov	r2, r3
 8000618:	4b17      	ldr	r3, [pc, #92]	@ (8000678 <arm_init+0x80>)
 800061a:	701a      	strb	r2, [r3, #0]

	if(LIM_SW2_STAT == 1)
 800061c:	4b15      	ldr	r3, [pc, #84]	@ (8000674 <arm_init+0x7c>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b01      	cmp	r3, #1
 8000622:	d105      	bne.n	8000630 <arm_init+0x38>
	{
		setMotor(2, MAX_HORIZONTAL_HOME_SPEED); //--- go back
 8000624:	f06f 01f9 	mvn.w	r1, #249	@ 0xf9
 8000628:	2002      	movs	r0, #2
 800062a:	f7ff ff63 	bl	80004f4 <setMotor>
 800062e:	e003      	b.n	8000638 <arm_init+0x40>
	}
	else
	{
		setMotor(2, 0);
 8000630:	2100      	movs	r1, #0
 8000632:	2002      	movs	r0, #2
 8000634:	f7ff ff5e 	bl	80004f4 <setMotor>
	}

	if(LIM_SW3_STAT == 1)
 8000638:	4b0f      	ldr	r3, [pc, #60]	@ (8000678 <arm_init+0x80>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d105      	bne.n	800064c <arm_init+0x54>
	{
		setMotor(3, MAX_VERTICAL_HOME_SPEED); //--- go down
 8000640:	f06f 0163 	mvn.w	r1, #99	@ 0x63
 8000644:	2003      	movs	r0, #3
 8000646:	f7ff ff55 	bl	80004f4 <setMotor>
 800064a:	e003      	b.n	8000654 <arm_init+0x5c>
	}
	else
	{
		setMotor(3, 0);
 800064c:	2100      	movs	r1, #0
 800064e:	2003      	movs	r0, #3
 8000650:	f7ff ff50 	bl	80004f4 <setMotor>
	}

	if(LIM_SW2_STAT == 0 && LIM_SW3_STAT == 0)
 8000654:	4b07      	ldr	r3, [pc, #28]	@ (8000674 <arm_init+0x7c>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d105      	bne.n	8000668 <arm_init+0x70>
 800065c:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <arm_init+0x80>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d101      	bne.n	8000668 <arm_init+0x70>
	{
		return 1;
 8000664:	2301      	movs	r3, #1
 8000666:	e000      	b.n	800066a <arm_init+0x72>
	}
	else
	{
		return 0;
 8000668:	2300      	movs	r3, #0
	}
}
 800066a:	4618      	mov	r0, r3
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	40020c00 	.word	0x40020c00
 8000674:	20000000 	.word	0x20000000
 8000678:	20000001 	.word	0x20000001

0800067c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
	if(htim == &htim6)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	4a5f      	ldr	r2, [pc, #380]	@ (8000804 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000688:	4293      	cmp	r3, r2
 800068a:	f040 80b6 	bne.w	80007fa <HAL_TIM_PeriodElapsedCallback+0x17e>
	{
		if(TIM6_CNT_MS >= 9)
 800068e:	4b5e      	ldr	r3, [pc, #376]	@ (8000808 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000694:	2b08      	cmp	r3, #8
 8000696:	f340 80a7 	ble.w	80007e8 <HAL_TIM_PeriodElapsedCallback+0x16c>
		{
			switch(arm_state)
 800069a:	4b5c      	ldr	r3, [pc, #368]	@ (800080c <HAL_TIM_PeriodElapsedCallback+0x190>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d02f      	beq.n	8000702 <HAL_TIM_PeriodElapsedCallback+0x86>
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	f300 8098 	bgt.w	80007d8 <HAL_TIM_PeriodElapsedCallback+0x15c>
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d002      	beq.n	80006b2 <HAL_TIM_PeriodElapsedCallback+0x36>
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d00d      	beq.n	80006cc <HAL_TIM_PeriodElapsedCallback+0x50>
					setMotor(3, (int16_t)arm_vertical.output);

					break;

				default:
					break;
 80006b0:	e092      	b.n	80007d8 <HAL_TIM_PeriodElapsedCallback+0x15c>
					if(arm_init())
 80006b2:	f7ff ffa1 	bl	80005f8 <arm_init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	f000 808f 	beq.w	80007dc <HAL_TIM_PeriodElapsedCallback+0x160>
						arm_state++;
 80006be:	4b53      	ldr	r3, [pc, #332]	@ (800080c <HAL_TIM_PeriodElapsedCallback+0x190>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	3301      	adds	r3, #1
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b51      	ldr	r3, [pc, #324]	@ (800080c <HAL_TIM_PeriodElapsedCallback+0x190>)
 80006c8:	701a      	strb	r2, [r3, #0]
					break;
 80006ca:	e087      	b.n	80007dc <HAL_TIM_PeriodElapsedCallback+0x160>
					START_BUTTON_STAT = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_0);
 80006cc:	2101      	movs	r1, #1
 80006ce:	4850      	ldr	r0, [pc, #320]	@ (8000810 <HAL_TIM_PeriodElapsedCallback+0x194>)
 80006d0:	f002 f840 	bl	8002754 <HAL_GPIO_ReadPin>
 80006d4:	4603      	mov	r3, r0
 80006d6:	461a      	mov	r2, r3
 80006d8:	4b4e      	ldr	r3, [pc, #312]	@ (8000814 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80006da:	701a      	strb	r2, [r3, #0]
					if(START_BUTTON_STAT == 0)
 80006dc:	4b4d      	ldr	r3, [pc, #308]	@ (8000814 <HAL_TIM_PeriodElapsedCallback+0x198>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d17d      	bne.n	80007e0 <HAL_TIM_PeriodElapsedCallback+0x164>
						TIM1 -> CNT = TIM2 -> CNT = TIM3 -> CNT = 0;
 80006e4:	4a4c      	ldr	r2, [pc, #304]	@ (8000818 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 80006e6:	2300      	movs	r3, #0
 80006e8:	6253      	str	r3, [r2, #36]	@ 0x24
 80006ea:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006ee:	6253      	str	r3, [r2, #36]	@ 0x24
 80006f0:	4a4a      	ldr	r2, [pc, #296]	@ (800081c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 80006f2:	6253      	str	r3, [r2, #36]	@ 0x24
						arm_state++;
 80006f4:	4b45      	ldr	r3, [pc, #276]	@ (800080c <HAL_TIM_PeriodElapsedCallback+0x190>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	3301      	adds	r3, #1
 80006fa:	b2da      	uxtb	r2, r3
 80006fc:	4b43      	ldr	r3, [pc, #268]	@ (800080c <HAL_TIM_PeriodElapsedCallback+0x190>)
 80006fe:	701a      	strb	r2, [r3, #0]
					break;
 8000700:	e06e      	b.n	80007e0 <HAL_TIM_PeriodElapsedCallback+0x164>
					LIM_SW2_STAT = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1);
 8000702:	2102      	movs	r1, #2
 8000704:	4842      	ldr	r0, [pc, #264]	@ (8000810 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000706:	f002 f825 	bl	8002754 <HAL_GPIO_ReadPin>
 800070a:	4603      	mov	r3, r0
 800070c:	461a      	mov	r2, r3
 800070e:	4b44      	ldr	r3, [pc, #272]	@ (8000820 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000710:	701a      	strb	r2, [r3, #0]
					LIM_SW3_STAT = HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_3);
 8000712:	2108      	movs	r1, #8
 8000714:	483e      	ldr	r0, [pc, #248]	@ (8000810 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000716:	f002 f81d 	bl	8002754 <HAL_GPIO_ReadPin>
 800071a:	4603      	mov	r3, r0
 800071c:	461a      	mov	r2, r3
 800071e:	4b41      	ldr	r3, [pc, #260]	@ (8000824 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000720:	701a      	strb	r2, [r3, #0]
					enc1_cnt = -TIM1 -> CNT;
 8000722:	4b3e      	ldr	r3, [pc, #248]	@ (800081c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000726:	b29b      	uxth	r3, r3
 8000728:	425b      	negs	r3, r3
 800072a:	b29b      	uxth	r3, r3
 800072c:	b21a      	sxth	r2, r3
 800072e:	4b3e      	ldr	r3, [pc, #248]	@ (8000828 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000730:	801a      	strh	r2, [r3, #0]
					enc2_cnt = -TIM2 -> CNT;
 8000732:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000738:	b29b      	uxth	r3, r3
 800073a:	425b      	negs	r3, r3
 800073c:	b29b      	uxth	r3, r3
 800073e:	b21a      	sxth	r2, r3
 8000740:	4b3a      	ldr	r3, [pc, #232]	@ (800082c <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000742:	801a      	strh	r2, [r3, #0]
					enc3_cnt = -TIM3 -> CNT;
 8000744:	4b34      	ldr	r3, [pc, #208]	@ (8000818 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000748:	b29b      	uxth	r3, r3
 800074a:	425b      	negs	r3, r3
 800074c:	b29b      	uxth	r3, r3
 800074e:	b21a      	sxth	r2, r3
 8000750:	4b37      	ldr	r3, [pc, #220]	@ (8000830 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000752:	801a      	strh	r2, [r3, #0]
					TIM1 -> CNT = TIM2 -> CNT = TIM3 -> CNT = 0;
 8000754:	4a30      	ldr	r2, [pc, #192]	@ (8000818 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000756:	2300      	movs	r3, #0
 8000758:	6253      	str	r3, [r2, #36]	@ 0x24
 800075a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800075e:	6253      	str	r3, [r2, #36]	@ 0x24
 8000760:	4a2e      	ldr	r2, [pc, #184]	@ (800081c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000762:	6253      	str	r3, [r2, #36]	@ 0x24
					arm_vertical.feedback += (float)enc3_cnt;
 8000764:	4b33      	ldr	r3, [pc, #204]	@ (8000834 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000766:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800076a:	4b31      	ldr	r3, [pc, #196]	@ (8000830 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800076c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000770:	ee07 3a90 	vmov	s15, r3
 8000774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800077c:	4b2d      	ldr	r3, [pc, #180]	@ (8000834 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800077e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
					arm_vertical.setpoint = setpoint;
 8000782:	4b2d      	ldr	r3, [pc, #180]	@ (8000838 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	ee07 3a90 	vmov	s15, r3
 800078a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800078e:	4b29      	ldr	r3, [pc, #164]	@ (8000834 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000790:	edc3 7a08 	vstr	s15, [r3, #32]
					arm_vertical.max_output = 500;
 8000794:	4b27      	ldr	r3, [pc, #156]	@ (8000834 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000796:	4a29      	ldr	r2, [pc, #164]	@ (800083c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000798:	629a      	str	r2, [r3, #40]	@ 0x28
					PID_Update(&arm_vertical, arm_vertical.setpoint, arm_vertical.feedback, arm_vertical.max_output);
 800079a:	4b26      	ldr	r3, [pc, #152]	@ (8000834 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800079c:	edd3 7a08 	vldr	s15, [r3, #32]
 80007a0:	4b24      	ldr	r3, [pc, #144]	@ (8000834 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80007a2:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 80007a6:	4b23      	ldr	r3, [pc, #140]	@ (8000834 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80007a8:	edd3 6a0a 	vldr	s13, [r3, #40]	@ 0x28
 80007ac:	eeb0 1a66 	vmov.f32	s2, s13
 80007b0:	eef0 0a47 	vmov.f32	s1, s14
 80007b4:	eeb0 0a67 	vmov.f32	s0, s15
 80007b8:	481e      	ldr	r0, [pc, #120]	@ (8000834 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80007ba:	f000 fee8 	bl	800158e <PID_Update>
					setMotor(3, (int16_t)arm_vertical.output);
 80007be:	4b1d      	ldr	r3, [pc, #116]	@ (8000834 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80007c0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80007c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80007c8:	ee17 3a90 	vmov	r3, s15
 80007cc:	b21b      	sxth	r3, r3
 80007ce:	4619      	mov	r1, r3
 80007d0:	2003      	movs	r0, #3
 80007d2:	f7ff fe8f 	bl	80004f4 <setMotor>
					break;
 80007d6:	e004      	b.n	80007e2 <HAL_TIM_PeriodElapsedCallback+0x166>
					break;
 80007d8:	bf00      	nop
 80007da:	e002      	b.n	80007e2 <HAL_TIM_PeriodElapsedCallback+0x166>
					break;
 80007dc:	bf00      	nop
 80007de:	e000      	b.n	80007e2 <HAL_TIM_PeriodElapsedCallback+0x166>
					break;
 80007e0:	bf00      	nop
			}



			TIM6_CNT_MS = 0;
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	801a      	strh	r2, [r3, #0]
		}
		TIM6_CNT_MS++;
 80007e8:	4b07      	ldr	r3, [pc, #28]	@ (8000808 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80007ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007ee:	b29b      	uxth	r3, r3
 80007f0:	3301      	adds	r3, #1
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	b21a      	sxth	r2, r3
 80007f6:	4b04      	ldr	r3, [pc, #16]	@ (8000808 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80007f8:	801a      	strh	r2, [r3, #0]
	}
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000194 	.word	0x20000194
 8000808:	2000053c 	.word	0x2000053c
 800080c:	20000544 	.word	0x20000544
 8000810:	40020c00 	.word	0x40020c00
 8000814:	20000002 	.word	0x20000002
 8000818:	40000400 	.word	0x40000400
 800081c:	40010000 	.word	0x40010000
 8000820:	20000000 	.word	0x20000000
 8000824:	20000001 	.word	0x20000001
 8000828:	2000053e 	.word	0x2000053e
 800082c:	20000540 	.word	0x20000540
 8000830:	20000542 	.word	0x20000542
 8000834:	20000548 	.word	0x20000548
 8000838:	20000578 	.word	0x20000578
 800083c:	43fa0000 	.word	0x43fa0000

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000844:	f001 fc66 	bl	8002114 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000848:	f000 f874 	bl	8000934 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084c:	f000 fdbc 	bl	80013c8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000850:	f000 f8da 	bl	8000a08 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000854:	f000 f930 	bl	8000ab8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000858:	f000 f982 	bl	8000b60 <MX_TIM3_Init>
  MX_TIM4_Init();
 800085c:	f000 f9d4 	bl	8000c08 <MX_TIM4_Init>
  MX_TIM5_Init();
 8000860:	f000 fa26 	bl	8000cb0 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000864:	f000 faae 	bl	8000dc4 <MX_TIM8_Init>
  MX_TIM9_Init();
 8000868:	f000 fb04 	bl	8000e74 <MX_TIM9_Init>
  MX_TIM10_Init();
 800086c:	f000 fb52 	bl	8000f14 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000870:	f000 fb9e 	bl	8000fb0 <MX_TIM11_Init>
  MX_TIM12_Init();
 8000874:	f000 fbea 	bl	800104c <MX_TIM12_Init>
  MX_TIM13_Init();
 8000878:	f000 fc38 	bl	80010ec <MX_TIM13_Init>
  MX_TIM14_Init();
 800087c:	f000 fc84 	bl	8001188 <MX_TIM14_Init>
  MX_UART4_Init();
 8000880:	f000 fcd0 	bl	8001224 <MX_UART4_Init>
  MX_UART5_Init();
 8000884:	f000 fcf8 	bl	8001278 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000888:	f000 fd20 	bl	80012cc <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800088c:	f000 fd48 	bl	8001320 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000890:	f000 fd70 	bl	8001374 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8000894:	f000 fa60 	bl	8000d58 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000898:	213c      	movs	r1, #60	@ 0x3c
 800089a:	481a      	ldr	r0, [pc, #104]	@ (8000904 <main+0xc4>)
 800089c:	f002 fea2 	bl	80035e4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80008a0:	213c      	movs	r1, #60	@ 0x3c
 80008a2:	4819      	ldr	r0, [pc, #100]	@ (8000908 <main+0xc8>)
 80008a4:	f002 fe9e 	bl	80035e4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80008a8:	213c      	movs	r1, #60	@ 0x3c
 80008aa:	4818      	ldr	r0, [pc, #96]	@ (800090c <main+0xcc>)
 80008ac:	f002 fe9a 	bl	80035e4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 80008b0:	213c      	movs	r1, #60	@ 0x3c
 80008b2:	4817      	ldr	r0, [pc, #92]	@ (8000910 <main+0xd0>)
 80008b4:	f002 fe96 	bl	80035e4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 80008b8:	213c      	movs	r1, #60	@ 0x3c
 80008ba:	4816      	ldr	r0, [pc, #88]	@ (8000914 <main+0xd4>)
 80008bc:	f002 fe92 	bl	80035e4 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 80008c0:	213c      	movs	r1, #60	@ 0x3c
 80008c2:	4815      	ldr	r0, [pc, #84]	@ (8000918 <main+0xd8>)
 80008c4:	f002 fe8e 	bl	80035e4 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 80008c8:	2100      	movs	r1, #0
 80008ca:	4814      	ldr	r0, [pc, #80]	@ (800091c <main+0xdc>)
 80008cc:	f002 fd1c 	bl	8003308 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 80008d0:	2104      	movs	r1, #4
 80008d2:	4812      	ldr	r0, [pc, #72]	@ (800091c <main+0xdc>)
 80008d4:	f002 fd18 	bl	8003308 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 80008d8:	2100      	movs	r1, #0
 80008da:	4811      	ldr	r0, [pc, #68]	@ (8000920 <main+0xe0>)
 80008dc:	f002 fd14 	bl	8003308 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80008e0:	2100      	movs	r1, #0
 80008e2:	4810      	ldr	r0, [pc, #64]	@ (8000924 <main+0xe4>)
 80008e4:	f002 fd10 	bl	8003308 <HAL_TIM_PWM_Start>

  PID_Init(&arm_vertical, 1, 0, 0);
 80008e8:	ed9f 1a0f 	vldr	s2, [pc, #60]	@ 8000928 <main+0xe8>
 80008ec:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8000928 <main+0xe8>
 80008f0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80008f4:	480d      	ldr	r0, [pc, #52]	@ (800092c <main+0xec>)
 80008f6:	f000 fe0d 	bl	8001514 <PID_Init>

  HAL_TIM_Base_Start_IT(&htim6);
 80008fa:	480d      	ldr	r0, [pc, #52]	@ (8000930 <main+0xf0>)
 80008fc:	f002 fc44 	bl	8003188 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <main+0xc0>
 8000904:	2000002c 	.word	0x2000002c
 8000908:	20000074 	.word	0x20000074
 800090c:	200000bc 	.word	0x200000bc
 8000910:	20000104 	.word	0x20000104
 8000914:	2000014c 	.word	0x2000014c
 8000918:	200001dc 	.word	0x200001dc
 800091c:	200002fc 	.word	0x200002fc
 8000920:	20000344 	.word	0x20000344
 8000924:	2000038c 	.word	0x2000038c
 8000928:	00000000 	.word	0x00000000
 800092c:	20000548 	.word	0x20000548
 8000930:	20000194 	.word	0x20000194

08000934 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b094      	sub	sp, #80	@ 0x50
 8000938:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093a:	f107 0320 	add.w	r3, r7, #32
 800093e:	2230      	movs	r2, #48	@ 0x30
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f003 fe86 	bl	8004654 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000948:	f107 030c 	add.w	r3, r7, #12
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	4b28      	ldr	r3, [pc, #160]	@ (8000a00 <SystemClock_Config+0xcc>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000960:	4a27      	ldr	r2, [pc, #156]	@ (8000a00 <SystemClock_Config+0xcc>)
 8000962:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000966:	6413      	str	r3, [r2, #64]	@ 0x40
 8000968:	4b25      	ldr	r3, [pc, #148]	@ (8000a00 <SystemClock_Config+0xcc>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000974:	2300      	movs	r3, #0
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	4b22      	ldr	r3, [pc, #136]	@ (8000a04 <SystemClock_Config+0xd0>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a21      	ldr	r2, [pc, #132]	@ (8000a04 <SystemClock_Config+0xd0>)
 800097e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000982:	6013      	str	r3, [r2, #0]
 8000984:	4b1f      	ldr	r3, [pc, #124]	@ (8000a04 <SystemClock_Config+0xd0>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000990:	2301      	movs	r3, #1
 8000992:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000994:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000998:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099a:	2302      	movs	r3, #2
 800099c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800099e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009a4:	2304      	movs	r3, #4
 80009a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009a8:	23a8      	movs	r3, #168	@ 0xa8
 80009aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009ac:	2302      	movs	r3, #2
 80009ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009b0:	2304      	movs	r3, #4
 80009b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009b4:	f107 0320 	add.w	r3, r7, #32
 80009b8:	4618      	mov	r0, r3
 80009ba:	f001 fefd 	bl	80027b8 <HAL_RCC_OscConfig>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80009c4:	f000 fda0 	bl	8001508 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c8:	230f      	movs	r3, #15
 80009ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009cc:	2302      	movs	r3, #2
 80009ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	2105      	movs	r1, #5
 80009e6:	4618      	mov	r0, r3
 80009e8:	f002 f95e 	bl	8002ca8 <HAL_RCC_ClockConfig>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80009f2:	f000 fd89 	bl	8001508 <Error_Handler>
  }
}
 80009f6:	bf00      	nop
 80009f8:	3750      	adds	r7, #80	@ 0x50
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40007000 	.word	0x40007000

08000a08 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08c      	sub	sp, #48	@ 0x30
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000a0e:	f107 030c 	add.w	r3, r7, #12
 8000a12:	2224      	movs	r2, #36	@ 0x24
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f003 fe1c 	bl	8004654 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2200      	movs	r2, #0
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a24:	4b22      	ldr	r3, [pc, #136]	@ (8000ab0 <MX_TIM1_Init+0xa8>)
 8000a26:	4a23      	ldr	r2, [pc, #140]	@ (8000ab4 <MX_TIM1_Init+0xac>)
 8000a28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a2a:	4b21      	ldr	r3, [pc, #132]	@ (8000ab0 <MX_TIM1_Init+0xa8>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a30:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab0 <MX_TIM1_Init+0xa8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a36:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab0 <MX_TIM1_Init+0xa8>)
 8000a38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a3c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab0 <MX_TIM1_Init+0xa8>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a44:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab0 <MX_TIM1_Init+0xa8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a4a:	4b19      	ldr	r3, [pc, #100]	@ (8000ab0 <MX_TIM1_Init+0xa8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a50:	2301      	movs	r3, #1
 8000a52:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a54:	2300      	movs	r3, #0
 8000a56:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a64:	2300      	movs	r3, #0
 8000a66:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000a74:	f107 030c 	add.w	r3, r7, #12
 8000a78:	4619      	mov	r1, r3
 8000a7a:	480d      	ldr	r0, [pc, #52]	@ (8000ab0 <MX_TIM1_Init+0xa8>)
 8000a7c:	f002 fd0c 	bl	8003498 <HAL_TIM_Encoder_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000a86:	f000 fd3f 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a92:	1d3b      	adds	r3, r7, #4
 8000a94:	4619      	mov	r1, r3
 8000a96:	4806      	ldr	r0, [pc, #24]	@ (8000ab0 <MX_TIM1_Init+0xa8>)
 8000a98:	f003 fa88 	bl	8003fac <HAL_TIMEx_MasterConfigSynchronization>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000aa2:	f000 fd31 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	3730      	adds	r7, #48	@ 0x30
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2000002c 	.word	0x2000002c
 8000ab4:	40010000 	.word	0x40010000

08000ab8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08c      	sub	sp, #48	@ 0x30
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000abe:	f107 030c 	add.w	r3, r7, #12
 8000ac2:	2224      	movs	r2, #36	@ 0x24
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f003 fdc4 	bl	8004654 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000acc:	1d3b      	adds	r3, r7, #4
 8000ace:	2200      	movs	r2, #0
 8000ad0:	601a      	str	r2, [r3, #0]
 8000ad2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ad4:	4b21      	ldr	r3, [pc, #132]	@ (8000b5c <MX_TIM2_Init+0xa4>)
 8000ad6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000ada:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000adc:	4b1f      	ldr	r3, [pc, #124]	@ (8000b5c <MX_TIM2_Init+0xa4>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b5c <MX_TIM2_Init+0xa4>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8000b5c <MX_TIM2_Init+0xa4>)
 8000aea:	f04f 32ff 	mov.w	r2, #4294967295
 8000aee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b5c <MX_TIM2_Init+0xa4>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af6:	4b19      	ldr	r3, [pc, #100]	@ (8000b5c <MX_TIM2_Init+0xa4>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000afc:	2301      	movs	r3, #1
 8000afe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000b04:	2301      	movs	r3, #1
 8000b06:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000b10:	2300      	movs	r3, #0
 8000b12:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000b14:	2301      	movs	r3, #1
 8000b16:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	4619      	mov	r1, r3
 8000b26:	480d      	ldr	r0, [pc, #52]	@ (8000b5c <MX_TIM2_Init+0xa4>)
 8000b28:	f002 fcb6 	bl	8003498 <HAL_TIM_Encoder_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000b32:	f000 fce9 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b3e:	1d3b      	adds	r3, r7, #4
 8000b40:	4619      	mov	r1, r3
 8000b42:	4806      	ldr	r0, [pc, #24]	@ (8000b5c <MX_TIM2_Init+0xa4>)
 8000b44:	f003 fa32 	bl	8003fac <HAL_TIMEx_MasterConfigSynchronization>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000b4e:	f000 fcdb 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	3730      	adds	r7, #48	@ 0x30
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000074 	.word	0x20000074

08000b60 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08c      	sub	sp, #48	@ 0x30
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b66:	f107 030c 	add.w	r3, r7, #12
 8000b6a:	2224      	movs	r2, #36	@ 0x24
 8000b6c:	2100      	movs	r1, #0
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f003 fd70 	bl	8004654 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000b7c:	4b20      	ldr	r3, [pc, #128]	@ (8000c00 <MX_TIM3_Init+0xa0>)
 8000b7e:	4a21      	ldr	r2, [pc, #132]	@ (8000c04 <MX_TIM3_Init+0xa4>)
 8000b80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000b82:	4b1f      	ldr	r3, [pc, #124]	@ (8000c00 <MX_TIM3_Init+0xa0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b88:	4b1d      	ldr	r3, [pc, #116]	@ (8000c00 <MX_TIM3_Init+0xa0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000c00 <MX_TIM3_Init+0xa0>)
 8000b90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b94:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b96:	4b1a      	ldr	r3, [pc, #104]	@ (8000c00 <MX_TIM3_Init+0xa0>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9c:	4b18      	ldr	r3, [pc, #96]	@ (8000c00 <MX_TIM3_Init+0xa0>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000baa:	2301      	movs	r3, #1
 8000bac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000bc6:	f107 030c 	add.w	r3, r7, #12
 8000bca:	4619      	mov	r1, r3
 8000bcc:	480c      	ldr	r0, [pc, #48]	@ (8000c00 <MX_TIM3_Init+0xa0>)
 8000bce:	f002 fc63 	bl	8003498 <HAL_TIM_Encoder_Init>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d001      	beq.n	8000bdc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000bd8:	f000 fc96 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000be4:	1d3b      	adds	r3, r7, #4
 8000be6:	4619      	mov	r1, r3
 8000be8:	4805      	ldr	r0, [pc, #20]	@ (8000c00 <MX_TIM3_Init+0xa0>)
 8000bea:	f003 f9df 	bl	8003fac <HAL_TIMEx_MasterConfigSynchronization>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000bf4:	f000 fc88 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000bf8:	bf00      	nop
 8000bfa:	3730      	adds	r7, #48	@ 0x30
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	200000bc 	.word	0x200000bc
 8000c04:	40000400 	.word	0x40000400

08000c08 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08c      	sub	sp, #48	@ 0x30
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000c0e:	f107 030c 	add.w	r3, r7, #12
 8000c12:	2224      	movs	r2, #36	@ 0x24
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f003 fd1c 	bl	8004654 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c1c:	1d3b      	adds	r3, r7, #4
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
 8000c22:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c24:	4b20      	ldr	r3, [pc, #128]	@ (8000ca8 <MX_TIM4_Init+0xa0>)
 8000c26:	4a21      	ldr	r2, [pc, #132]	@ (8000cac <MX_TIM4_Init+0xa4>)
 8000c28:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c2a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca8 <MX_TIM4_Init+0xa0>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c30:	4b1d      	ldr	r3, [pc, #116]	@ (8000ca8 <MX_TIM4_Init+0xa0>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca8 <MX_TIM4_Init+0xa0>)
 8000c38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c3c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca8 <MX_TIM4_Init+0xa0>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c44:	4b18      	ldr	r3, [pc, #96]	@ (8000ca8 <MX_TIM4_Init+0xa0>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c52:	2301      	movs	r3, #1
 8000c54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c62:	2301      	movs	r3, #1
 8000c64:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	4619      	mov	r1, r3
 8000c74:	480c      	ldr	r0, [pc, #48]	@ (8000ca8 <MX_TIM4_Init+0xa0>)
 8000c76:	f002 fc0f 	bl	8003498 <HAL_TIM_Encoder_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8000c80:	f000 fc42 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4805      	ldr	r0, [pc, #20]	@ (8000ca8 <MX_TIM4_Init+0xa0>)
 8000c92:	f003 f98b 	bl	8003fac <HAL_TIMEx_MasterConfigSynchronization>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8000c9c:	f000 fc34 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	3730      	adds	r7, #48	@ 0x30
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000104 	.word	0x20000104
 8000cac:	40000800 	.word	0x40000800

08000cb0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b08c      	sub	sp, #48	@ 0x30
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000cb6:	f107 030c 	add.w	r3, r7, #12
 8000cba:	2224      	movs	r2, #36	@ 0x24
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f003 fcc8 	bl	8004654 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000ccc:	4b20      	ldr	r3, [pc, #128]	@ (8000d50 <MX_TIM5_Init+0xa0>)
 8000cce:	4a21      	ldr	r2, [pc, #132]	@ (8000d54 <MX_TIM5_Init+0xa4>)
 8000cd0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000cd2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d50 <MX_TIM5_Init+0xa0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd8:	4b1d      	ldr	r3, [pc, #116]	@ (8000d50 <MX_TIM5_Init+0xa0>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000cde:	4b1c      	ldr	r3, [pc, #112]	@ (8000d50 <MX_TIM5_Init+0xa0>)
 8000ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ce4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	@ (8000d50 <MX_TIM5_Init+0xa0>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cec:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <MX_TIM5_Init+0xa0>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000d06:	2300      	movs	r3, #0
 8000d08:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8000d16:	f107 030c 	add.w	r3, r7, #12
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	480c      	ldr	r0, [pc, #48]	@ (8000d50 <MX_TIM5_Init+0xa0>)
 8000d1e:	f002 fbbb 	bl	8003498 <HAL_TIM_Encoder_Init>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 8000d28:	f000 fbee 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d30:	2300      	movs	r3, #0
 8000d32:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000d34:	1d3b      	adds	r3, r7, #4
 8000d36:	4619      	mov	r1, r3
 8000d38:	4805      	ldr	r0, [pc, #20]	@ (8000d50 <MX_TIM5_Init+0xa0>)
 8000d3a:	f003 f937 	bl	8003fac <HAL_TIMEx_MasterConfigSynchronization>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 8000d44:	f000 fbe0 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	3730      	adds	r7, #48	@ 0x30
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	2000014c 	.word	0x2000014c
 8000d54:	40000c00 	.word	0x40000c00

08000d58 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5e:	463b      	mov	r3, r7
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000d66:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <MX_TIM6_Init+0x64>)
 8000d68:	4a15      	ldr	r2, [pc, #84]	@ (8000dc0 <MX_TIM6_Init+0x68>)
 8000d6a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 84-1;
 8000d6c:	4b13      	ldr	r3, [pc, #76]	@ (8000dbc <MX_TIM6_Init+0x64>)
 8000d6e:	2253      	movs	r2, #83	@ 0x53
 8000d70:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d72:	4b12      	ldr	r3, [pc, #72]	@ (8000dbc <MX_TIM6_Init+0x64>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8000d78:	4b10      	ldr	r3, [pc, #64]	@ (8000dbc <MX_TIM6_Init+0x64>)
 8000d7a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000d7e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d80:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <MX_TIM6_Init+0x64>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000d86:	480d      	ldr	r0, [pc, #52]	@ (8000dbc <MX_TIM6_Init+0x64>)
 8000d88:	f002 f9ae 	bl	80030e8 <HAL_TIM_Base_Init>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8000d92:	f000 fbb9 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d96:	2300      	movs	r3, #0
 8000d98:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000d9e:	463b      	mov	r3, r7
 8000da0:	4619      	mov	r1, r3
 8000da2:	4806      	ldr	r0, [pc, #24]	@ (8000dbc <MX_TIM6_Init+0x64>)
 8000da4:	f003 f902 	bl	8003fac <HAL_TIMEx_MasterConfigSynchronization>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8000dae:	f000 fbab 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000194 	.word	0x20000194
 8000dc0:	40001000 	.word	0x40001000

08000dc4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b08c      	sub	sp, #48	@ 0x30
 8000dc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000dca:	f107 030c 	add.w	r3, r7, #12
 8000dce:	2224      	movs	r2, #36	@ 0x24
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f003 fc3e 	bl	8004654 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dd8:	1d3b      	adds	r3, r7, #4
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000de0:	4b22      	ldr	r3, [pc, #136]	@ (8000e6c <MX_TIM8_Init+0xa8>)
 8000de2:	4a23      	ldr	r2, [pc, #140]	@ (8000e70 <MX_TIM8_Init+0xac>)
 8000de4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000de6:	4b21      	ldr	r3, [pc, #132]	@ (8000e6c <MX_TIM8_Init+0xa8>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dec:	4b1f      	ldr	r3, [pc, #124]	@ (8000e6c <MX_TIM8_Init+0xa8>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000df2:	4b1e      	ldr	r3, [pc, #120]	@ (8000e6c <MX_TIM8_Init+0xa8>)
 8000df4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000df8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8000e6c <MX_TIM8_Init+0xa8>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000e00:	4b1a      	ldr	r3, [pc, #104]	@ (8000e6c <MX_TIM8_Init+0xa8>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e06:	4b19      	ldr	r3, [pc, #100]	@ (8000e6c <MX_TIM8_Init+0xa8>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e10:	2300      	movs	r3, #0
 8000e12:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e14:	2301      	movs	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e24:	2301      	movs	r3, #1
 8000e26:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	4619      	mov	r1, r3
 8000e36:	480d      	ldr	r0, [pc, #52]	@ (8000e6c <MX_TIM8_Init+0xa8>)
 8000e38:	f002 fb2e 	bl	8003498 <HAL_TIM_Encoder_Init>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8000e42:	f000 fb61 	bl	8001508 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	4619      	mov	r1, r3
 8000e52:	4806      	ldr	r0, [pc, #24]	@ (8000e6c <MX_TIM8_Init+0xa8>)
 8000e54:	f003 f8aa 	bl	8003fac <HAL_TIMEx_MasterConfigSynchronization>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8000e5e:	f000 fb53 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000e62:	bf00      	nop
 8000e64:	3730      	adds	r7, #48	@ 0x30
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	200001dc 	.word	0x200001dc
 8000e70:	40010400 	.word	0x40010400

08000e74 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	605a      	str	r2, [r3, #4]
 8000e82:	609a      	str	r2, [r3, #8]
 8000e84:	60da      	str	r2, [r3, #12]
 8000e86:	611a      	str	r2, [r3, #16]
 8000e88:	615a      	str	r2, [r3, #20]
 8000e8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8000f0c <MX_TIM9_Init+0x98>)
 8000e8e:	4a20      	ldr	r2, [pc, #128]	@ (8000f10 <MX_TIM9_Init+0x9c>)
 8000e90:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8000e92:	4b1e      	ldr	r3, [pc, #120]	@ (8000f0c <MX_TIM9_Init+0x98>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e98:	4b1c      	ldr	r3, [pc, #112]	@ (8000f0c <MX_TIM9_Init+0x98>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8000e9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000f0c <MX_TIM9_Init+0x98>)
 8000ea0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ea4:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ea6:	4b19      	ldr	r3, [pc, #100]	@ (8000f0c <MX_TIM9_Init+0x98>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eac:	4b17      	ldr	r3, [pc, #92]	@ (8000f0c <MX_TIM9_Init+0x98>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000eb2:	4816      	ldr	r0, [pc, #88]	@ (8000f0c <MX_TIM9_Init+0x98>)
 8000eb4:	f002 f9d8 	bl	8003268 <HAL_TIM_PWM_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8000ebe:	f000 fb23 	bl	8001508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ec2:	2360      	movs	r3, #96	@ 0x60
 8000ec4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	480c      	ldr	r0, [pc, #48]	@ (8000f0c <MX_TIM9_Init+0x98>)
 8000eda:	f002 fd01 	bl	80038e0 <HAL_TIM_PWM_ConfigChannel>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8000ee4:	f000 fb10 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	2204      	movs	r2, #4
 8000eec:	4619      	mov	r1, r3
 8000eee:	4807      	ldr	r0, [pc, #28]	@ (8000f0c <MX_TIM9_Init+0x98>)
 8000ef0:	f002 fcf6 	bl	80038e0 <HAL_TIM_PWM_ConfigChannel>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8000efa:	f000 fb05 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000efe:	4803      	ldr	r0, [pc, #12]	@ (8000f0c <MX_TIM9_Init+0x98>)
 8000f00:	f000 fe4e 	bl	8001ba0 <HAL_TIM_MspPostInit>

}
 8000f04:	bf00      	nop
 8000f06:	3720      	adds	r7, #32
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	20000224 	.word	0x20000224
 8000f10:	40014000 	.word	0x40014000

08000f14 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
 8000f28:	615a      	str	r2, [r3, #20]
 8000f2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa8 <MX_TIM10_Init+0x94>)
 8000f2e:	4a1f      	ldr	r2, [pc, #124]	@ (8000fac <MX_TIM10_Init+0x98>)
 8000f30:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8000f32:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa8 <MX_TIM10_Init+0x94>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f38:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <MX_TIM10_Init+0x94>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8000f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa8 <MX_TIM10_Init+0x94>)
 8000f40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000f44:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f46:	4b18      	ldr	r3, [pc, #96]	@ (8000fa8 <MX_TIM10_Init+0x94>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4c:	4b16      	ldr	r3, [pc, #88]	@ (8000fa8 <MX_TIM10_Init+0x94>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000f52:	4815      	ldr	r0, [pc, #84]	@ (8000fa8 <MX_TIM10_Init+0x94>)
 8000f54:	f002 f8c8 	bl	80030e8 <HAL_TIM_Base_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8000f5e:	f000 fad3 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8000f62:	4811      	ldr	r0, [pc, #68]	@ (8000fa8 <MX_TIM10_Init+0x94>)
 8000f64:	f002 f980 	bl	8003268 <HAL_TIM_PWM_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8000f6e:	f000 facb 	bl	8001508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f72:	2360      	movs	r3, #96	@ 0x60
 8000f74:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	2200      	movs	r2, #0
 8000f86:	4619      	mov	r1, r3
 8000f88:	4807      	ldr	r0, [pc, #28]	@ (8000fa8 <MX_TIM10_Init+0x94>)
 8000f8a:	f002 fca9 	bl	80038e0 <HAL_TIM_PWM_ConfigChannel>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8000f94:	f000 fab8 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8000f98:	4803      	ldr	r0, [pc, #12]	@ (8000fa8 <MX_TIM10_Init+0x94>)
 8000f9a:	f000 fe01 	bl	8001ba0 <HAL_TIM_MspPostInit>

}
 8000f9e:	bf00      	nop
 8000fa0:	3720      	adds	r7, #32
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	2000026c 	.word	0x2000026c
 8000fac:	40014400 	.word	0x40014400

08000fb0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b088      	sub	sp, #32
 8000fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb6:	1d3b      	adds	r3, r7, #4
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
 8000fc4:	615a      	str	r2, [r3, #20]
 8000fc6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000fc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001044 <MX_TIM11_Init+0x94>)
 8000fca:	4a1f      	ldr	r2, [pc, #124]	@ (8001048 <MX_TIM11_Init+0x98>)
 8000fcc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8000fce:	4b1d      	ldr	r3, [pc, #116]	@ (8001044 <MX_TIM11_Init+0x94>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8001044 <MX_TIM11_Init+0x94>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000fda:	4b1a      	ldr	r3, [pc, #104]	@ (8001044 <MX_TIM11_Init+0x94>)
 8000fdc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000fe0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fe2:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <MX_TIM11_Init+0x94>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe8:	4b16      	ldr	r3, [pc, #88]	@ (8001044 <MX_TIM11_Init+0x94>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000fee:	4815      	ldr	r0, [pc, #84]	@ (8001044 <MX_TIM11_Init+0x94>)
 8000ff0:	f002 f87a 	bl	80030e8 <HAL_TIM_Base_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8000ffa:	f000 fa85 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8000ffe:	4811      	ldr	r0, [pc, #68]	@ (8001044 <MX_TIM11_Init+0x94>)
 8001000:	f002 f932 	bl	8003268 <HAL_TIM_PWM_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800100a:	f000 fa7d 	bl	8001508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800100e:	2360      	movs	r3, #96	@ 0x60
 8001010:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2200      	movs	r2, #0
 8001022:	4619      	mov	r1, r3
 8001024:	4807      	ldr	r0, [pc, #28]	@ (8001044 <MX_TIM11_Init+0x94>)
 8001026:	f002 fc5b 	bl	80038e0 <HAL_TIM_PWM_ConfigChannel>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8001030:	f000 fa6a 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8001034:	4803      	ldr	r0, [pc, #12]	@ (8001044 <MX_TIM11_Init+0x94>)
 8001036:	f000 fdb3 	bl	8001ba0 <HAL_TIM_MspPostInit>

}
 800103a:	bf00      	nop
 800103c:	3720      	adds	r7, #32
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200002b4 	.word	0x200002b4
 8001048:	40014800 	.word	0x40014800

0800104c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001052:	1d3b      	adds	r3, r7, #4
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
 8001060:	615a      	str	r2, [r3, #20]
 8001062:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001064:	4b1f      	ldr	r3, [pc, #124]	@ (80010e4 <MX_TIM12_Init+0x98>)
 8001066:	4a20      	ldr	r2, [pc, #128]	@ (80010e8 <MX_TIM12_Init+0x9c>)
 8001068:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 84-1;
 800106a:	4b1e      	ldr	r3, [pc, #120]	@ (80010e4 <MX_TIM12_Init+0x98>)
 800106c:	2253      	movs	r2, #83	@ 0x53
 800106e:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001070:	4b1c      	ldr	r3, [pc, #112]	@ (80010e4 <MX_TIM12_Init+0x98>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 1000-1;
 8001076:	4b1b      	ldr	r3, [pc, #108]	@ (80010e4 <MX_TIM12_Init+0x98>)
 8001078:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800107c:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107e:	4b19      	ldr	r3, [pc, #100]	@ (80010e4 <MX_TIM12_Init+0x98>)
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001084:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <MX_TIM12_Init+0x98>)
 8001086:	2200      	movs	r2, #0
 8001088:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 800108a:	4816      	ldr	r0, [pc, #88]	@ (80010e4 <MX_TIM12_Init+0x98>)
 800108c:	f002 f8ec 	bl	8003268 <HAL_TIM_PWM_Init>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001096:	f000 fa37 	bl	8001508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800109a:	2360      	movs	r3, #96	@ 0x60
 800109c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2200      	movs	r2, #0
 80010ae:	4619      	mov	r1, r3
 80010b0:	480c      	ldr	r0, [pc, #48]	@ (80010e4 <MX_TIM12_Init+0x98>)
 80010b2:	f002 fc15 	bl	80038e0 <HAL_TIM_PWM_ConfigChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80010bc:	f000 fa24 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	2204      	movs	r2, #4
 80010c4:	4619      	mov	r1, r3
 80010c6:	4807      	ldr	r0, [pc, #28]	@ (80010e4 <MX_TIM12_Init+0x98>)
 80010c8:	f002 fc0a 	bl	80038e0 <HAL_TIM_PWM_ConfigChannel>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 80010d2:	f000 fa19 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80010d6:	4803      	ldr	r0, [pc, #12]	@ (80010e4 <MX_TIM12_Init+0x98>)
 80010d8:	f000 fd62 	bl	8001ba0 <HAL_TIM_MspPostInit>

}
 80010dc:	bf00      	nop
 80010de:	3720      	adds	r7, #32
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200002fc 	.word	0x200002fc
 80010e8:	40001800 	.word	0x40001800

080010ec <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80010f2:	1d3b      	adds	r3, r7, #4
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
 8001100:	615a      	str	r2, [r3, #20]
 8001102:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001104:	4b1e      	ldr	r3, [pc, #120]	@ (8001180 <MX_TIM13_Init+0x94>)
 8001106:	4a1f      	ldr	r2, [pc, #124]	@ (8001184 <MX_TIM13_Init+0x98>)
 8001108:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 84-1;
 800110a:	4b1d      	ldr	r3, [pc, #116]	@ (8001180 <MX_TIM13_Init+0x94>)
 800110c:	2253      	movs	r2, #83	@ 0x53
 800110e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001110:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <MX_TIM13_Init+0x94>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000-1;
 8001116:	4b1a      	ldr	r3, [pc, #104]	@ (8001180 <MX_TIM13_Init+0x94>)
 8001118:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800111c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111e:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <MX_TIM13_Init+0x94>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001124:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <MX_TIM13_Init+0x94>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800112a:	4815      	ldr	r0, [pc, #84]	@ (8001180 <MX_TIM13_Init+0x94>)
 800112c:	f001 ffdc 	bl	80030e8 <HAL_TIM_Base_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 8001136:	f000 f9e7 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800113a:	4811      	ldr	r0, [pc, #68]	@ (8001180 <MX_TIM13_Init+0x94>)
 800113c:	f002 f894 	bl	8003268 <HAL_TIM_PWM_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 8001146:	f000 f9df 	bl	8001508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800114a:	2360      	movs	r3, #96	@ 0x60
 800114c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800114e:	2300      	movs	r3, #0
 8001150:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	2200      	movs	r2, #0
 800115e:	4619      	mov	r1, r3
 8001160:	4807      	ldr	r0, [pc, #28]	@ (8001180 <MX_TIM13_Init+0x94>)
 8001162:	f002 fbbd 	bl	80038e0 <HAL_TIM_PWM_ConfigChannel>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 800116c:	f000 f9cc 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 8001170:	4803      	ldr	r0, [pc, #12]	@ (8001180 <MX_TIM13_Init+0x94>)
 8001172:	f000 fd15 	bl	8001ba0 <HAL_TIM_MspPostInit>

}
 8001176:	bf00      	nop
 8001178:	3720      	adds	r7, #32
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000344 	.word	0x20000344
 8001184:	40001c00 	.word	0x40001c00

08001188 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800118e:	1d3b      	adds	r3, r7, #4
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]
 800119c:	615a      	str	r2, [r3, #20]
 800119e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80011a0:	4b1e      	ldr	r3, [pc, #120]	@ (800121c <MX_TIM14_Init+0x94>)
 80011a2:	4a1f      	ldr	r2, [pc, #124]	@ (8001220 <MX_TIM14_Init+0x98>)
 80011a4:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 84-1;
 80011a6:	4b1d      	ldr	r3, [pc, #116]	@ (800121c <MX_TIM14_Init+0x94>)
 80011a8:	2253      	movs	r2, #83	@ 0x53
 80011aa:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <MX_TIM14_Init+0x94>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000-1;
 80011b2:	4b1a      	ldr	r3, [pc, #104]	@ (800121c <MX_TIM14_Init+0x94>)
 80011b4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011b8:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ba:	4b18      	ldr	r3, [pc, #96]	@ (800121c <MX_TIM14_Init+0x94>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c0:	4b16      	ldr	r3, [pc, #88]	@ (800121c <MX_TIM14_Init+0x94>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80011c6:	4815      	ldr	r0, [pc, #84]	@ (800121c <MX_TIM14_Init+0x94>)
 80011c8:	f001 ff8e 	bl	80030e8 <HAL_TIM_Base_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80011d2:	f000 f999 	bl	8001508 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80011d6:	4811      	ldr	r0, [pc, #68]	@ (800121c <MX_TIM14_Init+0x94>)
 80011d8:	f002 f846 	bl	8003268 <HAL_TIM_PWM_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80011e2:	f000 f991 	bl	8001508 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011e6:	2360      	movs	r3, #96	@ 0x60
 80011e8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2200      	movs	r2, #0
 80011fa:	4619      	mov	r1, r3
 80011fc:	4807      	ldr	r0, [pc, #28]	@ (800121c <MX_TIM14_Init+0x94>)
 80011fe:	f002 fb6f 	bl	80038e0 <HAL_TIM_PWM_ConfigChannel>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001208:	f000 f97e 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 800120c:	4803      	ldr	r0, [pc, #12]	@ (800121c <MX_TIM14_Init+0x94>)
 800120e:	f000 fcc7 	bl	8001ba0 <HAL_TIM_MspPostInit>

}
 8001212:	bf00      	nop
 8001214:	3720      	adds	r7, #32
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2000038c 	.word	0x2000038c
 8001220:	40002000 	.word	0x40002000

08001224 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001228:	4b11      	ldr	r3, [pc, #68]	@ (8001270 <MX_UART4_Init+0x4c>)
 800122a:	4a12      	ldr	r2, [pc, #72]	@ (8001274 <MX_UART4_Init+0x50>)
 800122c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800122e:	4b10      	ldr	r3, [pc, #64]	@ (8001270 <MX_UART4_Init+0x4c>)
 8001230:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001234:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001236:	4b0e      	ldr	r3, [pc, #56]	@ (8001270 <MX_UART4_Init+0x4c>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800123c:	4b0c      	ldr	r3, [pc, #48]	@ (8001270 <MX_UART4_Init+0x4c>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001242:	4b0b      	ldr	r3, [pc, #44]	@ (8001270 <MX_UART4_Init+0x4c>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001248:	4b09      	ldr	r3, [pc, #36]	@ (8001270 <MX_UART4_Init+0x4c>)
 800124a:	220c      	movs	r2, #12
 800124c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800124e:	4b08      	ldr	r3, [pc, #32]	@ (8001270 <MX_UART4_Init+0x4c>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001254:	4b06      	ldr	r3, [pc, #24]	@ (8001270 <MX_UART4_Init+0x4c>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800125a:	4805      	ldr	r0, [pc, #20]	@ (8001270 <MX_UART4_Init+0x4c>)
 800125c:	f002 ff36 	bl	80040cc <HAL_UART_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001266:	f000 f94f 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200003d4 	.word	0x200003d4
 8001274:	40004c00 	.word	0x40004c00

08001278 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800127c:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <MX_UART5_Init+0x4c>)
 800127e:	4a12      	ldr	r2, [pc, #72]	@ (80012c8 <MX_UART5_Init+0x50>)
 8001280:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001282:	4b10      	ldr	r3, [pc, #64]	@ (80012c4 <MX_UART5_Init+0x4c>)
 8001284:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001288:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800128a:	4b0e      	ldr	r3, [pc, #56]	@ (80012c4 <MX_UART5_Init+0x4c>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001290:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <MX_UART5_Init+0x4c>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001296:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <MX_UART5_Init+0x4c>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800129c:	4b09      	ldr	r3, [pc, #36]	@ (80012c4 <MX_UART5_Init+0x4c>)
 800129e:	220c      	movs	r2, #12
 80012a0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a2:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <MX_UART5_Init+0x4c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <MX_UART5_Init+0x4c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80012ae:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <MX_UART5_Init+0x4c>)
 80012b0:	f002 ff0c 	bl	80040cc <HAL_UART_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80012ba:	f000 f925 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2000041c 	.word	0x2000041c
 80012c8:	40005000 	.word	0x40005000

080012cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012d0:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <MX_USART1_UART_Init+0x4c>)
 80012d2:	4a12      	ldr	r2, [pc, #72]	@ (800131c <MX_USART1_UART_Init+0x50>)
 80012d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012d6:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <MX_USART1_UART_Init+0x4c>)
 80012d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80012dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012de:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <MX_USART1_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <MX_USART1_UART_Init+0x4c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <MX_USART1_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012f0:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <MX_USART1_UART_Init+0x4c>)
 80012f2:	220c      	movs	r2, #12
 80012f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f6:	4b08      	ldr	r3, [pc, #32]	@ (8001318 <MX_USART1_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012fc:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <MX_USART1_UART_Init+0x4c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	@ (8001318 <MX_USART1_UART_Init+0x4c>)
 8001304:	f002 fee2 	bl	80040cc <HAL_UART_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800130e:	f000 f8fb 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000464 	.word	0x20000464
 800131c:	40011000 	.word	0x40011000

08001320 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001324:	4b11      	ldr	r3, [pc, #68]	@ (800136c <MX_USART2_UART_Init+0x4c>)
 8001326:	4a12      	ldr	r2, [pc, #72]	@ (8001370 <MX_USART2_UART_Init+0x50>)
 8001328:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800132a:	4b10      	ldr	r3, [pc, #64]	@ (800136c <MX_USART2_UART_Init+0x4c>)
 800132c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001330:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001332:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <MX_USART2_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001338:	4b0c      	ldr	r3, [pc, #48]	@ (800136c <MX_USART2_UART_Init+0x4c>)
 800133a:	2200      	movs	r2, #0
 800133c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800133e:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <MX_USART2_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001344:	4b09      	ldr	r3, [pc, #36]	@ (800136c <MX_USART2_UART_Init+0x4c>)
 8001346:	220c      	movs	r2, #12
 8001348:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800134a:	4b08      	ldr	r3, [pc, #32]	@ (800136c <MX_USART2_UART_Init+0x4c>)
 800134c:	2200      	movs	r2, #0
 800134e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001350:	4b06      	ldr	r3, [pc, #24]	@ (800136c <MX_USART2_UART_Init+0x4c>)
 8001352:	2200      	movs	r2, #0
 8001354:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001356:	4805      	ldr	r0, [pc, #20]	@ (800136c <MX_USART2_UART_Init+0x4c>)
 8001358:	f002 feb8 	bl	80040cc <HAL_UART_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001362:	f000 f8d1 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200004ac 	.word	0x200004ac
 8001370:	40004400 	.word	0x40004400

08001374 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <MX_USART3_UART_Init+0x4c>)
 800137a:	4a12      	ldr	r2, [pc, #72]	@ (80013c4 <MX_USART3_UART_Init+0x50>)
 800137c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800137e:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <MX_USART3_UART_Init+0x4c>)
 8001380:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001384:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001386:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <MX_USART3_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800138c:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <MX_USART3_UART_Init+0x4c>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001392:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <MX_USART3_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001398:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <MX_USART3_UART_Init+0x4c>)
 800139a:	220c      	movs	r2, #12
 800139c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139e:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <MX_USART3_UART_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <MX_USART3_UART_Init+0x4c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80013aa:	4805      	ldr	r0, [pc, #20]	@ (80013c0 <MX_USART3_UART_Init+0x4c>)
 80013ac:	f002 fe8e 	bl	80040cc <HAL_UART_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80013b6:	f000 f8a7 	bl	8001508 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200004f4 	.word	0x200004f4
 80013c4:	40004800 	.word	0x40004800

080013c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08c      	sub	sp, #48	@ 0x30
 80013cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
 80013dc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	61bb      	str	r3, [r7, #24]
 80013e2:	4b46      	ldr	r3, [pc, #280]	@ (80014fc <MX_GPIO_Init+0x134>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	4a45      	ldr	r2, [pc, #276]	@ (80014fc <MX_GPIO_Init+0x134>)
 80013e8:	f043 0310 	orr.w	r3, r3, #16
 80013ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ee:	4b43      	ldr	r3, [pc, #268]	@ (80014fc <MX_GPIO_Init+0x134>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	61bb      	str	r3, [r7, #24]
 80013f8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	4b3f      	ldr	r3, [pc, #252]	@ (80014fc <MX_GPIO_Init+0x134>)
 8001400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001402:	4a3e      	ldr	r2, [pc, #248]	@ (80014fc <MX_GPIO_Init+0x134>)
 8001404:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001408:	6313      	str	r3, [r2, #48]	@ 0x30
 800140a:	4b3c      	ldr	r3, [pc, #240]	@ (80014fc <MX_GPIO_Init+0x134>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	613b      	str	r3, [r7, #16]
 800141a:	4b38      	ldr	r3, [pc, #224]	@ (80014fc <MX_GPIO_Init+0x134>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141e:	4a37      	ldr	r2, [pc, #220]	@ (80014fc <MX_GPIO_Init+0x134>)
 8001420:	f043 0301 	orr.w	r3, r3, #1
 8001424:	6313      	str	r3, [r2, #48]	@ 0x30
 8001426:	4b35      	ldr	r3, [pc, #212]	@ (80014fc <MX_GPIO_Init+0x134>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	60fb      	str	r3, [r7, #12]
 8001436:	4b31      	ldr	r3, [pc, #196]	@ (80014fc <MX_GPIO_Init+0x134>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143a:	4a30      	ldr	r2, [pc, #192]	@ (80014fc <MX_GPIO_Init+0x134>)
 800143c:	f043 0302 	orr.w	r3, r3, #2
 8001440:	6313      	str	r3, [r2, #48]	@ 0x30
 8001442:	4b2e      	ldr	r3, [pc, #184]	@ (80014fc <MX_GPIO_Init+0x134>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	f003 0302 	and.w	r3, r3, #2
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
 8001452:	4b2a      	ldr	r3, [pc, #168]	@ (80014fc <MX_GPIO_Init+0x134>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001456:	4a29      	ldr	r2, [pc, #164]	@ (80014fc <MX_GPIO_Init+0x134>)
 8001458:	f043 0308 	orr.w	r3, r3, #8
 800145c:	6313      	str	r3, [r2, #48]	@ 0x30
 800145e:	4b27      	ldr	r3, [pc, #156]	@ (80014fc <MX_GPIO_Init+0x134>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	60bb      	str	r3, [r7, #8]
 8001468:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
 800146e:	4b23      	ldr	r3, [pc, #140]	@ (80014fc <MX_GPIO_Init+0x134>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	4a22      	ldr	r2, [pc, #136]	@ (80014fc <MX_GPIO_Init+0x134>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	6313      	str	r3, [r2, #48]	@ 0x30
 800147a:	4b20      	ldr	r3, [pc, #128]	@ (80014fc <MX_GPIO_Init+0x134>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_10
 8001486:	2200      	movs	r2, #0
 8001488:	f244 5114 	movw	r1, #17684	@ 0x4514
 800148c:	481c      	ldr	r0, [pc, #112]	@ (8001500 <MX_GPIO_Init+0x138>)
 800148e:	f001 f979 	bl	8002784 <HAL_GPIO_WritePin>
                          |GPIO_PIN_14, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 8001492:	2200      	movs	r2, #0
 8001494:	f44f 6150 	mov.w	r1, #3328	@ 0xd00
 8001498:	481a      	ldr	r0, [pc, #104]	@ (8001504 <MX_GPIO_Init+0x13c>)
 800149a:	f001 f973 	bl	8002784 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE8 PE10
                           PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_10
 800149e:	f244 5314 	movw	r3, #17684	@ 0x4514
 80014a2:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a4:	2301      	movs	r3, #1
 80014a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014b0:	f107 031c 	add.w	r3, r7, #28
 80014b4:	4619      	mov	r1, r3
 80014b6:	4812      	ldr	r0, [pc, #72]	@ (8001500 <MX_GPIO_Init+0x138>)
 80014b8:	f000 ffb0 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD10 PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_11;
 80014bc:	f44f 6350 	mov.w	r3, #3328	@ 0xd00
 80014c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c6:	2300      	movs	r3, #0
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ca:	2300      	movs	r3, #0
 80014cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ce:	f107 031c 	add.w	r3, r7, #28
 80014d2:	4619      	mov	r1, r3
 80014d4:	480b      	ldr	r0, [pc, #44]	@ (8001504 <MX_GPIO_Init+0x13c>)
 80014d6:	f000 ffa1 	bl	800241c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
 80014da:	230b      	movs	r3, #11
 80014dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014e2:	2301      	movs	r3, #1
 80014e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e6:	f107 031c 	add.w	r3, r7, #28
 80014ea:	4619      	mov	r1, r3
 80014ec:	4805      	ldr	r0, [pc, #20]	@ (8001504 <MX_GPIO_Init+0x13c>)
 80014ee:	f000 ff95 	bl	800241c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80014f2:	bf00      	nop
 80014f4:	3730      	adds	r7, #48	@ 0x30
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	40023800 	.word	0x40023800
 8001500:	40021000 	.word	0x40021000
 8001504:	40020c00 	.word	0x40020c00

08001508 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800150c:	b672      	cpsid	i
}
 800150e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <Error_Handler+0x8>

08001514 <PID_Init>:

#include "pid.h"

/* Functions */
void PID_Init(PID_t *uPID, float kp, float ki, float kd)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001520:	edc7 0a01 	vstr	s1, [r7, #4]
 8001524:	ed87 1a00 	vstr	s2, [r7]
	uPID -> kp = kp;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	601a      	str	r2, [r3, #0]
	uPID -> ki = ki;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	605a      	str	r2, [r3, #4]
	uPID -> kd = kd;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	609a      	str	r2, [r3, #8]

	uPID -> proportional 	= 0;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
	uPID -> integral 		= 0;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f04f 0200 	mov.w	r2, #0
 8001548:	611a      	str	r2, [r3, #16]
	uPID -> derivative 		= 0;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	615a      	str	r2, [r3, #20]

	uPID -> error 			= 0;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	f04f 0200 	mov.w	r2, #0
 8001558:	619a      	str	r2, [r3, #24]
	uPID -> prev_error 		= 0;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
	uPID -> setpoint 		= 0;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f04f 0200 	mov.w	r2, #0
 8001568:	621a      	str	r2, [r3, #32]
	uPID -> feedback		= 0;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	625a      	str	r2, [r3, #36]	@ 0x24

	uPID -> max_output		= 0;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f04f 0200 	mov.w	r2, #0
 8001578:	629a      	str	r2, [r3, #40]	@ 0x28
	uPID -> output			= 0;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	62da      	str	r2, [r3, #44]	@ 0x2c

	return;
 8001582:	bf00      	nop
}
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr

0800158e <PID_Update>:


void PID_Update(PID_t *uPID, float setpoint, float feedback, float max_output)
{
 800158e:	b480      	push	{r7}
 8001590:	b085      	sub	sp, #20
 8001592:	af00      	add	r7, sp, #0
 8001594:	60f8      	str	r0, [r7, #12]
 8001596:	ed87 0a02 	vstr	s0, [r7, #8]
 800159a:	edc7 0a01 	vstr	s1, [r7, #4]
 800159e:	ed87 1a00 	vstr	s2, [r7]
	uPID->setpoint 		= setpoint;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	621a      	str	r2, [r3, #32]
	uPID->feedback 		= feedback;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	625a      	str	r2, [r3, #36]	@ 0x24
	uPID->max_output 	= max_output;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	629a      	str	r2, [r3, #40]	@ 0x28

	uPID->error = uPID->setpoint - uPID->feedback;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	ed93 7a08 	vldr	s14, [r3, #32]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80015c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	edc3 7a06 	vstr	s15, [r3, #24]
//	    if(uPID->error > 180) 			{ setpoint -= 360; }
//	    else if(uPID->error < -180) 	{ setpoint += 360; }
//	    uPID->error = setpoint - feedback;
//	}

	uPID->proportional = uPID->kp * uPID->error;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	ed93 7a00 	vldr	s14, [r3]
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	edd3 7a06 	vldr	s15, [r3, #24]
 80015d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	edc3 7a03 	vstr	s15, [r3, #12]
	uPID->integral    += uPID->ki * uPID->error;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	ed93 7a04 	vldr	s14, [r3, #16]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	edd3 6a01 	vldr	s13, [r3, #4]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	edd3 7a06 	vldr	s15, [r3, #24]
 80015f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	edc3 7a04 	vstr	s15, [r3, #16]
	uPID->derivative   = uPID->kd * (uPID->error - uPID->prev_error);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	ed93 7a02 	vldr	s14, [r3, #8]
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	edd3 6a06 	vldr	s13, [r3, #24]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001612:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	edc3 7a05 	vstr	s15, [r3, #20]
	uPID->prev_error   = uPID->error;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	699a      	ldr	r2, [r3, #24]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	61da      	str	r2, [r3, #28]

	if(uPID->integral >= uPID->max_output) 			{ uPID->integral =   uPID->max_output;  }
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	ed93 7a04 	vldr	s14, [r3, #16]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001634:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163c:	db04      	blt.n	8001648 <PID_Update+0xba>
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	611a      	str	r2, [r3, #16]
 8001646:	e014      	b.n	8001672 <PID_Update+0xe4>
	else if(uPID->integral < -(uPID->max_output)) 	{ uPID->integral = -(uPID->max_output); }
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	ed93 7a04 	vldr	s14, [r3, #16]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001654:	eef1 7a67 	vneg.f32	s15, s15
 8001658:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800165c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001660:	d507      	bpl.n	8001672 <PID_Update+0xe4>
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001668:	eef1 7a67 	vneg.f32	s15, s15
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	edc3 7a04 	vstr	s15, [r3, #16]

	uPID->output = (uPID->proportional) + (uPID->integral) + (uPID->derivative);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	ed93 7a03 	vldr	s14, [r3, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	edd3 7a04 	vldr	s15, [r3, #16]
 800167e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	edd3 7a05 	vldr	s15, [r3, #20]
 8001688:	ee77 7a27 	vadd.f32	s15, s14, s15
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	if(uPID->output >= uPID->max_output) 			{ uPID->output =   uPID->max_output;  }
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800169e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a6:	db04      	blt.n	80016b2 <PID_Update+0x124>
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	62da      	str	r2, [r3, #44]	@ 0x2c
	else if(uPID->output < -(uPID->max_output)) 	{ uPID->output = -(uPID->max_output); }

	return;
 80016b0:	e016      	b.n	80016e0 <PID_Update+0x152>
	else if(uPID->output < -(uPID->max_output)) 	{ uPID->output = -(uPID->max_output); }
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80016be:	eef1 7a67 	vneg.f32	s15, s15
 80016c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ca:	d400      	bmi.n	80016ce <PID_Update+0x140>
	return;
 80016cc:	e008      	b.n	80016e0 <PID_Update+0x152>
	else if(uPID->output < -(uPID->max_output)) 	{ uPID->output = -(uPID->max_output); }
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80016d4:	eef1 7a67 	vneg.f32	s15, s15
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	return;
 80016de:	bf00      	nop
}
 80016e0:	3714      	adds	r7, #20
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
	...

080016ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	4b13      	ldr	r3, [pc, #76]	@ (8001744 <HAL_MspInit+0x58>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fa:	4a12      	ldr	r2, [pc, #72]	@ (8001744 <HAL_MspInit+0x58>)
 80016fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001700:	6453      	str	r3, [r2, #68]	@ 0x44
 8001702:	4b10      	ldr	r3, [pc, #64]	@ (8001744 <HAL_MspInit+0x58>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001706:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	603b      	str	r3, [r7, #0]
 8001712:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <HAL_MspInit+0x58>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001716:	4a0b      	ldr	r2, [pc, #44]	@ (8001744 <HAL_MspInit+0x58>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800171c:	6413      	str	r3, [r2, #64]	@ 0x40
 800171e:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <HAL_MspInit+0x58>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001726:	603b      	str	r3, [r7, #0]
 8001728:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2100      	movs	r1, #0
 800172e:	2005      	movs	r0, #5
 8001730:	f000 fe3d 	bl	80023ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001734:	2005      	movs	r0, #5
 8001736:	f000 fe56 	bl	80023e6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800

08001748 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b094      	sub	sp, #80	@ 0x50
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a8b      	ldr	r2, [pc, #556]	@ (8001994 <HAL_TIM_Encoder_MspInit+0x24c>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d12d      	bne.n	80017c6 <HAL_TIM_Encoder_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800176e:	4b8a      	ldr	r3, [pc, #552]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 8001770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001772:	4a89      	ldr	r2, [pc, #548]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 8001774:	f043 0301 	orr.w	r3, r3, #1
 8001778:	6453      	str	r3, [r2, #68]	@ 0x44
 800177a:	4b87      	ldr	r3, [pc, #540]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	637b      	str	r3, [r7, #52]	@ 0x34
 800178a:	4b83      	ldr	r3, [pc, #524]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800178e:	4a82      	ldr	r2, [pc, #520]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 8001790:	f043 0310 	orr.w	r3, r3, #16
 8001794:	6313      	str	r3, [r2, #48]	@ 0x30
 8001796:	4b80      	ldr	r3, [pc, #512]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179a:	f003 0310 	and.w	r3, r3, #16
 800179e:	637b      	str	r3, [r7, #52]	@ 0x34
 80017a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80017a2:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80017a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b0:	2300      	movs	r3, #0
 80017b2:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80017b4:	2301      	movs	r3, #1
 80017b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017b8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80017bc:	4619      	mov	r1, r3
 80017be:	4877      	ldr	r0, [pc, #476]	@ (800199c <HAL_TIM_Encoder_MspInit+0x254>)
 80017c0:	f000 fe2c 	bl	800241c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 80017c4:	e129      	b.n	8001a1a <HAL_TIM_Encoder_MspInit+0x2d2>
  else if(htim_encoder->Instance==TIM2)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017ce:	d14a      	bne.n	8001866 <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017d0:	2300      	movs	r3, #0
 80017d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80017d4:	4b70      	ldr	r3, [pc, #448]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 80017d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017d8:	4a6f      	ldr	r2, [pc, #444]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 80017da:	f043 0301 	orr.w	r3, r3, #1
 80017de:	6413      	str	r3, [r2, #64]	@ 0x40
 80017e0:	4b6d      	ldr	r3, [pc, #436]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 80017e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	633b      	str	r3, [r7, #48]	@ 0x30
 80017ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ec:	2300      	movs	r3, #0
 80017ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017f0:	4b69      	ldr	r3, [pc, #420]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 80017f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f4:	4a68      	ldr	r2, [pc, #416]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 80017f6:	f043 0301 	orr.w	r3, r3, #1
 80017fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fc:	4b66      	ldr	r3, [pc, #408]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 80017fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001808:	2300      	movs	r3, #0
 800180a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800180c:	4b62      	ldr	r3, [pc, #392]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 800180e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001810:	4a61      	ldr	r2, [pc, #388]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 8001812:	f043 0302 	orr.w	r3, r3, #2
 8001816:	6313      	str	r3, [r2, #48]	@ 0x30
 8001818:	4b5f      	ldr	r3, [pc, #380]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 800181a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181c:	f003 0302 	and.w	r3, r3, #2
 8001820:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001824:	2320      	movs	r3, #32
 8001826:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001830:	2300      	movs	r3, #0
 8001832:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001834:	2301      	movs	r3, #1
 8001836:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001838:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800183c:	4619      	mov	r1, r3
 800183e:	4858      	ldr	r0, [pc, #352]	@ (80019a0 <HAL_TIM_Encoder_MspInit+0x258>)
 8001840:	f000 fdec 	bl	800241c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001844:	2308      	movs	r3, #8
 8001846:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	2302      	movs	r3, #2
 800184a:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001850:	2300      	movs	r3, #0
 8001852:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001854:	2301      	movs	r3, #1
 8001856:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001858:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800185c:	4619      	mov	r1, r3
 800185e:	4851      	ldr	r0, [pc, #324]	@ (80019a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 8001860:	f000 fddc 	bl	800241c <HAL_GPIO_Init>
}
 8001864:	e0d9      	b.n	8001a1a <HAL_TIM_Encoder_MspInit+0x2d2>
  else if(htim_encoder->Instance==TIM3)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a4f      	ldr	r2, [pc, #316]	@ (80019a8 <HAL_TIM_Encoder_MspInit+0x260>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d12c      	bne.n	80018ca <HAL_TIM_Encoder_MspInit+0x182>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24
 8001874:	4b48      	ldr	r3, [pc, #288]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 8001876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001878:	4a47      	ldr	r2, [pc, #284]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 800187a:	f043 0302 	orr.w	r3, r3, #2
 800187e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001880:	4b45      	ldr	r3, [pc, #276]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 8001882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	627b      	str	r3, [r7, #36]	@ 0x24
 800188a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
 8001890:	4b41      	ldr	r3, [pc, #260]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001894:	4a40      	ldr	r2, [pc, #256]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 8001896:	f043 0302 	orr.w	r3, r3, #2
 800189a:	6313      	str	r3, [r2, #48]	@ 0x30
 800189c:	4b3e      	ldr	r3, [pc, #248]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	623b      	str	r3, [r7, #32]
 80018a6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80018a8:	2330      	movs	r3, #48	@ 0x30
 80018aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b4:	2300      	movs	r3, #0
 80018b6:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018b8:	2302      	movs	r3, #2
 80018ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018bc:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80018c0:	4619      	mov	r1, r3
 80018c2:	4838      	ldr	r0, [pc, #224]	@ (80019a4 <HAL_TIM_Encoder_MspInit+0x25c>)
 80018c4:	f000 fdaa 	bl	800241c <HAL_GPIO_Init>
}
 80018c8:	e0a7      	b.n	8001a1a <HAL_TIM_Encoder_MspInit+0x2d2>
  else if(htim_encoder->Instance==TIM4)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a37      	ldr	r2, [pc, #220]	@ (80019ac <HAL_TIM_Encoder_MspInit+0x264>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d12d      	bne.n	8001930 <HAL_TIM_Encoder_MspInit+0x1e8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018d4:	2300      	movs	r3, #0
 80018d6:	61fb      	str	r3, [r7, #28]
 80018d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018dc:	4a2e      	ldr	r2, [pc, #184]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 80018de:	f043 0304 	orr.w	r3, r3, #4
 80018e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80018e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 80018e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e8:	f003 0304 	and.w	r3, r3, #4
 80018ec:	61fb      	str	r3, [r7, #28]
 80018ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f0:	2300      	movs	r3, #0
 80018f2:	61bb      	str	r3, [r7, #24]
 80018f4:	4b28      	ldr	r3, [pc, #160]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 80018f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f8:	4a27      	ldr	r2, [pc, #156]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 80018fa:	f043 0308 	orr.w	r3, r3, #8
 80018fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001900:	4b25      	ldr	r3, [pc, #148]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 8001902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	61bb      	str	r3, [r7, #24]
 800190a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800190c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001910:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2302      	movs	r3, #2
 8001914:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001916:	2300      	movs	r3, #0
 8001918:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800191a:	2300      	movs	r3, #0
 800191c:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800191e:	2302      	movs	r3, #2
 8001920:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001922:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001926:	4619      	mov	r1, r3
 8001928:	4821      	ldr	r0, [pc, #132]	@ (80019b0 <HAL_TIM_Encoder_MspInit+0x268>)
 800192a:	f000 fd77 	bl	800241c <HAL_GPIO_Init>
}
 800192e:	e074      	b.n	8001a1a <HAL_TIM_Encoder_MspInit+0x2d2>
  else if(htim_encoder->Instance==TIM5)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a1f      	ldr	r2, [pc, #124]	@ (80019b4 <HAL_TIM_Encoder_MspInit+0x26c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d13e      	bne.n	80019b8 <HAL_TIM_Encoder_MspInit+0x270>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	4b16      	ldr	r3, [pc, #88]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001942:	4a15      	ldr	r2, [pc, #84]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 8001944:	f043 0308 	orr.w	r3, r3, #8
 8001948:	6413      	str	r3, [r2, #64]	@ 0x40
 800194a:	4b13      	ldr	r3, [pc, #76]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
 800195a:	4b0f      	ldr	r3, [pc, #60]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800195e:	4a0e      	ldr	r2, [pc, #56]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 8001960:	f043 0301 	orr.w	r3, r3, #1
 8001964:	6313      	str	r3, [r2, #48]	@ 0x30
 8001966:	4b0c      	ldr	r3, [pc, #48]	@ (8001998 <HAL_TIM_Encoder_MspInit+0x250>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	613b      	str	r3, [r7, #16]
 8001970:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001972:	2303      	movs	r3, #3
 8001974:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001976:	2302      	movs	r3, #2
 8001978:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001982:	2302      	movs	r3, #2
 8001984:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800198a:	4619      	mov	r1, r3
 800198c:	4804      	ldr	r0, [pc, #16]	@ (80019a0 <HAL_TIM_Encoder_MspInit+0x258>)
 800198e:	f000 fd45 	bl	800241c <HAL_GPIO_Init>
}
 8001992:	e042      	b.n	8001a1a <HAL_TIM_Encoder_MspInit+0x2d2>
 8001994:	40010000 	.word	0x40010000
 8001998:	40023800 	.word	0x40023800
 800199c:	40021000 	.word	0x40021000
 80019a0:	40020000 	.word	0x40020000
 80019a4:	40020400 	.word	0x40020400
 80019a8:	40000400 	.word	0x40000400
 80019ac:	40000800 	.word	0x40000800
 80019b0:	40020c00 	.word	0x40020c00
 80019b4:	40000c00 	.word	0x40000c00
  else if(htim_encoder->Instance==TIM8)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a19      	ldr	r2, [pc, #100]	@ (8001a24 <HAL_TIM_Encoder_MspInit+0x2dc>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d12b      	bne.n	8001a1a <HAL_TIM_Encoder_MspInit+0x2d2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b18      	ldr	r3, [pc, #96]	@ (8001a28 <HAL_TIM_Encoder_MspInit+0x2e0>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ca:	4a17      	ldr	r2, [pc, #92]	@ (8001a28 <HAL_TIM_Encoder_MspInit+0x2e0>)
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019d2:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <HAL_TIM_Encoder_MspInit+0x2e0>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	4b11      	ldr	r3, [pc, #68]	@ (8001a28 <HAL_TIM_Encoder_MspInit+0x2e0>)
 80019e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e6:	4a10      	ldr	r2, [pc, #64]	@ (8001a28 <HAL_TIM_Encoder_MspInit+0x2e0>)
 80019e8:	f043 0304 	orr.w	r3, r3, #4
 80019ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80019ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001a28 <HAL_TIM_Encoder_MspInit+0x2e0>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	f003 0304 	and.w	r3, r3, #4
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019fa:	23c0      	movs	r3, #192	@ 0xc0
 80019fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2300      	movs	r3, #0
 8001a08:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a0e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001a12:	4619      	mov	r1, r3
 8001a14:	4805      	ldr	r0, [pc, #20]	@ (8001a2c <HAL_TIM_Encoder_MspInit+0x2e4>)
 8001a16:	f000 fd01 	bl	800241c <HAL_GPIO_Init>
}
 8001a1a:	bf00      	nop
 8001a1c:	3750      	adds	r7, #80	@ 0x50
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40010400 	.word	0x40010400
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020800 	.word	0x40020800

08001a30 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a36      	ldr	r2, [pc, #216]	@ (8001b18 <HAL_TIM_Base_MspInit+0xe8>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d116      	bne.n	8001a70 <HAL_TIM_Base_MspInit+0x40>
  {
    /* USER CODE BEGIN TIM6_MspInit 0 */

    /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001a42:	2300      	movs	r3, #0
 8001a44:	61fb      	str	r3, [r7, #28]
 8001a46:	4b35      	ldr	r3, [pc, #212]	@ (8001b1c <HAL_TIM_Base_MspInit+0xec>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4a:	4a34      	ldr	r2, [pc, #208]	@ (8001b1c <HAL_TIM_Base_MspInit+0xec>)
 8001a4c:	f043 0310 	orr.w	r3, r3, #16
 8001a50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a52:	4b32      	ldr	r3, [pc, #200]	@ (8001b1c <HAL_TIM_Base_MspInit+0xec>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a56:	f003 0310 	and.w	r3, r3, #16
 8001a5a:	61fb      	str	r3, [r7, #28]
 8001a5c:	69fb      	ldr	r3, [r7, #28]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2100      	movs	r1, #0
 8001a62:	2036      	movs	r0, #54	@ 0x36
 8001a64:	f000 fca3 	bl	80023ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a68:	2036      	movs	r0, #54	@ 0x36
 8001a6a:	f000 fcbc 	bl	80023e6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001a6e:	e04e      	b.n	8001b0e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM10)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a2a      	ldr	r2, [pc, #168]	@ (8001b20 <HAL_TIM_Base_MspInit+0xf0>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d10e      	bne.n	8001a98 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
 8001a7e:	4b27      	ldr	r3, [pc, #156]	@ (8001b1c <HAL_TIM_Base_MspInit+0xec>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a82:	4a26      	ldr	r2, [pc, #152]	@ (8001b1c <HAL_TIM_Base_MspInit+0xec>)
 8001a84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a8a:	4b24      	ldr	r3, [pc, #144]	@ (8001b1c <HAL_TIM_Base_MspInit+0xec>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a92:	61bb      	str	r3, [r7, #24]
 8001a94:	69bb      	ldr	r3, [r7, #24]
}
 8001a96:	e03a      	b.n	8001b0e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM11)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a21      	ldr	r2, [pc, #132]	@ (8001b24 <HAL_TIM_Base_MspInit+0xf4>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d10e      	bne.n	8001ac0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b1c <HAL_TIM_Base_MspInit+0xec>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aaa:	4a1c      	ldr	r2, [pc, #112]	@ (8001b1c <HAL_TIM_Base_MspInit+0xec>)
 8001aac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ab0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b1c <HAL_TIM_Base_MspInit+0xec>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697b      	ldr	r3, [r7, #20]
}
 8001abe:	e026      	b.n	8001b0e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM13)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a18      	ldr	r2, [pc, #96]	@ (8001b28 <HAL_TIM_Base_MspInit+0xf8>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d10e      	bne.n	8001ae8 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	4b13      	ldr	r3, [pc, #76]	@ (8001b1c <HAL_TIM_Base_MspInit+0xec>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad2:	4a12      	ldr	r2, [pc, #72]	@ (8001b1c <HAL_TIM_Base_MspInit+0xec>)
 8001ad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ada:	4b10      	ldr	r3, [pc, #64]	@ (8001b1c <HAL_TIM_Base_MspInit+0xec>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]
}
 8001ae6:	e012      	b.n	8001b0e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM14)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a0f      	ldr	r2, [pc, #60]	@ (8001b2c <HAL_TIM_Base_MspInit+0xfc>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d10d      	bne.n	8001b0e <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60fb      	str	r3, [r7, #12]
 8001af6:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <HAL_TIM_Base_MspInit+0xec>)
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	4a08      	ldr	r2, [pc, #32]	@ (8001b1c <HAL_TIM_Base_MspInit+0xec>)
 8001afc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b02:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <HAL_TIM_Base_MspInit+0xec>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b0a:	60fb      	str	r3, [r7, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
}
 8001b0e:	bf00      	nop
 8001b10:	3720      	adds	r7, #32
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40001000 	.word	0x40001000
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40014400 	.word	0x40014400
 8001b24:	40014800 	.word	0x40014800
 8001b28:	40001c00 	.word	0x40001c00
 8001b2c:	40002000 	.word	0x40002000

08001b30 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM9)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a15      	ldr	r2, [pc, #84]	@ (8001b94 <HAL_TIM_PWM_MspInit+0x64>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d10e      	bne.n	8001b60 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM9_MspInit 0 */

    /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b14      	ldr	r3, [pc, #80]	@ (8001b98 <HAL_TIM_PWM_MspInit+0x68>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4a:	4a13      	ldr	r2, [pc, #76]	@ (8001b98 <HAL_TIM_PWM_MspInit+0x68>)
 8001b4c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b52:	4b11      	ldr	r3, [pc, #68]	@ (8001b98 <HAL_TIM_PWM_MspInit+0x68>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM12_MspInit 1 */

    /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001b5e:	e012      	b.n	8001b86 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM12)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0d      	ldr	r2, [pc, #52]	@ (8001b9c <HAL_TIM_PWM_MspInit+0x6c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d10d      	bne.n	8001b86 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	60bb      	str	r3, [r7, #8]
 8001b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001b98 <HAL_TIM_PWM_MspInit+0x68>)
 8001b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b72:	4a09      	ldr	r2, [pc, #36]	@ (8001b98 <HAL_TIM_PWM_MspInit+0x68>)
 8001b74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b7a:	4b07      	ldr	r3, [pc, #28]	@ (8001b98 <HAL_TIM_PWM_MspInit+0x68>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b82:	60bb      	str	r3, [r7, #8]
 8001b84:	68bb      	ldr	r3, [r7, #8]
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40014000 	.word	0x40014000
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40001800 	.word	0x40001800

08001ba0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b08e      	sub	sp, #56	@ 0x38
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a6d      	ldr	r2, [pc, #436]	@ (8001d74 <HAL_TIM_MspPostInit+0x1d4>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d11e      	bne.n	8001c00 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM9_MspPostInit 0 */

    /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	623b      	str	r3, [r7, #32]
 8001bc6:	4b6c      	ldr	r3, [pc, #432]	@ (8001d78 <HAL_TIM_MspPostInit+0x1d8>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bca:	4a6b      	ldr	r2, [pc, #428]	@ (8001d78 <HAL_TIM_MspPostInit+0x1d8>)
 8001bcc:	f043 0310 	orr.w	r3, r3, #16
 8001bd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bd2:	4b69      	ldr	r3, [pc, #420]	@ (8001d78 <HAL_TIM_MspPostInit+0x1d8>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	f003 0310 	and.w	r3, r3, #16
 8001bda:	623b      	str	r3, [r7, #32]
 8001bdc:	6a3b      	ldr	r3, [r7, #32]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001bde:	2360      	movs	r3, #96	@ 0x60
 8001be0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bea:	2300      	movs	r3, #0
 8001bec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bf2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	4860      	ldr	r0, [pc, #384]	@ (8001d7c <HAL_TIM_MspPostInit+0x1dc>)
 8001bfa:	f000 fc0f 	bl	800241c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM14_MspPostInit 1 */

    /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8001bfe:	e0b5      	b.n	8001d6c <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM10)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a5e      	ldr	r2, [pc, #376]	@ (8001d80 <HAL_TIM_MspPostInit+0x1e0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d11f      	bne.n	8001c4a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	61fb      	str	r3, [r7, #28]
 8001c0e:	4b5a      	ldr	r3, [pc, #360]	@ (8001d78 <HAL_TIM_MspPostInit+0x1d8>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	4a59      	ldr	r2, [pc, #356]	@ (8001d78 <HAL_TIM_MspPostInit+0x1d8>)
 8001c14:	f043 0302 	orr.w	r3, r3, #2
 8001c18:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c1a:	4b57      	ldr	r3, [pc, #348]	@ (8001d78 <HAL_TIM_MspPostInit+0x1d8>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	61fb      	str	r3, [r7, #28]
 8001c24:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c2a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c34:	2300      	movs	r3, #0
 8001c36:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c40:	4619      	mov	r1, r3
 8001c42:	4850      	ldr	r0, [pc, #320]	@ (8001d84 <HAL_TIM_MspPostInit+0x1e4>)
 8001c44:	f000 fbea 	bl	800241c <HAL_GPIO_Init>
}
 8001c48:	e090      	b.n	8001d6c <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM11)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a4e      	ldr	r2, [pc, #312]	@ (8001d88 <HAL_TIM_MspPostInit+0x1e8>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d11f      	bne.n	8001c94 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c54:	2300      	movs	r3, #0
 8001c56:	61bb      	str	r3, [r7, #24]
 8001c58:	4b47      	ldr	r3, [pc, #284]	@ (8001d78 <HAL_TIM_MspPostInit+0x1d8>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c5c:	4a46      	ldr	r2, [pc, #280]	@ (8001d78 <HAL_TIM_MspPostInit+0x1d8>)
 8001c5e:	f043 0302 	orr.w	r3, r3, #2
 8001c62:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c64:	4b44      	ldr	r3, [pc, #272]	@ (8001d78 <HAL_TIM_MspPostInit+0x1d8>)
 8001c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c68:	f003 0302 	and.w	r3, r3, #2
 8001c6c:	61bb      	str	r3, [r7, #24]
 8001c6e:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001c82:	2303      	movs	r3, #3
 8001c84:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	483d      	ldr	r0, [pc, #244]	@ (8001d84 <HAL_TIM_MspPostInit+0x1e4>)
 8001c8e:	f000 fbc5 	bl	800241c <HAL_GPIO_Init>
}
 8001c92:	e06b      	b.n	8001d6c <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM12)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a3c      	ldr	r2, [pc, #240]	@ (8001d8c <HAL_TIM_MspPostInit+0x1ec>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d11f      	bne.n	8001cde <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	617b      	str	r3, [r7, #20]
 8001ca2:	4b35      	ldr	r3, [pc, #212]	@ (8001d78 <HAL_TIM_MspPostInit+0x1d8>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	4a34      	ldr	r2, [pc, #208]	@ (8001d78 <HAL_TIM_MspPostInit+0x1d8>)
 8001ca8:	f043 0302 	orr.w	r3, r3, #2
 8001cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cae:	4b32      	ldr	r3, [pc, #200]	@ (8001d78 <HAL_TIM_MspPostInit+0x1d8>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	617b      	str	r3, [r7, #20]
 8001cb8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001cba:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001cbe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001ccc:	2309      	movs	r3, #9
 8001cce:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	482b      	ldr	r0, [pc, #172]	@ (8001d84 <HAL_TIM_MspPostInit+0x1e4>)
 8001cd8:	f000 fba0 	bl	800241c <HAL_GPIO_Init>
}
 8001cdc:	e046      	b.n	8001d6c <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM13)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a2b      	ldr	r2, [pc, #172]	@ (8001d90 <HAL_TIM_MspPostInit+0x1f0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d11e      	bne.n	8001d26 <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ce8:	2300      	movs	r3, #0
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	4b22      	ldr	r3, [pc, #136]	@ (8001d78 <HAL_TIM_MspPostInit+0x1d8>)
 8001cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf0:	4a21      	ldr	r2, [pc, #132]	@ (8001d78 <HAL_TIM_MspPostInit+0x1d8>)
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf8:	4b1f      	ldr	r3, [pc, #124]	@ (8001d78 <HAL_TIM_MspPostInit+0x1d8>)
 8001cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	613b      	str	r3, [r7, #16]
 8001d02:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d04:	2340      	movs	r3, #64	@ 0x40
 8001d06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d10:	2300      	movs	r3, #0
 8001d12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8001d14:	2309      	movs	r3, #9
 8001d16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	481d      	ldr	r0, [pc, #116]	@ (8001d94 <HAL_TIM_MspPostInit+0x1f4>)
 8001d20:	f000 fb7c 	bl	800241c <HAL_GPIO_Init>
}
 8001d24:	e022      	b.n	8001d6c <HAL_TIM_MspPostInit+0x1cc>
  else if(htim->Instance==TIM14)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a1b      	ldr	r2, [pc, #108]	@ (8001d98 <HAL_TIM_MspPostInit+0x1f8>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d11d      	bne.n	8001d6c <HAL_TIM_MspPostInit+0x1cc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d30:	2300      	movs	r3, #0
 8001d32:	60fb      	str	r3, [r7, #12]
 8001d34:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <HAL_TIM_MspPostInit+0x1d8>)
 8001d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d38:	4a0f      	ldr	r2, [pc, #60]	@ (8001d78 <HAL_TIM_MspPostInit+0x1d8>)
 8001d3a:	f043 0301 	orr.w	r3, r3, #1
 8001d3e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d40:	4b0d      	ldr	r3, [pc, #52]	@ (8001d78 <HAL_TIM_MspPostInit+0x1d8>)
 8001d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d4c:	2380      	movs	r3, #128	@ 0x80
 8001d4e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d50:	2302      	movs	r3, #2
 8001d52:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d54:	2300      	movs	r3, #0
 8001d56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8001d5c:	2309      	movs	r3, #9
 8001d5e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d64:	4619      	mov	r1, r3
 8001d66:	480b      	ldr	r0, [pc, #44]	@ (8001d94 <HAL_TIM_MspPostInit+0x1f4>)
 8001d68:	f000 fb58 	bl	800241c <HAL_GPIO_Init>
}
 8001d6c:	bf00      	nop
 8001d6e:	3738      	adds	r7, #56	@ 0x38
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40014000 	.word	0x40014000
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40014400 	.word	0x40014400
 8001d84:	40020400 	.word	0x40020400
 8001d88:	40014800 	.word	0x40014800
 8001d8c:	40001800 	.word	0x40001800
 8001d90:	40001c00 	.word	0x40001c00
 8001d94:	40020000 	.word	0x40020000
 8001d98:	40002000 	.word	0x40002000

08001d9c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b092      	sub	sp, #72	@ 0x48
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a8e      	ldr	r2, [pc, #568]	@ (8001ff4 <HAL_UART_MspInit+0x258>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d12d      	bne.n	8001e1a <HAL_UART_MspInit+0x7e>
  {
    /* USER CODE BEGIN UART4_MspInit 0 */

    /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001dc2:	4b8d      	ldr	r3, [pc, #564]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc6:	4a8c      	ldr	r2, [pc, #560]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001dc8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001dcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dce:	4b8a      	ldr	r3, [pc, #552]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001dd6:	633b      	str	r3, [r7, #48]	@ 0x30
 8001dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001dde:	4b86      	ldr	r3, [pc, #536]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	4a85      	ldr	r2, [pc, #532]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001de4:	f043 0304 	orr.w	r3, r3, #4
 8001de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dea:	4b83      	ldr	r3, [pc, #524]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001df6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001dfa:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e04:	2303      	movs	r3, #3
 8001e06:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001e08:	2308      	movs	r3, #8
 8001e0a:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e0c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e10:	4619      	mov	r1, r3
 8001e12:	487a      	ldr	r0, [pc, #488]	@ (8001ffc <HAL_UART_MspInit+0x260>)
 8001e14:	f000 fb02 	bl	800241c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e18:	e0e7      	b.n	8001fea <HAL_UART_MspInit+0x24e>
  else if(huart->Instance==UART5)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a78      	ldr	r2, [pc, #480]	@ (8002000 <HAL_UART_MspInit+0x264>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d14b      	bne.n	8001ebc <HAL_UART_MspInit+0x120>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001e24:	2300      	movs	r3, #0
 8001e26:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e28:	4b73      	ldr	r3, [pc, #460]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2c:	4a72      	ldr	r2, [pc, #456]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001e2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001e32:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e34:	4b70      	ldr	r3, [pc, #448]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e3c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e40:	2300      	movs	r3, #0
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e44:	4b6c      	ldr	r3, [pc, #432]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e48:	4a6b      	ldr	r2, [pc, #428]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001e4a:	f043 0304 	orr.w	r3, r3, #4
 8001e4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e50:	4b69      	ldr	r3, [pc, #420]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	623b      	str	r3, [r7, #32]
 8001e60:	4b65      	ldr	r3, [pc, #404]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e64:	4a64      	ldr	r2, [pc, #400]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001e66:	f043 0308 	orr.w	r3, r3, #8
 8001e6a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e6c:	4b62      	ldr	r3, [pc, #392]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001e6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	623b      	str	r3, [r7, #32]
 8001e76:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001e78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e7c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e86:	2303      	movs	r3, #3
 8001e88:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001e8a:	2308      	movs	r3, #8
 8001e8c:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e8e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001e92:	4619      	mov	r1, r3
 8001e94:	4859      	ldr	r0, [pc, #356]	@ (8001ffc <HAL_UART_MspInit+0x260>)
 8001e96:	f000 fac1 	bl	800241c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e9a:	2304      	movs	r3, #4
 8001e9c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001eaa:	2308      	movs	r3, #8
 8001eac:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001eae:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	4853      	ldr	r0, [pc, #332]	@ (8002004 <HAL_UART_MspInit+0x268>)
 8001eb6:	f000 fab1 	bl	800241c <HAL_GPIO_Init>
}
 8001eba:	e096      	b.n	8001fea <HAL_UART_MspInit+0x24e>
  else if(huart->Instance==USART1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a51      	ldr	r2, [pc, #324]	@ (8002008 <HAL_UART_MspInit+0x26c>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d12d      	bne.n	8001f22 <HAL_UART_MspInit+0x186>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
 8001eca:	4b4b      	ldr	r3, [pc, #300]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ece:	4a4a      	ldr	r2, [pc, #296]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001ed0:	f043 0310 	orr.w	r3, r3, #16
 8001ed4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ed6:	4b48      	ldr	r3, [pc, #288]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eda:	f003 0310 	and.w	r3, r3, #16
 8001ede:	61fb      	str	r3, [r7, #28]
 8001ee0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61bb      	str	r3, [r7, #24]
 8001ee6:	4b44      	ldr	r3, [pc, #272]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eea:	4a43      	ldr	r2, [pc, #268]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef2:	4b41      	ldr	r3, [pc, #260]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	61bb      	str	r3, [r7, #24]
 8001efc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001efe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f02:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f10:	2307      	movs	r3, #7
 8001f12:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f14:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f18:	4619      	mov	r1, r3
 8001f1a:	483c      	ldr	r0, [pc, #240]	@ (800200c <HAL_UART_MspInit+0x270>)
 8001f1c:	f000 fa7e 	bl	800241c <HAL_GPIO_Init>
}
 8001f20:	e063      	b.n	8001fea <HAL_UART_MspInit+0x24e>
  else if(huart->Instance==USART2)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a3a      	ldr	r2, [pc, #232]	@ (8002010 <HAL_UART_MspInit+0x274>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d12c      	bne.n	8001f86 <HAL_UART_MspInit+0x1ea>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	4b31      	ldr	r3, [pc, #196]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f34:	4a30      	ldr	r2, [pc, #192]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001f36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f3a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f48:	2300      	movs	r3, #0
 8001f4a:	613b      	str	r3, [r7, #16]
 8001f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f50:	4a29      	ldr	r2, [pc, #164]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f58:	4b27      	ldr	r3, [pc, #156]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5c:	f003 0301 	and.w	r3, r3, #1
 8001f60:	613b      	str	r3, [r7, #16]
 8001f62:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f64:	230c      	movs	r3, #12
 8001f66:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f70:	2303      	movs	r3, #3
 8001f72:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f74:	2307      	movs	r3, #7
 8001f76:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f78:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4823      	ldr	r0, [pc, #140]	@ (800200c <HAL_UART_MspInit+0x270>)
 8001f80:	f000 fa4c 	bl	800241c <HAL_GPIO_Init>
}
 8001f84:	e031      	b.n	8001fea <HAL_UART_MspInit+0x24e>
  else if(huart->Instance==USART3)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a22      	ldr	r2, [pc, #136]	@ (8002014 <HAL_UART_MspInit+0x278>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d12c      	bne.n	8001fea <HAL_UART_MspInit+0x24e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	4b18      	ldr	r3, [pc, #96]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f98:	4a17      	ldr	r2, [pc, #92]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001f9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa0:	4b15      	ldr	r3, [pc, #84]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001fa8:	60fb      	str	r3, [r7, #12]
 8001faa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fac:	2300      	movs	r3, #0
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	4b11      	ldr	r3, [pc, #68]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb4:	4a10      	ldr	r2, [pc, #64]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001fb6:	f043 0302 	orr.w	r3, r3, #2
 8001fba:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff8 <HAL_UART_MspInit+0x25c>)
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001fc8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001fcc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	643b      	str	r3, [r7, #64]	@ 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fda:	2307      	movs	r3, #7
 8001fdc:	647b      	str	r3, [r7, #68]	@ 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fde:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	480c      	ldr	r0, [pc, #48]	@ (8002018 <HAL_UART_MspInit+0x27c>)
 8001fe6:	f000 fa19 	bl	800241c <HAL_GPIO_Init>
}
 8001fea:	bf00      	nop
 8001fec:	3748      	adds	r7, #72	@ 0x48
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	40004c00 	.word	0x40004c00
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40020800 	.word	0x40020800
 8002000:	40005000 	.word	0x40005000
 8002004:	40020c00 	.word	0x40020c00
 8002008:	40011000 	.word	0x40011000
 800200c:	40020000 	.word	0x40020000
 8002010:	40004400 	.word	0x40004400
 8002014:	40004800 	.word	0x40004800
 8002018:	40020400 	.word	0x40020400

0800201c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002020:	bf00      	nop
 8002022:	e7fd      	b.n	8002020 <NMI_Handler+0x4>

08002024 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002028:	bf00      	nop
 800202a:	e7fd      	b.n	8002028 <HardFault_Handler+0x4>

0800202c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002030:	bf00      	nop
 8002032:	e7fd      	b.n	8002030 <MemManage_Handler+0x4>

08002034 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002038:	bf00      	nop
 800203a:	e7fd      	b.n	8002038 <BusFault_Handler+0x4>

0800203c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002040:	bf00      	nop
 8002042:	e7fd      	b.n	8002040 <UsageFault_Handler+0x4>

08002044 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002064:	bf00      	nop
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002072:	f000 f8a1 	bl	80021b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	bd80      	pop	{r7, pc}

0800207a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800207a:	b480      	push	{r7}
 800207c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800207e:	bf00      	nop
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800208c:	4802      	ldr	r0, [pc, #8]	@ (8002098 <TIM6_DAC_IRQHandler+0x10>)
 800208e:	f001 fb37 	bl	8003700 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002092:	bf00      	nop
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	20000194 	.word	0x20000194

0800209c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020a0:	4b06      	ldr	r3, [pc, #24]	@ (80020bc <SystemInit+0x20>)
 80020a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020a6:	4a05      	ldr	r2, [pc, #20]	@ (80020bc <SystemInit+0x20>)
 80020a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020b0:	bf00      	nop
 80020b2:	46bd      	mov	sp, r7
 80020b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b8:	4770      	bx	lr
 80020ba:	bf00      	nop
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020c4:	f7ff ffea 	bl	800209c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020c8:	480c      	ldr	r0, [pc, #48]	@ (80020fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020ca:	490d      	ldr	r1, [pc, #52]	@ (8002100 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002104 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d0:	e002      	b.n	80020d8 <LoopCopyDataInit>

080020d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020d6:	3304      	adds	r3, #4

080020d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020dc:	d3f9      	bcc.n	80020d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020de:	4a0a      	ldr	r2, [pc, #40]	@ (8002108 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020e0:	4c0a      	ldr	r4, [pc, #40]	@ (800210c <LoopFillZerobss+0x22>)
  movs r3, #0
 80020e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020e4:	e001      	b.n	80020ea <LoopFillZerobss>

080020e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020e8:	3204      	adds	r2, #4

080020ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020ec:	d3fb      	bcc.n	80020e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020ee:	f002 fab9 	bl	8004664 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020f2:	f7fe fba5 	bl	8000840 <main>
  bx  lr    
 80020f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80020fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002100:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8002104:	080046ec 	.word	0x080046ec
  ldr r2, =_sbss
 8002108:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800210c:	20000580 	.word	0x20000580

08002110 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002110:	e7fe      	b.n	8002110 <ADC_IRQHandler>
	...

08002114 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002118:	4b0e      	ldr	r3, [pc, #56]	@ (8002154 <HAL_Init+0x40>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0d      	ldr	r2, [pc, #52]	@ (8002154 <HAL_Init+0x40>)
 800211e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002122:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002124:	4b0b      	ldr	r3, [pc, #44]	@ (8002154 <HAL_Init+0x40>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a0a      	ldr	r2, [pc, #40]	@ (8002154 <HAL_Init+0x40>)
 800212a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800212e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002130:	4b08      	ldr	r3, [pc, #32]	@ (8002154 <HAL_Init+0x40>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a07      	ldr	r2, [pc, #28]	@ (8002154 <HAL_Init+0x40>)
 8002136:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800213a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800213c:	2003      	movs	r0, #3
 800213e:	f000 f92b 	bl	8002398 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002142:	200f      	movs	r0, #15
 8002144:	f000 f808 	bl	8002158 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002148:	f7ff fad0 	bl	80016ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	40023c00 	.word	0x40023c00

08002158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002160:	4b12      	ldr	r3, [pc, #72]	@ (80021ac <HAL_InitTick+0x54>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b12      	ldr	r3, [pc, #72]	@ (80021b0 <HAL_InitTick+0x58>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	4619      	mov	r1, r3
 800216a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800216e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002172:	fbb2 f3f3 	udiv	r3, r2, r3
 8002176:	4618      	mov	r0, r3
 8002178:	f000 f943 	bl	8002402 <HAL_SYSTICK_Config>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e00e      	b.n	80021a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b0f      	cmp	r3, #15
 800218a:	d80a      	bhi.n	80021a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800218c:	2200      	movs	r2, #0
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	f04f 30ff 	mov.w	r0, #4294967295
 8002194:	f000 f90b 	bl	80023ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002198:	4a06      	ldr	r2, [pc, #24]	@ (80021b4 <HAL_InitTick+0x5c>)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
 80021a0:	e000      	b.n	80021a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000004 	.word	0x20000004
 80021b0:	2000000c 	.word	0x2000000c
 80021b4:	20000008 	.word	0x20000008

080021b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021bc:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <HAL_IncTick+0x20>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	461a      	mov	r2, r3
 80021c2:	4b06      	ldr	r3, [pc, #24]	@ (80021dc <HAL_IncTick+0x24>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4413      	add	r3, r2
 80021c8:	4a04      	ldr	r2, [pc, #16]	@ (80021dc <HAL_IncTick+0x24>)
 80021ca:	6013      	str	r3, [r2, #0]
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	2000000c 	.word	0x2000000c
 80021dc:	2000057c 	.word	0x2000057c

080021e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  return uwTick;
 80021e4:	4b03      	ldr	r3, [pc, #12]	@ (80021f4 <HAL_GetTick+0x14>)
 80021e6:	681b      	ldr	r3, [r3, #0]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	2000057c 	.word	0x2000057c

080021f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002208:	4b0c      	ldr	r3, [pc, #48]	@ (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800220a:	68db      	ldr	r3, [r3, #12]
 800220c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002214:	4013      	ands	r3, r2
 8002216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002220:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002224:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800222a:	4a04      	ldr	r2, [pc, #16]	@ (800223c <__NVIC_SetPriorityGrouping+0x44>)
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	60d3      	str	r3, [r2, #12]
}
 8002230:	bf00      	nop
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002244:	4b04      	ldr	r3, [pc, #16]	@ (8002258 <__NVIC_GetPriorityGrouping+0x18>)
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	0a1b      	lsrs	r3, r3, #8
 800224a:	f003 0307 	and.w	r3, r3, #7
}
 800224e:	4618      	mov	r0, r3
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800226a:	2b00      	cmp	r3, #0
 800226c:	db0b      	blt.n	8002286 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	f003 021f 	and.w	r2, r3, #31
 8002274:	4907      	ldr	r1, [pc, #28]	@ (8002294 <__NVIC_EnableIRQ+0x38>)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	095b      	lsrs	r3, r3, #5
 800227c:	2001      	movs	r0, #1
 800227e:	fa00 f202 	lsl.w	r2, r0, r2
 8002282:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr
 8002292:	bf00      	nop
 8002294:	e000e100 	.word	0xe000e100

08002298 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	6039      	str	r1, [r7, #0]
 80022a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	db0a      	blt.n	80022c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	490c      	ldr	r1, [pc, #48]	@ (80022e4 <__NVIC_SetPriority+0x4c>)
 80022b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b6:	0112      	lsls	r2, r2, #4
 80022b8:	b2d2      	uxtb	r2, r2
 80022ba:	440b      	add	r3, r1
 80022bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022c0:	e00a      	b.n	80022d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	4908      	ldr	r1, [pc, #32]	@ (80022e8 <__NVIC_SetPriority+0x50>)
 80022c8:	79fb      	ldrb	r3, [r7, #7]
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	3b04      	subs	r3, #4
 80022d0:	0112      	lsls	r2, r2, #4
 80022d2:	b2d2      	uxtb	r2, r2
 80022d4:	440b      	add	r3, r1
 80022d6:	761a      	strb	r2, [r3, #24]
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr
 80022e4:	e000e100 	.word	0xe000e100
 80022e8:	e000ed00 	.word	0xe000ed00

080022ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b089      	sub	sp, #36	@ 0x24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	60f8      	str	r0, [r7, #12]
 80022f4:	60b9      	str	r1, [r7, #8]
 80022f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f1c3 0307 	rsb	r3, r3, #7
 8002306:	2b04      	cmp	r3, #4
 8002308:	bf28      	it	cs
 800230a:	2304      	movcs	r3, #4
 800230c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3304      	adds	r3, #4
 8002312:	2b06      	cmp	r3, #6
 8002314:	d902      	bls.n	800231c <NVIC_EncodePriority+0x30>
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	3b03      	subs	r3, #3
 800231a:	e000      	b.n	800231e <NVIC_EncodePriority+0x32>
 800231c:	2300      	movs	r3, #0
 800231e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002320:	f04f 32ff 	mov.w	r2, #4294967295
 8002324:	69bb      	ldr	r3, [r7, #24]
 8002326:	fa02 f303 	lsl.w	r3, r2, r3
 800232a:	43da      	mvns	r2, r3
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	401a      	ands	r2, r3
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002334:	f04f 31ff 	mov.w	r1, #4294967295
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	fa01 f303 	lsl.w	r3, r1, r3
 800233e:	43d9      	mvns	r1, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002344:	4313      	orrs	r3, r2
         );
}
 8002346:	4618      	mov	r0, r3
 8002348:	3724      	adds	r7, #36	@ 0x24
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
	...

08002354 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3b01      	subs	r3, #1
 8002360:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002364:	d301      	bcc.n	800236a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002366:	2301      	movs	r3, #1
 8002368:	e00f      	b.n	800238a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236a:	4a0a      	ldr	r2, [pc, #40]	@ (8002394 <SysTick_Config+0x40>)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002372:	210f      	movs	r1, #15
 8002374:	f04f 30ff 	mov.w	r0, #4294967295
 8002378:	f7ff ff8e 	bl	8002298 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800237c:	4b05      	ldr	r3, [pc, #20]	@ (8002394 <SysTick_Config+0x40>)
 800237e:	2200      	movs	r2, #0
 8002380:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002382:	4b04      	ldr	r3, [pc, #16]	@ (8002394 <SysTick_Config+0x40>)
 8002384:	2207      	movs	r2, #7
 8002386:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3708      	adds	r7, #8
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	e000e010 	.word	0xe000e010

08002398 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b082      	sub	sp, #8
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f7ff ff29 	bl	80021f8 <__NVIC_SetPriorityGrouping>
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b086      	sub	sp, #24
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	60b9      	str	r1, [r7, #8]
 80023b8:	607a      	str	r2, [r7, #4]
 80023ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023c0:	f7ff ff3e 	bl	8002240 <__NVIC_GetPriorityGrouping>
 80023c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	6978      	ldr	r0, [r7, #20]
 80023cc:	f7ff ff8e 	bl	80022ec <NVIC_EncodePriority>
 80023d0:	4602      	mov	r2, r0
 80023d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d6:	4611      	mov	r1, r2
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff ff5d 	bl	8002298 <__NVIC_SetPriority>
}
 80023de:	bf00      	nop
 80023e0:	3718      	adds	r7, #24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b082      	sub	sp, #8
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	4603      	mov	r3, r0
 80023ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff31 	bl	800225c <__NVIC_EnableIRQ>
}
 80023fa:	bf00      	nop
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff ffa2 	bl	8002354 <SysTick_Config>
 8002410:	4603      	mov	r3, r0
}
 8002412:	4618      	mov	r0, r3
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
	...

0800241c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800241c:	b480      	push	{r7}
 800241e:	b089      	sub	sp, #36	@ 0x24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800242e:	2300      	movs	r3, #0
 8002430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
 8002436:	e16b      	b.n	8002710 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002438:	2201      	movs	r2, #1
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	fa02 f303 	lsl.w	r3, r2, r3
 8002440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	4013      	ands	r3, r2
 800244a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800244c:	693a      	ldr	r2, [r7, #16]
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	429a      	cmp	r2, r3
 8002452:	f040 815a 	bne.w	800270a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	2b01      	cmp	r3, #1
 8002460:	d005      	beq.n	800246e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800246a:	2b02      	cmp	r3, #2
 800246c:	d130      	bne.n	80024d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	2203      	movs	r2, #3
 800247a:	fa02 f303 	lsl.w	r3, r2, r3
 800247e:	43db      	mvns	r3, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4013      	ands	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	68da      	ldr	r2, [r3, #12]
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024a4:	2201      	movs	r2, #1
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	091b      	lsrs	r3, r3, #4
 80024ba:	f003 0201 	and.w	r2, r3, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f003 0303 	and.w	r3, r3, #3
 80024d8:	2b03      	cmp	r3, #3
 80024da:	d017      	beq.n	800250c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	2203      	movs	r2, #3
 80024e8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ec:	43db      	mvns	r3, r3
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	4013      	ands	r3, r2
 80024f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4313      	orrs	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f003 0303 	and.w	r3, r3, #3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d123      	bne.n	8002560 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	08da      	lsrs	r2, r3, #3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3208      	adds	r2, #8
 8002520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	f003 0307 	and.w	r3, r3, #7
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	220f      	movs	r2, #15
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	08da      	lsrs	r2, r3, #3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3208      	adds	r2, #8
 800255a:	69b9      	ldr	r1, [r7, #24]
 800255c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	2203      	movs	r2, #3
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	43db      	mvns	r3, r3
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	4013      	ands	r3, r2
 8002576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	f003 0203 	and.w	r2, r3, #3
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800259c:	2b00      	cmp	r3, #0
 800259e:	f000 80b4 	beq.w	800270a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b60      	ldr	r3, [pc, #384]	@ (8002728 <HAL_GPIO_Init+0x30c>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025aa:	4a5f      	ldr	r2, [pc, #380]	@ (8002728 <HAL_GPIO_Init+0x30c>)
 80025ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80025b2:	4b5d      	ldr	r3, [pc, #372]	@ (8002728 <HAL_GPIO_Init+0x30c>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025be:	4a5b      	ldr	r2, [pc, #364]	@ (800272c <HAL_GPIO_Init+0x310>)
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	089b      	lsrs	r3, r3, #2
 80025c4:	3302      	adds	r3, #2
 80025c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	220f      	movs	r2, #15
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	4013      	ands	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a52      	ldr	r2, [pc, #328]	@ (8002730 <HAL_GPIO_Init+0x314>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d02b      	beq.n	8002642 <HAL_GPIO_Init+0x226>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a51      	ldr	r2, [pc, #324]	@ (8002734 <HAL_GPIO_Init+0x318>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d025      	beq.n	800263e <HAL_GPIO_Init+0x222>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a50      	ldr	r2, [pc, #320]	@ (8002738 <HAL_GPIO_Init+0x31c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d01f      	beq.n	800263a <HAL_GPIO_Init+0x21e>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a4f      	ldr	r2, [pc, #316]	@ (800273c <HAL_GPIO_Init+0x320>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d019      	beq.n	8002636 <HAL_GPIO_Init+0x21a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a4e      	ldr	r2, [pc, #312]	@ (8002740 <HAL_GPIO_Init+0x324>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d013      	beq.n	8002632 <HAL_GPIO_Init+0x216>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a4d      	ldr	r2, [pc, #308]	@ (8002744 <HAL_GPIO_Init+0x328>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00d      	beq.n	800262e <HAL_GPIO_Init+0x212>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a4c      	ldr	r2, [pc, #304]	@ (8002748 <HAL_GPIO_Init+0x32c>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d007      	beq.n	800262a <HAL_GPIO_Init+0x20e>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a4b      	ldr	r2, [pc, #300]	@ (800274c <HAL_GPIO_Init+0x330>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d101      	bne.n	8002626 <HAL_GPIO_Init+0x20a>
 8002622:	2307      	movs	r3, #7
 8002624:	e00e      	b.n	8002644 <HAL_GPIO_Init+0x228>
 8002626:	2308      	movs	r3, #8
 8002628:	e00c      	b.n	8002644 <HAL_GPIO_Init+0x228>
 800262a:	2306      	movs	r3, #6
 800262c:	e00a      	b.n	8002644 <HAL_GPIO_Init+0x228>
 800262e:	2305      	movs	r3, #5
 8002630:	e008      	b.n	8002644 <HAL_GPIO_Init+0x228>
 8002632:	2304      	movs	r3, #4
 8002634:	e006      	b.n	8002644 <HAL_GPIO_Init+0x228>
 8002636:	2303      	movs	r3, #3
 8002638:	e004      	b.n	8002644 <HAL_GPIO_Init+0x228>
 800263a:	2302      	movs	r3, #2
 800263c:	e002      	b.n	8002644 <HAL_GPIO_Init+0x228>
 800263e:	2301      	movs	r3, #1
 8002640:	e000      	b.n	8002644 <HAL_GPIO_Init+0x228>
 8002642:	2300      	movs	r3, #0
 8002644:	69fa      	ldr	r2, [r7, #28]
 8002646:	f002 0203 	and.w	r2, r2, #3
 800264a:	0092      	lsls	r2, r2, #2
 800264c:	4093      	lsls	r3, r2
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002654:	4935      	ldr	r1, [pc, #212]	@ (800272c <HAL_GPIO_Init+0x310>)
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	089b      	lsrs	r3, r3, #2
 800265a:	3302      	adds	r3, #2
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002662:	4b3b      	ldr	r3, [pc, #236]	@ (8002750 <HAL_GPIO_Init+0x334>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	43db      	mvns	r3, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002686:	4a32      	ldr	r2, [pc, #200]	@ (8002750 <HAL_GPIO_Init+0x334>)
 8002688:	69bb      	ldr	r3, [r7, #24]
 800268a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800268c:	4b30      	ldr	r3, [pc, #192]	@ (8002750 <HAL_GPIO_Init+0x334>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	43db      	mvns	r3, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4013      	ands	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026b0:	4a27      	ldr	r2, [pc, #156]	@ (8002750 <HAL_GPIO_Init+0x334>)
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026b6:	4b26      	ldr	r3, [pc, #152]	@ (8002750 <HAL_GPIO_Init+0x334>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026da:	4a1d      	ldr	r2, [pc, #116]	@ (8002750 <HAL_GPIO_Init+0x334>)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026e0:	4b1b      	ldr	r3, [pc, #108]	@ (8002750 <HAL_GPIO_Init+0x334>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	43db      	mvns	r3, r3
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	4013      	ands	r3, r2
 80026ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4313      	orrs	r3, r2
 8002702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002704:	4a12      	ldr	r2, [pc, #72]	@ (8002750 <HAL_GPIO_Init+0x334>)
 8002706:	69bb      	ldr	r3, [r7, #24]
 8002708:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	3301      	adds	r3, #1
 800270e:	61fb      	str	r3, [r7, #28]
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	2b0f      	cmp	r3, #15
 8002714:	f67f ae90 	bls.w	8002438 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002718:	bf00      	nop
 800271a:	bf00      	nop
 800271c:	3724      	adds	r7, #36	@ 0x24
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40023800 	.word	0x40023800
 800272c:	40013800 	.word	0x40013800
 8002730:	40020000 	.word	0x40020000
 8002734:	40020400 	.word	0x40020400
 8002738:	40020800 	.word	0x40020800
 800273c:	40020c00 	.word	0x40020c00
 8002740:	40021000 	.word	0x40021000
 8002744:	40021400 	.word	0x40021400
 8002748:	40021800 	.word	0x40021800
 800274c:	40021c00 	.word	0x40021c00
 8002750:	40013c00 	.word	0x40013c00

08002754 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	887b      	ldrh	r3, [r7, #2]
 8002766:	4013      	ands	r3, r2
 8002768:	2b00      	cmp	r3, #0
 800276a:	d002      	beq.n	8002772 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800276c:	2301      	movs	r3, #1
 800276e:	73fb      	strb	r3, [r7, #15]
 8002770:	e001      	b.n	8002776 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002772:	2300      	movs	r3, #0
 8002774:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002776:	7bfb      	ldrb	r3, [r7, #15]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3714      	adds	r7, #20
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	807b      	strh	r3, [r7, #2]
 8002790:	4613      	mov	r3, r2
 8002792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002794:	787b      	ldrb	r3, [r7, #1]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800279a:	887a      	ldrh	r2, [r7, #2]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027a0:	e003      	b.n	80027aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027a2:	887b      	ldrh	r3, [r7, #2]
 80027a4:	041a      	lsls	r2, r3, #16
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	619a      	str	r2, [r3, #24]
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
	...

080027b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e267      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d075      	beq.n	80028c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027d6:	4b88      	ldr	r3, [pc, #544]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 030c 	and.w	r3, r3, #12
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d00c      	beq.n	80027fc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027e2:	4b85      	ldr	r3, [pc, #532]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d112      	bne.n	8002814 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ee:	4b82      	ldr	r3, [pc, #520]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027fa:	d10b      	bne.n	8002814 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027fc:	4b7e      	ldr	r3, [pc, #504]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d05b      	beq.n	80028c0 <HAL_RCC_OscConfig+0x108>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d157      	bne.n	80028c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e242      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800281c:	d106      	bne.n	800282c <HAL_RCC_OscConfig+0x74>
 800281e:	4b76      	ldr	r3, [pc, #472]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a75      	ldr	r2, [pc, #468]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	e01d      	b.n	8002868 <HAL_RCC_OscConfig+0xb0>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002834:	d10c      	bne.n	8002850 <HAL_RCC_OscConfig+0x98>
 8002836:	4b70      	ldr	r3, [pc, #448]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a6f      	ldr	r2, [pc, #444]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 800283c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002840:	6013      	str	r3, [r2, #0]
 8002842:	4b6d      	ldr	r3, [pc, #436]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a6c      	ldr	r2, [pc, #432]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002848:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800284c:	6013      	str	r3, [r2, #0]
 800284e:	e00b      	b.n	8002868 <HAL_RCC_OscConfig+0xb0>
 8002850:	4b69      	ldr	r3, [pc, #420]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a68      	ldr	r2, [pc, #416]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002856:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800285a:	6013      	str	r3, [r2, #0]
 800285c:	4b66      	ldr	r3, [pc, #408]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a65      	ldr	r2, [pc, #404]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002862:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002866:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d013      	beq.n	8002898 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002870:	f7ff fcb6 	bl	80021e0 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002878:	f7ff fcb2 	bl	80021e0 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b64      	cmp	r3, #100	@ 0x64
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e207      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288a:	4b5b      	ldr	r3, [pc, #364]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0f0      	beq.n	8002878 <HAL_RCC_OscConfig+0xc0>
 8002896:	e014      	b.n	80028c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002898:	f7ff fca2 	bl	80021e0 <HAL_GetTick>
 800289c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028a0:	f7ff fc9e 	bl	80021e0 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b64      	cmp	r3, #100	@ 0x64
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e1f3      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028b2:	4b51      	ldr	r3, [pc, #324]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1f0      	bne.n	80028a0 <HAL_RCC_OscConfig+0xe8>
 80028be:	e000      	b.n	80028c2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d063      	beq.n	8002996 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028ce:	4b4a      	ldr	r3, [pc, #296]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f003 030c 	and.w	r3, r3, #12
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00b      	beq.n	80028f2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028da:	4b47      	ldr	r3, [pc, #284]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d11c      	bne.n	8002920 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028e6:	4b44      	ldr	r3, [pc, #272]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d116      	bne.n	8002920 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028f2:	4b41      	ldr	r3, [pc, #260]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d005      	beq.n	800290a <HAL_RCC_OscConfig+0x152>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d001      	beq.n	800290a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e1c7      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290a:	4b3b      	ldr	r3, [pc, #236]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	00db      	lsls	r3, r3, #3
 8002918:	4937      	ldr	r1, [pc, #220]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 800291a:	4313      	orrs	r3, r2
 800291c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291e:	e03a      	b.n	8002996 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d020      	beq.n	800296a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002928:	4b34      	ldr	r3, [pc, #208]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 800292a:	2201      	movs	r2, #1
 800292c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292e:	f7ff fc57 	bl	80021e0 <HAL_GetTick>
 8002932:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002934:	e008      	b.n	8002948 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002936:	f7ff fc53 	bl	80021e0 <HAL_GetTick>
 800293a:	4602      	mov	r2, r0
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	1ad3      	subs	r3, r2, r3
 8002940:	2b02      	cmp	r3, #2
 8002942:	d901      	bls.n	8002948 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002944:	2303      	movs	r3, #3
 8002946:	e1a8      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002948:	4b2b      	ldr	r3, [pc, #172]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d0f0      	beq.n	8002936 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002954:	4b28      	ldr	r3, [pc, #160]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4925      	ldr	r1, [pc, #148]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 8002964:	4313      	orrs	r3, r2
 8002966:	600b      	str	r3, [r1, #0]
 8002968:	e015      	b.n	8002996 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800296a:	4b24      	ldr	r3, [pc, #144]	@ (80029fc <HAL_RCC_OscConfig+0x244>)
 800296c:	2200      	movs	r2, #0
 800296e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002970:	f7ff fc36 	bl	80021e0 <HAL_GetTick>
 8002974:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002976:	e008      	b.n	800298a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002978:	f7ff fc32 	bl	80021e0 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d901      	bls.n	800298a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	e187      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800298a:	4b1b      	ldr	r3, [pc, #108]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b00      	cmp	r3, #0
 8002994:	d1f0      	bne.n	8002978 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d036      	beq.n	8002a10 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d016      	beq.n	80029d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029aa:	4b15      	ldr	r3, [pc, #84]	@ (8002a00 <HAL_RCC_OscConfig+0x248>)
 80029ac:	2201      	movs	r2, #1
 80029ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b0:	f7ff fc16 	bl	80021e0 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b6:	e008      	b.n	80029ca <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029b8:	f7ff fc12 	bl	80021e0 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d901      	bls.n	80029ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	e167      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ca:	4b0b      	ldr	r3, [pc, #44]	@ (80029f8 <HAL_RCC_OscConfig+0x240>)
 80029cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029ce:	f003 0302 	and.w	r3, r3, #2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d0f0      	beq.n	80029b8 <HAL_RCC_OscConfig+0x200>
 80029d6:	e01b      	b.n	8002a10 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029d8:	4b09      	ldr	r3, [pc, #36]	@ (8002a00 <HAL_RCC_OscConfig+0x248>)
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029de:	f7ff fbff 	bl	80021e0 <HAL_GetTick>
 80029e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e4:	e00e      	b.n	8002a04 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e6:	f7ff fbfb 	bl	80021e0 <HAL_GetTick>
 80029ea:	4602      	mov	r2, r0
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b02      	cmp	r3, #2
 80029f2:	d907      	bls.n	8002a04 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	e150      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
 80029f8:	40023800 	.word	0x40023800
 80029fc:	42470000 	.word	0x42470000
 8002a00:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a04:	4b88      	ldr	r3, [pc, #544]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a08:	f003 0302 	and.w	r3, r3, #2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1ea      	bne.n	80029e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0304 	and.w	r3, r3, #4
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	f000 8097 	beq.w	8002b4c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a22:	4b81      	ldr	r3, [pc, #516]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d10f      	bne.n	8002a4e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	4b7d      	ldr	r3, [pc, #500]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a36:	4a7c      	ldr	r2, [pc, #496]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a3e:	4b7a      	ldr	r3, [pc, #488]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a46:	60bb      	str	r3, [r7, #8]
 8002a48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4e:	4b77      	ldr	r3, [pc, #476]	@ (8002c2c <HAL_RCC_OscConfig+0x474>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d118      	bne.n	8002a8c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a5a:	4b74      	ldr	r3, [pc, #464]	@ (8002c2c <HAL_RCC_OscConfig+0x474>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a73      	ldr	r2, [pc, #460]	@ (8002c2c <HAL_RCC_OscConfig+0x474>)
 8002a60:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a66:	f7ff fbbb 	bl	80021e0 <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a6e:	f7ff fbb7 	bl	80021e0 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e10c      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a80:	4b6a      	ldr	r3, [pc, #424]	@ (8002c2c <HAL_RCC_OscConfig+0x474>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d106      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x2ea>
 8002a94:	4b64      	ldr	r3, [pc, #400]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a98:	4a63      	ldr	r2, [pc, #396]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002a9a:	f043 0301 	orr.w	r3, r3, #1
 8002a9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002aa0:	e01c      	b.n	8002adc <HAL_RCC_OscConfig+0x324>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	2b05      	cmp	r3, #5
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x30c>
 8002aaa:	4b5f      	ldr	r3, [pc, #380]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aae:	4a5e      	ldr	r2, [pc, #376]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002ab0:	f043 0304 	orr.w	r3, r3, #4
 8002ab4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ab6:	4b5c      	ldr	r3, [pc, #368]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002ab8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aba:	4a5b      	ldr	r2, [pc, #364]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ac2:	e00b      	b.n	8002adc <HAL_RCC_OscConfig+0x324>
 8002ac4:	4b58      	ldr	r3, [pc, #352]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ac8:	4a57      	ldr	r2, [pc, #348]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002aca:	f023 0301 	bic.w	r3, r3, #1
 8002ace:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ad0:	4b55      	ldr	r3, [pc, #340]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ad4:	4a54      	ldr	r2, [pc, #336]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002ad6:	f023 0304 	bic.w	r3, r3, #4
 8002ada:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d015      	beq.n	8002b10 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae4:	f7ff fb7c 	bl	80021e0 <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aea:	e00a      	b.n	8002b02 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aec:	f7ff fb78 	bl	80021e0 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e0cb      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b02:	4b49      	ldr	r3, [pc, #292]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d0ee      	beq.n	8002aec <HAL_RCC_OscConfig+0x334>
 8002b0e:	e014      	b.n	8002b3a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b10:	f7ff fb66 	bl	80021e0 <HAL_GetTick>
 8002b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b16:	e00a      	b.n	8002b2e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b18:	f7ff fb62 	bl	80021e0 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d901      	bls.n	8002b2e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b2a:	2303      	movs	r3, #3
 8002b2c:	e0b5      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b2e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b32:	f003 0302 	and.w	r3, r3, #2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1ee      	bne.n	8002b18 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b3a:	7dfb      	ldrb	r3, [r7, #23]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d105      	bne.n	8002b4c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b40:	4b39      	ldr	r3, [pc, #228]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b44:	4a38      	ldr	r2, [pc, #224]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b46:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b4a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 80a1 	beq.w	8002c98 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b56:	4b34      	ldr	r3, [pc, #208]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
 8002b5e:	2b08      	cmp	r3, #8
 8002b60:	d05c      	beq.n	8002c1c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	d141      	bne.n	8002bee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6a:	4b31      	ldr	r3, [pc, #196]	@ (8002c30 <HAL_RCC_OscConfig+0x478>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b70:	f7ff fb36 	bl	80021e0 <HAL_GetTick>
 8002b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b78:	f7ff fb32 	bl	80021e0 <HAL_GetTick>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e087      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b8a:	4b27      	ldr	r3, [pc, #156]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1f0      	bne.n	8002b78 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69da      	ldr	r2, [r3, #28]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a1b      	ldr	r3, [r3, #32]
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba4:	019b      	lsls	r3, r3, #6
 8002ba6:	431a      	orrs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bac:	085b      	lsrs	r3, r3, #1
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	041b      	lsls	r3, r3, #16
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb8:	061b      	lsls	r3, r3, #24
 8002bba:	491b      	ldr	r1, [pc, #108]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8002c30 <HAL_RCC_OscConfig+0x478>)
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc6:	f7ff fb0b 	bl	80021e0 <HAL_GetTick>
 8002bca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bcc:	e008      	b.n	8002be0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bce:	f7ff fb07 	bl	80021e0 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d901      	bls.n	8002be0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e05c      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002be0:	4b11      	ldr	r3, [pc, #68]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d0f0      	beq.n	8002bce <HAL_RCC_OscConfig+0x416>
 8002bec:	e054      	b.n	8002c98 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bee:	4b10      	ldr	r3, [pc, #64]	@ (8002c30 <HAL_RCC_OscConfig+0x478>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bf4:	f7ff faf4 	bl	80021e0 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfc:	f7ff faf0 	bl	80021e0 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e045      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c0e:	4b06      	ldr	r3, [pc, #24]	@ (8002c28 <HAL_RCC_OscConfig+0x470>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0x444>
 8002c1a:	e03d      	b.n	8002c98 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	699b      	ldr	r3, [r3, #24]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d107      	bne.n	8002c34 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e038      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
 8002c28:	40023800 	.word	0x40023800
 8002c2c:	40007000 	.word	0x40007000
 8002c30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c34:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca4 <HAL_RCC_OscConfig+0x4ec>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	699b      	ldr	r3, [r3, #24]
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d028      	beq.n	8002c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d121      	bne.n	8002c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d11a      	bne.n	8002c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c64:	4013      	ands	r3, r2
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d111      	bne.n	8002c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7a:	085b      	lsrs	r3, r3, #1
 8002c7c:	3b01      	subs	r3, #1
 8002c7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d107      	bne.n	8002c94 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d001      	beq.n	8002c98 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3718      	adds	r7, #24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40023800 	.word	0x40023800

08002ca8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d101      	bne.n	8002cbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e0cc      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002cbc:	4b68      	ldr	r3, [pc, #416]	@ (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d90c      	bls.n	8002ce4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	4b65      	ldr	r3, [pc, #404]	@ (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd2:	4b63      	ldr	r3, [pc, #396]	@ (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0307 	and.w	r3, r3, #7
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e0b8      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d020      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0304 	and.w	r3, r3, #4
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cfc:	4b59      	ldr	r3, [pc, #356]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	4a58      	ldr	r2, [pc, #352]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002d06:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0308 	and.w	r3, r3, #8
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d005      	beq.n	8002d20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d14:	4b53      	ldr	r3, [pc, #332]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	4a52      	ldr	r2, [pc, #328]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002d1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d20:	4b50      	ldr	r3, [pc, #320]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	494d      	ldr	r1, [pc, #308]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d044      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d107      	bne.n	8002d56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d46:	4b47      	ldr	r3, [pc, #284]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d119      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e07f      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d003      	beq.n	8002d66 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d107      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d66:	4b3f      	ldr	r3, [pc, #252]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d109      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e06f      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d76:	4b3b      	ldr	r3, [pc, #236]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f003 0302 	and.w	r3, r3, #2
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e067      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d86:	4b37      	ldr	r3, [pc, #220]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f023 0203 	bic.w	r2, r3, #3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	4934      	ldr	r1, [pc, #208]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d98:	f7ff fa22 	bl	80021e0 <HAL_GetTick>
 8002d9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9e:	e00a      	b.n	8002db6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002da0:	f7ff fa1e 	bl	80021e0 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d901      	bls.n	8002db6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e04f      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002db6:	4b2b      	ldr	r3, [pc, #172]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	f003 020c 	and.w	r2, r3, #12
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d1eb      	bne.n	8002da0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002dc8:	4b25      	ldr	r3, [pc, #148]	@ (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d20c      	bcs.n	8002df0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dd6:	4b22      	ldr	r3, [pc, #136]	@ (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dde:	4b20      	ldr	r3, [pc, #128]	@ (8002e60 <HAL_RCC_ClockConfig+0x1b8>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	683a      	ldr	r2, [r7, #0]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	d001      	beq.n	8002df0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e032      	b.n	8002e56 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0304 	and.w	r3, r3, #4
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d008      	beq.n	8002e0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dfc:	4b19      	ldr	r3, [pc, #100]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	4916      	ldr	r1, [pc, #88]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d009      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e1a:	4b12      	ldr	r3, [pc, #72]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	00db      	lsls	r3, r3, #3
 8002e28:	490e      	ldr	r1, [pc, #56]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002e2e:	f000 f821 	bl	8002e74 <HAL_RCC_GetSysClockFreq>
 8002e32:	4602      	mov	r2, r0
 8002e34:	4b0b      	ldr	r3, [pc, #44]	@ (8002e64 <HAL_RCC_ClockConfig+0x1bc>)
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	091b      	lsrs	r3, r3, #4
 8002e3a:	f003 030f 	and.w	r3, r3, #15
 8002e3e:	490a      	ldr	r1, [pc, #40]	@ (8002e68 <HAL_RCC_ClockConfig+0x1c0>)
 8002e40:	5ccb      	ldrb	r3, [r1, r3]
 8002e42:	fa22 f303 	lsr.w	r3, r2, r3
 8002e46:	4a09      	ldr	r2, [pc, #36]	@ (8002e6c <HAL_RCC_ClockConfig+0x1c4>)
 8002e48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e4a:	4b09      	ldr	r3, [pc, #36]	@ (8002e70 <HAL_RCC_ClockConfig+0x1c8>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff f982 	bl	8002158 <HAL_InitTick>

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	40023c00 	.word	0x40023c00
 8002e64:	40023800 	.word	0x40023800
 8002e68:	080046c4 	.word	0x080046c4
 8002e6c:	20000004 	.word	0x20000004
 8002e70:	20000008 	.word	0x20000008

08002e74 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e78:	b094      	sub	sp, #80	@ 0x50
 8002e7a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002e80:	2300      	movs	r3, #0
 8002e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e8c:	4b79      	ldr	r3, [pc, #484]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	f003 030c 	and.w	r3, r3, #12
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d00d      	beq.n	8002eb4 <HAL_RCC_GetSysClockFreq+0x40>
 8002e98:	2b08      	cmp	r3, #8
 8002e9a:	f200 80e1 	bhi.w	8003060 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d003      	beq.n	8002eae <HAL_RCC_GetSysClockFreq+0x3a>
 8002ea6:	e0db      	b.n	8003060 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ea8:	4b73      	ldr	r3, [pc, #460]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x204>)
 8002eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eac:	e0db      	b.n	8003066 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002eae:	4b73      	ldr	r3, [pc, #460]	@ (800307c <HAL_RCC_GetSysClockFreq+0x208>)
 8002eb0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002eb2:	e0d8      	b.n	8003066 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002eb4:	4b6f      	ldr	r3, [pc, #444]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ebc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ebe:	4b6d      	ldr	r3, [pc, #436]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d063      	beq.n	8002f92 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eca:	4b6a      	ldr	r3, [pc, #424]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	099b      	lsrs	r3, r3, #6
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002ed4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002ed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002edc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ede:	2300      	movs	r3, #0
 8002ee0:	637b      	str	r3, [r7, #52]	@ 0x34
 8002ee2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002ee6:	4622      	mov	r2, r4
 8002ee8:	462b      	mov	r3, r5
 8002eea:	f04f 0000 	mov.w	r0, #0
 8002eee:	f04f 0100 	mov.w	r1, #0
 8002ef2:	0159      	lsls	r1, r3, #5
 8002ef4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ef8:	0150      	lsls	r0, r2, #5
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4621      	mov	r1, r4
 8002f00:	1a51      	subs	r1, r2, r1
 8002f02:	6139      	str	r1, [r7, #16]
 8002f04:	4629      	mov	r1, r5
 8002f06:	eb63 0301 	sbc.w	r3, r3, r1
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	f04f 0200 	mov.w	r2, #0
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f18:	4659      	mov	r1, fp
 8002f1a:	018b      	lsls	r3, r1, #6
 8002f1c:	4651      	mov	r1, sl
 8002f1e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f22:	4651      	mov	r1, sl
 8002f24:	018a      	lsls	r2, r1, #6
 8002f26:	4651      	mov	r1, sl
 8002f28:	ebb2 0801 	subs.w	r8, r2, r1
 8002f2c:	4659      	mov	r1, fp
 8002f2e:	eb63 0901 	sbc.w	r9, r3, r1
 8002f32:	f04f 0200 	mov.w	r2, #0
 8002f36:	f04f 0300 	mov.w	r3, #0
 8002f3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f46:	4690      	mov	r8, r2
 8002f48:	4699      	mov	r9, r3
 8002f4a:	4623      	mov	r3, r4
 8002f4c:	eb18 0303 	adds.w	r3, r8, r3
 8002f50:	60bb      	str	r3, [r7, #8]
 8002f52:	462b      	mov	r3, r5
 8002f54:	eb49 0303 	adc.w	r3, r9, r3
 8002f58:	60fb      	str	r3, [r7, #12]
 8002f5a:	f04f 0200 	mov.w	r2, #0
 8002f5e:	f04f 0300 	mov.w	r3, #0
 8002f62:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f66:	4629      	mov	r1, r5
 8002f68:	024b      	lsls	r3, r1, #9
 8002f6a:	4621      	mov	r1, r4
 8002f6c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f70:	4621      	mov	r1, r4
 8002f72:	024a      	lsls	r2, r1, #9
 8002f74:	4610      	mov	r0, r2
 8002f76:	4619      	mov	r1, r3
 8002f78:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f7e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f84:	f7fd f920 	bl	80001c8 <__aeabi_uldivmod>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f90:	e058      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f92:	4b38      	ldr	r3, [pc, #224]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	099b      	lsrs	r3, r3, #6
 8002f98:	2200      	movs	r2, #0
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fa2:	623b      	str	r3, [r7, #32]
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fa8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fac:	4642      	mov	r2, r8
 8002fae:	464b      	mov	r3, r9
 8002fb0:	f04f 0000 	mov.w	r0, #0
 8002fb4:	f04f 0100 	mov.w	r1, #0
 8002fb8:	0159      	lsls	r1, r3, #5
 8002fba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fbe:	0150      	lsls	r0, r2, #5
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	4641      	mov	r1, r8
 8002fc6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fca:	4649      	mov	r1, r9
 8002fcc:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fd0:	f04f 0200 	mov.w	r2, #0
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fdc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fe0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fe4:	ebb2 040a 	subs.w	r4, r2, sl
 8002fe8:	eb63 050b 	sbc.w	r5, r3, fp
 8002fec:	f04f 0200 	mov.w	r2, #0
 8002ff0:	f04f 0300 	mov.w	r3, #0
 8002ff4:	00eb      	lsls	r3, r5, #3
 8002ff6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ffa:	00e2      	lsls	r2, r4, #3
 8002ffc:	4614      	mov	r4, r2
 8002ffe:	461d      	mov	r5, r3
 8003000:	4643      	mov	r3, r8
 8003002:	18e3      	adds	r3, r4, r3
 8003004:	603b      	str	r3, [r7, #0]
 8003006:	464b      	mov	r3, r9
 8003008:	eb45 0303 	adc.w	r3, r5, r3
 800300c:	607b      	str	r3, [r7, #4]
 800300e:	f04f 0200 	mov.w	r2, #0
 8003012:	f04f 0300 	mov.w	r3, #0
 8003016:	e9d7 4500 	ldrd	r4, r5, [r7]
 800301a:	4629      	mov	r1, r5
 800301c:	028b      	lsls	r3, r1, #10
 800301e:	4621      	mov	r1, r4
 8003020:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003024:	4621      	mov	r1, r4
 8003026:	028a      	lsls	r2, r1, #10
 8003028:	4610      	mov	r0, r2
 800302a:	4619      	mov	r1, r3
 800302c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800302e:	2200      	movs	r2, #0
 8003030:	61bb      	str	r3, [r7, #24]
 8003032:	61fa      	str	r2, [r7, #28]
 8003034:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003038:	f7fd f8c6 	bl	80001c8 <__aeabi_uldivmod>
 800303c:	4602      	mov	r2, r0
 800303e:	460b      	mov	r3, r1
 8003040:	4613      	mov	r3, r2
 8003042:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003044:	4b0b      	ldr	r3, [pc, #44]	@ (8003074 <HAL_RCC_GetSysClockFreq+0x200>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	0c1b      	lsrs	r3, r3, #16
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	3301      	adds	r3, #1
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003054:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003056:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003058:	fbb2 f3f3 	udiv	r3, r2, r3
 800305c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800305e:	e002      	b.n	8003066 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003060:	4b05      	ldr	r3, [pc, #20]	@ (8003078 <HAL_RCC_GetSysClockFreq+0x204>)
 8003062:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003064:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003066:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003068:	4618      	mov	r0, r3
 800306a:	3750      	adds	r7, #80	@ 0x50
 800306c:	46bd      	mov	sp, r7
 800306e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003072:	bf00      	nop
 8003074:	40023800 	.word	0x40023800
 8003078:	00f42400 	.word	0x00f42400
 800307c:	007a1200 	.word	0x007a1200

08003080 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003084:	4b03      	ldr	r3, [pc, #12]	@ (8003094 <HAL_RCC_GetHCLKFreq+0x14>)
 8003086:	681b      	ldr	r3, [r3, #0]
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20000004 	.word	0x20000004

08003098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800309c:	f7ff fff0 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 80030a0:	4602      	mov	r2, r0
 80030a2:	4b05      	ldr	r3, [pc, #20]	@ (80030b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	0a9b      	lsrs	r3, r3, #10
 80030a8:	f003 0307 	and.w	r3, r3, #7
 80030ac:	4903      	ldr	r1, [pc, #12]	@ (80030bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ae:	5ccb      	ldrb	r3, [r1, r3]
 80030b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	40023800 	.word	0x40023800
 80030bc:	080046d4 	.word	0x080046d4

080030c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80030c4:	f7ff ffdc 	bl	8003080 <HAL_RCC_GetHCLKFreq>
 80030c8:	4602      	mov	r2, r0
 80030ca:	4b05      	ldr	r3, [pc, #20]	@ (80030e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	0b5b      	lsrs	r3, r3, #13
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	4903      	ldr	r1, [pc, #12]	@ (80030e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030d6:	5ccb      	ldrb	r3, [r1, r3]
 80030d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030dc:	4618      	mov	r0, r3
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	40023800 	.word	0x40023800
 80030e4:	080046d4 	.word	0x080046d4

080030e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d101      	bne.n	80030fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e041      	b.n	800317e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d106      	bne.n	8003114 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f7fe fc8e 	bl	8001a30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	3304      	adds	r3, #4
 8003124:	4619      	mov	r1, r3
 8003126:	4610      	mov	r0, r2
 8003128:	f000 fcc4 	bl	8003ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800317c:	2300      	movs	r3, #0
}
 800317e:	4618      	mov	r0, r3
 8003180:	3708      	adds	r7, #8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
	...

08003188 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b01      	cmp	r3, #1
 800319a:	d001      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e04e      	b.n	800323e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68da      	ldr	r2, [r3, #12]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 0201 	orr.w	r2, r2, #1
 80031b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a23      	ldr	r2, [pc, #140]	@ (800324c <HAL_TIM_Base_Start_IT+0xc4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d022      	beq.n	8003208 <HAL_TIM_Base_Start_IT+0x80>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031ca:	d01d      	beq.n	8003208 <HAL_TIM_Base_Start_IT+0x80>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a1f      	ldr	r2, [pc, #124]	@ (8003250 <HAL_TIM_Base_Start_IT+0xc8>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d018      	beq.n	8003208 <HAL_TIM_Base_Start_IT+0x80>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a1e      	ldr	r2, [pc, #120]	@ (8003254 <HAL_TIM_Base_Start_IT+0xcc>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d013      	beq.n	8003208 <HAL_TIM_Base_Start_IT+0x80>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a1c      	ldr	r2, [pc, #112]	@ (8003258 <HAL_TIM_Base_Start_IT+0xd0>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00e      	beq.n	8003208 <HAL_TIM_Base_Start_IT+0x80>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a1b      	ldr	r2, [pc, #108]	@ (800325c <HAL_TIM_Base_Start_IT+0xd4>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d009      	beq.n	8003208 <HAL_TIM_Base_Start_IT+0x80>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a19      	ldr	r2, [pc, #100]	@ (8003260 <HAL_TIM_Base_Start_IT+0xd8>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d004      	beq.n	8003208 <HAL_TIM_Base_Start_IT+0x80>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a18      	ldr	r2, [pc, #96]	@ (8003264 <HAL_TIM_Base_Start_IT+0xdc>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d111      	bne.n	800322c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b06      	cmp	r3, #6
 8003218:	d010      	beq.n	800323c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f042 0201 	orr.w	r2, r2, #1
 8003228:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800322a:	e007      	b.n	800323c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0201 	orr.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3714      	adds	r7, #20
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
 800324a:	bf00      	nop
 800324c:	40010000 	.word	0x40010000
 8003250:	40000400 	.word	0x40000400
 8003254:	40000800 	.word	0x40000800
 8003258:	40000c00 	.word	0x40000c00
 800325c:	40010400 	.word	0x40010400
 8003260:	40014000 	.word	0x40014000
 8003264:	40001800 	.word	0x40001800

08003268 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b082      	sub	sp, #8
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d101      	bne.n	800327a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003276:	2301      	movs	r3, #1
 8003278:	e041      	b.n	80032fe <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d106      	bne.n	8003294 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7fe fc4e 	bl	8001b30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	3304      	adds	r3, #4
 80032a4:	4619      	mov	r1, r3
 80032a6:	4610      	mov	r0, r2
 80032a8:	f000 fc04 	bl	8003ab4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2201      	movs	r2, #1
 80032d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d109      	bne.n	800332c <HAL_TIM_PWM_Start+0x24>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b01      	cmp	r3, #1
 8003322:	bf14      	ite	ne
 8003324:	2301      	movne	r3, #1
 8003326:	2300      	moveq	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	e022      	b.n	8003372 <HAL_TIM_PWM_Start+0x6a>
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	2b04      	cmp	r3, #4
 8003330:	d109      	bne.n	8003346 <HAL_TIM_PWM_Start+0x3e>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b01      	cmp	r3, #1
 800333c:	bf14      	ite	ne
 800333e:	2301      	movne	r3, #1
 8003340:	2300      	moveq	r3, #0
 8003342:	b2db      	uxtb	r3, r3
 8003344:	e015      	b.n	8003372 <HAL_TIM_PWM_Start+0x6a>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	2b08      	cmp	r3, #8
 800334a:	d109      	bne.n	8003360 <HAL_TIM_PWM_Start+0x58>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003352:	b2db      	uxtb	r3, r3
 8003354:	2b01      	cmp	r3, #1
 8003356:	bf14      	ite	ne
 8003358:	2301      	movne	r3, #1
 800335a:	2300      	moveq	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	e008      	b.n	8003372 <HAL_TIM_PWM_Start+0x6a>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b01      	cmp	r3, #1
 800336a:	bf14      	ite	ne
 800336c:	2301      	movne	r3, #1
 800336e:	2300      	moveq	r3, #0
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d001      	beq.n	800337a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e07c      	b.n	8003474 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d104      	bne.n	800338a <HAL_TIM_PWM_Start+0x82>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003388:	e013      	b.n	80033b2 <HAL_TIM_PWM_Start+0xaa>
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	2b04      	cmp	r3, #4
 800338e:	d104      	bne.n	800339a <HAL_TIM_PWM_Start+0x92>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003398:	e00b      	b.n	80033b2 <HAL_TIM_PWM_Start+0xaa>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	2b08      	cmp	r3, #8
 800339e:	d104      	bne.n	80033aa <HAL_TIM_PWM_Start+0xa2>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2202      	movs	r2, #2
 80033a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033a8:	e003      	b.n	80033b2 <HAL_TIM_PWM_Start+0xaa>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2202      	movs	r2, #2
 80033ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2201      	movs	r2, #1
 80033b8:	6839      	ldr	r1, [r7, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 fdd0 	bl	8003f60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a2d      	ldr	r2, [pc, #180]	@ (800347c <HAL_TIM_PWM_Start+0x174>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d004      	beq.n	80033d4 <HAL_TIM_PWM_Start+0xcc>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003480 <HAL_TIM_PWM_Start+0x178>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d101      	bne.n	80033d8 <HAL_TIM_PWM_Start+0xd0>
 80033d4:	2301      	movs	r3, #1
 80033d6:	e000      	b.n	80033da <HAL_TIM_PWM_Start+0xd2>
 80033d8:	2300      	movs	r3, #0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d007      	beq.n	80033ee <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80033ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a22      	ldr	r2, [pc, #136]	@ (800347c <HAL_TIM_PWM_Start+0x174>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d022      	beq.n	800343e <HAL_TIM_PWM_Start+0x136>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003400:	d01d      	beq.n	800343e <HAL_TIM_PWM_Start+0x136>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4a1f      	ldr	r2, [pc, #124]	@ (8003484 <HAL_TIM_PWM_Start+0x17c>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d018      	beq.n	800343e <HAL_TIM_PWM_Start+0x136>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a1d      	ldr	r2, [pc, #116]	@ (8003488 <HAL_TIM_PWM_Start+0x180>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d013      	beq.n	800343e <HAL_TIM_PWM_Start+0x136>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a1c      	ldr	r2, [pc, #112]	@ (800348c <HAL_TIM_PWM_Start+0x184>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d00e      	beq.n	800343e <HAL_TIM_PWM_Start+0x136>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a16      	ldr	r2, [pc, #88]	@ (8003480 <HAL_TIM_PWM_Start+0x178>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d009      	beq.n	800343e <HAL_TIM_PWM_Start+0x136>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a18      	ldr	r2, [pc, #96]	@ (8003490 <HAL_TIM_PWM_Start+0x188>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d004      	beq.n	800343e <HAL_TIM_PWM_Start+0x136>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a16      	ldr	r2, [pc, #88]	@ (8003494 <HAL_TIM_PWM_Start+0x18c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d111      	bne.n	8003462 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f003 0307 	and.w	r3, r3, #7
 8003448:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2b06      	cmp	r3, #6
 800344e:	d010      	beq.n	8003472 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0201 	orr.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003460:	e007      	b.n	8003472 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0201 	orr.w	r2, r2, #1
 8003470:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003472:	2300      	movs	r3, #0
}
 8003474:	4618      	mov	r0, r3
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40010000 	.word	0x40010000
 8003480:	40010400 	.word	0x40010400
 8003484:	40000400 	.word	0x40000400
 8003488:	40000800 	.word	0x40000800
 800348c:	40000c00 	.word	0x40000c00
 8003490:	40014000 	.word	0x40014000
 8003494:	40001800 	.word	0x40001800

08003498 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e097      	b.n	80035dc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d106      	bne.n	80034c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7fe f941 	bl	8001748 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2202      	movs	r2, #2
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6812      	ldr	r2, [r2, #0]
 80034d8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80034dc:	f023 0307 	bic.w	r3, r3, #7
 80034e0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	3304      	adds	r3, #4
 80034ea:	4619      	mov	r1, r3
 80034ec:	4610      	mov	r0, r2
 80034ee:	f000 fae1 	bl	8003ab4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	697a      	ldr	r2, [r7, #20]
 8003510:	4313      	orrs	r3, r2
 8003512:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800351a:	f023 0303 	bic.w	r3, r3, #3
 800351e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	689a      	ldr	r2, [r3, #8]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	021b      	lsls	r3, r3, #8
 800352a:	4313      	orrs	r3, r2
 800352c:	693a      	ldr	r2, [r7, #16]
 800352e:	4313      	orrs	r3, r2
 8003530:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003538:	f023 030c 	bic.w	r3, r3, #12
 800353c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003544:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003548:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	68da      	ldr	r2, [r3, #12]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	021b      	lsls	r3, r3, #8
 8003554:	4313      	orrs	r3, r2
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	4313      	orrs	r3, r2
 800355a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	011a      	lsls	r2, r3, #4
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	031b      	lsls	r3, r3, #12
 8003568:	4313      	orrs	r3, r2
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	4313      	orrs	r3, r2
 800356e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003576:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800357e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	695b      	ldr	r3, [r3, #20]
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	4313      	orrs	r3, r2
 800358c:	68fa      	ldr	r2, [r7, #12]
 800358e:	4313      	orrs	r3, r2
 8003590:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	697a      	ldr	r2, [r7, #20]
 8003598:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80035da:	2300      	movs	r3, #0
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80035f4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80035fc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003604:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800360c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d110      	bne.n	8003636 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003614:	7bfb      	ldrb	r3, [r7, #15]
 8003616:	2b01      	cmp	r3, #1
 8003618:	d102      	bne.n	8003620 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800361a:	7b7b      	ldrb	r3, [r7, #13]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d001      	beq.n	8003624 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e069      	b.n	80036f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003634:	e031      	b.n	800369a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b04      	cmp	r3, #4
 800363a:	d110      	bne.n	800365e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800363c:	7bbb      	ldrb	r3, [r7, #14]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d102      	bne.n	8003648 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003642:	7b3b      	ldrb	r3, [r7, #12]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d001      	beq.n	800364c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e055      	b.n	80036f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800365c:	e01d      	b.n	800369a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	2b01      	cmp	r3, #1
 8003662:	d108      	bne.n	8003676 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003664:	7bbb      	ldrb	r3, [r7, #14]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d105      	bne.n	8003676 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800366a:	7b7b      	ldrb	r3, [r7, #13]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d102      	bne.n	8003676 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003670:	7b3b      	ldrb	r3, [r7, #12]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d001      	beq.n	800367a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e03e      	b.n	80036f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2202      	movs	r2, #2
 800367e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2202      	movs	r2, #2
 8003686:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2202      	movs	r2, #2
 800368e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2202      	movs	r2, #2
 8003696:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d003      	beq.n	80036a8 <HAL_TIM_Encoder_Start+0xc4>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d008      	beq.n	80036b8 <HAL_TIM_Encoder_Start+0xd4>
 80036a6:	e00f      	b.n	80036c8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2201      	movs	r2, #1
 80036ae:	2100      	movs	r1, #0
 80036b0:	4618      	mov	r0, r3
 80036b2:	f000 fc55 	bl	8003f60 <TIM_CCxChannelCmd>
      break;
 80036b6:	e016      	b.n	80036e6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2201      	movs	r2, #1
 80036be:	2104      	movs	r1, #4
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 fc4d 	bl	8003f60 <TIM_CCxChannelCmd>
      break;
 80036c6:	e00e      	b.n	80036e6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	2201      	movs	r2, #1
 80036ce:	2100      	movs	r1, #0
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 fc45 	bl	8003f60 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2201      	movs	r2, #1
 80036dc:	2104      	movs	r1, #4
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 fc3e 	bl	8003f60 <TIM_CCxChannelCmd>
      break;
 80036e4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f042 0201 	orr.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003718:	68bb      	ldr	r3, [r7, #8]
 800371a:	f003 0302 	and.w	r3, r3, #2
 800371e:	2b00      	cmp	r3, #0
 8003720:	d020      	beq.n	8003764 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d01b      	beq.n	8003764 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f06f 0202 	mvn.w	r2, #2
 8003734:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f994 	bl	8003a78 <HAL_TIM_IC_CaptureCallback>
 8003750:	e005      	b.n	800375e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f986 	bl	8003a64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f000 f997 	bl	8003a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b00      	cmp	r3, #0
 800376c:	d020      	beq.n	80037b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d01b      	beq.n	80037b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f06f 0204 	mvn.w	r2, #4
 8003780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2202      	movs	r2, #2
 8003786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003792:	2b00      	cmp	r3, #0
 8003794:	d003      	beq.n	800379e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003796:	6878      	ldr	r0, [r7, #4]
 8003798:	f000 f96e 	bl	8003a78 <HAL_TIM_IC_CaptureCallback>
 800379c:	e005      	b.n	80037aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f960 	bl	8003a64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 f971 	bl	8003a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d020      	beq.n	80037fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f003 0308 	and.w	r3, r3, #8
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d01b      	beq.n	80037fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f06f 0208 	mvn.w	r2, #8
 80037cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2204      	movs	r2, #4
 80037d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	69db      	ldr	r3, [r3, #28]
 80037da:	f003 0303 	and.w	r3, r3, #3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 f948 	bl	8003a78 <HAL_TIM_IC_CaptureCallback>
 80037e8:	e005      	b.n	80037f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f93a 	bl	8003a64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f94b 	bl	8003a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f003 0310 	and.w	r3, r3, #16
 8003802:	2b00      	cmp	r3, #0
 8003804:	d020      	beq.n	8003848 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f003 0310 	and.w	r3, r3, #16
 800380c:	2b00      	cmp	r3, #0
 800380e:	d01b      	beq.n	8003848 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0210 	mvn.w	r2, #16
 8003818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2208      	movs	r2, #8
 800381e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	69db      	ldr	r3, [r3, #28]
 8003826:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800382a:	2b00      	cmp	r3, #0
 800382c:	d003      	beq.n	8003836 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f922 	bl	8003a78 <HAL_TIM_IC_CaptureCallback>
 8003834:	e005      	b.n	8003842 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 f914 	bl	8003a64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f000 f925 	bl	8003a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00c      	beq.n	800386c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d007      	beq.n	800386c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0201 	mvn.w	r2, #1
 8003864:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fc ff08 	bl	800067c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00c      	beq.n	8003890 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800387c:	2b00      	cmp	r3, #0
 800387e:	d007      	beq.n	8003890 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003888:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fc14 	bl	80040b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00c      	beq.n	80038b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d007      	beq.n	80038b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f000 f8f6 	bl	8003aa0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f003 0320 	and.w	r3, r3, #32
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d00c      	beq.n	80038d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f003 0320 	and.w	r3, r3, #32
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d007      	beq.n	80038d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0220 	mvn.w	r2, #32
 80038d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fbe6 	bl	80040a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038d8:	bf00      	nop
 80038da:	3710      	adds	r7, #16
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038ec:	2300      	movs	r3, #0
 80038ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d101      	bne.n	80038fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80038fa:	2302      	movs	r3, #2
 80038fc:	e0ae      	b.n	8003a5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2201      	movs	r2, #1
 8003902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b0c      	cmp	r3, #12
 800390a:	f200 809f 	bhi.w	8003a4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800390e:	a201      	add	r2, pc, #4	@ (adr r2, 8003914 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003914:	08003949 	.word	0x08003949
 8003918:	08003a4d 	.word	0x08003a4d
 800391c:	08003a4d 	.word	0x08003a4d
 8003920:	08003a4d 	.word	0x08003a4d
 8003924:	08003989 	.word	0x08003989
 8003928:	08003a4d 	.word	0x08003a4d
 800392c:	08003a4d 	.word	0x08003a4d
 8003930:	08003a4d 	.word	0x08003a4d
 8003934:	080039cb 	.word	0x080039cb
 8003938:	08003a4d 	.word	0x08003a4d
 800393c:	08003a4d 	.word	0x08003a4d
 8003940:	08003a4d 	.word	0x08003a4d
 8003944:	08003a0b 	.word	0x08003a0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68b9      	ldr	r1, [r7, #8]
 800394e:	4618      	mov	r0, r3
 8003950:	f000 f956 	bl	8003c00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0208 	orr.w	r2, r2, #8
 8003962:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699a      	ldr	r2, [r3, #24]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0204 	bic.w	r2, r2, #4
 8003972:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6999      	ldr	r1, [r3, #24]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	430a      	orrs	r2, r1
 8003984:	619a      	str	r2, [r3, #24]
      break;
 8003986:	e064      	b.n	8003a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	68b9      	ldr	r1, [r7, #8]
 800398e:	4618      	mov	r0, r3
 8003990:	f000 f9a6 	bl	8003ce0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699a      	ldr	r2, [r3, #24]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	699a      	ldr	r2, [r3, #24]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6999      	ldr	r1, [r3, #24]
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	021a      	lsls	r2, r3, #8
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	430a      	orrs	r2, r1
 80039c6:	619a      	str	r2, [r3, #24]
      break;
 80039c8:	e043      	b.n	8003a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	68b9      	ldr	r1, [r7, #8]
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 f9fb 	bl	8003dcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69da      	ldr	r2, [r3, #28]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 0208 	orr.w	r2, r2, #8
 80039e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	69da      	ldr	r2, [r3, #28]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0204 	bic.w	r2, r2, #4
 80039f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	69d9      	ldr	r1, [r3, #28]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	691a      	ldr	r2, [r3, #16]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	61da      	str	r2, [r3, #28]
      break;
 8003a08:	e023      	b.n	8003a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68b9      	ldr	r1, [r7, #8]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 fa4f 	bl	8003eb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	69da      	ldr	r2, [r3, #28]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69da      	ldr	r2, [r3, #28]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69d9      	ldr	r1, [r3, #28]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	021a      	lsls	r2, r3, #8
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	61da      	str	r2, [r3, #28]
      break;
 8003a4a:	e002      	b.n	8003a52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	75fb      	strb	r3, [r7, #23]
      break;
 8003a50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003aa8:	bf00      	nop
 8003aaa:	370c      	adds	r7, #12
 8003aac:	46bd      	mov	sp, r7
 8003aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab2:	4770      	bx	lr

08003ab4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a43      	ldr	r2, [pc, #268]	@ (8003bd4 <TIM_Base_SetConfig+0x120>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d013      	beq.n	8003af4 <TIM_Base_SetConfig+0x40>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ad2:	d00f      	beq.n	8003af4 <TIM_Base_SetConfig+0x40>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a40      	ldr	r2, [pc, #256]	@ (8003bd8 <TIM_Base_SetConfig+0x124>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d00b      	beq.n	8003af4 <TIM_Base_SetConfig+0x40>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a3f      	ldr	r2, [pc, #252]	@ (8003bdc <TIM_Base_SetConfig+0x128>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d007      	beq.n	8003af4 <TIM_Base_SetConfig+0x40>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4a3e      	ldr	r2, [pc, #248]	@ (8003be0 <TIM_Base_SetConfig+0x12c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d003      	beq.n	8003af4 <TIM_Base_SetConfig+0x40>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a3d      	ldr	r2, [pc, #244]	@ (8003be4 <TIM_Base_SetConfig+0x130>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d108      	bne.n	8003b06 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003afa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a32      	ldr	r2, [pc, #200]	@ (8003bd4 <TIM_Base_SetConfig+0x120>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d02b      	beq.n	8003b66 <TIM_Base_SetConfig+0xb2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b14:	d027      	beq.n	8003b66 <TIM_Base_SetConfig+0xb2>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a2f      	ldr	r2, [pc, #188]	@ (8003bd8 <TIM_Base_SetConfig+0x124>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d023      	beq.n	8003b66 <TIM_Base_SetConfig+0xb2>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a2e      	ldr	r2, [pc, #184]	@ (8003bdc <TIM_Base_SetConfig+0x128>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d01f      	beq.n	8003b66 <TIM_Base_SetConfig+0xb2>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4a2d      	ldr	r2, [pc, #180]	@ (8003be0 <TIM_Base_SetConfig+0x12c>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d01b      	beq.n	8003b66 <TIM_Base_SetConfig+0xb2>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a2c      	ldr	r2, [pc, #176]	@ (8003be4 <TIM_Base_SetConfig+0x130>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d017      	beq.n	8003b66 <TIM_Base_SetConfig+0xb2>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a2b      	ldr	r2, [pc, #172]	@ (8003be8 <TIM_Base_SetConfig+0x134>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d013      	beq.n	8003b66 <TIM_Base_SetConfig+0xb2>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a2a      	ldr	r2, [pc, #168]	@ (8003bec <TIM_Base_SetConfig+0x138>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d00f      	beq.n	8003b66 <TIM_Base_SetConfig+0xb2>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a29      	ldr	r2, [pc, #164]	@ (8003bf0 <TIM_Base_SetConfig+0x13c>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d00b      	beq.n	8003b66 <TIM_Base_SetConfig+0xb2>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a28      	ldr	r2, [pc, #160]	@ (8003bf4 <TIM_Base_SetConfig+0x140>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d007      	beq.n	8003b66 <TIM_Base_SetConfig+0xb2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a27      	ldr	r2, [pc, #156]	@ (8003bf8 <TIM_Base_SetConfig+0x144>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d003      	beq.n	8003b66 <TIM_Base_SetConfig+0xb2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a26      	ldr	r2, [pc, #152]	@ (8003bfc <TIM_Base_SetConfig+0x148>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d108      	bne.n	8003b78 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a0e      	ldr	r2, [pc, #56]	@ (8003bd4 <TIM_Base_SetConfig+0x120>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d003      	beq.n	8003ba6 <TIM_Base_SetConfig+0xf2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a10      	ldr	r2, [pc, #64]	@ (8003be4 <TIM_Base_SetConfig+0x130>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d103      	bne.n	8003bae <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	691a      	ldr	r2, [r3, #16]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f043 0204 	orr.w	r2, r3, #4
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	601a      	str	r2, [r3, #0]
}
 8003bc6:	bf00      	nop
 8003bc8:	3714      	adds	r7, #20
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd0:	4770      	bx	lr
 8003bd2:	bf00      	nop
 8003bd4:	40010000 	.word	0x40010000
 8003bd8:	40000400 	.word	0x40000400
 8003bdc:	40000800 	.word	0x40000800
 8003be0:	40000c00 	.word	0x40000c00
 8003be4:	40010400 	.word	0x40010400
 8003be8:	40014000 	.word	0x40014000
 8003bec:	40014400 	.word	0x40014400
 8003bf0:	40014800 	.word	0x40014800
 8003bf4:	40001800 	.word	0x40001800
 8003bf8:	40001c00 	.word	0x40001c00
 8003bfc:	40002000 	.word	0x40002000

08003c00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	f023 0201 	bic.w	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0303 	bic.w	r3, r3, #3
 8003c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f023 0302 	bic.w	r3, r3, #2
 8003c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a20      	ldr	r2, [pc, #128]	@ (8003cd8 <TIM_OC1_SetConfig+0xd8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d003      	beq.n	8003c64 <TIM_OC1_SetConfig+0x64>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a1f      	ldr	r2, [pc, #124]	@ (8003cdc <TIM_OC1_SetConfig+0xdc>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d10c      	bne.n	8003c7e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f023 0308 	bic.w	r3, r3, #8
 8003c6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f023 0304 	bic.w	r3, r3, #4
 8003c7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a15      	ldr	r2, [pc, #84]	@ (8003cd8 <TIM_OC1_SetConfig+0xd8>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d003      	beq.n	8003c8e <TIM_OC1_SetConfig+0x8e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a14      	ldr	r2, [pc, #80]	@ (8003cdc <TIM_OC1_SetConfig+0xdc>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d111      	bne.n	8003cb2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	699b      	ldr	r3, [r3, #24]
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	621a      	str	r2, [r3, #32]
}
 8003ccc:	bf00      	nop
 8003cce:	371c      	adds	r7, #28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	40010000 	.word	0x40010000
 8003cdc:	40010400 	.word	0x40010400

08003ce0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6a1b      	ldr	r3, [r3, #32]
 8003cee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a1b      	ldr	r3, [r3, #32]
 8003cf4:	f023 0210 	bic.w	r2, r3, #16
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	021b      	lsls	r3, r3, #8
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f023 0320 	bic.w	r3, r3, #32
 8003d2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	697a      	ldr	r2, [r7, #20]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a22      	ldr	r2, [pc, #136]	@ (8003dc4 <TIM_OC2_SetConfig+0xe4>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d003      	beq.n	8003d48 <TIM_OC2_SetConfig+0x68>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	4a21      	ldr	r2, [pc, #132]	@ (8003dc8 <TIM_OC2_SetConfig+0xe8>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d10d      	bne.n	8003d64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a17      	ldr	r2, [pc, #92]	@ (8003dc4 <TIM_OC2_SetConfig+0xe4>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d003      	beq.n	8003d74 <TIM_OC2_SetConfig+0x94>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a16      	ldr	r2, [pc, #88]	@ (8003dc8 <TIM_OC2_SetConfig+0xe8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d113      	bne.n	8003d9c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	693a      	ldr	r2, [r7, #16]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	693a      	ldr	r2, [r7, #16]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	68fa      	ldr	r2, [r7, #12]
 8003da6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	621a      	str	r2, [r3, #32]
}
 8003db6:	bf00      	nop
 8003db8:	371c      	adds	r7, #28
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40010000 	.word	0x40010000
 8003dc8:	40010400 	.word	0x40010400

08003dcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b087      	sub	sp, #28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
 8003dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a1b      	ldr	r3, [r3, #32]
 8003dda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f023 0303 	bic.w	r3, r3, #3
 8003e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	021b      	lsls	r3, r3, #8
 8003e1c:	697a      	ldr	r2, [r7, #20]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a21      	ldr	r2, [pc, #132]	@ (8003eac <TIM_OC3_SetConfig+0xe0>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d003      	beq.n	8003e32 <TIM_OC3_SetConfig+0x66>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a20      	ldr	r2, [pc, #128]	@ (8003eb0 <TIM_OC3_SetConfig+0xe4>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d10d      	bne.n	8003e4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	021b      	lsls	r3, r3, #8
 8003e40:	697a      	ldr	r2, [r7, #20]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a16      	ldr	r2, [pc, #88]	@ (8003eac <TIM_OC3_SetConfig+0xe0>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d003      	beq.n	8003e5e <TIM_OC3_SetConfig+0x92>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a15      	ldr	r2, [pc, #84]	@ (8003eb0 <TIM_OC3_SetConfig+0xe4>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d113      	bne.n	8003e86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	697a      	ldr	r2, [r7, #20]
 8003e9e:	621a      	str	r2, [r3, #32]
}
 8003ea0:	bf00      	nop
 8003ea2:	371c      	adds	r7, #28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	40010000 	.word	0x40010000
 8003eb0:	40010400 	.word	0x40010400

08003eb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b087      	sub	sp, #28
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a1b      	ldr	r3, [r3, #32]
 8003ec2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1b      	ldr	r3, [r3, #32]
 8003ec8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ee2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	021b      	lsls	r3, r3, #8
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003efe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	031b      	lsls	r3, r3, #12
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a12      	ldr	r2, [pc, #72]	@ (8003f58 <TIM_OC4_SetConfig+0xa4>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d003      	beq.n	8003f1c <TIM_OC4_SetConfig+0x68>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a11      	ldr	r2, [pc, #68]	@ (8003f5c <TIM_OC4_SetConfig+0xa8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d109      	bne.n	8003f30 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	695b      	ldr	r3, [r3, #20]
 8003f28:	019b      	lsls	r3, r3, #6
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	697a      	ldr	r2, [r7, #20]
 8003f34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685a      	ldr	r2, [r3, #4]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	621a      	str	r2, [r3, #32]
}
 8003f4a:	bf00      	nop
 8003f4c:	371c      	adds	r7, #28
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40010000 	.word	0x40010000
 8003f5c:	40010400 	.word	0x40010400

08003f60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	60b9      	str	r1, [r7, #8]
 8003f6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f003 031f 	and.w	r3, r3, #31
 8003f72:	2201      	movs	r2, #1
 8003f74:	fa02 f303 	lsl.w	r3, r2, r3
 8003f78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a1a      	ldr	r2, [r3, #32]
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	43db      	mvns	r3, r3
 8003f82:	401a      	ands	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6a1a      	ldr	r2, [r3, #32]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f003 031f 	and.w	r3, r3, #31
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	fa01 f303 	lsl.w	r3, r1, r3
 8003f98:	431a      	orrs	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	621a      	str	r2, [r3, #32]
}
 8003f9e:	bf00      	nop
 8003fa0:	371c      	adds	r7, #28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
	...

08003fac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d101      	bne.n	8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e05a      	b.n	800407a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a21      	ldr	r2, [pc, #132]	@ (8004088 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d022      	beq.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004010:	d01d      	beq.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a1d      	ldr	r2, [pc, #116]	@ (800408c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d018      	beq.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a1b      	ldr	r2, [pc, #108]	@ (8004090 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d013      	beq.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a1a      	ldr	r2, [pc, #104]	@ (8004094 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d00e      	beq.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a18      	ldr	r2, [pc, #96]	@ (8004098 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d009      	beq.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a17      	ldr	r2, [pc, #92]	@ (800409c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d004      	beq.n	800404e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a15      	ldr	r2, [pc, #84]	@ (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d10c      	bne.n	8004068 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004054:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	68ba      	ldr	r2, [r7, #8]
 800405c:	4313      	orrs	r3, r2
 800405e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68ba      	ldr	r2, [r7, #8]
 8004066:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40010000 	.word	0x40010000
 800408c:	40000400 	.word	0x40000400
 8004090:	40000800 	.word	0x40000800
 8004094:	40000c00 	.word	0x40000c00
 8004098:	40010400 	.word	0x40010400
 800409c:	40014000 	.word	0x40014000
 80040a0:	40001800 	.word	0x40001800

080040a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b082      	sub	sp, #8
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e042      	b.n	8004164 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d106      	bne.n	80040f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f7fd fe52 	bl	8001d9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2224      	movs	r2, #36	@ 0x24
 80040fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68da      	ldr	r2, [r3, #12]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800410e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f82b 	bl	800416c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	691a      	ldr	r2, [r3, #16]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004124:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	695a      	ldr	r2, [r3, #20]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004134:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	68da      	ldr	r2, [r3, #12]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004144:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2220      	movs	r2, #32
 8004150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2220      	movs	r2, #32
 8004158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800416c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004170:	b0c0      	sub	sp, #256	@ 0x100
 8004172:	af00      	add	r7, sp, #0
 8004174:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004188:	68d9      	ldr	r1, [r3, #12]
 800418a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	ea40 0301 	orr.w	r3, r0, r1
 8004194:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	431a      	orrs	r2, r3
 80041a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	431a      	orrs	r2, r3
 80041ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	4313      	orrs	r3, r2
 80041b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80041c4:	f021 010c 	bic.w	r1, r1, #12
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80041d2:	430b      	orrs	r3, r1
 80041d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80041e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e6:	6999      	ldr	r1, [r3, #24]
 80041e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	ea40 0301 	orr.w	r3, r0, r1
 80041f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	4b8f      	ldr	r3, [pc, #572]	@ (8004438 <UART_SetConfig+0x2cc>)
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d005      	beq.n	800420c <UART_SetConfig+0xa0>
 8004200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	4b8d      	ldr	r3, [pc, #564]	@ (800443c <UART_SetConfig+0x2d0>)
 8004208:	429a      	cmp	r2, r3
 800420a:	d104      	bne.n	8004216 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800420c:	f7fe ff58 	bl	80030c0 <HAL_RCC_GetPCLK2Freq>
 8004210:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004214:	e003      	b.n	800421e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004216:	f7fe ff3f 	bl	8003098 <HAL_RCC_GetPCLK1Freq>
 800421a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800421e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004222:	69db      	ldr	r3, [r3, #28]
 8004224:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004228:	f040 810c 	bne.w	8004444 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800422c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004230:	2200      	movs	r2, #0
 8004232:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004236:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800423a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800423e:	4622      	mov	r2, r4
 8004240:	462b      	mov	r3, r5
 8004242:	1891      	adds	r1, r2, r2
 8004244:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004246:	415b      	adcs	r3, r3
 8004248:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800424a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800424e:	4621      	mov	r1, r4
 8004250:	eb12 0801 	adds.w	r8, r2, r1
 8004254:	4629      	mov	r1, r5
 8004256:	eb43 0901 	adc.w	r9, r3, r1
 800425a:	f04f 0200 	mov.w	r2, #0
 800425e:	f04f 0300 	mov.w	r3, #0
 8004262:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004266:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800426a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800426e:	4690      	mov	r8, r2
 8004270:	4699      	mov	r9, r3
 8004272:	4623      	mov	r3, r4
 8004274:	eb18 0303 	adds.w	r3, r8, r3
 8004278:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800427c:	462b      	mov	r3, r5
 800427e:	eb49 0303 	adc.w	r3, r9, r3
 8004282:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004292:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004296:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800429a:	460b      	mov	r3, r1
 800429c:	18db      	adds	r3, r3, r3
 800429e:	653b      	str	r3, [r7, #80]	@ 0x50
 80042a0:	4613      	mov	r3, r2
 80042a2:	eb42 0303 	adc.w	r3, r2, r3
 80042a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80042a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80042ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80042b0:	f7fb ff8a 	bl	80001c8 <__aeabi_uldivmod>
 80042b4:	4602      	mov	r2, r0
 80042b6:	460b      	mov	r3, r1
 80042b8:	4b61      	ldr	r3, [pc, #388]	@ (8004440 <UART_SetConfig+0x2d4>)
 80042ba:	fba3 2302 	umull	r2, r3, r3, r2
 80042be:	095b      	lsrs	r3, r3, #5
 80042c0:	011c      	lsls	r4, r3, #4
 80042c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042c6:	2200      	movs	r2, #0
 80042c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80042cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80042d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80042d4:	4642      	mov	r2, r8
 80042d6:	464b      	mov	r3, r9
 80042d8:	1891      	adds	r1, r2, r2
 80042da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80042dc:	415b      	adcs	r3, r3
 80042de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80042e4:	4641      	mov	r1, r8
 80042e6:	eb12 0a01 	adds.w	sl, r2, r1
 80042ea:	4649      	mov	r1, r9
 80042ec:	eb43 0b01 	adc.w	fp, r3, r1
 80042f0:	f04f 0200 	mov.w	r2, #0
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004300:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004304:	4692      	mov	sl, r2
 8004306:	469b      	mov	fp, r3
 8004308:	4643      	mov	r3, r8
 800430a:	eb1a 0303 	adds.w	r3, sl, r3
 800430e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004312:	464b      	mov	r3, r9
 8004314:	eb4b 0303 	adc.w	r3, fp, r3
 8004318:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004328:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800432c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004330:	460b      	mov	r3, r1
 8004332:	18db      	adds	r3, r3, r3
 8004334:	643b      	str	r3, [r7, #64]	@ 0x40
 8004336:	4613      	mov	r3, r2
 8004338:	eb42 0303 	adc.w	r3, r2, r3
 800433c:	647b      	str	r3, [r7, #68]	@ 0x44
 800433e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004342:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004346:	f7fb ff3f 	bl	80001c8 <__aeabi_uldivmod>
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	4611      	mov	r1, r2
 8004350:	4b3b      	ldr	r3, [pc, #236]	@ (8004440 <UART_SetConfig+0x2d4>)
 8004352:	fba3 2301 	umull	r2, r3, r3, r1
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	2264      	movs	r2, #100	@ 0x64
 800435a:	fb02 f303 	mul.w	r3, r2, r3
 800435e:	1acb      	subs	r3, r1, r3
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004366:	4b36      	ldr	r3, [pc, #216]	@ (8004440 <UART_SetConfig+0x2d4>)
 8004368:	fba3 2302 	umull	r2, r3, r3, r2
 800436c:	095b      	lsrs	r3, r3, #5
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004374:	441c      	add	r4, r3
 8004376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800437a:	2200      	movs	r2, #0
 800437c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004380:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004384:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004388:	4642      	mov	r2, r8
 800438a:	464b      	mov	r3, r9
 800438c:	1891      	adds	r1, r2, r2
 800438e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004390:	415b      	adcs	r3, r3
 8004392:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004394:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004398:	4641      	mov	r1, r8
 800439a:	1851      	adds	r1, r2, r1
 800439c:	6339      	str	r1, [r7, #48]	@ 0x30
 800439e:	4649      	mov	r1, r9
 80043a0:	414b      	adcs	r3, r1
 80043a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80043a4:	f04f 0200 	mov.w	r2, #0
 80043a8:	f04f 0300 	mov.w	r3, #0
 80043ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80043b0:	4659      	mov	r1, fp
 80043b2:	00cb      	lsls	r3, r1, #3
 80043b4:	4651      	mov	r1, sl
 80043b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043ba:	4651      	mov	r1, sl
 80043bc:	00ca      	lsls	r2, r1, #3
 80043be:	4610      	mov	r0, r2
 80043c0:	4619      	mov	r1, r3
 80043c2:	4603      	mov	r3, r0
 80043c4:	4642      	mov	r2, r8
 80043c6:	189b      	adds	r3, r3, r2
 80043c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80043cc:	464b      	mov	r3, r9
 80043ce:	460a      	mov	r2, r1
 80043d0:	eb42 0303 	adc.w	r3, r2, r3
 80043d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80043d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80043e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80043e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80043ec:	460b      	mov	r3, r1
 80043ee:	18db      	adds	r3, r3, r3
 80043f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043f2:	4613      	mov	r3, r2
 80043f4:	eb42 0303 	adc.w	r3, r2, r3
 80043f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004402:	f7fb fee1 	bl	80001c8 <__aeabi_uldivmod>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	4b0d      	ldr	r3, [pc, #52]	@ (8004440 <UART_SetConfig+0x2d4>)
 800440c:	fba3 1302 	umull	r1, r3, r3, r2
 8004410:	095b      	lsrs	r3, r3, #5
 8004412:	2164      	movs	r1, #100	@ 0x64
 8004414:	fb01 f303 	mul.w	r3, r1, r3
 8004418:	1ad3      	subs	r3, r2, r3
 800441a:	00db      	lsls	r3, r3, #3
 800441c:	3332      	adds	r3, #50	@ 0x32
 800441e:	4a08      	ldr	r2, [pc, #32]	@ (8004440 <UART_SetConfig+0x2d4>)
 8004420:	fba2 2303 	umull	r2, r3, r2, r3
 8004424:	095b      	lsrs	r3, r3, #5
 8004426:	f003 0207 	and.w	r2, r3, #7
 800442a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4422      	add	r2, r4
 8004432:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004434:	e106      	b.n	8004644 <UART_SetConfig+0x4d8>
 8004436:	bf00      	nop
 8004438:	40011000 	.word	0x40011000
 800443c:	40011400 	.word	0x40011400
 8004440:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004448:	2200      	movs	r2, #0
 800444a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800444e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004452:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004456:	4642      	mov	r2, r8
 8004458:	464b      	mov	r3, r9
 800445a:	1891      	adds	r1, r2, r2
 800445c:	6239      	str	r1, [r7, #32]
 800445e:	415b      	adcs	r3, r3
 8004460:	627b      	str	r3, [r7, #36]	@ 0x24
 8004462:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004466:	4641      	mov	r1, r8
 8004468:	1854      	adds	r4, r2, r1
 800446a:	4649      	mov	r1, r9
 800446c:	eb43 0501 	adc.w	r5, r3, r1
 8004470:	f04f 0200 	mov.w	r2, #0
 8004474:	f04f 0300 	mov.w	r3, #0
 8004478:	00eb      	lsls	r3, r5, #3
 800447a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800447e:	00e2      	lsls	r2, r4, #3
 8004480:	4614      	mov	r4, r2
 8004482:	461d      	mov	r5, r3
 8004484:	4643      	mov	r3, r8
 8004486:	18e3      	adds	r3, r4, r3
 8004488:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800448c:	464b      	mov	r3, r9
 800448e:	eb45 0303 	adc.w	r3, r5, r3
 8004492:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80044a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	f04f 0300 	mov.w	r3, #0
 80044ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80044b2:	4629      	mov	r1, r5
 80044b4:	008b      	lsls	r3, r1, #2
 80044b6:	4621      	mov	r1, r4
 80044b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044bc:	4621      	mov	r1, r4
 80044be:	008a      	lsls	r2, r1, #2
 80044c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80044c4:	f7fb fe80 	bl	80001c8 <__aeabi_uldivmod>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4b60      	ldr	r3, [pc, #384]	@ (8004650 <UART_SetConfig+0x4e4>)
 80044ce:	fba3 2302 	umull	r2, r3, r3, r2
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	011c      	lsls	r4, r3, #4
 80044d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044da:	2200      	movs	r2, #0
 80044dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80044e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80044e8:	4642      	mov	r2, r8
 80044ea:	464b      	mov	r3, r9
 80044ec:	1891      	adds	r1, r2, r2
 80044ee:	61b9      	str	r1, [r7, #24]
 80044f0:	415b      	adcs	r3, r3
 80044f2:	61fb      	str	r3, [r7, #28]
 80044f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044f8:	4641      	mov	r1, r8
 80044fa:	1851      	adds	r1, r2, r1
 80044fc:	6139      	str	r1, [r7, #16]
 80044fe:	4649      	mov	r1, r9
 8004500:	414b      	adcs	r3, r1
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	f04f 0200 	mov.w	r2, #0
 8004508:	f04f 0300 	mov.w	r3, #0
 800450c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004510:	4659      	mov	r1, fp
 8004512:	00cb      	lsls	r3, r1, #3
 8004514:	4651      	mov	r1, sl
 8004516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800451a:	4651      	mov	r1, sl
 800451c:	00ca      	lsls	r2, r1, #3
 800451e:	4610      	mov	r0, r2
 8004520:	4619      	mov	r1, r3
 8004522:	4603      	mov	r3, r0
 8004524:	4642      	mov	r2, r8
 8004526:	189b      	adds	r3, r3, r2
 8004528:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800452c:	464b      	mov	r3, r9
 800452e:	460a      	mov	r2, r1
 8004530:	eb42 0303 	adc.w	r3, r2, r3
 8004534:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004542:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004550:	4649      	mov	r1, r9
 8004552:	008b      	lsls	r3, r1, #2
 8004554:	4641      	mov	r1, r8
 8004556:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800455a:	4641      	mov	r1, r8
 800455c:	008a      	lsls	r2, r1, #2
 800455e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004562:	f7fb fe31 	bl	80001c8 <__aeabi_uldivmod>
 8004566:	4602      	mov	r2, r0
 8004568:	460b      	mov	r3, r1
 800456a:	4611      	mov	r1, r2
 800456c:	4b38      	ldr	r3, [pc, #224]	@ (8004650 <UART_SetConfig+0x4e4>)
 800456e:	fba3 2301 	umull	r2, r3, r3, r1
 8004572:	095b      	lsrs	r3, r3, #5
 8004574:	2264      	movs	r2, #100	@ 0x64
 8004576:	fb02 f303 	mul.w	r3, r2, r3
 800457a:	1acb      	subs	r3, r1, r3
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	3332      	adds	r3, #50	@ 0x32
 8004580:	4a33      	ldr	r2, [pc, #204]	@ (8004650 <UART_SetConfig+0x4e4>)
 8004582:	fba2 2303 	umull	r2, r3, r2, r3
 8004586:	095b      	lsrs	r3, r3, #5
 8004588:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800458c:	441c      	add	r4, r3
 800458e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004592:	2200      	movs	r2, #0
 8004594:	673b      	str	r3, [r7, #112]	@ 0x70
 8004596:	677a      	str	r2, [r7, #116]	@ 0x74
 8004598:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800459c:	4642      	mov	r2, r8
 800459e:	464b      	mov	r3, r9
 80045a0:	1891      	adds	r1, r2, r2
 80045a2:	60b9      	str	r1, [r7, #8]
 80045a4:	415b      	adcs	r3, r3
 80045a6:	60fb      	str	r3, [r7, #12]
 80045a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045ac:	4641      	mov	r1, r8
 80045ae:	1851      	adds	r1, r2, r1
 80045b0:	6039      	str	r1, [r7, #0]
 80045b2:	4649      	mov	r1, r9
 80045b4:	414b      	adcs	r3, r1
 80045b6:	607b      	str	r3, [r7, #4]
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	f04f 0300 	mov.w	r3, #0
 80045c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045c4:	4659      	mov	r1, fp
 80045c6:	00cb      	lsls	r3, r1, #3
 80045c8:	4651      	mov	r1, sl
 80045ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ce:	4651      	mov	r1, sl
 80045d0:	00ca      	lsls	r2, r1, #3
 80045d2:	4610      	mov	r0, r2
 80045d4:	4619      	mov	r1, r3
 80045d6:	4603      	mov	r3, r0
 80045d8:	4642      	mov	r2, r8
 80045da:	189b      	adds	r3, r3, r2
 80045dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045de:	464b      	mov	r3, r9
 80045e0:	460a      	mov	r2, r1
 80045e2:	eb42 0303 	adc.w	r3, r2, r3
 80045e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80045f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004600:	4649      	mov	r1, r9
 8004602:	008b      	lsls	r3, r1, #2
 8004604:	4641      	mov	r1, r8
 8004606:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800460a:	4641      	mov	r1, r8
 800460c:	008a      	lsls	r2, r1, #2
 800460e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004612:	f7fb fdd9 	bl	80001c8 <__aeabi_uldivmod>
 8004616:	4602      	mov	r2, r0
 8004618:	460b      	mov	r3, r1
 800461a:	4b0d      	ldr	r3, [pc, #52]	@ (8004650 <UART_SetConfig+0x4e4>)
 800461c:	fba3 1302 	umull	r1, r3, r3, r2
 8004620:	095b      	lsrs	r3, r3, #5
 8004622:	2164      	movs	r1, #100	@ 0x64
 8004624:	fb01 f303 	mul.w	r3, r1, r3
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	3332      	adds	r3, #50	@ 0x32
 800462e:	4a08      	ldr	r2, [pc, #32]	@ (8004650 <UART_SetConfig+0x4e4>)
 8004630:	fba2 2303 	umull	r2, r3, r2, r3
 8004634:	095b      	lsrs	r3, r3, #5
 8004636:	f003 020f 	and.w	r2, r3, #15
 800463a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4422      	add	r2, r4
 8004642:	609a      	str	r2, [r3, #8]
}
 8004644:	bf00      	nop
 8004646:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800464a:	46bd      	mov	sp, r7
 800464c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004650:	51eb851f 	.word	0x51eb851f

08004654 <memset>:
 8004654:	4402      	add	r2, r0
 8004656:	4603      	mov	r3, r0
 8004658:	4293      	cmp	r3, r2
 800465a:	d100      	bne.n	800465e <memset+0xa>
 800465c:	4770      	bx	lr
 800465e:	f803 1b01 	strb.w	r1, [r3], #1
 8004662:	e7f9      	b.n	8004658 <memset+0x4>

08004664 <__libc_init_array>:
 8004664:	b570      	push	{r4, r5, r6, lr}
 8004666:	4d0d      	ldr	r5, [pc, #52]	@ (800469c <__libc_init_array+0x38>)
 8004668:	4c0d      	ldr	r4, [pc, #52]	@ (80046a0 <__libc_init_array+0x3c>)
 800466a:	1b64      	subs	r4, r4, r5
 800466c:	10a4      	asrs	r4, r4, #2
 800466e:	2600      	movs	r6, #0
 8004670:	42a6      	cmp	r6, r4
 8004672:	d109      	bne.n	8004688 <__libc_init_array+0x24>
 8004674:	4d0b      	ldr	r5, [pc, #44]	@ (80046a4 <__libc_init_array+0x40>)
 8004676:	4c0c      	ldr	r4, [pc, #48]	@ (80046a8 <__libc_init_array+0x44>)
 8004678:	f000 f818 	bl	80046ac <_init>
 800467c:	1b64      	subs	r4, r4, r5
 800467e:	10a4      	asrs	r4, r4, #2
 8004680:	2600      	movs	r6, #0
 8004682:	42a6      	cmp	r6, r4
 8004684:	d105      	bne.n	8004692 <__libc_init_array+0x2e>
 8004686:	bd70      	pop	{r4, r5, r6, pc}
 8004688:	f855 3b04 	ldr.w	r3, [r5], #4
 800468c:	4798      	blx	r3
 800468e:	3601      	adds	r6, #1
 8004690:	e7ee      	b.n	8004670 <__libc_init_array+0xc>
 8004692:	f855 3b04 	ldr.w	r3, [r5], #4
 8004696:	4798      	blx	r3
 8004698:	3601      	adds	r6, #1
 800469a:	e7f2      	b.n	8004682 <__libc_init_array+0x1e>
 800469c:	080046e4 	.word	0x080046e4
 80046a0:	080046e4 	.word	0x080046e4
 80046a4:	080046e4 	.word	0x080046e4
 80046a8:	080046e8 	.word	0x080046e8

080046ac <_init>:
 80046ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ae:	bf00      	nop
 80046b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046b2:	bc08      	pop	{r3}
 80046b4:	469e      	mov	lr, r3
 80046b6:	4770      	bx	lr

080046b8 <_fini>:
 80046b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046ba:	bf00      	nop
 80046bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046be:	bc08      	pop	{r3}
 80046c0:	469e      	mov	lr, r3
 80046c2:	4770      	bx	lr
